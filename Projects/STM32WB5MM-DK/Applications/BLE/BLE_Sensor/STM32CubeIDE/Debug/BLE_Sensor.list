
BLE_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e940  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002558  0801ea80  0801ea80  0001fa80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020fd8  08020fd8  00021fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020fe0  08020fe0  00021fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020fe4  08020fe4  00021fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000075c  20000008  08020fe8  00022008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  20000764  08021744  00022764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200007a4  08021781  000227a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002750  200007c0  08021792  000227c0  2**4
                  ALLOC
 10 ._user_heap_stack 00001400  20002f10  08021792  00022f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000227b5  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00023000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00023000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00023000  2**2
                  ALLOC
 15 .debug_line   00059e23  00000000  00000000  000227e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000000b1  00000000  00000000  0007c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0005bb3f  00000000  00000000  0007c6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000a1ec  00000000  00000000  000d81f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004ca0  00000000  00000000  000e23e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00120bbe  00000000  00000000  000e7088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00003afe  00000000  00000000  00207c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00036b73  00000000  00000000  0020b744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  002422b7  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00015778  00000000  00000000  002422fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200007c0 	.word	0x200007c0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801ea68 	.word	0x0801ea68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200007c4 	.word	0x200007c4
 800017c:	0801ea68 	.word	0x0801ea68

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f08:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0c:	3304      	adds	r3, #4

08000f0e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f10:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f12:	d3f9      	bcc.n	8000f08 <CopyDataInit>
  bx lr
 8000f14:	4770      	bx	lr

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f16:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f18:	3004      	adds	r0, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f1a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>
  bx lr
 8000f1e:	4770      	bx	lr

08000f20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000f22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f00f f80e 	bl	800ff44 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f28:	480b      	ldr	r0, [pc, #44]	@ (8000f58 <LoopForever+0x8>)
 8000f2a:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <LoopForever+0xc>)
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <LoopForever+0x10>)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f7ff ffed 	bl	8000f0e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f34:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <LoopForever+0x14>)
 8000f36:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <LoopForever+0x18>)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f7ff ffee 	bl	8000f1a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f3e:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <LoopForever+0x1c>)
 8000f40:	490b      	ldr	r1, [pc, #44]	@ (8000f70 <LoopForever+0x20>)
 8000f42:	2300      	movs	r3, #0
 8000f44:	f7ff ffe9 	bl	8000f1a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f48:	f01b fda6 	bl	801ca98 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000f4c:	f001 fd72 	bl	8002a34 <main>

08000f50 <LoopForever>:

LoopForever:
  b LoopForever
 8000f50:	e7fe      	b.n	8000f50 <LoopForever>
 8000f52:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000f54:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000764 	.word	0x20000764
 8000f60:	08020fe8 	.word	0x08020fe8
  INIT_BSS _sbss, _ebss
 8000f64:	200007c0 	.word	0x200007c0
 8000f68:	20002f10 	.word	0x20002f10
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f6c:	200301e4 	.word	0x200301e4
 8000f70:	20030a67 	.word	0x20030a67

08000f74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_IRQHandler>
	...

08000f78 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f82:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000f86:	4905      	ldr	r1, [pc, #20]	@ (8000f9c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	58000800 	.word	0x58000800

08000fa0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fde:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUG_TRACE == 1)
  debug_trace_enabled = 1;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <APPD_Init+0x2c>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
  
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001016:	f00f f899 	bl	801014c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800101a:	f00f f89d 	bl	8010158 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800101e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001022:	f7ff ffa9 	bl	8000f78 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001026:	f018 fa9d 	bl	8019564 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800102a:	f000 f823 	bl	8001074 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800102e:	f000 f8c3 	bl	80011b8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200007dc 	.word	0x200007dc

0800103c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <APPD_EnableCPU2+0x34>)
 8001044:	1d3c      	adds	r4, r7, #4
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	c403      	stmia	r4!, {r0, r1}
 8001052:	8022      	strh	r2, [r4, #0]
 8001054:	3402      	adds	r4, #2
 8001056:	0c13      	lsrs	r3, r2, #16
 8001058:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800105a:	f019 ffc1 	bl	801afe0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f018 fe1e 	bl	8019ca2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001066:	bf00      	nop
}
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	0801ea80 	.word	0x0801ea80

08001074 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
 8001098:	e036      	b.n	8001108 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	4a43      	ldr	r2, [pc, #268]	@ (80011ac <APPD_SetCPU2GpioConfig+0x138>)
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	799b      	ldrb	r3, [r3, #6]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02c      	beq.n	8001102 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	4a40      	ldr	r2, [pc, #256]	@ (80011ac <APPD_SetCPU2GpioConfig+0x138>)
 80010ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010b0:	4a3f      	ldr	r2, [pc, #252]	@ (80011b0 <APPD_SetCPU2GpioConfig+0x13c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01b      	beq.n	80010ee <APPD_SetCPU2GpioConfig+0x7a>
 80010b6:	4a3e      	ldr	r2, [pc, #248]	@ (80011b0 <APPD_SetCPU2GpioConfig+0x13c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d821      	bhi.n	8001100 <APPD_SetCPU2GpioConfig+0x8c>
 80010bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010c0:	d003      	beq.n	80010ca <APPD_SetCPU2GpioConfig+0x56>
 80010c2:	4a3c      	ldr	r2, [pc, #240]	@ (80011b4 <APPD_SetCPU2GpioConfig+0x140>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d009      	beq.n	80010dc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80010c8:	e01a      	b.n	8001100 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	4a37      	ldr	r2, [pc, #220]	@ (80011ac <APPD_SetCPU2GpioConfig+0x138>)
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	889a      	ldrh	r2, [r3, #4]
 80010d4:	8bbb      	ldrh	r3, [r7, #28]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	83bb      	strh	r3, [r7, #28]
          break;
 80010da:	e012      	b.n	8001102 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80010dc:	7ffb      	ldrb	r3, [r7, #31]
 80010de:	4a33      	ldr	r2, [pc, #204]	@ (80011ac <APPD_SetCPU2GpioConfig+0x138>)
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	889a      	ldrh	r2, [r3, #4]
 80010e6:	8b7b      	ldrh	r3, [r7, #26]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	837b      	strh	r3, [r7, #26]
          break;
 80010ec:	e009      	b.n	8001102 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	4a2e      	ldr	r2, [pc, #184]	@ (80011ac <APPD_SetCPU2GpioConfig+0x138>)
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	889a      	ldrh	r2, [r3, #4]
 80010f8:	8b3b      	ldrh	r3, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	833b      	strh	r3, [r7, #24]
          break;
 80010fe:	e000      	b.n	8001102 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001100:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001102:	7ffb      	ldrb	r3, [r7, #31]
 8001104:	3301      	adds	r3, #1
 8001106:	77fb      	strb	r3, [r7, #31]
 8001108:	7ffb      	ldrb	r3, [r7, #31]
 800110a:	2b25      	cmp	r3, #37	@ 0x25
 800110c:	d9c5      	bls.n	800109a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800111a:	8bbb      	ldrh	r3, [r7, #28]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d014      	beq.n	800114a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001120:	8bbb      	ldrh	r3, [r7, #28]
 8001122:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff ff3b 	bl	8000fa0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ff51 	bl	8000fd2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f00f fd30 	bl	8010b9c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800113c:	8bbb      	ldrh	r3, [r7, #28]
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001146:	f00f ff77 	bl	8011038 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800114a:	8b7b      	ldrh	r3, [r7, #26]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d012      	beq.n	8001176 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001150:	8b7b      	ldrh	r3, [r7, #26]
 8001152:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff ff23 	bl	8000fa0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff ff39 	bl	8000fd2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4813      	ldr	r0, [pc, #76]	@ (80011b4 <APPD_SetCPU2GpioConfig+0x140>)
 8001166:	f00f fd19 	bl	8010b9c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800116a:	8b7b      	ldrh	r3, [r7, #26]
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <APPD_SetCPU2GpioConfig+0x140>)
 8001172:	f00f ff61 	bl	8011038 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001176:	8b3b      	ldrh	r3, [r7, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800117c:	8b3b      	ldrh	r3, [r7, #24]
 800117e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001180:	2004      	movs	r0, #4
 8001182:	f7ff ff0d 	bl	8000fa0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001186:	2004      	movs	r0, #4
 8001188:	f7ff ff23 	bl	8000fd2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001192:	f00f fd03 	bl	8010b9c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001196:	8b3b      	ldrh	r3, [r7, #24]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <APPD_SetCPU2GpioConfig+0x13c>)
 800119e:	f00f ff4b 	bl	8011038 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
}
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0802048c 	.word	0x0802048c
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000400 	.word	0x48000400

080011b8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80011bc:	bf00      	nop
}
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80011ca:	f001 fd1f 	bl	8002c0c <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80011ce:	bf00      	nop
}
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	460b      	mov	r3, r1
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80011e0:	897a      	ldrh	r2, [r7, #10]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	2000      	movs	r0, #0
 80011e8:	f001 fb5a 	bl	80028a0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80011ec:	bf00      	nop
}
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <LL_C2_PWR_SetPowerMode+0x28>)
 80011fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001202:	f023 0207 	bic.w	r2, r3, #7
 8001206:	4905      	ldr	r1, [pc, #20]	@ (800121c <LL_C2_PWR_SetPowerMode+0x28>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4313      	orrs	r3, r2
 800120c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	58000400 	.word	0x58000400

08001220 <LL_EXTI_EnableIT_32_63>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <LL_EXTI_EnableIT_32_63+0x24>)
 800122a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800122e:	4905      	ldr	r1, [pc, #20]	@ (8001244 <LL_EXTI_EnableIT_32_63+0x24>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4313      	orrs	r3, r2
 8001234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	58000800 	.word	0x58000800

08001248 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001256:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800125a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001262:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800126e:	4313      	orrs	r3, r2
 8001270:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	cafecafe 	.word	0xcafecafe

08001284 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001296:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <LL_DBGMCU_GetDeviceID+0x18>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e0042000 	.word	0xe0042000

080012c8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <LL_DBGMCU_GetRevisionID+0x18>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e0042000 	.word	0xe0042000

080012e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <LL_LPM_EnableSleep+0x1c>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <LL_LPM_EnableSleep+0x1c>)
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	6113      	str	r3, [r2, #16]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	22ff      	movs	r2, #255	@ 0xff
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	22ca      	movs	r2, #202	@ 0xca
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2253      	movs	r2, #83	@ 0x53
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f023 0207 	bic.w	r2, r3, #7
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <MX_APPE_Config+0x18>)
 800136a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800136e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001370:	f000 f89f 	bl	80014b2 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001374:	f000 f8a4 	bl	80014c0 <Config_HSE>

  return;
 8001378:	bf00      	nop
}
 800137a:	bd80      	pop	{r7, pc}
 800137c:	58004000 	.word	0x58004000

08001380 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001384:	f000 f8b0 	bl	80014e8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001388:	f000 f8c8 	bl	800151c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800138c:	4922      	ldr	r1, [pc, #136]	@ (8001418 <MX_APPE_Init+0x98>)
 800138e:	2000      	movs	r0, #0
 8001390:	f000 fff6 	bl	8002380 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001394:	f7ff fe3a 	bl	800100c <APPD_Init>
  
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8001398:	2100      	movs	r1, #0
 800139a:	2000      	movs	r0, #0
 800139c:	f00d ffe2 	bl	800f364 <BSP_LCD_Init>
  /* Set LCD Foreground Layer  */
  UTIL_LCD_SetFuncDriver(&LCD_Driver); /* SetFunc before setting device */
 80013a0:	481e      	ldr	r0, [pc, #120]	@ (800141c <MX_APPE_Init+0x9c>)
 80013a2:	f019 fea9 	bl	801b0f8 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetDevice(0);            /* SetDevice after funcDriver is set */
 80013a6:	2000      	movs	r0, #0
 80013a8:	f019 fefc 	bl	801b1a4 <UTIL_LCD_SetDevice>
  BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 80013ac:	2100      	movs	r1, #0
 80013ae:	2000      	movs	r0, #0
 80013b0:	f00e f9fc 	bl	800f7ac <BSP_LCD_Clear>
  BSP_LCD_DisplayOn(0);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f00e f8a5 	bl	800f504 <BSP_LCD_DisplayOn>
  BSP_LCD_Refresh(0);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f00e f8ce 	bl	800f55c <BSP_LCD_Refresh>
  UTIL_LCD_SetFont(&Font12);
 80013c0:	4817      	ldr	r0, [pc, #92]	@ (8001420 <MX_APPE_Init+0xa0>)
 80013c2:	f019 ff37 	bl	801b234 <UTIL_LCD_SetFont>
  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(SSD1315_COLOR_WHITE);
 80013c6:	20ff      	movs	r0, #255	@ 0xff
 80013c8:	f019 ff0c 	bl	801b1e4 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(SSD1315_COLOR_BLACK);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f019 ff1d 	bl	801b20c <UTIL_LCD_SetBackColor>
  BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f00e f9e9 	bl	800f7ac <BSP_LCD_Clear>
  BSP_LCD_Refresh(0);
 80013da:	2000      	movs	r0, #0
 80013dc:	f00e f8be 	bl	800f55c <BSP_LCD_Refresh>

  //Switch RGB LED off
  LED_Off();
 80013e0:	f000 f85d 	bl	800149e <LED_Off>
  
  BSP_MOTION_SENSOR_Init(MOTION_SENSOR_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 80013e4:	2103      	movs	r1, #3
 80013e6:	2000      	movs	r0, #0
 80013e8:	f00e fbe2 	bl	800fbb0 <BSP_MOTION_SENSOR_Init>
  BSP_MOTION_SENSOR_Enable(MOTION_SENSOR_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 80013ec:	2103      	movs	r1, #3
 80013ee:	2000      	movs	r0, #0
 80013f0:	f00e fc66 	bl	800fcc0 <BSP_MOTION_SENSOR_Enable>
  
  BSP_ENV_SENSOR_Init(ENV_SENSOR_STTS22H_0, ENV_TEMPERATURE);
 80013f4:	2101      	movs	r1, #1
 80013f6:	2000      	movs	r0, #0
 80013f8:	f00d fde6 	bl	800efc8 <BSP_ENV_SENSOR_Init>
  BSP_ENV_SENSOR_Enable(ENV_SENSOR_STTS22H_0, ENV_TEMPERATURE);
 80013fc:	2101      	movs	r1, #1
 80013fe:	2000      	movs	r0, #0
 8001400:	f00d fe6a 	bl	800f0d8 <BSP_ENV_SENSOR_Enable>
  
  VL53L0X_PROXIMITY_Init();
 8001404:	f000 faf2 	bl	80019ec <VL53L0X_PROXIMITY_Init>
   
  //Initialize user buttons
  Button_Init();
 8001408:	f000 f9ea 	bl	80017e0 <Button_Init>

  RxUART_Init();
 800140c:	f000 fa6c 	bl	80018e8 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001410:	f000 f892 	bl	8001538 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001414:	bf00      	nop
}
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200009d8 	.word	0x200009d8
 800141c:	080206a0 	.word	0x080206a0
 8001420:	2000058c 	.word	0x2000058c

08001424 <Init_Smps>:

void Init_Smps(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001428:	bf00      	nop
}
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <Init_Exti>:

void Init_Exti(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001436:	2050      	movs	r0, #80	@ 0x50
 8001438:	f7ff fef2 	bl	8001220 <LL_EXTI_EnableIT_32_63>

  return;
 800143c:	bf00      	nop
}
 800143e:	bd80      	pop	{r7, pc}

08001440 <LED_Deinit>:

/* USER CODE BEGIN FD */

void LED_Deinit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  
  /* RGB Led de-init */
  BSP_PWM_LED_DeInit();
 8001454:	f00c fdaa 	bl	800dfac <BSP_PWM_LED_DeInit>

  /* configure SPIx MOSI for LCD */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 8001458:	2380      	movs	r3, #128	@ 0x80
 800145a:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 8001460:	2302      	movs	r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 8001468:	2305      	movs	r3, #5
 800146a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001474:	f00f fb92 	bl	8010b9c <HAL_GPIO_Init>
}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <LED_On>:


void LED_On(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  BSP_PWM_LED_Init();
 8001488:	f00c fd32 	bl	800def0 <BSP_PWM_LED_Init>
  BSP_PWM_LED_On(aPwmLedGsData);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f00c fdb9 	bl	800e004 <BSP_PWM_LED_On>
  LED_Deinit();
 8001492:	f7ff ffd5 	bl	8001440 <LED_Deinit>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <LED_Off>:

void LED_Off(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  BSP_PWM_LED_Init();
 80014a2:	f00c fd25 	bl	800def0 <BSP_PWM_LED_Init>
  BSP_PWM_LED_Off();
 80014a6:	f00c fdb9 	bl	800e01c <BSP_PWM_LED_Off>
  LED_Deinit();
 80014aa:	f7ff ffc9 	bl	8001440 <LED_Deinit>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80014b6:	bf00      	nop
}
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f018 fa86 	bl	80199d8 <OTP_Read>
 80014cc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	799b      	ldrb	r3, [r3, #6]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff feb5 	bl	8001248 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
}
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <System_Init>:

static void System_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  Init_Smps();
 80014ec:	f7ff ff9a 	bl	8001424 <Init_Smps>

  Init_Exti();
 80014f0:	f7ff ff9f 	bl	8001432 <Init_Exti>

  Init_Rtc();
 80014f4:	f000 f802 	bl	80014fc <Init_Rtc>

  return;
 80014f8:	bf00      	nop
}
 80014fa:	bd80      	pop	{r7, pc}

080014fc <Init_Rtc>:

static void Init_Rtc(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001500:	4805      	ldr	r0, [pc, #20]	@ (8001518 <Init_Rtc+0x1c>)
 8001502:	f7ff ff0c 	bl	800131e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001506:	2100      	movs	r1, #0
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <Init_Rtc+0x1c>)
 800150a:	f7ff ff18 	bl	800133e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800150e:	4802      	ldr	r0, [pc, #8]	@ (8001518 <Init_Rtc+0x1c>)
 8001510:	f7ff fef8 	bl	8001304 <LL_RTC_EnableWriteProtection>

  return;
 8001514:	bf00      	nop
}
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40002800 	.word	0x40002800

0800151c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001520:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001524:	f7ff feae 	bl	8001284 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001528:	f01a f980 	bl	801b82c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800152c:	2004      	movs	r0, #4
 800152e:	f7ff fe61 	bl	80011f4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001532:	bf00      	nop
}
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800153e:	f019 fb99 	bl	801ac74 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001542:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <appe_Tl_Init+0x50>)
 8001544:	2100      	movs	r1, #0
 8001546:	2020      	movs	r0, #32
 8001548:	f01a faae 	bl	801baa8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <appe_Tl_Init+0x54>)
 800154e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <appe_Tl_Init+0x58>)
 8001552:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001554:	463b      	mov	r3, r7
 8001556:	4619      	mov	r1, r3
 8001558:	480e      	ldr	r0, [pc, #56]	@ (8001594 <appe_Tl_Init+0x5c>)
 800155a:	f018 fc7d 	bl	8019e58 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <appe_Tl_Init+0x60>)
 8001560:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <appe_Tl_Init+0x64>)
 8001564:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <appe_Tl_Init+0x68>)
 8001568:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800156a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800156e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	4618      	mov	r0, r3
 8001576:	f019 fcbf 	bl	801aef8 <TL_MM_Init>

  TL_Enable();
 800157a:	f019 fb75 	bl	801ac68 <TL_Enable>

  return;
 800157e:	bf00      	nop
}
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	08019e91 	.word	0x08019e91
 800158c:	20030734 	.word	0x20030734
 8001590:	080015a5 	.word	0x080015a5
 8001594:	080015bd 	.word	0x080015bd
 8001598:	2003094c 	.word	0x2003094c
 800159c:	20030840 	.word	0x20030840
 80015a0:	200301f8 	.word	0x200301f8

080015a4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015ae:	bf00      	nop
}
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	330b      	adds	r3, #11
 80015ca:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80015d6:	2b07      	cmp	r3, #7
 80015d8:	d860      	bhi.n	800169c <APPE_SysUserEvtRx+0xe0>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <APPE_SysUserEvtRx+0x24>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	08001601 	.word	0x08001601
 80015e4:	08001643 	.word	0x08001643
 80015e8:	08001651 	.word	0x08001651
 80015ec:	0800169d 	.word	0x0800169d
 80015f0:	0800166d 	.word	0x0800166d
 80015f4:	0800167d 	.word	0x0800167d
 80015f8:	08001685 	.word	0x08001685
 80015fc:	08001695 	.word	0x08001695
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4618      	mov	r0, r3
 8001606:	f018 fb79 	bl	8019cfc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800160a:	7b3b      	ldrb	r3, [r7, #12]
 800160c:	4619      	mov	r1, r3
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	461a      	mov	r2, r3
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	4824      	ldr	r0, [pc, #144]	@ (80016a8 <APPE_SysUserEvtRx+0xec>)
 8001616:	f01b f87f 	bl	801c718 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800161a:	7c3b      	ldrb	r3, [r7, #16]
 800161c:	4619      	mov	r1, r3
 800161e:	4823      	ldr	r0, [pc, #140]	@ (80016ac <APPE_SysUserEvtRx+0xf0>)
 8001620:	f01b f87a 	bl	801c718 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001624:	7dbb      	ldrb	r3, [r7, #22]
 8001626:	4619      	mov	r1, r3
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	461a      	mov	r2, r3
 800162c:	7e3b      	ldrb	r3, [r7, #24]
 800162e:	4820      	ldr	r0, [pc, #128]	@ (80016b0 <APPE_SysUserEvtRx+0xf4>)
 8001630:	f01b f872 	bl	801c718 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001634:	481f      	ldr	r0, [pc, #124]	@ (80016b4 <APPE_SysUserEvtRx+0xf8>)
 8001636:	f01b f86f 	bl	801c718 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f870 	bl	8001720 <APPE_SysEvtReadyProcessing>
    break;
 8001640:	e02d      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001642:	481d      	ldr	r0, [pc, #116]	@ (80016b8 <APPE_SysUserEvtRx+0xfc>)
 8001644:	f01b f868 	bl	801c718 <iprintf>
    APPE_SysEvtError(pPayload);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f843 	bl	80016d4 <APPE_SysEvtError>
    break;
 800164e:	e026      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001650:	481a      	ldr	r0, [pc, #104]	@ (80016bc <APPE_SysUserEvtRx+0x100>)
 8001652:	f01b f8c9 	bl	801c7e8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800165a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	4816      	ldr	r0, [pc, #88]	@ (80016c0 <APPE_SysUserEvtRx+0x104>)
 8001666:	f01b f857 	bl	801c718 <iprintf>
    break;
 800166a:	e018      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	4813      	ldr	r0, [pc, #76]	@ (80016c4 <APPE_SysUserEvtRx+0x108>)
 8001676:	f01b f84f 	bl	801c718 <iprintf>
    break;
 800167a:	e010      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800167c:	4812      	ldr	r0, [pc, #72]	@ (80016c8 <APPE_SysUserEvtRx+0x10c>)
 800167e:	f01b f84b 	bl	801c718 <iprintf>
    break;
 8001682:	e00c      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	480f      	ldr	r0, [pc, #60]	@ (80016cc <APPE_SysUserEvtRx+0x110>)
 800168e:	f01b f843 	bl	801c718 <iprintf>
    break;
 8001692:	e004      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001694:	480e      	ldr	r0, [pc, #56]	@ (80016d0 <APPE_SysUserEvtRx+0x114>)
 8001696:	f01b f83f 	bl	801c718 <iprintf>
    break;
 800169a:	e000      	b.n	800169e <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 800169c:	bf00      	nop
  }

  return;
 800169e:	bf00      	nop
}
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0801ea9c 	.word	0x0801ea9c
 80016ac:	0801eac0 	.word	0x0801eac0
 80016b0:	0801eadc 	.word	0x0801eadc
 80016b4:	0801eaf4 	.word	0x0801eaf4
 80016b8:	0801eb14 	.word	0x0801eb14
 80016bc:	0801eb38 	.word	0x0801eb38
 80016c0:	0801eb88 	.word	0x0801eb88
 80016c4:	0801ebb0 	.word	0x0801ebb0
 80016c8:	0801ebec 	.word	0x0801ebec
 80016cc:	0801ec10 	.word	0x0801ec10
 80016d0:	0801ec4c 	.word	0x0801ec4c

080016d4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	330b      	adds	r3, #11
 80016e2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3302      	adds	r3, #2
 80016e8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	@ (8001714 <APPE_SysEvtError+0x40>)
 80016f2:	f01b f811 	bl	801c718 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <APPE_SysEvtError+0x44>)
 8001700:	f01b f872 	bl	801c7e8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001704:	e003      	b.n	800170e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <APPE_SysEvtError+0x48>)
 8001708:	f01b f86e 	bl	801c7e8 <puts>
  return;
 800170c:	bf00      	nop
}
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	0801ec70 	.word	0x0801ec70
 8001718:	0801eca0 	.word	0x0801eca0
 800171c:	0801ecdc 	.word	0x0801ecdc

08001720 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	330b      	adds	r3, #11
 8001744:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3302      	adds	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d128      	bne.n	80017a6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001754:	481d      	ldr	r0, [pc, #116]	@ (80017cc <APPE_SysEvtReadyProcessing+0xac>)
 8001756:	f01b f847 	bl	801c7e8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800175a:	f7ff fc6f 	bl	800103c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800175e:	230f      	movs	r3, #15
 8001760:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001762:	237f      	movs	r3, #127	@ 0x7f
 8001764:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001766:	f7ff fdaf 	bl	80012c8 <LL_DBGMCU_GetRevisionID>
 800176a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800176c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800176e:	4818      	ldr	r0, [pc, #96]	@ (80017d0 <APPE_SysEvtReadyProcessing+0xb0>)
 8001770:	f01a ffd2 	bl	801c718 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	b29b      	uxth	r3, r3
 8001778:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800177a:	f7ff fd97 	bl	80012ac <LL_DBGMCU_GetDeviceID>
 800177e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001780:	6a39      	ldr	r1, [r7, #32]
 8001782:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <APPE_SysEvtReadyProcessing+0xb4>)
 8001784:	f01a ffc8 	bl	801c718 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	b29b      	uxth	r3, r3
 800178c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f018 fa9c 	bl	8019cd0 <SHCI_C2_Config>

    APP_BLE_Init();
 8001798:	f006 fffe 	bl	8008798 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800179c:	2100      	movs	r1, #0
 800179e:	2001      	movs	r0, #1
 80017a0:	f01a f856 	bl	801b850 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80017a4:	e00e      	b.n	80017c4 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d106      	bne.n	80017bc <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80017ae:	480a      	ldr	r0, [pc, #40]	@ (80017d8 <APPE_SysEvtReadyProcessing+0xb8>)
 80017b0:	f01a ffb2 	bl	801c718 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
  return;
 80017ba:	e003      	b.n	80017c4 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <APPE_SysEvtReadyProcessing+0xbc>)
 80017be:	f01a ffab 	bl	801c718 <iprintf>
  return;
 80017c2:	bf00      	nop
}
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0801ed14 	.word	0x0801ed14
 80017d0:	0801ed30 	.word	0x0801ed30
 80017d4:	0801ed54 	.word	0x0801ed54
 80017d8:	0801ed74 	.word	0x0801ed74
 80017dc:	0801eda8 	.word	0x0801eda8

080017e0 <Button_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Button_Init( void )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_USER1, BUTTON_MODE_EXTI);    
 80017e4:	2101      	movs	r1, #1
 80017e6:	2000      	movs	r0, #0
 80017e8:	f00c fc44 	bl	800e074 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_USER2, BUTTON_MODE_EXTI);
 80017ec:	2101      	movs	r1, #1
 80017ee:	2001      	movs	r0, #1
 80017f0:	f00c fc40 	bl	800e074 <BSP_PB_Init>

#endif

  return;
 80017f4:	bf00      	nop
}
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f00e fc80 	bl	8010104 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d00a      	beq.n	8001828 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001812:	f00e fc8f 	bl	8010134 <HAL_GetTickFreq>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001820:	e002      	b.n	8001828 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001822:	f7ff fd5f 	bl	80012e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001826:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001828:	f00e fc6c 	bl	8010104 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f4      	bhi.n	8001822 <HAL_Delay+0x2a>
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	f01a f831 	bl	801b8b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}

08001852 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001856:	bf00      	nop
}
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800186a:	f04f 30ff 	mov.w	r0, #4294967295
 800186e:	f01a f81f 	bl	801b8b0 <UTIL_SEQ_Run>
  return;
 8001872:	bf00      	nop
}
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001882:	2100      	movs	r1, #0
 8001884:	2020      	movs	r0, #32
 8001886:	f01a f931 	bl	801baec <UTIL_SEQ_SetTask>
  return;
 800188a:	bf00      	nop
}
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800189a:	2002      	movs	r0, #2
 800189c:	f01a f992 	bl	801bbc4 <UTIL_SEQ_SetEvt>
  return;
 80018a0:	bf00      	nop
}
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f01a f9a7 	bl	801bc04 <UTIL_SEQ_WaitEvt>
  return;
 80018b6:	bf00      	nop
}
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_EXTI_Callback+0x1a>
 80018d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_EXTI_Callback+0x20>
    APP_BLE_Key_Button1_Action();
    break; 
  case GPIO_PIN_13:
    break; 
  default:
    break;
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0x22>
    APP_BLE_Key_Button1_Action();
 80018d8:	f007 fa3e 	bl	8008d58 <APP_BLE_Key_Button1_Action>
    break; 
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0x22>
    break; 
 80018de:	bf00      	nop
  }
  return;
 80018e0:	bf00      	nop
}
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <RxUART_Init>:

static void RxUART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <RxUART_Init+0x14>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	4903      	ldr	r1, [pc, #12]	@ (8001900 <RxUART_Init+0x18>)
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 ffb0 	bl	8002858 <HW_UART_Receive_IT>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	08001905 	.word	0x08001905
 8001900:	200007e8 	.word	0x200007e8

08001904 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <RxCpltCallback+0x5c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2bff      	cmp	r3, #255	@ 0xff
 800190e:	d81e      	bhi.n	800194e <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <RxCpltCallback+0x60>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b0d      	cmp	r3, #13
 8001916:	d10f      	bne.n	8001938 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001918:	4913      	ldr	r1, [pc, #76]	@ (8001968 <RxCpltCallback+0x64>)
 800191a:	4814      	ldr	r0, [pc, #80]	@ (800196c <RxCpltCallback+0x68>)
 800191c:	f01a fefc 	bl	801c718 <iprintf>

      UartCmdExecute();
 8001920:	f000 f828 	bl	8001974 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <RxCpltCallback+0x5c>)
 8001926:	2200      	movs	r2, #0
 8001928:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800192a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192e:	2100      	movs	r1, #0
 8001930:	480d      	ldr	r0, [pc, #52]	@ (8001968 <RxCpltCallback+0x64>)
 8001932:	f01b f859 	bl	801c9e8 <memset>
 8001936:	e00a      	b.n	800194e <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <RxCpltCallback+0x5c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	b291      	uxth	r1, r2
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <RxCpltCallback+0x5c>)
 8001942:	8011      	strh	r1, [r2, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <RxCpltCallback+0x60>)
 8001948:	7819      	ldrb	r1, [r3, #0]
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <RxCpltCallback+0x64>)
 800194c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <RxCpltCallback+0x6c>)
 8001950:	2201      	movs	r2, #1
 8001952:	4904      	ldr	r1, [pc, #16]	@ (8001964 <RxCpltCallback+0x60>)
 8001954:	2000      	movs	r0, #0
 8001956:	f000 ff7f 	bl	8002858 <HW_UART_Receive_IT>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200008f0 	.word	0x200008f0
 8001964:	200007e8 	.word	0x200007e8
 8001968:	200007f0 	.word	0x200007f0
 800196c:	0801eddc 	.word	0x0801eddc
 8001970:	08001905 	.word	0x08001905

08001974 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001978:	4913      	ldr	r1, [pc, #76]	@ (80019c8 <UartCmdExecute+0x54>)
 800197a:	4814      	ldr	r0, [pc, #80]	@ (80019cc <UartCmdExecute+0x58>)
 800197c:	f7fe fc00 	bl	8000180 <strcmp>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001986:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <UartCmdExecute+0x5c>)
 8001988:	f01a ff2e 	bl	801c7e8 <puts>
    exti_handle.Line = BUTTON_USER1_EXTI_LINE;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <UartCmdExecute+0x60>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <UartCmdExecute+0x64>)
 8001990:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001992:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <UartCmdExecute+0x60>)
 8001994:	f00f f8e0 	bl	8010b58 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001998:	e014      	b.n	80019c4 <UartCmdExecute+0x50>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 800199a:	4910      	ldr	r1, [pc, #64]	@ (80019dc <UartCmdExecute+0x68>)
 800199c:	480b      	ldr	r0, [pc, #44]	@ (80019cc <UartCmdExecute+0x58>)
 800199e:	f7fe fbef 	bl	8000180 <strcmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <UartCmdExecute+0x48>
    APP_DBG_MSG("SW2 OK\n");
 80019a8:	480d      	ldr	r0, [pc, #52]	@ (80019e0 <UartCmdExecute+0x6c>)
 80019aa:	f01a ff1d 	bl	801c7e8 <puts>
    exti_handle.Line = BUTTON_USER2_EXTI_LINE;
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <UartCmdExecute+0x60>)
 80019b0:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <UartCmdExecute+0x70>)
 80019b2:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019b4:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <UartCmdExecute+0x60>)
 80019b6:	f00f f8cf 	bl	8010b58 <HAL_EXTI_GenerateSWI>
}
 80019ba:	e003      	b.n	80019c4 <UartCmdExecute+0x50>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 80019bc:	4903      	ldr	r1, [pc, #12]	@ (80019cc <UartCmdExecute+0x58>)
 80019be:	480a      	ldr	r0, [pc, #40]	@ (80019e8 <UartCmdExecute+0x74>)
 80019c0:	f01a feaa 	bl	801c718 <iprintf>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	0801edec 	.word	0x0801edec
 80019cc:	200007f0 	.word	0x200007f0
 80019d0:	0801edf0 	.word	0x0801edf0
 80019d4:	200007e0 	.word	0x200007e0
 80019d8:	1600000c 	.word	0x1600000c
 80019dc:	0801edf8 	.word	0x0801edf8
 80019e0:	0801edfc 	.word	0x0801edfc
 80019e4:	1600000d 	.word	0x1600000d
 80019e8:	0801ee04 	.word	0x0801ee04

080019ec <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
void VL53L0X_PROXIMITY_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b09a      	sub	sp, #104	@ 0x68
 80019f0:	af00      	add	r7, sp, #0
  uint16_t vl53l0x_id = 0; 
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;
  
  /* Initialize IO interface */
  STM32WB5MM_DK_I2C_Init();
 80019f8:	f00c fd98 	bl	800e52c <BSP_I2C3_Init>
  
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80019fc:	463b      	mov	r3, r7
 80019fe:	2263      	movs	r2, #99	@ 0x63
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f01a fff0 	bl	801c9e8 <memset>
  
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&UserDev, &VL53L0X_DeviceInfo))
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481a      	ldr	r0, [pc, #104]	@ (8001a78 <VL53L0X_PROXIMITY_Init+0x8c>)
 8001a0e:	f001 fdb3 	bl	8003578 <VL53L0X_GetDeviceInfo>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d11f      	bne.n	8001a58 <VL53L0X_PROXIMITY_Init+0x6c>
  {  
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&UserDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8001a18:	f107 0366 	add.w	r3, r7, #102	@ 0x66
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	21c0      	movs	r1, #192	@ 0xc0
 8001a20:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <VL53L0X_PROXIMITY_Init+0x8c>)
 8001a22:	f006 fcc1 	bl	80083a8 <VL53L0X_RdWord>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d114      	bne.n	8001a56 <VL53L0X_PROXIMITY_Init+0x6a>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8001a2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001a30:	f64e 62aa 	movw	r2, #61098	@ 0xeeaa
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d110      	bne.n	8001a5a <VL53L0X_PROXIMITY_Init+0x6e>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&UserDev))
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <VL53L0X_PROXIMITY_Init+0x8c>)
 8001a3a:	f001 fdc3 	bl	80035c4 <VL53L0X_DataInit>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <VL53L0X_PROXIMITY_Init+0x68>
        {
          UserDev.Present = 1;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <VL53L0X_PROXIMITY_Init+0x8c>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
          SetupSingleShot(&UserDev);
 8001a4c:	480a      	ldr	r0, [pc, #40]	@ (8001a78 <VL53L0X_PROXIMITY_Init+0x8c>)
 8001a4e:	f006 fdaf 	bl	80085b0 <SetupSingleShot>
 8001a52:	e002      	b.n	8001a5a <VL53L0X_PROXIMITY_Init+0x6e>
        }
        else
        { 
          while(1){}  // VL53L0X Time of Flight Failed to send its ID!
 8001a54:	e7fe      	b.n	8001a54 <VL53L0X_PROXIMITY_Init+0x68>
        }
      }
    }
    else
    {
      while(1){} // VL53L0X Time of Flight Failed to Initialize!
 8001a56:	e7fe      	b.n	8001a56 <VL53L0X_PROXIMITY_Init+0x6a>
    }
  }
  else
  {
    while(1){} // VL53L0X Time of Flight Failed to get infos!
 8001a58:	e7fe      	b.n	8001a58 <VL53L0X_PROXIMITY_Init+0x6c>
  } 
  UTIL_SEQ_RegTask( 1<<CFG_TASK_GET_MEASURE_TOF_ID, UTIL_SEQ_RFU, VL53L0X_PROXIMITY_PrintValue);
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <VL53L0X_PROXIMITY_Init+0x90>)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2040      	movs	r0, #64	@ 0x40
 8001a60:	f01a f822 	bl	801baa8 <UTIL_SEQ_RegTask>
  /* Create timer to get the measure of TOF */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <VL53L0X_PROXIMITY_Init+0x94>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	4906      	ldr	r1, [pc, #24]	@ (8001a84 <VL53L0X_PROXIMITY_Init+0x98>)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 fd62 	bl	8002534 <HW_TS_Create>
        &VL53L0X_PROXIMITY_Update_Timer_Id,
        hw_ts_Repeated,
        VL53L0X_PROXIMITY_Update_Timer_Callback);
}
 8001a70:	bf00      	nop
 8001a72:	3768      	adds	r7, #104	@ 0x68
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	08001aed 	.word	0x08001aed
 8001a80:	08001abd 	.word	0x08001abd
 8001a84:	200008f2 	.word	0x200008f2

08001a88 <VL53L0X_Start_Measure>:

               
void VL53L0X_Start_Measure(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Start the timer used to update the proximity value */
  HW_TS_Start(VL53L0X_PROXIMITY_Update_Timer_Id, PROXIMITY_UPDATE_PERIOD);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <VL53L0X_Start_Measure+0x18>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fe4b 	bl	8002730 <HW_TS_Start>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200008f2 	.word	0x200008f2

08001aa4 <VL53L0X_Stop_Measure>:
  
void VL53L0X_Stop_Measure(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Stop the timer used to update the proximity value */
  HW_TS_Stop(VL53L0X_PROXIMITY_Update_Timer_Id);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <VL53L0X_Stop_Measure+0x14>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fdbb 	bl	8002628 <HW_TS_Stop>
}  
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200008f2 	.word	0x200008f2

08001abc <VL53L0X_PROXIMITY_Update_Timer_Callback>:
 *         to update the proximity value
 * @param  None
 * @retval None
 */
static void VL53L0X_PROXIMITY_Update_Timer_Callback(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1<<CFG_TASK_GET_MEASURE_TOF_ID, CFG_SCH_PRIO_0);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2040      	movs	r0, #64	@ 0x40
 8001ac4:	f01a f812 	bl	801baec <UTIL_SEQ_SetTask>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <VL53L0X_PROXIMITY_GetDistance>:
  * @brief  Get distance from VL53L0X proximity sensor.
  * @param  None
  * @retval Distance in mm
  */
uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;
  
  VL53L0X_PerformSingleRangingMeasurement(&UserDev, &RangingMeasurementData);
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 8001ad8:	f002 ffb2 	bl	8004a40 <VL53L0X_PerformSingleRangingMeasurement>
  
  return RangingMeasurementData.RangeMilliMeter;  
 8001adc:	89bb      	ldrh	r3, [r7, #12]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008

08001aec <VL53L0X_PROXIMITY_PrintValue>:
/**
  * @brief  Print distance measure from VL53L0X proximity sensor on the OLED screen.
  * @param  None
  * @retval None
  */
void VL53L0X_PROXIMITY_PrintValue(void){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
      UTIL_LCD_ClearStringLine(2);
 8001af2:	2002      	movs	r0, #2
 8001af4:	f019 fbde 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      char distanceText[18];
      uint16_t prox_value = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	82fb      	strh	r3, [r7, #22]
      uint16_t distance = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	82bb      	strh	r3, [r7, #20]
      prox_value = VL53L0X_PROXIMITY_GetDistance();
 8001b00:	f7ff ffe4 	bl	8001acc <VL53L0X_PROXIMITY_GetDistance>
 8001b04:	4603      	mov	r3, r0
 8001b06:	82fb      	strh	r3, [r7, #22]
      if(prox_value < DISTANCE_MAX_PROXIMITY){
 8001b08:	8afb      	ldrh	r3, [r7, #22]
 8001b0a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b0e:	d211      	bcs.n	8001b34 <VL53L0X_PROXIMITY_PrintValue+0x48>
        distance = prox_value / 10;
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <VL53L0X_PROXIMITY_PrintValue+0x60>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	82bb      	strh	r3, [r7, #20]
        sprintf(distanceText,"Distance : %3d cm",distance);
 8001b1c:	8aba      	ldrh	r2, [r7, #20]
 8001b1e:	463b      	mov	r3, r7
 8001b20:	490b      	ldr	r1, [pc, #44]	@ (8001b50 <VL53L0X_PROXIMITY_PrintValue+0x64>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f01a fe68 	bl	801c7f8 <siprintf>
        UTIL_LCD_DisplayStringAtLine(2,(uint8_t*)distanceText);
 8001b28:	463b      	mov	r3, r7
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f019 fcd3 	bl	801b4d8 <UTIL_LCD_DisplayStringAtLine>
 8001b32:	e003      	b.n	8001b3c <VL53L0X_PROXIMITY_PrintValue+0x50>
      }else{
        UTIL_LCD_DisplayStringAtLine(2,(uint8_t*)"Distance > 200 cm");
 8001b34:	4907      	ldr	r1, [pc, #28]	@ (8001b54 <VL53L0X_PROXIMITY_PrintValue+0x68>)
 8001b36:	2002      	movs	r0, #2
 8001b38:	f019 fcce 	bl	801b4d8 <UTIL_LCD_DisplayStringAtLine>
      }
      BSP_LCD_Refresh(0);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f00d fd0d 	bl	800f55c <BSP_LCD_Refresh>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	cccccccd 	.word	0xcccccccd
 8001b50:	0801ee24 	.word	0x0801ee24
 8001b54:	0801ee38 	.word	0x0801ee38

08001b58 <LL_EXTI_EnableIT_0_31>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <LL_EXTI_EnableIT_0_31+0x24>)
 8001b62:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001b66:	4905      	ldr	r1, [pc, #20]	@ (8001b7c <LL_EXTI_EnableIT_0_31+0x24>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	58000800 	.word	0x58000800

08001b80 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4904      	ldr	r1, [pc, #16]	@ (8001ba0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	58000800 	.word	0x58000800

08001ba4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <ReadRtcSsrValue+0x3c>)
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <ReadRtcSsrValue+0x3c>)
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001bba:	e005      	b.n	8001bc8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <ReadRtcSsrValue+0x3c>)
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1f5      	bne.n	8001bbc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001bd0:	683b      	ldr	r3, [r7, #0]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40002800 	.word	0x40002800

08001be4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	460a      	mov	r2, r1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001bf4:	79ba      	ldrb	r2, [r7, #6]
 8001bf6:	491d      	ldr	r1, [pc, #116]	@ (8001c6c <LinkTimerAfter+0x88>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3315      	adds	r3, #21
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d009      	beq.n	8001c22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	4916      	ldr	r1, [pc, #88]	@ (8001c6c <LinkTimerAfter+0x88>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001c22:	79fa      	ldrb	r2, [r7, #7]
 8001c24:	4911      	ldr	r1, [pc, #68]	@ (8001c6c <LinkTimerAfter+0x88>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3315      	adds	r3, #21
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <LinkTimerAfter+0x88>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	3314      	adds	r3, #20
 8001c46:	79ba      	ldrb	r2, [r7, #6]
 8001c48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c4a:	79ba      	ldrb	r2, [r7, #6]
 8001c4c:	4907      	ldr	r1, [pc, #28]	@ (8001c6c <LinkTimerAfter+0x88>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	3315      	adds	r3, #21
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	701a      	strb	r2, [r3, #0]

  return;
 8001c5e:	bf00      	nop
}
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200008f4 	.word	0x200008f4

08001c70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001c80:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <LinkTimerBefore+0xb8>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	79ba      	ldrb	r2, [r7, #6]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d032      	beq.n	8001cf2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001c8c:	79ba      	ldrb	r2, [r7, #6]
 8001c8e:	4927      	ldr	r1, [pc, #156]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	4922      	ldr	r1, [pc, #136]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3315      	adds	r3, #21
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	491d      	ldr	r1, [pc, #116]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3315      	adds	r3, #21
 8001cc4:	79ba      	ldrb	r2, [r7, #6]
 8001cc6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	4918      	ldr	r1, [pc, #96]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3314      	adds	r3, #20
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001cdc:	79ba      	ldrb	r2, [r7, #6]
 8001cde:	4913      	ldr	r1, [pc, #76]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3314      	adds	r3, #20
 8001cec:	79fa      	ldrb	r2, [r7, #7]
 8001cee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001cf0:	e014      	b.n	8001d1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3315      	adds	r3, #21
 8001d02:	79ba      	ldrb	r2, [r7, #6]
 8001d04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d06:	79ba      	ldrb	r2, [r7, #6]
 8001d08:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <LinkTimerBefore+0xbc>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3314      	adds	r3, #20
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	701a      	strb	r2, [r3, #0]
  return;
 8001d1a:	bf00      	nop
}
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000984 	.word	0x20000984
 8001d2c:	200008f4 	.word	0x200008f4

08001d30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e74 <linkTimer+0x144>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d118      	bne.n	8001d76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d44:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <linkTimer+0x144>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <linkTimer+0x148>)
 8001d4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001d4e:	4a49      	ldr	r2, [pc, #292]	@ (8001e74 <linkTimer+0x144>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	4949      	ldr	r1, [pc, #292]	@ (8001e7c <linkTimer+0x14c>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3315      	adds	r3, #21
 8001d64:	2206      	movs	r2, #6
 8001d66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d68:	4b45      	ldr	r3, [pc, #276]	@ (8001e80 <linkTimer+0x150>)
 8001d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	81fb      	strh	r3, [r7, #14]
 8001d74:	e078      	b.n	8001e68 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001d76:	f000 f909 	bl	8001f8c <ReturnTimeElapsed>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	493e      	ldr	r1, [pc, #248]	@ (8001e7c <linkTimer+0x14c>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	89fb      	ldrh	r3, [r7, #14]
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	4419      	add	r1, r3
 8001d96:	4839      	ldr	r0, [pc, #228]	@ (8001e7c <linkTimer+0x14c>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4403      	add	r3, r0
 8001da2:	3308      	adds	r3, #8
 8001da4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	4934      	ldr	r1, [pc, #208]	@ (8001e7c <linkTimer+0x14c>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <linkTimer+0x144>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001e7c <linkTimer+0x14c>)
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	440b      	add	r3, r1
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3308      	adds	r3, #8
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d337      	bcc.n	8001e48 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001dd8:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <linkTimer+0x144>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001dde:	7b7a      	ldrb	r2, [r7, #13]
 8001de0:	4926      	ldr	r1, [pc, #152]	@ (8001e7c <linkTimer+0x14c>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	3315      	adds	r3, #21
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001df2:	e013      	b.n	8001e1c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001df4:	7b7a      	ldrb	r2, [r7, #13]
 8001df6:	4921      	ldr	r1, [pc, #132]	@ (8001e7c <linkTimer+0x14c>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	3315      	adds	r3, #21
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001e08:	7b7a      	ldrb	r2, [r7, #13]
 8001e0a:	491c      	ldr	r1, [pc, #112]	@ (8001e7c <linkTimer+0x14c>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3315      	adds	r3, #21
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e1c:	7b3b      	ldrb	r3, [r7, #12]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d00b      	beq.n	8001e3a <linkTimer+0x10a>
 8001e22:	7b3a      	ldrb	r2, [r7, #12]
 8001e24:	4915      	ldr	r1, [pc, #84]	@ (8001e7c <linkTimer+0x14c>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	3308      	adds	r3, #8
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d2dc      	bcs.n	8001df4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e3a:	7b7a      	ldrb	r2, [r7, #13]
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fecf 	bl	8001be4 <LinkTimerAfter>
 8001e46:	e00f      	b.n	8001e68 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <linkTimer+0x144>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff0c 	bl	8001c70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <linkTimer+0x144>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <linkTimer+0x148>)
 8001e60:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001e62:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <linkTimer+0x144>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001e68:	89fb      	ldrh	r3, [r7, #14]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000984 	.word	0x20000984
 8001e78:	20000985 	.word	0x20000985
 8001e7c:	200008f4 	.word	0x200008f4
 8001e80:	20000988 	.word	0x20000988

08001e84 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	4613      	mov	r3, r2
 8001e92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001e94:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <UnlinkTimer+0xf8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	79fa      	ldrb	r2, [r7, #7]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d111      	bne.n	8001ec4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ea0:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <UnlinkTimer+0xf8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <UnlinkTimer+0xfc>)
 8001ea8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	4935      	ldr	r1, [pc, #212]	@ (8001f84 <UnlinkTimer+0x100>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3315      	adds	r3, #21
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <UnlinkTimer+0xf8>)
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e03e      	b.n	8001f42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001ec4:	79fa      	ldrb	r2, [r7, #7]
 8001ec6:	492f      	ldr	r1, [pc, #188]	@ (8001f84 <UnlinkTimer+0x100>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3314      	adds	r3, #20
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	492a      	ldr	r1, [pc, #168]	@ (8001f84 <UnlinkTimer+0x100>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3315      	adds	r3, #21
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001eec:	79f9      	ldrb	r1, [r7, #7]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	4824      	ldr	r0, [pc, #144]	@ (8001f84 <UnlinkTimer+0x100>)
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4403      	add	r3, r0
 8001efc:	3315      	adds	r3, #21
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2d8      	uxtb	r0, r3
 8001f02:	4920      	ldr	r1, [pc, #128]	@ (8001f84 <UnlinkTimer+0x100>)
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3315      	adds	r3, #21
 8001f10:	4602      	mov	r2, r0
 8001f12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d013      	beq.n	8001f42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001f1a:	79f9      	ldrb	r1, [r7, #7]
 8001f1c:	7bba      	ldrb	r2, [r7, #14]
 8001f1e:	4819      	ldr	r0, [pc, #100]	@ (8001f84 <UnlinkTimer+0x100>)
 8001f20:	460b      	mov	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	440b      	add	r3, r1
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4403      	add	r3, r0
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2d8      	uxtb	r0, r3
 8001f30:	4914      	ldr	r1, [pc, #80]	@ (8001f84 <UnlinkTimer+0x100>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3314      	adds	r3, #20
 8001f3e:	4602      	mov	r2, r0
 8001f40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f42:	79fa      	ldrb	r2, [r7, #7]
 8001f44:	490f      	ldr	r1, [pc, #60]	@ (8001f84 <UnlinkTimer+0x100>)
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	330c      	adds	r3, #12
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <UnlinkTimer+0xf8>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b06      	cmp	r3, #6
 8001f5e:	d107      	bne.n	8001f70 <UnlinkTimer+0xec>
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <UnlinkTimer+0x104>)
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
}
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	20000984 	.word	0x20000984
 8001f80:	20000985 	.word	0x20000985
 8001f84:	200008f4 	.word	0x200008f4
 8001f88:	20000988 	.word	0x20000988

08001f8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <ReturnTimeElapsed+0x70>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d026      	beq.n	8001fea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001f9c:	f7ff fe02 	bl	8001ba4 <ReadRtcSsrValue>
 8001fa0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <ReturnTimeElapsed+0x70>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d805      	bhi.n	8001fb8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <ReturnTimeElapsed+0x70>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	e00a      	b.n	8001fce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <ReturnTimeElapsed+0x74>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <ReturnTimeElapsed+0x70>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <ReturnTimeElapsed+0x78>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <ReturnTimeElapsed+0x7c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	40d3      	lsrs	r3, r2
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	e001      	b.n	8001fee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	b29b      	uxth	r3, r3
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000988 	.word	0x20000988
 8002000:	20000990 	.word	0x20000990
 8002004:	2000098e 	.word	0x2000098e
 8002008:	2000098d 	.word	0x2000098d

0800200c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d108      	bne.n	800202e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800201c:	f7ff fdc2 	bl	8001ba4 <ReadRtcSsrValue>
 8002020:	4603      	mov	r3, r0
 8002022:	4a21      	ldr	r2, [pc, #132]	@ (80020a8 <RestartWakeupCounter+0x9c>)
 8002024:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002026:	2003      	movs	r0, #3
 8002028:	f00e fa19 	bl	801045e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800202c:	e039      	b.n	80020a2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d803      	bhi.n	800203c <RestartWakeupCounter+0x30>
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <RestartWakeupCounter+0xa0>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d002      	beq.n	8002042 <RestartWakeupCounter+0x36>
      Value -= 1;
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	3b01      	subs	r3, #1
 8002040:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002042:	bf00      	nop
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <RestartWakeupCounter+0xa4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f8      	beq.n	8002044 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002052:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <RestartWakeupCounter+0xa4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <RestartWakeupCounter+0xa4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002062:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <RestartWakeupCounter+0xa8>)
 8002066:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800206a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800206c:	2003      	movs	r0, #3
 800206e:	f00e fa04 	bl	801047a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <RestartWakeupCounter+0xac>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <RestartWakeupCounter+0xac>)
 800207e:	4313      	orrs	r3, r2
 8002080:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002082:	f7ff fd8f 	bl	8001ba4 <ReadRtcSsrValue>
 8002086:	4603      	mov	r3, r0
 8002088:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <RestartWakeupCounter+0x9c>)
 800208a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <RestartWakeupCounter+0xa4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <RestartWakeupCounter+0xa4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800209a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800209c:	f3af 8000 	nop.w
  return ;
 80020a0:	bf00      	nop
}
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000988 	.word	0x20000988
 80020ac:	2000098d 	.word	0x2000098d
 80020b0:	200009d8 	.word	0x200009d8
 80020b4:	58000800 	.word	0x58000800
 80020b8:	40002800 	.word	0x40002800

080020bc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020c2:	4b45      	ldr	r3, [pc, #276]	@ (80021d8 <RescheduleTimerList+0x11c>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ce:	d107      	bne.n	80020e0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020d0:	bf00      	nop
 80020d2:	4b42      	ldr	r3, [pc, #264]	@ (80021dc <RescheduleTimerList+0x120>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f8      	bne.n	80020d2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020e0:	4b3e      	ldr	r3, [pc, #248]	@ (80021dc <RescheduleTimerList+0x120>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <RescheduleTimerList+0x120>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80020f0:	4b3b      	ldr	r3, [pc, #236]	@ (80021e0 <RescheduleTimerList+0x124>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	493a      	ldr	r1, [pc, #232]	@ (80021e4 <RescheduleTimerList+0x128>)
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3308      	adds	r3, #8
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800210a:	f7ff ff3f 	bl	8001f8c <ReturnTimeElapsed>
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d205      	bcs.n	8002126 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800211e:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <RescheduleTimerList+0x12c>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e04d      	b.n	80021c2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4a30      	ldr	r2, [pc, #192]	@ (80021ec <RescheduleTimerList+0x130>)
 800212a:	8812      	ldrh	r2, [r2, #0]
 800212c:	b292      	uxth	r2, r2
 800212e:	4413      	add	r3, r2
 8002130:	461a      	mov	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4293      	cmp	r3, r2
 8002136:	d906      	bls.n	8002146 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <RescheduleTimerList+0x130>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800213e:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <RescheduleTimerList+0x12c>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e03d      	b.n	80021c2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	b29a      	uxth	r2, r3
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <RescheduleTimerList+0x12c>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002156:	e034      	b.n	80021c2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	4922      	ldr	r1, [pc, #136]	@ (80021e4 <RescheduleTimerList+0x128>)
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3308      	adds	r3, #8
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20a      	bcs.n	8002186 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	491c      	ldr	r1, [pc, #112]	@ (80021e4 <RescheduleTimerList+0x128>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	3308      	adds	r3, #8
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e013      	b.n	80021ae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	4916      	ldr	r1, [pc, #88]	@ (80021e4 <RescheduleTimerList+0x128>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3308      	adds	r3, #8
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	1ac9      	subs	r1, r1, r3
 800219e:	4811      	ldr	r0, [pc, #68]	@ (80021e4 <RescheduleTimerList+0x128>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4403      	add	r3, r0
 80021aa:	3308      	adds	r3, #8
 80021ac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <RescheduleTimerList+0x128>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3315      	adds	r3, #21
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b06      	cmp	r3, #6
 80021c6:	d1c7      	bne.n	8002158 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff1e 	bl	800200c <RestartWakeupCounter>

  return ;
 80021d0:	bf00      	nop
}
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40002800 	.word	0x40002800
 80021dc:	200009d8 	.word	0x200009d8
 80021e0:	20000984 	.word	0x20000984
 80021e4:	200008f4 	.word	0x200008f4
 80021e8:	2000098c 	.word	0x2000098c
 80021ec:	20000992 	.word	0x20000992

080021f0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f6:	f3ef 8310 	mrs	r3, PRIMASK
 80021fa:	617b      	str	r3, [r7, #20]
  return(result);
 80021fc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002204:	4b59      	ldr	r3, [pc, #356]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	22ca      	movs	r2, #202	@ 0xca
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24
 800220c:	4b57      	ldr	r3, [pc, #348]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2253      	movs	r2, #83	@ 0x53
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002214:	4b55      	ldr	r3, [pc, #340]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	4b54      	ldr	r3, [pc, #336]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002222:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002224:	4b52      	ldr	r3, [pc, #328]	@ (8002370 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800222c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002230:	4950      	ldr	r1, [pc, #320]	@ (8002374 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	330c      	adds	r3, #12
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d16e      	bne.n	8002324 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002246:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800224a:	494a      	ldr	r1, [pc, #296]	@ (8002374 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800225a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800225e:	4945      	ldr	r1, [pc, #276]	@ (8002374 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3310      	adds	r3, #16
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d04c      	beq.n	8002314 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800227a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800227e:	493d      	ldr	r1, [pc, #244]	@ (8002374 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	330d      	adds	r3, #13
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d124      	bne.n	80022de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fdf2 	bl	8001e84 <UnlinkTimer>
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80022ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80022b0:	4930      	ldr	r1, [pc, #192]	@ (8002374 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3304      	adds	r3, #4
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fa32 	bl	8002730 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	22ca      	movs	r2, #202	@ 0xca
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80022d4:	4b25      	ldr	r3, [pc, #148]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2253      	movs	r2, #83	@ 0x53
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24
 80022dc:	e012      	b.n	8002304 <HW_TS_RTC_Wakeup_Handler+0x114>
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f383 8810 	msr	PRIMASK, r3
}
 80022e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80022ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f99a 	bl	8002628 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022f4:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	22ca      	movs	r2, #202	@ 0xca
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2253      	movs	r2, #83	@ 0x53
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002304:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	4619      	mov	r1, r3
 800230c:	69b8      	ldr	r0, [r7, #24]
 800230e:	f000 fa95 	bl	800283c <HW_TS_RTC_Int_AppNot>
 8002312:	e022      	b.n	800235a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002314:	f7ff fed2 	bl	80020bc <RescheduleTimerList>
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	e01a      	b.n	800235a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002324:	bf00      	nop
 8002326:	4b11      	ldr	r3, [pc, #68]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f8      	beq.n	8002326 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002344:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002348:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f383 8810 	msr	PRIMASK, r3
}
 8002358:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	22ff      	movs	r2, #255	@ 0xff
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002362:	bf00      	nop
}
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200009d8 	.word	0x200009d8
 8002370:	20000984 	.word	0x20000984
 8002374:	200008f4 	.word	0x200008f4
 8002378:	2000098c 	.word	0x2000098c
 800237c:	58000800 	.word	0x58000800

08002380 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800238c:	4b5e      	ldr	r3, [pc, #376]	@ (8002508 <HW_TS_Init+0x188>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	22ca      	movs	r2, #202	@ 0xca
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24
 8002394:	4b5c      	ldr	r3, [pc, #368]	@ (8002508 <HW_TS_Init+0x188>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2253      	movs	r2, #83	@ 0x53
 800239a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800239c:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <HW_TS_Init+0x18c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a5a      	ldr	r2, [pc, #360]	@ (800250c <HW_TS_Init+0x18c>)
 80023a2:	f043 0320 	orr.w	r3, r3, #32
 80023a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80023a8:	4b58      	ldr	r3, [pc, #352]	@ (800250c <HW_TS_Init+0x18c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f1c3 0304 	rsb	r3, r3, #4
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b55      	ldr	r3, [pc, #340]	@ (8002510 <HW_TS_Init+0x190>)
 80023bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80023be:	4b53      	ldr	r3, [pc, #332]	@ (800250c <HW_TS_Init+0x18c>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023c6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80023ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d101      	bne.n	80023e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80023de:	2220      	movs	r2, #32
 80023e0:	e003      	b.n	80023ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	40d3      	lsrs	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b48      	ldr	r3, [pc, #288]	@ (8002514 <HW_TS_Init+0x194>)
 80023f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80023f6:	4b45      	ldr	r3, [pc, #276]	@ (800250c <HW_TS_Init+0x18c>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002400:	b29b      	uxth	r3, r3
 8002402:	3301      	adds	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <HW_TS_Init+0x198>)
 8002408:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800240a:	4b43      	ldr	r3, [pc, #268]	@ (8002518 <HW_TS_Init+0x198>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	3b01      	subs	r3, #1
 8002410:	4a40      	ldr	r2, [pc, #256]	@ (8002514 <HW_TS_Init+0x194>)
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800241c:	4a3c      	ldr	r2, [pc, #240]	@ (8002510 <HW_TS_Init+0x190>)
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	40d3      	lsrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800242a:	4293      	cmp	r3, r2
 800242c:	d904      	bls.n	8002438 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800242e:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HW_TS_Init+0x19c>)
 8002430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	e003      	b.n	8002440 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b37      	ldr	r3, [pc, #220]	@ (800251c <HW_TS_Init+0x19c>)
 800243e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002440:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002444:	f7ff fb9c 	bl	8001b80 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002448:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800244c:	f7ff fb84 	bl	8001b58 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d13d      	bne.n	80024d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002456:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <HW_TS_Init+0x1a0>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HW_TS_Init+0x1a4>)
 800245e:	f04f 32ff 	mov.w	r2, #4294967295
 8002462:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002464:	2300      	movs	r3, #0
 8002466:	77fb      	strb	r3, [r7, #31]
 8002468:	e00c      	b.n	8002484 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800246a:	7ffa      	ldrb	r2, [r7, #31]
 800246c:	492e      	ldr	r1, [pc, #184]	@ (8002528 <HW_TS_Init+0x1a8>)
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	330c      	adds	r3, #12
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	3301      	adds	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
 8002484:	7ffb      	ldrb	r3, [r7, #31]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d9ef      	bls.n	800246a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800248a:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HW_TS_Init+0x1ac>)
 800248c:	2206      	movs	r2, #6
 800248e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HW_TS_Init+0x188>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <HW_TS_Init+0x188>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HW_TS_Init+0x188>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HW_TS_Init+0x188>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80024b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <HW_TS_Init+0x1b0>)
 80024b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80024ba:	2003      	movs	r0, #3
 80024bc:	f00d ffdd 	bl	801047a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HW_TS_Init+0x188>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <HW_TS_Init+0x188>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e009      	b.n	80024e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <HW_TS_Init+0x188>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f00d ffbc 	bl	801045e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <HW_TS_Init+0x188>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	22ff      	movs	r2, #255	@ 0xff
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80024ee:	2200      	movs	r2, #0
 80024f0:	2103      	movs	r1, #3
 80024f2:	2003      	movs	r0, #3
 80024f4:	f00d ff71 	bl	80103da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024f8:	2003      	movs	r0, #3
 80024fa:	f00d ff88 	bl	801040e <HAL_NVIC_EnableIRQ>

  return;
 80024fe:	bf00      	nop
}
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200009d8 	.word	0x200009d8
 800250c:	40002800 	.word	0x40002800
 8002510:	2000098d 	.word	0x2000098d
 8002514:	2000098e 	.word	0x2000098e
 8002518:	20000990 	.word	0x20000990
 800251c:	20000992 	.word	0x20000992
 8002520:	2000098c 	.word	0x2000098c
 8002524:	20000988 	.word	0x20000988
 8002528:	200008f4 	.word	0x200008f4
 800252c:	20000984 	.word	0x20000984
 8002530:	58000800 	.word	0x58000800

08002534 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002534:	b480      	push	{r7}
 8002536:	b08b      	sub	sp, #44	@ 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254a:	f3ef 8310 	mrs	r3, PRIMASK
 800254e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002550:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002552:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002558:	e004      	b.n	8002564 <HW_TS_Create+0x30>
  {
    loop++;
 800255a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800255e:	3301      	adds	r3, #1
 8002560:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002568:	2b05      	cmp	r3, #5
 800256a:	d80c      	bhi.n	8002586 <HW_TS_Create+0x52>
 800256c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002570:	492c      	ldr	r1, [pc, #176]	@ (8002624 <HW_TS_Create+0xf0>)
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	330c      	adds	r3, #12
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e9      	bne.n	800255a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002586:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800258a:	2b06      	cmp	r3, #6
 800258c:	d038      	beq.n	8002600 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800258e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002592:	4924      	ldr	r1, [pc, #144]	@ (8002624 <HW_TS_Create+0xf0>)
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	330c      	adds	r3, #12
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f383 8810 	msr	PRIMASK, r3
}
 80025ae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80025b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025b4:	491b      	ldr	r1, [pc, #108]	@ (8002624 <HW_TS_Create+0xf0>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	3310      	adds	r3, #16
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80025c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025ca:	4916      	ldr	r1, [pc, #88]	@ (8002624 <HW_TS_Create+0xf0>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	330d      	adds	r3, #13
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80025dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025e0:	4910      	ldr	r1, [pc, #64]	@ (8002624 <HW_TS_Create+0xf0>)
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80025f6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025fe:	e008      	b.n	8002612 <HW_TS_Create+0xde>
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f383 8810 	msr	PRIMASK, r3
}
 800260a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8002612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002616:	4618      	mov	r0, r3
 8002618:	372c      	adds	r7, #44	@ 0x2c
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200008f4 	.word	0x200008f4

08002628 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002632:	f3ef 8310 	mrs	r3, PRIMASK
 8002636:	60fb      	str	r3, [r7, #12]
  return(result);
 8002638:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800263a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002640:	2003      	movs	r0, #3
 8002642:	f00d fef2 	bl	801042a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002646:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HW_TS_Stop+0xf0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	22ca      	movs	r2, #202	@ 0xca
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24
 800264e:	4b32      	ldr	r3, [pc, #200]	@ (8002718 <HW_TS_Stop+0xf0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2253      	movs	r2, #83	@ 0x53
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	4930      	ldr	r1, [pc, #192]	@ (800271c <HW_TS_Stop+0xf4>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	330c      	adds	r3, #12
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d142      	bne.n	80026f4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fc06 	bl	8001e84 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002678:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HW_TS_Stop+0xf8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d12f      	bne.n	80026e4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002684:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <HW_TS_Stop+0xfc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002690:	d107      	bne.n	80026a2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002692:	bf00      	nop
 8002694:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HW_TS_Stop+0xf0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f8      	bne.n	8002694 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HW_TS_Stop+0xf0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HW_TS_Stop+0xf0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026b2:	bf00      	nop
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HW_TS_Stop+0xf0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f8      	beq.n	80026b4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HW_TS_Stop+0xf0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <HW_TS_Stop+0xf0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80026d2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80026d4:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <HW_TS_Stop+0x100>)
 80026d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026da:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80026dc:	2003      	movs	r0, #3
 80026de:	f00d fecc 	bl	801047a <HAL_NVIC_ClearPendingIRQ>
 80026e2:	e007      	b.n	80026f4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HW_TS_Stop+0x104>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7cfa      	ldrb	r2, [r7, #19]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80026f0:	f7ff fce4 	bl	80020bc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HW_TS_Stop+0xf0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	22ff      	movs	r2, #255	@ 0xff
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026fc:	2003      	movs	r0, #3
 80026fe:	f00d fe86 	bl	801040e <HAL_NVIC_EnableIRQ>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f383 8810 	msr	PRIMASK, r3
}
 800270c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800270e:	bf00      	nop
}
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200009d8 	.word	0x200009d8
 800271c:	200008f4 	.word	0x200008f4
 8002720:	20000984 	.word	0x20000984
 8002724:	40002800 	.word	0x40002800
 8002728:	58000800 	.word	0x58000800
 800272c:	20000985 	.word	0x20000985

08002730 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	493b      	ldr	r1, [pc, #236]	@ (800282c <HW_TS_Start+0xfc>)
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	330c      	adds	r3, #12
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d103      	bne.n	800275c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff66 	bl	8002628 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275c:	f3ef 8310 	mrs	r3, PRIMASK
 8002760:	60fb      	str	r3, [r7, #12]
  return(result);
 8002762:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002766:	b672      	cpsid	i
}
 8002768:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800276a:	2003      	movs	r0, #3
 800276c:	f00d fe5d 	bl	801042a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <HW_TS_Start+0x100>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	22ca      	movs	r2, #202	@ 0xca
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24
 8002778:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <HW_TS_Start+0x100>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2253      	movs	r2, #83	@ 0x53
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002780:	79fa      	ldrb	r2, [r7, #7]
 8002782:	492a      	ldr	r1, [pc, #168]	@ (800282c <HW_TS_Start+0xfc>)
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	330c      	adds	r3, #12
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002794:	79fa      	ldrb	r2, [r7, #7]
 8002796:	4925      	ldr	r1, [pc, #148]	@ (800282c <HW_TS_Start+0xfc>)
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3308      	adds	r3, #8
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027a8:	79fa      	ldrb	r2, [r7, #7]
 80027aa:	4920      	ldr	r1, [pc, #128]	@ (800282c <HW_TS_Start+0xfc>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3304      	adds	r3, #4
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fab6 	bl	8001d30 <linkTimer>
 80027c4:	4603      	mov	r3, r0
 80027c6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HW_TS_Start+0x104>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80027ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002838 <HW_TS_Start+0x108>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	7c7a      	ldrb	r2, [r7, #17]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d002      	beq.n	80027e0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80027da:	f7ff fc6f 	bl	80020bc <RescheduleTimerList>
 80027de:	e013      	b.n	8002808 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	4912      	ldr	r1, [pc, #72]	@ (800282c <HW_TS_Start+0xfc>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3308      	adds	r3, #8
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	8a7b      	ldrh	r3, [r7, #18]
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	1ac9      	subs	r1, r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	@ (800282c <HW_TS_Start+0xfc>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4403      	add	r3, r0
 8002804:	3308      	adds	r3, #8
 8002806:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002808:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HW_TS_Start+0x100>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	22ff      	movs	r2, #255	@ 0xff
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002810:	2003      	movs	r0, #3
 8002812:	f00d fdfc 	bl	801040e <HAL_NVIC_EnableIRQ>
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002822:	bf00      	nop
}
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200008f4 	.word	0x200008f4
 8002830:	200009d8 	.word	0x200009d8
 8002834:	20000984 	.word	0x20000984
 8002838:	20000985 	.word	0x20000985

0800283c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	460b      	mov	r3, r1
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4798      	blx	r3

  return;
 800284e:	bf00      	nop
}
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	4603      	mov	r3, r0
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	4613      	mov	r3, r2
 8002868:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10c      	bne.n	800288a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002870:	4a08      	ldr	r2, [pc, #32]	@ (8002894 <HW_UART_Receive_IT+0x3c>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <HW_UART_Receive_IT+0x40>)
 8002878:	4a08      	ldr	r2, [pc, #32]	@ (800289c <HW_UART_Receive_IT+0x44>)
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <HW_UART_Receive_IT+0x40>)
 8002884:	f013 fc14 	bl	80160b0 <HAL_UART_Receive_IT>
            break;
 8002888:	e000      	b.n	800288c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800288a:	bf00      	nop
    }

    return;
 800288c:	bf00      	nop
}
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000994 	.word	0x20000994
 8002898:	200009fc 	.word	0x200009fc
 800289c:	40013800 	.word	0x40013800

080028a0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	4603      	mov	r3, r0
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	4613      	mov	r3, r2
 80028b0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10e      	bne.n	80028de <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80028c0:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HW_UART_Transmit_DMA+0x80>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <HW_UART_Transmit_DMA+0x84>)
 80028c8:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HW_UART_Transmit_DMA+0x88>)
 80028ca:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	4814      	ldr	r0, [pc, #80]	@ (8002924 <HW_UART_Transmit_DMA+0x84>)
 80028d4:	f013 fc38 	bl	8016148 <HAL_UART_Transmit_DMA>
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
            break;
 80028dc:	e000      	b.n	80028e0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80028de:	bf00      	nop
    }

    switch (hal_status)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d816      	bhi.n	8002914 <HW_UART_Transmit_DMA+0x74>
 80028e6:	a201      	add	r2, pc, #4	@ (adr r2, 80028ec <HW_UART_Transmit_DMA+0x4c>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	08002903 	.word	0x08002903
 80028f4:	08002909 	.word	0x08002909
 80028f8:	0800290f 	.word	0x0800290f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75bb      	strb	r3, [r7, #22]
            break;
 8002900:	e009      	b.n	8002916 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002902:	2301      	movs	r3, #1
 8002904:	75bb      	strb	r3, [r7, #22]
            break;
 8002906:	e006      	b.n	8002916 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002908:	2302      	movs	r3, #2
 800290a:	75bb      	strb	r3, [r7, #22]
            break;
 800290c:	e003      	b.n	8002916 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800290e:	2303      	movs	r3, #3
 8002910:	75bb      	strb	r3, [r7, #22]
            break;
 8002912:	e000      	b.n	8002916 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002914:	bf00      	nop
    }

    return hw_status;
 8002916:	7dbb      	ldrb	r3, [r7, #22]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000998 	.word	0x20000998
 8002924:	200009fc 	.word	0x200009fc
 8002928:	40013800 	.word	0x40013800

0800292c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_UART_RxCpltCallback+0x34>)
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_UART_RxCpltCallback+0x38>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_UART_RxCpltCallback+0x38>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4798      	blx	r3
            }
            break;
 800294e:	e001      	b.n	8002954 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002954:	bf00      	nop
    }

    return;
 8002956:	bf00      	nop
}
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40013800 	.word	0x40013800
 8002964:	20000994 	.word	0x20000994

08002968 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_UART_TxCpltCallback+0x34>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_UART_TxCpltCallback+0x38>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_UART_TxCpltCallback+0x38>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4798      	blx	r3
            }
            break;
 800298a:	e001      	b.n	8002990 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800298c:	bf00      	nop
 800298e:	e000      	b.n	8002992 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002990:	bf00      	nop
    }

    return;
 8002992:	bf00      	nop
}
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40013800 	.word	0x40013800
 80029a0:	20000998 	.word	0x20000998

080029a4 <LL_RCC_LSE_SetDriveCapability>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	f023 0218 	bic.w	r2, r3, #24
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_AHB1_GRP1_EnableClock>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f4:	68fb      	ldr	r3, [r7, #12]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_AHB2_GRP1_EnableClock>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a38:	f00d faf6 	bl	8010028 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a3c:	f7fe fc92 	bl	8001364 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a40:	f000 f812 	bl	8002a68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a44:	f000 f87c 	bl	8002b40 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a48:	f000 f89a 	bl	8002b80 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a4c:	f000 f93e 	bl	8002ccc <MX_GPIO_Init>
  MX_DMA_Init();
 8002a50:	f000 f92a 	bl	8002ca8 <MX_DMA_Init>
  MX_RTC_Init();
 8002a54:	f000 f8b0 	bl	8002bb8 <MX_RTC_Init>
  MX_RF_Init();
 8002a58:	f000 f8a6 	bl	8002ba8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002a5c:	f7fe fc90 	bl	8001380 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002a60:	f7fe feef 	bl	8001842 <MX_APPE_Process>
 8002a64:	e7fc      	b.n	8002a60 <main+0x2c>
	...

08002a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b09a      	sub	sp, #104	@ 0x68
 8002a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	f107 0320 	add.w	r3, r7, #32
 8002a72:	2248      	movs	r2, #72	@ 0x48
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f019 ffb6 	bl	801c9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	615a      	str	r2, [r3, #20]
 8002a8c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a8e:	f00f fcc7 	bl	8012420 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002a92:	2010      	movs	r0, #16
 8002a94:	f7ff ff86 	bl	80029a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a98:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <SystemClock_Config+0xd4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002aa0:	4a26      	ldr	r2, [pc, #152]	@ (8002b3c <SystemClock_Config+0xd4>)
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <SystemClock_Config+0xd4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ac8:	2340      	movs	r3, #64	@ 0x40
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002acc:	2302      	movs	r3, #2
 8002ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 8002ad4:	2370      	movs	r3, #112	@ 0x70
 8002ad6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002adc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ae2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ae6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ae8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aee:	f107 0320 	add.w	r3, r7, #32
 8002af2:	4618      	mov	r0, r3
 8002af4:	f010 f828 	bl	8012b48 <HAL_RCC_OscConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002afe:	f000 fadd 	bl	80030bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002b02:	236f      	movs	r3, #111	@ 0x6f
 8002b04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b06:	2303      	movs	r3, #3
 8002b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2103      	movs	r1, #3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f010 fb84 	bl	8013230 <HAL_RCC_ClockConfig>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b2e:	f000 fac5 	bl	80030bc <Error_Handler>
  }
}
 8002b32:	bf00      	nop
 8002b34:	3768      	adds	r7, #104	@ 0x68
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58000400 	.word	0x58000400

08002b40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b094      	sub	sp, #80	@ 0x50
 8002b44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b46:	463b      	mov	r3, r7
 8002b48:	2250      	movs	r2, #80	@ 0x50
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f019 ff4b 	bl	801c9e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002b52:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b56:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002b58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002b62:	2310      	movs	r3, #16
 8002b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b66:	463b      	mov	r3, r7
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f011 f98c 	bl	8013e86 <HAL_RCCEx_PeriphCLKConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002b74:	f000 faa2 	bl	80030bc <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8002b78:	bf00      	nop
 8002b7a:	3750      	adds	r7, #80	@ 0x50
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_IPCC_Init+0x20>)
 8002b86:	4a07      	ldr	r2, [pc, #28]	@ (8002ba4 <MX_IPCC_Init+0x24>)
 8002b88:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_IPCC_Init+0x20>)
 8002b8c:	f00f fbc2 	bl	8012314 <HAL_IPCC_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b96:	f000 fa91 	bl	80030bc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000099c 	.word	0x2000099c
 8002ba4:	58000c00 	.word	0x58000c00

08002ba8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <MX_RTC_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bca:	220f      	movs	r2, #15
 8002bcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bd0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002bd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <MX_RTC_Init+0x4c>)
 8002bf0:	f012 f994 	bl	8014f1c <HAL_RTC_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f000 fa5f 	bl	80030bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200009d8 	.word	0x200009d8
 8002c08:	40002800 	.word	0x40002800

08002c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c12:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <MX_USART1_UART_Init+0x98>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c16:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c44:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c50:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c56:	4812      	ldr	r0, [pc, #72]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c58:	f013 f9da 	bl	8016010 <HAL_UART_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002c62:	f000 fa2b 	bl	80030bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c66:	2100      	movs	r1, #0
 8002c68:	480d      	ldr	r0, [pc, #52]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c6a:	f015 fa4a 	bl	8018102 <HAL_UARTEx_SetTxFifoThreshold>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002c74:	f000 fa22 	bl	80030bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4809      	ldr	r0, [pc, #36]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c7c:	f015 fa7f 	bl	801817e <HAL_UARTEx_SetRxFifoThreshold>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002c86:	f000 fa19 	bl	80030bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c8c:	f015 fa00 	bl	8018090 <HAL_UARTEx_DisableFifoMode>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002c96:	f000 fa11 	bl	80030bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200009fc 	.word	0x200009fc
 8002ca4:	40013800 	.word	0x40013800

08002ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002cac:	2004      	movs	r0, #4
 8002cae:	f7ff fe8f 	bl	80029d0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f7ff fe8c 	bl	80029d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	210f      	movs	r1, #15
 8002cbc:	203a      	movs	r0, #58	@ 0x3a
 8002cbe:	f00d fb8c 	bl	80103da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002cc2:	203a      	movs	r0, #58	@ 0x3a
 8002cc4:	f00d fba3 	bl	801040e <HAL_NVIC_EnableIRQ>

}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7ff fe8e 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce6:	2004      	movs	r0, #4
 8002ce8:	f7ff fe8b 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cec:	2002      	movs	r0, #2
 8002cee:	f7ff fe88 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf2:	2008      	movs	r0, #8
 8002cf4:	f7ff fe85 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cf8:	2010      	movs	r0, #16
 8002cfa:	f7ff fe82 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cfe:	2080      	movs	r0, #128	@ 0x80
 8002d00:	f7ff fe7f 	bl	8002a02 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DISP_Pin|GPIO_SELECT2_Pin, GPIO_PIN_RESET);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2103      	movs	r1, #3
 8002d08:	48bd      	ldr	r0, [pc, #756]	@ (8003000 <MX_GPIO_Init+0x334>)
 8002d0a:	f00e f995 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_DISP_Pin|RST_DISP_Pin, GPIO_PIN_RESET);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d14:	48bb      	ldr	r0, [pc, #748]	@ (8003004 <MX_GPIO_Init+0x338>)
 8002d16:	f00e f98f 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d20:	48b9      	ldr	r0, [pc, #740]	@ (8003008 <MX_GPIO_Init+0x33c>)
 8002d22:	f00e f989 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SELECT1_GPIO_Port, GPIO_SELECT1_Pin, GPIO_PIN_RESET);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2104      	movs	r1, #4
 8002d2a:	48b8      	ldr	r0, [pc, #736]	@ (800300c <MX_GPIO_Init+0x340>)
 8002d2c:	f00e f984 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5;
 8002d30:	2325      	movs	r3, #37	@ 0x25
 8002d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d34:	2303      	movs	r3, #3
 8002d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d44:	f00d ff2a 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC1 PC5 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8002d48:	233a      	movs	r3, #58	@ 0x3a
 8002d4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	48aa      	ldr	r0, [pc, #680]	@ (8003004 <MX_GPIO_Init+0x338>)
 8002d5a:	f00d ff1f 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002d5e:	f640 4304 	movw	r3, #3076	@ 0xc04
 8002d62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	48a4      	ldr	r0, [pc, #656]	@ (8003004 <MX_GPIO_Init+0x338>)
 8002d72:	f00d ff13 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_IO0_Pin;
 8002d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d88:	230a      	movs	r3, #10
 8002d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QSPI_BK_IO0_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	489f      	ldr	r0, [pc, #636]	@ (8003010 <MX_GPIO_Init+0x344>)
 8002d92:	f00d ff03 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_MCU_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_MCU_Pin;
 8002d96:	2301      	movs	r3, #1
 8002d98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002da6:	2308      	movs	r3, #8
 8002da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LPUART1_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4895      	ldr	r0, [pc, #596]	@ (8003004 <MX_GPIO_Init+0x338>)
 8002db0:	f00d fef4 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dba:	2312      	movs	r3, #18
 8002dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4890      	ldr	r0, [pc, #576]	@ (8003010 <MX_GPIO_Init+0x344>)
 8002dd0:	f00d fee4 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_MCU_Pin PB12 */
  GPIO_InitStruct.Pin = LPUART1_TX_MCU_Pin|GPIO_PIN_12;
 8002dd4:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002de6:	2308      	movs	r3, #8
 8002de8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4888      	ldr	r0, [pc, #544]	@ (8003010 <MX_GPIO_Init+0x344>)
 8002df0:	f00d fed4 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e06:	2301      	movs	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e12:	f00d fec3 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1c:	2312      	movs	r3, #18
 8002e1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e28:	2304      	movs	r3, #4
 8002e2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e34:	f00d feb2 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_P_Pin USB_N_Pin */
  GPIO_InitStruct.Pin = USB_P_Pin|USB_N_Pin;
 8002e38:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e56:	f00d fea1 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4865      	ldr	r0, [pc, #404]	@ (8003008 <MX_GPIO_Init+0x33c>)
 8002e74:	f00d fe92 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G4_IO1_Pin TSC_G4_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G4_IO1_Pin|TSC_G4_IO2_Pin;
 8002e78:	23c0      	movs	r3, #192	@ 0xc0
 8002e7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	485c      	ldr	r0, [pc, #368]	@ (8003004 <MX_GPIO_Init+0x338>)
 8002e92:	f00d fe83 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e96:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4857      	ldr	r0, [pc, #348]	@ (8003010 <MX_GPIO_Init+0x344>)
 8002eb2:	f00d fe73 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DRDY_Pin;
 8002eb6:	2312      	movs	r3, #18
 8002eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4851      	ldr	r0, [pc, #324]	@ (800300c <MX_GPIO_Init+0x340>)
 8002ec8:	f00d fe68 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	484a      	ldr	r0, [pc, #296]	@ (8003010 <MX_GPIO_Init+0x344>)
 8002ee8:	f00d fe58 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eec:	2304      	movs	r3, #4
 8002eee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4844      	ldr	r0, [pc, #272]	@ (8003010 <MX_GPIO_Init+0x344>)
 8002efe:	f00d fe4d 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_CK2_Pin SAI1_D2_Pin */
  GPIO_InitStruct.Pin = SAI1_CK2_Pin|SAI1_D2_Pin;
 8002f02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 8002f14:	2303      	movs	r3, #3
 8002f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f20:	f00d fe3c 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f24:	2340      	movs	r3, #64	@ 0x40
 8002f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f34:	2308      	movs	r3, #8
 8002f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f40:	f00d fe2c 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK_SCK_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_SCK_Pin;
 8002f44:	2308      	movs	r3, #8
 8002f46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f54:	230a      	movs	r3, #10
 8002f56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QSPI_BK_SCK_GPIO_Port, &GPIO_InitStruct);
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f60:	f00d fe1c 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DISP_Pin GPIO_SELECT2_Pin */
  GPIO_InitStruct.Pin = CS_DISP_Pin|GPIO_SELECT2_Pin;
 8002f64:	2303      	movs	r3, #3
 8002f66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4821      	ldr	r0, [pc, #132]	@ (8003000 <MX_GPIO_Init+0x334>)
 8002f7a:	f00d fe0f 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f7e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	481b      	ldr	r0, [pc, #108]	@ (8003008 <MX_GPIO_Init+0x33c>)
 8002f9a:	f00d fdff 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_4;
 8002f9e:	f243 0310 	movw	r3, #12304	@ 0x3010
 8002fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fac:	1d3b      	adds	r3, r7, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4815      	ldr	r0, [pc, #84]	@ (8003008 <MX_GPIO_Init+0x33c>)
 8002fb2:	f00d fdf3 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8002fb6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002fba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	480f      	ldr	r0, [pc, #60]	@ (8003008 <MX_GPIO_Init+0x33c>)
 8002fcc:	f00d fde6 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_DISP_Pin RST_DISP_Pin */
  GPIO_InitStruct.Pin = D_C_DISP_Pin|RST_DISP_Pin;
 8002fd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4807      	ldr	r0, [pc, #28]	@ (8003004 <MX_GPIO_Init+0x338>)
 8002fe8:	f00d fdd8 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK_NCS_Pin QSPI_BK_IO1_Pin QSPI_BK_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_NCS_Pin|QSPI_BK_IO1_Pin|QSPI_BK_IO2_Pin;
 8002fec:	2368      	movs	r3, #104	@ 0x68
 8002fee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	e009      	b.n	8003014 <MX_GPIO_Init+0x348>
 8003000:	48001c00 	.word	0x48001c00
 8003004:	48000800 	.word	0x48000800
 8003008:	48000c00 	.word	0x48000c00
 800300c:	48001000 	.word	0x48001000
 8003010:	48000400 	.word	0x48000400
 8003014:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4826      	ldr	r0, [pc, #152]	@ (80030b4 <MX_GPIO_Init+0x3e8>)
 800301c:	f00d fdbe 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003020:	2308      	movs	r3, #8
 8003022:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003024:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003028:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4821      	ldr	r0, [pc, #132]	@ (80030b8 <MX_GPIO_Init+0x3ec>)
 8003034:	f00d fdb2 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800303c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303e:	2301      	movs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4819      	ldr	r0, [pc, #100]	@ (80030b4 <MX_GPIO_Init+0x3e8>)
 8003050:	f00d fda4 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G6_IO1_Pin TSC_G6_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G6_IO1_Pin|TSC_G6_IO2_Pin;
 8003054:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8003066:	2309      	movs	r3, #9
 8003068:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4811      	ldr	r0, [pc, #68]	@ (80030b4 <MX_GPIO_Init+0x3e8>)
 8003070:	f00d fd94 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SELECT1_Pin */
  GPIO_InitStruct.Pin = GPIO_SELECT1_Pin;
 8003074:	2304      	movs	r3, #4
 8003076:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	2301      	movs	r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SELECT1_GPIO_Port, &GPIO_InitStruct);
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	4619      	mov	r1, r3
 8003088:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <MX_GPIO_Init+0x3ec>)
 800308a:	f00d fd87 	bl	8010b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800308e:	2301      	movs	r3, #1
 8003090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800309e:	230e      	movs	r3, #14
 80030a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_GPIO_Init+0x3ec>)
 80030a8:	f00d fd78 	bl	8010b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	bf00      	nop
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	48000c00 	.word	0x48000c00
 80030b8:	48001000 	.word	0x48001000

080030bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030c0:	b672      	cpsid	i
}
 80030c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <Error_Handler+0x8>

080030c8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_AHB2_GRP1_EnableClock>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4013      	ands	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_AHB3_GRP1_EnableClock>:
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800312a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003140:	68fb      	ldr	r3, [r7, #12]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_APB1_GRP1_EnableClock>:
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800315c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_APB2_GRP1_EnableClock>:
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80031b6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031ba:	f7ff ffaf 	bl	800311c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	202e      	movs	r0, #46	@ 0x2e
 80031c4:	f00d f909 	bl	80103da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80031c8:	202e      	movs	r0, #46	@ 0x2e
 80031ca:	f00d f920 	bl	801040e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a05      	ldr	r2, [pc, #20]	@ (80031f8 <HAL_IPCC_MspInit+0x24>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d103      	bne.n	80031ee <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80031e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80031ea:	f7ff ff97 	bl	800311c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	58000c00 	.word	0x58000c00

080031fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b096      	sub	sp, #88	@ 0x58
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	2250      	movs	r2, #80	@ 0x50
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f019 fbeb 	bl	801c9e8 <memset>
  if(hrtc->Instance==RTC)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0e      	ldr	r2, [pc, #56]	@ (8003250 <HAL_RTC_MspInit+0x54>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d115      	bne.n	8003248 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800321c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003220:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003226:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	4618      	mov	r0, r3
 800322e:	f010 fe2a 	bl	8013e86 <HAL_RCCEx_PeriphCLKConfig>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003238:	f7ff ff40 	bl	80030bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800323c:	f7ff ff44 	bl	80030c8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003240:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003244:	f7ff ff83 	bl	800314e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003248:	bf00      	nop
 800324a:	3758      	adds	r7, #88	@ 0x58
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40002800 	.word	0x40002800

08003254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b09c      	sub	sp, #112	@ 0x70
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	2250      	movs	r2, #80	@ 0x50
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f019 fbb7 	bl	801c9e8 <memset>
  if(huart->Instance==USART1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_UART_MspInit+0xe4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d155      	bne.n	8003330 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003284:	2301      	movs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	4618      	mov	r0, r3
 8003292:	f010 fdf8 	bl	8013e86 <HAL_RCCEx_PeriphCLKConfig>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800329c:	f7ff ff0e 	bl	80030bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80032a4:	f7ff ff6c 	bl	8003180 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a8:	2002      	movs	r0, #2
 80032aa:	f7ff ff1e 	bl	80030ea <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80032ae:	23c0      	movs	r3, #192	@ 0xc0
 80032b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032be:	2307      	movs	r3, #7
 80032c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032c6:	4619      	mov	r1, r3
 80032c8:	481c      	ldr	r0, [pc, #112]	@ (800333c <HAL_UART_MspInit+0xe8>)
 80032ca:	f00d fc67 	bl	8010b9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <HAL_UART_MspInit+0xf0>)
 80032d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032d6:	220f      	movs	r2, #15
 80032d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032da:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032dc:	2210      	movs	r2, #16
 80032de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e0:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e6:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ec:	4b14      	ldr	r3, [pc, #80]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <HAL_UART_MspInit+0xec>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_UART_MspInit+0xec>)
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003304:	480e      	ldr	r0, [pc, #56]	@ (8003340 <HAL_UART_MspInit+0xec>)
 8003306:	f00d f8c7 	bl	8010498 <HAL_DMA_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003310:	f7ff fed4 	bl	80030bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <HAL_UART_MspInit+0xec>)
 8003318:	67da      	str	r2, [r3, #124]	@ 0x7c
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_UART_MspInit+0xec>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003320:	2200      	movs	r2, #0
 8003322:	2100      	movs	r1, #0
 8003324:	2024      	movs	r0, #36	@ 0x24
 8003326:	f00d f858 	bl	80103da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800332a:	2024      	movs	r0, #36	@ 0x24
 800332c:	f00d f86f 	bl	801040e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003330:	bf00      	nop
 8003332:	3770      	adds	r7, #112	@ 0x70
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40013800 	.word	0x40013800
 800333c:	48000400 	.word	0x48000400
 8003340:	20000a90 	.word	0x20000a90
 8003344:	40020444 	.word	0x40020444

08003348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <NMI_Handler+0x4>

08003350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <HardFault_Handler+0x4>

08003358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <MemManage_Handler+0x4>

08003360 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <BusFault_Handler+0x4>

08003368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <UsageFault_Handler+0x4>

08003370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339e:	f00c fe9d 	bl	80100dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <USART1_IRQHandler+0x10>)
 80033ae:	f012 ff4b 	bl	8016248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200009fc 	.word	0x200009fc

080033bc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80033c0:	f00d fe6a 	bl	8011098 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033cc:	4802      	ldr	r0, [pc, #8]	@ (80033d8 <DMA2_Channel4_IRQHandler+0x10>)
 80033ce:	f00d fa44 	bl	801085a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000a90 	.word	0x20000a90

080033dc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80033e0:	f006 ffd6 	bl	800a390 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80033ec:	f007 f806 	bl	800a3fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80033f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033fc:	f00d fe34 	bl	8011068 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003400:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003404:	f00d fe30 	bl	8011068 <HAL_GPIO_EXTI_IRQHandler>
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}

0800340c <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  BSP_PWM_LED_IRQHandler();
 8003410:	f00a fe1a 	bl	800e048 <BSP_PWM_LED_IRQHandler>
}
 8003414:	bf00      	nop
 8003416:	bd80      	pop	{r7, pc}

08003418 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800341c:	f7fe fee8 	bl	80021f0 <HW_TS_RTC_Wakeup_Handler>
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}

08003424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return 1;
 8003428:	2301      	movs	r3, #1
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_kill>:

int _kill(int pid, int sig)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800343e:	f019 fb25 	bl	801ca8c <__errno>
 8003442:	4603      	mov	r3, r0
 8003444:	2216      	movs	r2, #22
 8003446:	601a      	str	r2, [r3, #0]
  return -1;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_exit>:

void _exit (int status)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffe7 	bl	8003434 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <_exit+0x12>

0800346a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e00a      	b.n	8003492 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800347c:	f3af 8000 	nop.w
 8003480:	4601      	mov	r1, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	60ba      	str	r2, [r7, #8]
 8003488:	b2ca      	uxtb	r2, r1
 800348a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3301      	adds	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	dbf0      	blt.n	800347c <_read+0x12>
  }

  return len;
 800349a:	687b      	ldr	r3, [r7, #4]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034cc:	605a      	str	r2, [r3, #4]
  return 0;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_isatty>:

int _isatty(int file)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034e4:	2301      	movs	r3, #1
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003514:	4a14      	ldr	r2, [pc, #80]	@ (8003568 <_sbrk+0x5c>)
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <_sbrk+0x60>)
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003520:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <_sbrk+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003528:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <_sbrk+0x64>)
 800352a:	4a12      	ldr	r2, [pc, #72]	@ (8003574 <_sbrk+0x68>)
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352e:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <_sbrk+0x64>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d207      	bcs.n	800354c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800353c:	f019 faa6 	bl	801ca8c <__errno>
 8003540:	4603      	mov	r3, r0
 8003542:	220c      	movs	r2, #12
 8003544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e009      	b.n	8003560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800354c:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <_sbrk+0x64>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003552:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <_sbrk+0x64>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <_sbrk+0x64>)
 800355c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20030000 	.word	0x20030000
 800356c:	00001000 	.word	0x00001000
 8003570:	20000af0 	.word	0x20000af0
 8003574:	20002f10 	.word	0x20002f10

08003578 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f004 fdc1 	bl	8008110 <VL53L0X_get_device_info>
 800358e:	4603      	mov	r3, r0
 8003590:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f001 fc43 	bl	8004e3a <VL53L0X_get_offset_calibration_data_micro_meter>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80035b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b094      	sub	sp, #80	@ 0x50
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80035d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80035da:	2200      	movs	r2, #0
 80035dc:	2188      	movs	r1, #136	@ 0x88
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f004 ff54 	bl	800848c <VL53L0X_WrByte>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035f8:	f8a3 214e 	strh.w	r2, [r3, #334]	@ 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003602:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a71      	ldr	r2, [pc, #452]	@ (80037d0 <VL53L0X_DataInit+0x20c>)
 800360a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a70      	ldr	r2, [pc, #448]	@ (80037d4 <VL53L0X_DataInit+0x210>)
 8003612:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa58 	bl	8003ad8 <VL53L0X_GetDeviceParameters>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 800362e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003632:	2b00      	cmp	r3, #0
 8003634:	d112      	bne.n	800365c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003636:	2300      	movs	r3, #0
 8003638:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800363a:	2300      	movs	r3, #0
 800363c:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f103 0410 	add.w	r4, r3, #16
 8003644:	f107 0508 	add.w	r5, r7, #8
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003654:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2264      	movs	r2, #100	@ 0x64
 8003660:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800366a:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003674:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800367e:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800368a:	2300      	movs	r3, #0
 800368c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800368e:	e014      	b.n	80036ba <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8003690:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800369a:	b29b      	uxth	r3, r3
 800369c:	2201      	movs	r2, #1
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fd63 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80036b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b6:	3301      	adds	r3, #1
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036bc:	2b05      	cmp	r3, #5
 80036be:	dde7      	ble.n	8003690 <VL53L0X_DataInit+0xcc>
 80036c0:	e000      	b.n	80036c4 <VL53L0X_DataInit+0x100>
		else
			break;
 80036c2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80036c4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036cc:	2200      	movs	r2, #0
 80036ce:	2102      	movs	r1, #2
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fd4b 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80036dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036e4:	2200      	movs	r2, #0
 80036e6:	2103      	movs	r1, #3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fd3f 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80036f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036fc:	2200      	movs	r2, #0
 80036fe:	2104      	movs	r1, #4
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fd33 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800370c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003714:	2200      	movs	r2, #0
 8003716:	2105      	movs	r1, #5
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fd27 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003724:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003728:	2b00      	cmp	r3, #0
 800372a:	d108      	bne.n	800373e <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800372c:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8003730:	2100      	movs	r1, #0
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fdca 	bl	80042cc <VL53L0X_SetLimitCheckValue>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800373e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800374a:	2101      	movs	r1, #1
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fdbd 	bl	80042cc <VL53L0X_SetLimitCheckValue>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003758:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800375c:	2b00      	cmp	r3, #0
 800375e:	d108      	bne.n	8003772 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003760:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8003764:	2102      	movs	r1, #2
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fdb0 	bl	80042cc <VL53L0X_SetLimitCheckValue>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003772:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003776:	2b00      	cmp	r3, #0
 8003778:	d107      	bne.n	800378a <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800377a:	2200      	movs	r2, #0
 800377c:	2103      	movs	r1, #3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fda4 	bl	80042cc <VL53L0X_SetLimitCheckValue>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800378a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	22ff      	movs	r2, #255	@ 0xff
 8003796:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800379a:	22ff      	movs	r2, #255	@ 0xff
 800379c:	2101      	movs	r1, #1
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f004 fe74 	bl	800848c <VL53L0X_WrByte>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80037b2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80037c2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3750      	adds	r7, #80	@ 0x50
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdb0      	pop	{r4, r5, r7, pc}
 80037ce:	bf00      	nop
 80037d0:	00016b85 	.word	0x00016b85
 80037d4:	000970a4 	.word	0x000970a4

080037d8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b09e      	sub	sp, #120	@ 0x78
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	2240      	movs	r2, #64	@ 0x40
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f019 f8fa 	bl	801c9e8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003814:	2101      	movs	r1, #1
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f002 fa62 	bl	8005ce0 <VL53L0X_get_info_from_device>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8003828:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8003830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003834:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003838:	2b01      	cmp	r3, #1
 800383a:	d80d      	bhi.n	8003858 <VL53L0X_StaticInit+0x80>
 800383c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003840:	2b01      	cmp	r3, #1
 8003842:	d102      	bne.n	800384a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003846:	2b20      	cmp	r3, #32
 8003848:	d806      	bhi.n	8003858 <VL53L0X_StaticInit+0x80>
 800384a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10e      	bne.n	8003870 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d90b      	bls.n	8003870 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003858:	f107 0218 	add.w	r2, r7, #24
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f001 fce4 	bl	8005230 <VL53L0X_perform_ref_spad_management>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800386e:	e009      	b.n	8003884 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003874:	461a      	mov	r2, r3
 8003876:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 fee5 	bl	8005648 <VL53L0X_set_reference_spads>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003884:	4b93      	ldr	r3, [pc, #588]	@ (8003ad4 <VL53L0X_StaticInit+0x2fc>)
 8003886:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003888:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10f      	bne.n	80038b0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003896:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800389a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038aa:	e001      	b.n	80038b0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80038ac:	4b89      	ldr	r3, [pc, #548]	@ (8003ad4 <VL53L0X_StaticInit+0x2fc>)
 80038ae:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80038b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80038b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f003 fdb6 	bl	800742c <VL53L0X_load_tuning_settings>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80038c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2304      	movs	r3, #4
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 f8e1 	bl	8004aa0 <VL53L0X_SetGpioConfig>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80038e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d121      	bne.n	8003930 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80038ec:	2201      	movs	r2, #1
 80038ee:	21ff      	movs	r1, #255	@ 0xff
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f004 fdcb 	bl	800848c <VL53L0X_WrByte>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80038fc:	f107 031a 	add.w	r3, r7, #26
 8003900:	461a      	mov	r2, r3
 8003902:	2184      	movs	r1, #132	@ 0x84
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f004 fd4f 	bl	80083a8 <VL53L0X_RdWord>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003912:	4313      	orrs	r3, r2
 8003914:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003918:	2200      	movs	r2, #0
 800391a:	21ff      	movs	r1, #255	@ 0xff
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f004 fdb5 	bl	800848c <VL53L0X_WrByte>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800392a:	4313      	orrs	r3, r2
 800392c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003930:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003938:	8b7b      	ldrh	r3, [r7, #26]
 800393a:	011a      	lsls	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003942:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8c1 	bl	8003ad8 <VL53L0X_GetDeviceParameters>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800395c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003960:	2b00      	cmp	r3, #0
 8003962:	d110      	bne.n	8003986 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003964:	f107 0319 	add.w	r3, r7, #25
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f983 	bl	8003c76 <VL53L0X_GetFractionEnable>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003976:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800397e:	7e7a      	ldrb	r2, [r7, #25]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003986:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10e      	bne.n	80039ac <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f103 0410 	add.w	r4, r3, #16
 8003994:	f107 051c 	add.w	r5, r7, #28
 8003998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800399a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800399c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800399e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80039a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80039ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d111      	bne.n	80039d8 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 80039b4:	f107 0319 	add.w	r3, r7, #25
 80039b8:	461a      	mov	r2, r3
 80039ba:	2101      	movs	r1, #1
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f004 fc6c 	bl	800829a <VL53L0X_RdByte>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80039c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80039d0:	7e7a      	ldrb	r2, [r7, #25]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80039d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9bb 	bl	8003d60 <VL53L0X_SetSequenceStepEnable>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80039f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80039f8:	2200      	movs	r2, #0
 80039fa:	2102      	movs	r1, #2
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f9af 	bl	8003d60 <VL53L0X_SetSequenceStepEnable>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003a08:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2203      	movs	r2, #3
 8003a14:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a18:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003a20:	f107 0313 	add.w	r3, r7, #19
 8003a24:	461a      	mov	r2, r3
 8003a26:	2100      	movs	r1, #0
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f981 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a34:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003a3c:	7cfa      	ldrb	r2, [r7, #19]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a44:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003a4c:	f107 0313 	add.w	r3, r7, #19
 8003a50:	461a      	mov	r2, r3
 8003a52:	2101      	movs	r1, #1
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f96b 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a60:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003a68:	7cfa      	ldrb	r2, [r7, #19]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a70:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <VL53L0X_StaticInit+0x2b4>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2103      	movs	r1, #3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fab7 	bl	8003ff4 <VL53L0X_GetSequenceStepTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <VL53L0X_StaticInit+0x2e0>
		Status = VL53L0X_GetSequenceStepTimeout(
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2104      	movs	r1, #4
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 faa1 	bl	8003ff4 <VL53L0X_GetSequenceStepTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ab8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ac8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3770      	adds	r7, #112	@ 0x70
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ad4:	20000190 	.word	0x20000190

08003ad8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8b0 	bl	8003c50 <VL53L0X_GetDeviceMode>
 8003af0:	4603      	mov	r3, r0
 8003af2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	3308      	adds	r3, #8
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fab6 	bl	8004074 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d107      	bne.n	8003b32 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3310      	adds	r3, #16
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 faec 	bl	8004106 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fd2c 	bl	800359e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d134      	bne.n	8003bbc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	e02a      	b.n	8003bae <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d12a      	bne.n	8003bb6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	b299      	uxth	r1, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3308      	adds	r3, #8
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	461a      	mov	r2, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fc0c 	bl	8004390 <VL53L0X_GetLimitCheckValue>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d117      	bne.n	8003bba <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3318      	adds	r3, #24
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	461a      	mov	r2, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fb73 	bl	8004284 <VL53L0X_GetLimitCheckEnable>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	ddd1      	ble.n	8003b58 <VL53L0X_GetDeviceParameters+0x80>
 8003bb4:	e002      	b.n	8003bbc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003bba:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	333c      	adds	r3, #60	@ 0x3c
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fc6e 	bl	80044ac <VL53L0X_GetWrapAroundCheckEnable>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f879 	bl	8003cda <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b15      	cmp	r3, #21
 8003c0c:	bf8c      	ite	hi
 8003c0e:	2201      	movhi	r2, #1
 8003c10:	2200      	movls	r2, #0
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	2a00      	cmp	r2, #0
 8003c16:	d10f      	bne.n	8003c38 <VL53L0X_SetDeviceMode+0x40>
 8003c18:	4a0c      	ldr	r2, [pc, #48]	@ (8003c4c <VL53L0X_SetDeviceMode+0x54>)
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	741a      	strb	r2, [r3, #16]
		break;
 8003c36:	e001      	b.n	8003c3c <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003c38:	23f8      	movs	r3, #248	@ 0xf8
 8003c3a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	0030000b 	.word	0x0030000b

08003c50 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7c1a      	ldrb	r2, [r3, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	2109      	movs	r1, #9
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f004 fb06 	bl	800829a <VL53L0X_RdByte>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f003 fa1f 	bl	8007108 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f003 faec 	bl	80072c8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003d14:	78ba      	ldrb	r2, [r7, #2]
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f002 ff36 	bl	8006b8c <VL53L0X_set_vcsel_pulse_period>
 8003d20:	4603      	mov	r3, r0
 8003d22:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4619      	mov	r1, r3
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f003 f9a6 	bl	800709a <VL53L0X_get_vcsel_pulse_period>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003d7c:	f107 030f 	add.w	r3, r7, #15
 8003d80:	461a      	mov	r2, r3
 8003d82:	2101      	movs	r1, #1
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f004 fa88 	bl	800829a <VL53L0X_RdByte>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d159      	bne.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003d9a:	78bb      	ldrb	r3, [r7, #2]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d12b      	bne.n	8003df8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d825      	bhi.n	8003df2 <VL53L0X_SetSequenceStepEnable+0x92>
 8003da6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dc1 	.word	0x08003dc1
 8003db0:	08003dcb 	.word	0x08003dcb
 8003db4:	08003dd5 	.word	0x08003dd5
 8003db8:	08003ddf 	.word	0x08003ddf
 8003dbc:	08003de9 	.word	0x08003de9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003dc0:	7dbb      	ldrb	r3, [r7, #22]
 8003dc2:	f043 0310 	orr.w	r3, r3, #16
 8003dc6:	75bb      	strb	r3, [r7, #22]
				break;
 8003dc8:	e041      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003dca:	7dbb      	ldrb	r3, [r7, #22]
 8003dcc:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003dd0:	75bb      	strb	r3, [r7, #22]
				break;
 8003dd2:	e03c      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003dd4:	7dbb      	ldrb	r3, [r7, #22]
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	75bb      	strb	r3, [r7, #22]
				break;
 8003ddc:	e037      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003dde:	7dbb      	ldrb	r3, [r7, #22]
 8003de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de4:	75bb      	strb	r3, [r7, #22]
				break;
 8003de6:	e032      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003de8:	7dbb      	ldrb	r3, [r7, #22]
 8003dea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dee:	75bb      	strb	r3, [r7, #22]
				break;
 8003df0:	e02d      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003df2:	23fc      	movs	r3, #252	@ 0xfc
 8003df4:	75fb      	strb	r3, [r7, #23]
 8003df6:	e02a      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d825      	bhi.n	8003e4a <VL53L0X_SetSequenceStepEnable+0xea>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e19 	.word	0x08003e19
 8003e08:	08003e23 	.word	0x08003e23
 8003e0c:	08003e2d 	.word	0x08003e2d
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e41 	.word	0x08003e41
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003e18:	7dbb      	ldrb	r3, [r7, #22]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
 8003e1e:	75bb      	strb	r3, [r7, #22]
				break;
 8003e20:	e015      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003e22:	7dbb      	ldrb	r3, [r7, #22]
 8003e24:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8003e28:	75bb      	strb	r3, [r7, #22]
				break;
 8003e2a:	e010      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003e2c:	7dbb      	ldrb	r3, [r7, #22]
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	75bb      	strb	r3, [r7, #22]
				break;
 8003e34:	e00b      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003e36:	7dbb      	ldrb	r3, [r7, #22]
 8003e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e3c:	75bb      	strb	r3, [r7, #22]
				break;
 8003e3e:	e006      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003e40:	7dbb      	ldrb	r3, [r7, #22]
 8003e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e46:	75bb      	strb	r3, [r7, #22]
				break;
 8003e48:	e001      	b.n	8003e4e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003e4a:	23fc      	movs	r3, #252	@ 0xfc
 8003e4c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	7dba      	ldrb	r2, [r7, #22]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d01e      	beq.n	8003e94 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8003e5e:	7dbb      	ldrb	r3, [r7, #22]
 8003e60:	461a      	mov	r2, r3
 8003e62:	2101      	movs	r1, #1
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f004 fb11 	bl	800848c <VL53L0X_WrByte>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8003e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7dba      	ldrb	r2, [r7, #22]
 8003e7a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8003e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e8c:	6939      	ldr	r1, [r7, #16]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff10 	bl	8003cb4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	72fb      	strb	r3, [r7, #11]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d836      	bhi.n	8003f30 <sequence_step_enabled+0x90>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <sequence_step_enabled+0x28>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003edd 	.word	0x08003edd
 8003ecc:	08003eef 	.word	0x08003eef
 8003ed0:	08003f01 	.word	0x08003f01
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003f25 	.word	0x08003f25
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003edc:	7abb      	ldrb	r3, [r7, #10]
 8003ede:	111b      	asrs	r3, r3, #4
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	701a      	strb	r2, [r3, #0]
		break;
 8003eec:	e022      	b.n	8003f34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003eee:	7abb      	ldrb	r3, [r7, #10]
 8003ef0:	10db      	asrs	r3, r3, #3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	701a      	strb	r2, [r3, #0]
		break;
 8003efe:	e019      	b.n	8003f34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003f00:	7abb      	ldrb	r3, [r7, #10]
 8003f02:	109b      	asrs	r3, r3, #2
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	701a      	strb	r2, [r3, #0]
		break;
 8003f10:	e010      	b.n	8003f34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003f12:	7abb      	ldrb	r3, [r7, #10]
 8003f14:	119b      	asrs	r3, r3, #6
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	701a      	strb	r2, [r3, #0]
		break;
 8003f22:	e007      	b.n	8003f34 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003f24:	7abb      	ldrb	r3, [r7, #10]
 8003f26:	09db      	lsrs	r3, r3, #7
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	701a      	strb	r2, [r3, #0]
		break;
 8003f2e:	e001      	b.n	8003f34 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003f30:	23fc      	movs	r3, #252	@ 0xfc
 8003f32:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003f56:	f107 030e 	add.w	r3, r7, #14
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f004 f99b 	bl	800829a <VL53L0X_RdByte>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003f70:	7bba      	ldrb	r2, [r7, #14]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2100      	movs	r1, #0
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ff92 	bl	8003ea0 <sequence_step_enabled>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003f88:	7bba      	ldrb	r2, [r7, #14]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	2101      	movs	r1, #1
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff85 	bl	8003ea0 <sequence_step_enabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8003fa2:	7bba      	ldrb	r2, [r7, #14]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	2102      	movs	r1, #2
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff78 	bl	8003ea0 <sequence_step_enabled>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003fbc:	7bba      	ldrb	r2, [r7, #14]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	3303      	adds	r3, #3
 8003fc2:	2103      	movs	r1, #3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff6b 	bl	8003ea0 <sequence_step_enabled>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003fd6:	7bba      	ldrb	r2, [r7, #14]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2104      	movs	r1, #4
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ff5e 	bl	8003ea0 <sequence_step_enabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004002:	2300      	movs	r3, #0
 8004004:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 800400e:	f107 0210 	add.w	r2, r7, #16
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	4619      	mov	r1, r3
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f002 fbe4 	bl	80067e4 <get_sequence_step_timeout>
 800401c:	4603      	mov	r3, r0
 800401e:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8004020:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11c      	bne.n	8004062 <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4a11      	ldr	r2, [pc, #68]	@ (8004070 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4613      	mov	r3, r2
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004054:	4a06      	ldr	r2, [pc, #24]	@ (8004070 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004062:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	10624dd3 	.word	0x10624dd3

08004074 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004082:	f107 030c 	add.w	r3, r7, #12
 8004086:	461a      	mov	r2, r3
 8004088:	21f8      	movs	r1, #248	@ 0xf8
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f004 f98c 	bl	80083a8 <VL53L0X_RdWord>
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	461a      	mov	r2, r3
 80040a2:	2104      	movs	r1, #4
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f004 f9b5 	bl	8008414 <VL53L0X_RdDWord>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80040b6:	89bb      	ldrh	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	89ba      	ldrh	r2, [r7, #12]
 80040c0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7f1b      	ldrb	r3, [r3, #28]
 80040ee:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	7bba      	ldrb	r2, [r7, #14]
 80040f4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b086      	sub	sp, #24
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004110:	2300      	movs	r3, #0
 8004112:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004114:	f107 030e 	add.w	r3, r7, #14
 8004118:	461a      	mov	r2, r3
 800411a:	2120      	movs	r1, #32
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f004 f943 	bl	80083a8 <VL53L0X_RdWord>
 8004122:	4603      	mov	r3, r0
 8004124:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d118      	bne.n	8004160 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800412e:	89fb      	ldrh	r3, [r7, #14]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
 8004146:	e00b      	b.n	8004160 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004148:	89fb      	ldrh	r3, [r7, #14]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004160:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800417c:	2300      	movs	r3, #0
 800417e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d902      	bls.n	8004198 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004192:	23fc      	movs	r3, #252	@ 0xfc
 8004194:	75fb      	strb	r3, [r7, #23]
 8004196:	e05b      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73bb      	strb	r3, [r7, #14]
 80041aa:	e00a      	b.n	80041c2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	330c      	adds	r3, #12
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d841      	bhi.n	800424c <VL53L0X_SetLimitCheckEnable+0xe0>
 80041c8:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <VL53L0X_SetLimitCheckEnable+0x64>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041e9 	.word	0x080041e9
 80041d4:	080041f3 	.word	0x080041f3
 80041d8:	08004209 	.word	0x08004209
 80041dc:	08004213 	.word	0x08004213
 80041e0:	0800421d 	.word	0x0800421d
 80041e4:	08004235 	.word	0x08004235

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80041f0:	e02e      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	2144      	movs	r1, #68	@ 0x44
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f004 f969 	bl	80084d4 <VL53L0X_WrWord>
 8004202:	4603      	mov	r3, r0
 8004204:	75fb      	strb	r3, [r7, #23]

			break;
 8004206:	e023      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004210:	e01e      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800421a:	e019      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004222:	7b7b      	ldrb	r3, [r7, #13]
 8004224:	22fe      	movs	r2, #254	@ 0xfe
 8004226:	2160      	movs	r1, #96	@ 0x60
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f004 f97d 	bl	8008528 <VL53L0X_UpdateByte>
 800422e:	4603      	mov	r3, r0
 8004230:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004232:	e00d      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800423a:	7b7b      	ldrb	r3, [r7, #13]
 800423c:	22ef      	movs	r2, #239	@ 0xef
 800423e:	2160      	movs	r1, #96	@ 0x60
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f004 f971 	bl	8008528 <VL53L0X_UpdateByte>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800424a:	e001      	b.n	8004250 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800424c:	23fc      	movs	r3, #252	@ 0xfc
 800424e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004258:	787b      	ldrb	r3, [r7, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4413      	add	r3, r2
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800426a:	e005      	b.n	8004278 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	460b      	mov	r3, r1
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d905      	bls.n	80042a8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800429c:	23fc      	movs	r3, #252	@ 0xfc
 800429e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e008      	b.n	80042ba <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80042a8:	897b      	ldrh	r3, [r7, #10]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042b2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	7dba      	ldrb	r2, [r7, #22]
 80042b8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	460b      	mov	r3, r1
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042e8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80042ea:	7dbb      	ldrb	r3, [r7, #22]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042f0:	897b      	ldrh	r3, [r7, #10]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	330c      	adds	r3, #12
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	e040      	b.n	8004382 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004300:	897b      	ldrh	r3, [r7, #10]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d830      	bhi.n	8004368 <VL53L0X_SetLimitCheckValue+0x9c>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <VL53L0X_SetLimitCheckValue+0x40>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004325 	.word	0x08004325
 8004310:	0800432d 	.word	0x0800432d
 8004314:	08004343 	.word	0x08004343
 8004318:	0800434b 	.word	0x0800434b
 800431c:	08004353 	.word	0x08004353
 8004320:	08004353 	.word	0x08004353

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800432a:	e01f      	b.n	800436c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	2144      	movs	r1, #68	@ 0x44
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f004 f8cc 	bl	80084d4 <VL53L0X_WrWord>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004340:	e014      	b.n	800436c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004348:	e010      	b.n	800436c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004350:	e00c      	b.n	800436c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	2164      	movs	r1, #100	@ 0x64
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f004 f8b9 	bl	80084d4 <VL53L0X_WrWord>
 8004362:	4603      	mov	r3, r0
 8004364:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004366:	e001      	b.n	800436c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004368:	23fc      	movs	r3, #252	@ 0xfc
 800436a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800436c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004374:	897b      	ldrh	r3, [r7, #10]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	330c      	adds	r3, #12
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop

08004390 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	460b      	mov	r3, r1
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800439e:	2300      	movs	r3, #0
 80043a0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d847      	bhi.n	800443c <VL53L0X_GetLimitCheckValue+0xac>
 80043ac:	a201      	add	r2, pc, #4	@ (adr r2, 80043b4 <VL53L0X_GetLimitCheckValue+0x24>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043cd 	.word	0x080043cd
 80043b8:	080043d9 	.word	0x080043d9
 80043bc:	080043ff 	.word	0x080043ff
 80043c0:	0800440b 	.word	0x0800440b
 80043c4:	08004417 	.word	0x08004417
 80043c8:	08004417 	.word	0x08004417

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	77bb      	strb	r3, [r7, #30]
		break;
 80043d6:	e033      	b.n	8004440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80043d8:	f107 0316 	add.w	r3, r7, #22
 80043dc:	461a      	mov	r2, r3
 80043de:	2144      	movs	r1, #68	@ 0x44
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f003 ffe1 	bl	80083a8 <VL53L0X_RdWord>
 80043e6:	4603      	mov	r3, r0
 80043e8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80043ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80043f2:	8afb      	ldrh	r3, [r7, #22]
 80043f4:	025b      	lsls	r3, r3, #9
 80043f6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	77bb      	strb	r3, [r7, #30]
		break;
 80043fc:	e020      	b.n	8004440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004402:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	77bb      	strb	r3, [r7, #30]
		break;
 8004408:	e01a      	b.n	8004440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	77bb      	strb	r3, [r7, #30]
		break;
 8004414:	e014      	b.n	8004440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004416:	f107 0316 	add.w	r3, r7, #22
 800441a:	461a      	mov	r2, r3
 800441c:	2164      	movs	r1, #100	@ 0x64
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f003 ffc2 	bl	80083a8 <VL53L0X_RdWord>
 8004424:	4603      	mov	r3, r0
 8004426:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004428:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	025b      	lsls	r3, r3, #9
 8004434:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	77bb      	strb	r3, [r7, #30]
		break;
 800443a:	e001      	b.n	8004440 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800443c:	23fc      	movs	r3, #252	@ 0xfc
 800443e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004440:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d12a      	bne.n	800449e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004448:	7fbb      	ldrb	r3, [r7, #30]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d124      	bne.n	8004498 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d110      	bne.n	8004476 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004454:	897b      	ldrh	r3, [r7, #10]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	330c      	adds	r3, #12
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004474:	e013      	b.n	800449e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800447c:	897b      	ldrh	r3, [r7, #10]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	330c      	adds	r3, #12
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004496:	e002      	b.n	800449e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800449e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80044ba:	f107 030e 	add.w	r3, r7, #14
 80044be:	461a      	mov	r2, r3
 80044c0:	2101      	movs	r1, #1
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f003 fee9 	bl	800829a <VL53L0X_RdByte>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80044cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10e      	bne.n	80044f2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80044d4:	7bba      	ldrb	r2, [r7, #14]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 80044dc:	7bbb      	ldrb	r3, [r7, #14]
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da03      	bge.n	80044ec <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80044f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800451c:	f107 030e 	add.w	r3, r7, #14
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fb94 	bl	8003c50 <VL53L0X_GetDeviceMode>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800452c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f898 	bl	8004670 <VL53L0X_StartMeasurement>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fafd 	bl	8005b4c <VL53L0X_measurement_poll_for_completion>
 8004552:	4603      	mov	r3, r0
 8004554:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800455e:	7bbb      	ldrb	r3, [r7, #14]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2203      	movs	r2, #3
 8004568:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800456c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004588:	2301      	movs	r3, #1
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f001 fa9f 	bl	8005ad2 <VL53L0X_perform_ref_calibration>
 8004594:	4603      	mov	r3, r0
 8004596:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80045ba:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80045bc:	7dbb      	ldrb	r3, [r7, #22]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d005      	beq.n	80045ce <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80045c2:	7dbb      	ldrb	r3, [r7, #22]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d002      	beq.n	80045ce <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80045c8:	7dbb      	ldrb	r3, [r7, #22]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d147      	bne.n	800465e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80045ce:	f107 030c 	add.w	r3, r7, #12
 80045d2:	f107 0210 	add.w	r2, r7, #16
 80045d6:	2101      	movs	r1, #1
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb83 	bl	8004ce4 <VL53L0X_GetInterruptThresholds>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80045e8:	d803      	bhi.n	80045f2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80045ea:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80045ec:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80045f0:	d935      	bls.n	800465e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80045f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d131      	bne.n	800465e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004600:	491a      	ldr	r1, [pc, #104]	@ (800466c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f002 ff12 	bl	800742c <VL53L0X_load_tuning_settings>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]
 800460c:	e027      	b.n	800465e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800460e:	2204      	movs	r2, #4
 8004610:	21ff      	movs	r1, #255	@ 0xff
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f003 ff3a 	bl	800848c <VL53L0X_WrByte>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	4313      	orrs	r3, r2
 8004620:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004622:	2200      	movs	r2, #0
 8004624:	2170      	movs	r1, #112	@ 0x70
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f003 ff30 	bl	800848c <VL53L0X_WrByte>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	4313      	orrs	r3, r2
 8004634:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004636:	2200      	movs	r2, #0
 8004638:	21ff      	movs	r1, #255	@ 0xff
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f003 ff26 	bl	800848c <VL53L0X_WrByte>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	4313      	orrs	r3, r2
 8004648:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800464a:	2200      	movs	r2, #0
 800464c:	2180      	movs	r1, #128	@ 0x80
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f003 ff1c 	bl	800848c <VL53L0X_WrByte>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	4313      	orrs	r3, r2
 800465c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800465e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000284 	.word	0x20000284

08004670 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004678:	2300      	movs	r3, #0
 800467a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004680:	f107 030e 	add.w	r3, r7, #14
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff fae2 	bl	8003c50 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 800468c:	7bbb      	ldrb	r3, [r7, #14]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d052      	beq.n	8004738 <VL53L0X_StartMeasurement+0xc8>
 8004692:	2b03      	cmp	r3, #3
 8004694:	dc6a      	bgt.n	800476c <VL53L0X_StartMeasurement+0xfc>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <VL53L0X_StartMeasurement+0x30>
 800469a:	2b01      	cmp	r3, #1
 800469c:	d032      	beq.n	8004704 <VL53L0X_StartMeasurement+0x94>
 800469e:	e065      	b.n	800476c <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80046a0:	2201      	movs	r2, #1
 80046a2:	2100      	movs	r1, #0
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f003 fef1 	bl	800848c <VL53L0X_WrByte>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80046b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d15b      	bne.n	8004772 <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 80046c4:	f107 030d 	add.w	r3, r7, #13
 80046c8:	461a      	mov	r2, r3
 80046ca:	2100      	movs	r1, #0
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f003 fde4 	bl	800829a <VL53L0X_RdByte>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3301      	adds	r3, #1
 80046da:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80046dc:	7b7a      	ldrb	r2, [r7, #13]
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d106      	bne.n	80046f8 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 80046ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80046f6:	d9e2      	bls.n	80046be <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80046fc:	d939      	bls.n	8004772 <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 80046fe:	23f9      	movs	r3, #249	@ 0xf9
 8004700:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004702:	e036      	b.n	8004772 <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800470c:	2101      	movs	r1, #1
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff48 	bl	80045a4 <VL53L0X_CheckAndLoadInterruptSettings>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004718:	2202      	movs	r2, #2
 800471a:	2100      	movs	r1, #0
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f003 feb5 	bl	800848c <VL53L0X_WrByte>
 8004722:	4603      	mov	r3, r0
 8004724:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004726:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d123      	bne.n	8004776 <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8004736:	e01e      	b.n	8004776 <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004740:	2101      	movs	r1, #1
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff2e 	bl	80045a4 <VL53L0X_CheckAndLoadInterruptSettings>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800474c:	2204      	movs	r2, #4
 800474e:	2100      	movs	r1, #0
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f003 fe9b 	bl	800848c <VL53L0X_WrByte>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800475a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2204      	movs	r2, #4
 8004766:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800476a:	e006      	b.n	800477a <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800476c:	23f8      	movs	r3, #248	@ 0xf8
 800476e:	75fb      	strb	r3, [r7, #23]
 8004770:	e004      	b.n	800477c <VL53L0X_StartMeasurement+0x10c>
		break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <VL53L0X_StartMeasurement+0x10c>
		break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <VL53L0X_StartMeasurement+0x10c>
		break;
 800477a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800477c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800479c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800479e:	7bbb      	ldrb	r3, [r7, #14]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d112      	bne.n	80047ca <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80047a4:	f107 0308 	add.w	r3, r7, #8
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb0e 	bl	8004dcc <VL53L0X_GetInterruptMaskStatus>
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d103      	bne.n	80047c2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e01c      	b.n	80047fc <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e018      	b.n	80047fc <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80047ca:	f107 030d 	add.w	r3, r7, #13
 80047ce:	461a      	mov	r2, r3
 80047d0:	2114      	movs	r1, #20
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f003 fd61 	bl	800829a <VL53L0X_RdByte>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80047dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80047e4:	7b7b      	ldrb	r3, [r7, #13]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e002      	b.n	80047fc <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004808:	b5b0      	push	{r4, r5, r7, lr}
 800480a:	b096      	sub	sp, #88	@ 0x58
 800480c:	af02      	add	r7, sp, #8
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
 8004814:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004818:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800481c:	230c      	movs	r3, #12
 800481e:	2114      	movs	r1, #20
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f003 fd95 	bl	8008350 <VL53L0X_ReadMulti>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800482c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 80c8 	bne.w	80049c6 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2200      	movs	r2, #0
 800483a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004842:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800484e:	4413      	add	r3, r2
 8004850:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800485a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004866:	4413      	add	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004872:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004874:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	b29b      	uxth	r3, r3
 800487c:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8004880:	4413      	add	r3, r2
 8004882:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004886:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800488a:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004890:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	b29b      	uxth	r3, r3
 8004898:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800489c:	4413      	add	r3, r2
 800489e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80048a8:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80048aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8b3 314e 	ldrh.w	r3, [r3, #334]	@ 0x14e
 80048b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80048c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80048c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80048c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048ca:	d046      	beq.n	800495a <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80048cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80048ce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80048da:	4a58      	ldr	r2, [pc, #352]	@ (8004a3c <VL53L0X_GetRangingMeasurementData+0x234>)
 80048dc:	fb82 1203 	smull	r1, r2, r2, r3
 80048e0:	1192      	asrs	r2, r2, #6
 80048e2:	17db      	asrs	r3, r3, #31
 80048e4:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80048e6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7f1b      	ldrb	r3, [r3, #28]
 80048f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80048f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d02c      	beq.n	800495a <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004900:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004902:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	121a      	asrs	r2, r3, #8
					<= 0) {
 800490c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800490e:	429a      	cmp	r2, r3
 8004910:	d10d      	bne.n	800492e <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8004912:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800491a:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800491e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004922:	e016      	b.n	8004952 <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8004924:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8004928:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800492c:	e011      	b.n	8004952 <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800492e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004932:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004934:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004938:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800493a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800493e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004942:	121b      	asrs	r3, r3, #8
 8004944:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004948:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800494e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004952:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004956:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800495a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004962:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800496e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004972:	b2db      	uxtb	r3, r3
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	75da      	strb	r2, [r3, #23]
 800497c:	e006      	b.n	800498c <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004984:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2200      	movs	r2, #0
 800498a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800498c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004990:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004994:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	4613      	mov	r3, r2
 80049a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f003 f9a4 	bl	8007cf0 <VL53L0X_get_pal_range_status>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80049b6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80049be:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049c6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d12f      	bne.n	8004a2e <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f107 040c 	add.w	r4, r7, #12
 80049d4:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 80049d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80049e8:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80049f6:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80049fc:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004a02:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004a08:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004a0e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004a14:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8004a1e:	f107 050c 	add.w	r5, r7, #12
 8004a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a2e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3750      	adds	r7, #80	@ 0x50
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	10624dd3 	.word	0x10624dd3

08004a40 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff f8d1 	bl	8003bf8 <VL53L0X_SetDeviceMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d104      	bne.n	8004a6c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fd54 	bl	8004510 <VL53L0X_PerformSingleMeasurement>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff fec6 	bl	8004808 <VL53L0X_GetRangingMeasurementData>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f95e 	bl	8004d4c <VL53L0X_ClearInterruptMask>
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	70fb      	strb	r3, [r7, #3]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70bb      	strb	r3, [r7, #2]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004ac4:	23f6      	movs	r3, #246	@ 0xf6
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e105      	b.n	8004cd6 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004aca:	78bb      	ldrb	r3, [r7, #2]
 8004acc:	2b14      	cmp	r3, #20
 8004ace:	d110      	bne.n	8004af2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004ad0:	7e3b      	ldrb	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	73bb      	strb	r3, [r7, #14]
 8004ada:	e001      	b.n	8004ae0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004ae0:	7bbb      	ldrb	r3, [r7, #14]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2184      	movs	r1, #132	@ 0x84
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f003 fcd0 	bl	800848c <VL53L0X_WrByte>
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e0f1      	b.n	8004cd6 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004af2:	78bb      	ldrb	r3, [r7, #2]
 8004af4:	2b15      	cmp	r3, #21
 8004af6:	f040 8097 	bne.w	8004c28 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004afa:	2201      	movs	r2, #1
 8004afc:	21ff      	movs	r1, #255	@ 0xff
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f003 fcc4 	bl	800848c <VL53L0X_WrByte>
 8004b04:	4603      	mov	r3, r0
 8004b06:	461a      	mov	r2, r3
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f003 fcba 	bl	800848c <VL53L0X_WrByte>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004b22:	2200      	movs	r2, #0
 8004b24:	21ff      	movs	r1, #255	@ 0xff
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f003 fcb0 	bl	800848c <VL53L0X_WrByte>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b36:	2201      	movs	r2, #1
 8004b38:	2180      	movs	r1, #128	@ 0x80
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f003 fca6 	bl	800848c <VL53L0X_WrByte>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	2185      	movs	r1, #133	@ 0x85
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f003 fc9c 	bl	800848c <VL53L0X_WrByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004b5e:	2204      	movs	r2, #4
 8004b60:	21ff      	movs	r1, #255	@ 0xff
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f003 fc92 	bl	800848c <VL53L0X_WrByte>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004b72:	2200      	movs	r2, #0
 8004b74:	21cd      	movs	r1, #205	@ 0xcd
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f003 fc88 	bl	800848c <VL53L0X_WrByte>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004b86:	2211      	movs	r2, #17
 8004b88:	21cc      	movs	r1, #204	@ 0xcc
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f003 fc7e 	bl	800848c <VL53L0X_WrByte>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	21ff      	movs	r1, #255	@ 0xff
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f003 fc74 	bl	800848c <VL53L0X_WrByte>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	21be      	movs	r1, #190	@ 0xbe
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f003 fc6a 	bl	800848c <VL53L0X_WrByte>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004bc2:	2206      	movs	r2, #6
 8004bc4:	21ff      	movs	r1, #255	@ 0xff
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f003 fc60 	bl	800848c <VL53L0X_WrByte>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004bd6:	2209      	movs	r2, #9
 8004bd8:	21cc      	movs	r1, #204	@ 0xcc
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f003 fc56 	bl	800848c <VL53L0X_WrByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004bea:	2200      	movs	r2, #0
 8004bec:	21ff      	movs	r1, #255	@ 0xff
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f003 fc4c 	bl	800848c <VL53L0X_WrByte>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004bfe:	2201      	movs	r2, #1
 8004c00:	21ff      	movs	r1, #255	@ 0xff
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f003 fc42 	bl	800848c <VL53L0X_WrByte>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c12:	2200      	movs	r2, #0
 8004c14:	2100      	movs	r1, #0
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f003 fc38 	bl	800848c <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	e056      	b.n	8004cd6 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d120      	bne.n	8004c72 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004c30:	787b      	ldrb	r3, [r7, #1]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d81b      	bhi.n	8004c6e <VL53L0X_SetGpioConfig+0x1ce>
 8004c36:	a201      	add	r2, pc, #4	@ (adr r2, 8004c3c <VL53L0X_SetGpioConfig+0x19c>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c51 	.word	0x08004c51
 8004c40:	08004c57 	.word	0x08004c57
 8004c44:	08004c5d 	.word	0x08004c5d
 8004c48:	08004c63 	.word	0x08004c63
 8004c4c:	08004c69 	.word	0x08004c69
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73bb      	strb	r3, [r7, #14]
				break;
 8004c54:	e00d      	b.n	8004c72 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73bb      	strb	r3, [r7, #14]
				break;
 8004c5a:	e00a      	b.n	8004c72 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	73bb      	strb	r3, [r7, #14]
				break;
 8004c60:	e007      	b.n	8004c72 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004c62:	2303      	movs	r3, #3
 8004c64:	73bb      	strb	r3, [r7, #14]
				break;
 8004c66:	e004      	b.n	8004c72 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004c68:	2304      	movs	r3, #4
 8004c6a:	73bb      	strb	r3, [r7, #14]
				break;
 8004c6c:	e001      	b.n	8004c72 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004c6e:	23f5      	movs	r3, #245	@ 0xf5
 8004c70:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004c7a:	7bbb      	ldrb	r3, [r7, #14]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	210a      	movs	r1, #10
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f003 fc03 	bl	800848c <VL53L0X_WrByte>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10f      	bne.n	8004cb2 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004c92:	7e3b      	ldrb	r3, [r7, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73bb      	strb	r3, [r7, #14]
 8004c9c:	e001      	b.n	8004ca2 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004ca2:	7bbb      	ldrb	r3, [r7, #14]
 8004ca4:	22ef      	movs	r2, #239	@ 0xef
 8004ca6:	2184      	movs	r1, #132	@ 0x84
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f003 fc3d 	bl	8008528 <VL53L0X_UpdateByte>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	787a      	ldrb	r2, [r7, #1]
 8004cbe:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f83d 	bl	8004d4c <VL53L0X_ClearInterruptMask>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop

08004ce4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	210e      	movs	r1, #14
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f003 fb51 	bl	80083a8 <VL53L0X_RdWord>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004d0a:	8abb      	ldrh	r3, [r7, #20]
 8004d0c:	045a      	lsls	r2, r3, #17
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <VL53L0X_GetInterruptThresholds+0x64>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10e      	bne.n	8004d3c <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004d1e:	f107 0314 	add.w	r3, r7, #20
 8004d22:	461a      	mov	r2, r3
 8004d24:	210c      	movs	r1, #12
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f003 fb3e 	bl	80083a8 <VL53L0X_RdWord>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004d30:	8abb      	ldrh	r3, [r7, #20]
 8004d32:	045a      	lsls	r2, r3, #17
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <VL53L0X_GetInterruptThresholds+0x64>)
 8004d36:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	1ffe0000 	.word	0x1ffe0000

08004d4c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004d5e:	2201      	movs	r2, #1
 8004d60:	210b      	movs	r1, #11
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f003 fb92 	bl	800848c <VL53L0X_WrByte>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	210b      	movs	r1, #11
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f003 fb8b 	bl	800848c <VL53L0X_WrByte>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004d80:	f107 030d 	add.w	r3, r7, #13
 8004d84:	461a      	mov	r2, r3
 8004d86:	2113      	movs	r1, #19
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f003 fa86 	bl	800829a <VL53L0X_RdByte>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004d98:	7bbb      	ldrb	r3, [r7, #14]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004d9e:	7b7b      	ldrb	r3, [r7, #13]
 8004da0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d006      	beq.n	8004db6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d803      	bhi.n	8004db6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0d3      	beq.n	8004d5e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004db6:	7bbb      	ldrb	r3, [r7, #14]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004dbc:	23f4      	movs	r3, #244	@ 0xf4
 8004dbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004dda:	f107 030e 	add.w	r3, r7, #14
 8004dde:	461a      	mov	r2, r3
 8004de0:	2113      	movs	r1, #19
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f003 fa59 	bl	800829a <VL53L0X_RdByte>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004dec:	7bbb      	ldrb	r3, [r7, #14]
 8004dee:	f003 0207 	and.w	r2, r3, #7
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	f003 0318 	and.w	r3, r3, #24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004e00:	23fa      	movs	r3, #250	@ 0xfa
 8004e02:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fa03 	bl	8005230 <VL53L0X_perform_ref_spad_management>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004e48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004e4c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e52:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004e54:	f107 0308 	add.w	r3, r7, #8
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2128      	movs	r1, #40	@ 0x28
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f003 faa3 	bl	80083a8 <VL53L0X_RdWord>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11e      	bne.n	8004eac <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004e6e:	893b      	ldrh	r3, [r7, #8]
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004e78:	893b      	ldrh	r3, [r7, #8]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	dd0b      	ble.n	8004e9c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004e84:	893a      	ldrh	r2, [r7, #8]
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
					* 250;
 8004e90:	23fa      	movs	r3, #250	@ 0xfa
 8004e92:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e007      	b.n	8004eac <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004e9c:	893b      	ldrh	r3, [r7, #8]
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	23fa      	movs	r3, #250	@ 0xfa
 8004ea4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b08b      	sub	sp, #44	@ 0x2c
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ede:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	fb01 f202 	mul.w	r2, r1, r2
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef6:	e030      	b.n	8004f5a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d11e      	bne.n	8004f4c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004f0e:	7ffa      	ldrb	r2, [r7, #31]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	fa42 f303 	asr.w	r3, r2, r3
 8004f16:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004f1c:	e016      	b.n	8004f4c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <get_next_good_spad+0x88>
				success = 1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	fb03 f202 	mul.w	r2, r3, r2
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	4413      	add	r3, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	601a      	str	r2, [r3, #0]
				break;
 8004f3e:	e009      	b.n	8004f54 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004f40:	7ffb      	ldrb	r3, [r7, #31]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3e4      	bcc.n	8004f1e <get_next_good_spad+0x66>
				coarseIndex++) {
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	3301      	adds	r3, #1
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d202      	bcs.n	8004f68 <get_next_good_spad+0xb0>
 8004f62:	7fbb      	ldrb	r3, [r7, #30]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0c7      	beq.n	8004ef8 <get_next_good_spad+0x40>
		}
	}
}
 8004f68:	bf00      	nop
 8004f6a:	372c      	adds	r7, #44	@ 0x2c
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004f86:	4a07      	ldr	r2, [pc, #28]	@ (8004fa4 <is_aperture+0x30>)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <is_aperture+0x22>
		isAperture = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	2000043c 	.word	0x2000043c

08004fa8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	@ 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004fb8:	2308      	movs	r3, #8
 8004fba:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fce:	69b9      	ldr	r1, [r7, #24]
 8004fd0:	fb01 f202 	mul.w	r2, r1, r2
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004fe0:	23ce      	movs	r3, #206	@ 0xce
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e010      	b.n	8005008 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b25a      	sxtb	r2, r3
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b259      	sxtb	r1, r3
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	b2ca      	uxtb	r2, r1
 8005006:	701a      	strb	r2, [r3, #0]

	return status;
 8005008:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3724      	adds	r7, #36	@ 0x24
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005022:	2306      	movs	r3, #6
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	21b0      	movs	r1, #176	@ 0xb0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f003 f961 	bl	80082f0 <VL53L0X_WriteMulti>
 800502e:	4603      	mov	r3, r0
 8005030:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005048:	2306      	movs	r3, #6
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	21b0      	movs	r1, #176	@ 0xb0
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f003 f97e 	bl	8008350 <VL53L0X_ReadMulti>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	@ 0x30
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	460b      	mov	r3, r1
 8005072:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005074:	2300      	movs	r3, #0
 8005076:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800507a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800507c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800507e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005080:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005082:	2300      	movs	r3, #0
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005086:	e02b      	b.n	80050e0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005088:	f107 031c 	add.w	r3, r7, #28
 800508c:	6a3a      	ldr	r2, [r7, #32]
 800508e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff11 	bl	8004eb8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d103      	bne.n	80050a6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800509e:	23ce      	movs	r3, #206	@ 0xce
 80050a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80050a4:	e020      	b.n	80050e8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ac:	4413      	add	r3, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ff60 	bl	8004f74 <is_aperture>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80050be:	23ce      	movs	r3, #206	@ 0xce
 80050c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80050c4:	e010      	b.n	80050e8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050ce:	6838      	ldr	r0, [r7, #0]
 80050d0:	f7ff ff6a 	bl	8004fa8 <enable_spad_bit>
		currentSpad++;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	3301      	adds	r3, #1
 80050d8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80050da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050dc:	3301      	adds	r3, #1
 80050de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d3cf      	bcc.n	8005088 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80050e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ea:	6a3a      	ldr	r2, [r7, #32]
 80050ec:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80050ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff8d 	bl	8005018 <set_ref_spad_map>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005104:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005108:	2b00      	cmp	r3, #0
 800510a:	d121      	bne.n	8005150 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	4619      	mov	r1, r3
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff93 	bl	800503e <get_ref_spad_map>
 8005118:	4603      	mov	r3, r0
 800511a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005122:	e011      	b.n	8005148 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	4413      	add	r3, r2
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	f107 0114 	add.w	r1, r7, #20
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	440b      	add	r3, r1
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d003      	beq.n	8005142 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800513a:	23ce      	movs	r3, #206	@ 0xce
 800513c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8005140:	e006      	b.n	8005150 <enable_ref_spads+0xec>
			}
			i++;
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	3301      	adds	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8005148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	429a      	cmp	r2, r3
 800514e:	d3e9      	bcc.n	8005124 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005150:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005154:	4618      	mov	r0, r3
 8005156:	3730      	adds	r7, #48	@ 0x30
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	@ 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800517c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005184:	22c0      	movs	r2, #192	@ 0xc0
 8005186:	2101      	movs	r1, #1
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f003 f97f 	bl	800848c <VL53L0X_WrByte>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005194:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005198:	2b00      	cmp	r3, #0
 800519a:	d108      	bne.n	80051ae <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800519c:	f107 0308 	add.w	r3, r7, #8
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fc4c 	bl	8004a40 <VL53L0X_PerformSingleRangingMeasurement>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80051ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80051b6:	2201      	movs	r2, #1
 80051b8:	21ff      	movs	r1, #255	@ 0xff
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f003 f966 	bl	800848c <VL53L0X_WrByte>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 80051c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d107      	bne.n	80051de <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	21b6      	movs	r1, #182	@ 0xb6
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f003 f8e8 	bl	80083a8 <VL53L0X_RdWord>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80051de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80051e6:	2200      	movs	r2, #0
 80051e8:	21ff      	movs	r1, #255	@ 0xff
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f003 f94e 	bl	800848c <VL53L0X_WrByte>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80051f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d112      	bne.n	8005224 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80051fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005202:	461a      	mov	r2, r3
 8005204:	2101      	movs	r1, #1
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f003 f940 	bl	800848c <VL53L0X_WrByte>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005212:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005216:	2b00      	cmp	r3, #0
 8005218:	d104      	bne.n	8005224 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005220:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 8005224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	@ 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b09d      	sub	sp, #116	@ 0x74
 8005234:	af06      	add	r7, sp, #24
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005242:	23b4      	movs	r3, #180	@ 0xb4
 8005244:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8005248:	2303      	movs	r3, #3
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800524c:	232c      	movs	r3, #44	@ 0x2c
 800524e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800525c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005260:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800526a:	2306      	movs	r3, #6
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8005294:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800529a:	e009      	b.n	80052b0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80052aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ac:	3301      	adds	r3, #1
 80052ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3f1      	bcc.n	800529c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80052b8:	2201      	movs	r2, #1
 80052ba:	21ff      	movs	r1, #255	@ 0xff
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f003 f8e5 	bl	800848c <VL53L0X_WrByte>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80052c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80052d0:	2200      	movs	r2, #0
 80052d2:	214f      	movs	r1, #79	@ 0x4f
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f003 f8d9 	bl	800848c <VL53L0X_WrByte>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80052e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d107      	bne.n	80052f8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80052e8:	222c      	movs	r2, #44	@ 0x2c
 80052ea:	214e      	movs	r1, #78	@ 0x4e
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f003 f8cd 	bl	800848c <VL53L0X_WrByte>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80052f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d107      	bne.n	8005310 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005300:	2200      	movs	r2, #0
 8005302:	21ff      	movs	r1, #255	@ 0xff
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f003 f8c1 	bl	800848c <VL53L0X_WrByte>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005310:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005318:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800531c:	461a      	mov	r2, r3
 800531e:	21b6      	movs	r1, #182	@ 0xb6
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f003 f8b3 	bl	800848c <VL53L0X_WrByte>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800532c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005330:	2b00      	cmp	r3, #0
 8005332:	d107      	bne.n	8005344 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8005334:	2200      	movs	r2, #0
 8005336:	2180      	movs	r1, #128	@ 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f003 f8a7 	bl	800848c <VL53L0X_WrByte>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8005344:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800534c:	f107 0210 	add.w	r2, r7, #16
 8005350:	f107 0111 	add.w	r1, r7, #17
 8005354:	2300      	movs	r3, #0
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fbbb 	bl	8005ad2 <VL53L0X_perform_ref_calibration>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005362:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005366:	2b00      	cmp	r3, #0
 8005368:	d121      	bne.n	80053ae <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800536e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005370:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8005376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005378:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8005386:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800538a:	f107 0218 	add.w	r2, r7, #24
 800538e:	9204      	str	r2, [sp, #16]
 8005390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005392:	9203      	str	r2, [sp, #12]
 8005394:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005396:	9202      	str	r2, [sp, #8]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4623      	mov	r3, r4
 80053a0:	4602      	mov	r2, r0
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fe5e 	bl	8005064 <enable_ref_spads>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80053ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d174      	bne.n	80054a0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 80053ba:	f107 0312 	add.w	r3, r7, #18
 80053be:	4619      	mov	r1, r3
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fecb 	bl	800515c <perform_ref_signal_measurement>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80053cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d161      	bne.n	8005498 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80053d4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80053d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80053d8:	429a      	cmp	r2, r3
 80053da:	d25d      	bcs.n	8005498 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80053dc:	2300      	movs	r3, #0
 80053de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e0:	e009      	b.n	80053f6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80053f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f2:	3301      	adds	r3, #1
 80053f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3f1      	bcc.n	80053e2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80053fe:	e002      	b.n	8005406 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005402:	3301      	adds	r3, #1
 8005404:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005406:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800540a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800540c:	4413      	add	r3, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fdb0 	bl	8004f74 <is_aperture>
 8005414:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <VL53L0X_perform_ref_spad_management+0x1f2>
 800541a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	429a      	cmp	r2, r3
 8005420:	d3ee      	bcc.n	8005400 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8005426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005428:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8005436:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800543a:	f107 0218 	add.w	r2, r7, #24
 800543e:	9204      	str	r2, [sp, #16]
 8005440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005442:	9203      	str	r2, [sp, #12]
 8005444:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005446:	9202      	str	r2, [sp, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4623      	mov	r3, r4
 8005450:	4602      	mov	r2, r0
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff fe06 	bl	8005064 <enable_ref_spads>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800545e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005462:	2b00      	cmp	r3, #0
 8005464:	d11b      	bne.n	800549e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800546a:	f107 0312 	add.w	r3, r7, #18
 800546e:	4619      	mov	r1, r3
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff fe73 	bl	800515c <perform_ref_signal_measurement>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800547c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005484:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005486:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005488:	429a      	cmp	r2, r3
 800548a:	d208      	bcs.n	800549e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005494:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005496:	e002      	b.n	800549e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549c:	e000      	b.n	80054a0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800549e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80054a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 80af 	bne.w	8005608 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80054aa:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80054ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80054ae:	429a      	cmp	r2, r3
 80054b0:	f240 80aa 	bls.w	8005608 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80054b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 80054ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 80054c4:	f107 031c 	add.w	r3, r7, #28
 80054c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ca:	4618      	mov	r0, r3
 80054cc:	f017 fb13 	bl	801caf6 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80054d0:	8a7b      	ldrh	r3, [r7, #18]
 80054d2:	461a      	mov	r2, r3
 80054d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfb8      	it	lt
 80054dc:	425b      	neglt	r3, r3
 80054de:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 80054e6:	e086      	b.n	80055f6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 80054ee:	f107 0314 	add.w	r3, r7, #20
 80054f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f6:	f7ff fcdf 	bl	8004eb8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d103      	bne.n	800550a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005502:	23ce      	movs	r3, #206	@ 0xce
 8005504:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8005508:	e07e      	b.n	8005608 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	3301      	adds	r3, #1
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005510:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fd2b 	bl	8004f74 <is_aperture>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005528:	23ce      	movs	r3, #206	@ 0xce
 800552a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800552e:	e06b      	b.n	8005608 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800553a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800553c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fd32 	bl	8004fa8 <enable_spad_bit>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800554a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005554:	3301      	adds	r3, #1
 8005556:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800555e:	4619      	mov	r1, r3
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fd59 	bl	8005018 <set_ref_spad_map>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800556c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005570:	2b00      	cmp	r3, #0
 8005572:	d146      	bne.n	8005602 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005574:	f107 0312 	add.w	r3, r7, #18
 8005578:	4619      	mov	r1, r3
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff fdee 	bl	800515c <perform_ref_signal_measurement>
 8005580:	4603      	mov	r3, r0
 8005582:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005586:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800558a:	2b00      	cmp	r3, #0
 800558c:	d13b      	bne.n	8005606 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800558e:	8a7b      	ldrh	r3, [r7, #18]
 8005590:	461a      	mov	r2, r3
 8005592:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	bfb8      	it	lt
 800559a:	425b      	neglt	r3, r3
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800559e:	8a7b      	ldrh	r3, [r7, #18]
 80055a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d21c      	bcs.n	80055e0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d914      	bls.n	80055d8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80055ae:	f107 031c 	add.w	r3, r7, #28
 80055b2:	4619      	mov	r1, r3
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff fd2f 	bl	8005018 <set_ref_spad_map>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 80055c6:	f107 011c 	add.w	r1, r7, #28
 80055ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055cc:	4618      	mov	r0, r3
 80055ce:	f017 fa92 	bl	801caf6 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80055d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d4:	3b01      	subs	r3, #1
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e00a      	b.n	80055f6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 80055ea:	f107 031c 	add.w	r3, r7, #28
 80055ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f0:	4618      	mov	r0, r3
 80055f2:	f017 fa80 	bl	801caf6 <memcpy>
		while (!complete) {
 80055f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f43f af74 	beq.w	80054e8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005600:	e002      	b.n	8005608 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005606:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005608:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800560c:	2b00      	cmp	r3, #0
 800560e:	d115      	bne.n	800563c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005614:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800561c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800563c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8005640:	4618      	mov	r0, r3
 8005642:	375c      	adds	r7, #92	@ 0x5c
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}

08005648 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b093      	sub	sp, #76	@ 0x4c
 800564c:	af06      	add	r7, sp, #24
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005656:	2300      	movs	r3, #0
 8005658:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8005660:	23b4      	movs	r3, #180	@ 0xb4
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8005666:	2306      	movs	r3, #6
 8005668:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800566a:	232c      	movs	r3, #44	@ 0x2c
 800566c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800566e:	2201      	movs	r2, #1
 8005670:	21ff      	movs	r1, #255	@ 0xff
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f002 ff0a 	bl	800848c <VL53L0X_WrByte>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800567e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005686:	2200      	movs	r2, #0
 8005688:	214f      	movs	r1, #79	@ 0x4f
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f002 fefe 	bl	800848c <VL53L0X_WrByte>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005696:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800569e:	222c      	movs	r2, #44	@ 0x2c
 80056a0:	214e      	movs	r1, #78	@ 0x4e
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f002 fef2 	bl	800848c <VL53L0X_WrByte>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80056ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d107      	bne.n	80056c6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80056b6:	2200      	movs	r2, #0
 80056b8:	21ff      	movs	r1, #255	@ 0xff
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f002 fee6 	bl	800848c <VL53L0X_WrByte>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80056c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80056ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056d2:	461a      	mov	r2, r3
 80056d4:	21b6      	movs	r1, #182	@ 0xb6
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f002 fed8 	bl	800848c <VL53L0X_WrByte>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e6:	e009      	b.n	80056fc <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	3301      	adds	r3, #1
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	429a      	cmp	r2, r3
 8005702:	d3f1      	bcc.n	80056e8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d011      	beq.n	800572e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800570a:	e002      	b.n	8005712 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	3301      	adds	r3, #1
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005712:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	4413      	add	r3, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fc2a 	bl	8004f74 <is_aperture>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <VL53L0X_set_reference_spads+0xe6>
 8005726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	429a      	cmp	r2, r3
 800572c:	d3ee      	bcc.n	800570c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800573a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800573e:	79f9      	ldrb	r1, [r7, #7]
 8005740:	f107 0214 	add.w	r2, r7, #20
 8005744:	9204      	str	r2, [sp, #16]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	9203      	str	r2, [sp, #12]
 800574a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800574c:	9202      	str	r2, [sp, #8]
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4623      	mov	r3, r4
 8005756:	4602      	mov	r2, r0
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff fc83 	bl	8005064 <enable_ref_spads>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005764:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10c      	bne.n	8005786 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	79fa      	ldrb	r2, [r7, #7]
 8005782:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005786:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800578a:	4618      	mov	r0, r3
 800578c:	3734      	adds	r7, #52	@ 0x34
 800578e:	46bd      	mov	sp, r7
 8005790:	bd90      	pop	{r4, r7, pc}

08005792 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f002 fe68 	bl	800848c <VL53L0X_WrByte>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80057c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9bf 	bl	8005b4c <VL53L0X_measurement_poll_for_completion>
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fab5 	bl	8004d4c <VL53L0X_ClearInterruptMask>
 80057e2:	4603      	mov	r3, r0
 80057e4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80057ee:	2200      	movs	r2, #0
 80057f0:	2100      	movs	r1, #0
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f002 fe4a 	bl	800848c <VL53L0X_WrByte>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73fb      	strb	r3, [r7, #15]

	return Status;
 80057fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	461a      	mov	r2, r3
 8005816:	4603      	mov	r3, r0
 8005818:	70fb      	strb	r3, [r7, #3]
 800581a:	460b      	mov	r3, r1
 800581c:	70bb      	strb	r3, [r7, #2]
 800581e:	4613      	mov	r3, r2
 8005820:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800582a:	2201      	movs	r2, #1
 800582c:	21ff      	movs	r1, #255	@ 0xff
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f002 fe2c 	bl	800848c <VL53L0X_WrByte>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	4313      	orrs	r3, r2
 800583c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800583e:	2200      	movs	r2, #0
 8005840:	2100      	movs	r1, #0
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f002 fe22 	bl	800848c <VL53L0X_WrByte>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	4313      	orrs	r3, r2
 8005850:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005852:	2200      	movs	r2, #0
 8005854:	21ff      	movs	r1, #255	@ 0xff
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f002 fe18 	bl	800848c <VL53L0X_WrByte>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	4313      	orrs	r3, r2
 8005864:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01e      	beq.n	80058aa <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800586c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	21cb      	movs	r1, #203	@ 0xcb
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f002 fd0e 	bl	800829a <VL53L0X_RdByte>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	4313      	orrs	r3, r2
 8005886:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005888:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02a      	beq.n	80058e6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005890:	f107 030e 	add.w	r3, r7, #14
 8005894:	461a      	mov	r2, r3
 8005896:	21ee      	movs	r1, #238	@ 0xee
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f002 fcfe 	bl	800829a <VL53L0X_RdByte>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	73fb      	strb	r3, [r7, #15]
 80058a8:	e01d      	b.n	80058e6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80058aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80058b2:	78bb      	ldrb	r3, [r7, #2]
 80058b4:	461a      	mov	r2, r3
 80058b6:	21cb      	movs	r1, #203	@ 0xcb
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f002 fde7 	bl	800848c <VL53L0X_WrByte>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80058c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80058d0:	787b      	ldrb	r3, [r7, #1]
 80058d2:	2280      	movs	r2, #128	@ 0x80
 80058d4:	21ee      	movs	r1, #238	@ 0xee
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f002 fe26 	bl	8008528 <VL53L0X_UpdateByte>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058e6:	2201      	movs	r2, #1
 80058e8:	21ff      	movs	r1, #255	@ 0xff
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 fdce 	bl	800848c <VL53L0X_WrByte>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058fa:	2201      	movs	r2, #1
 80058fc:	2100      	movs	r1, #0
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f002 fdc4 	bl	800848c <VL53L0X_WrByte>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	4313      	orrs	r3, r2
 800590c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800590e:	2200      	movs	r2, #0
 8005910:	21ff      	movs	r1, #255	@ 0xff
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f002 fdba 	bl	800848c <VL53L0X_WrByte>
 8005918:	4603      	mov	r3, r0
 800591a:	461a      	mov	r2, r3
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	4313      	orrs	r3, r2
 8005920:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	b2da      	uxtb	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	701a      	strb	r2, [r3, #0]

	return Status;
 800592e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b08a      	sub	sp, #40	@ 0x28
 800593e:	af04      	add	r7, sp, #16
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	4611      	mov	r1, r2
 8005946:	461a      	mov	r2, r3
 8005948:	460b      	mov	r3, r1
 800594a:	71fb      	strb	r3, [r7, #7]
 800594c:	4613      	mov	r3, r2
 800594e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005964:	79bb      	ldrb	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005970:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005972:	2201      	movs	r2, #1
 8005974:	2101      	movs	r1, #1
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f002 fd88 	bl	800848c <VL53L0X_WrByte>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005988:	2140      	movs	r1, #64	@ 0x40
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff ff01 	bl	8005792 <VL53L0X_perform_single_ref_calibration>
 8005990:	4603      	mov	r3, r0
 8005992:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d115      	bne.n	80059c8 <VL53L0X_perform_vhv_calibration+0x8e>
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d112      	bne.n	80059c8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80059a2:	7d39      	ldrb	r1, [r7, #20]
 80059a4:	7d7a      	ldrb	r2, [r7, #21]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	2301      	movs	r3, #1
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	f107 0313 	add.w	r3, r7, #19
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	460b      	mov	r3, r1
 80059ba:	2101      	movs	r1, #1
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff ff23 	bl	8005808 <VL53L0X_ref_calibration_io>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75fb      	strb	r3, [r7, #23]
 80059c6:	e002      	b.n	80059ce <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80059ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d112      	bne.n	80059fc <VL53L0X_perform_vhv_calibration+0xc2>
 80059d6:	79bb      	ldrb	r3, [r7, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059dc:	7dbb      	ldrb	r3, [r7, #22]
 80059de:	461a      	mov	r2, r3
 80059e0:	2101      	movs	r1, #1
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f002 fd52 	bl	800848c <VL53L0X_WrByte>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80059ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	7dba      	ldrb	r2, [r7, #22]
 80059f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80059fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	@ 0x28
 8005a0c:	af04      	add	r7, sp, #16
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4611      	mov	r1, r2
 8005a14:	461a      	mov	r2, r3
 8005a16:	460b      	mov	r3, r1
 8005a18:	71fb      	strb	r3, [r7, #7]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005a2e:	79bb      	ldrb	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005a3a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	2101      	movs	r1, #1
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f002 fd23 	bl	800848c <VL53L0X_WrByte>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d105      	bne.n	8005a5e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005a52:	2100      	movs	r1, #0
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff fe9c 	bl	8005792 <VL53L0X_perform_single_ref_calibration>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d115      	bne.n	8005a92 <VL53L0X_perform_phase_calibration+0x8a>
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d112      	bne.n	8005a92 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005a6c:	7d39      	ldrb	r1, [r7, #20]
 8005a6e:	7d7a      	ldrb	r2, [r7, #21]
 8005a70:	2301      	movs	r3, #1
 8005a72:	9303      	str	r3, [sp, #12]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9302      	str	r3, [sp, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f107 0313 	add.w	r3, r7, #19
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	460b      	mov	r3, r1
 8005a84:	2101      	movs	r1, #1
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff febe 	bl	8005808 <VL53L0X_ref_calibration_io>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]
 8005a90:	e002      	b.n	8005a98 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d112      	bne.n	8005ac6 <VL53L0X_perform_phase_calibration+0xbe>
 8005aa0:	79bb      	ldrb	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00f      	beq.n	8005ac6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005aa6:	7dbb      	ldrb	r3, [r7, #22]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2101      	movs	r1, #1
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f002 fced 	bl	800848c <VL53L0X_WrByte>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	7dba      	ldrb	r2, [r7, #22]
 8005ac2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005aee:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	2300      	movs	r3, #0
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ff1f 	bl	800593a <VL53L0X_perform_vhv_calibration>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005b00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d107      	bne.n	8005b18 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff7a 	bl	8005a08 <VL53L0X_perform_phase_calibration>
 8005b14:	4603      	mov	r3, r0
 8005b16:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10f      	bne.n	8005b40 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b20:	7dbb      	ldrb	r3, [r7, #22]
 8005b22:	461a      	mov	r2, r3
 8005b24:	2101      	movs	r1, #1
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f002 fcb0 	bl	800848c <VL53L0X_WrByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	7dba      	ldrb	r2, [r7, #22]
 8005b3c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8005b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005b60:	f107 030f 	add.w	r3, r7, #15
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fe fe0e 	bl	8004788 <VL53L0X_GetMeasurementDataReady>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10f      	bne.n	8005b98 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d00e      	beq.n	8005b9c <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3301      	adds	r3, #1
 8005b82:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b88:	d902      	bls.n	8005b90 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005b8a:	23f9      	movs	r3, #249	@ 0xf9
 8005b8c:	75fb      	strb	r3, [r7, #23]
			break;
 8005b8e:	e006      	b.n	8005b9e <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f002 fcfd 	bl	8008590 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005b96:	e7e3      	b.n	8005b60 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005b98:	bf00      	nop
 8005b9a:	e000      	b.n	8005b9e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8005b9c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005c02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c06:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005c08:	e002      	b.n	8005c10 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d8f8      	bhi.n	8005c0a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005c18:	e017      	b.n	8005c4a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4413      	add	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d30b      	bcc.n	8005c3e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e002      	b.n	8005c44 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	089b      	lsrs	r3, r3, #2
 8005c48:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e4      	bne.n	8005c1a <VL53L0X_isqrt+0x24>
	}

	return res;
 8005c50:	68fb      	ldr	r3, [r7, #12]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2183      	movs	r1, #131	@ 0x83
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f002 fc0c 	bl	800848c <VL53L0X_WrByte>
 8005c74:	4603      	mov	r3, r0
 8005c76:	461a      	mov	r2, r3
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11c      	bne.n	8005cc0 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005c8a:	f107 030f 	add.w	r3, r7, #15
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2183      	movs	r1, #131	@ 0x83
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f002 fb01 	bl	800829a <VL53L0X_RdByte>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <VL53L0X_device_read_strobe+0x58>
 8005ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cb4:	d9e9      	bls.n	8005c8a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2bc7      	cmp	r3, #199	@ 0xc7
 8005cba:	d901      	bls.n	8005cc0 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005cbc:	23f9      	movs	r3, #249	@ 0xf9
 8005cbe:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2183      	movs	r1, #131	@ 0x83
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f002 fbe1 	bl	800848c <VL53L0X_WrByte>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b098      	sub	sp, #96	@ 0x60
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005d10:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8005d14:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8005d28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d30:	2b07      	cmp	r3, #7
 8005d32:	f000 8408 	beq.w	8006546 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005d36:	2201      	movs	r2, #1
 8005d38:	2180      	movs	r1, #128	@ 0x80
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f002 fba6 	bl	800848c <VL53L0X_WrByte>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d4e:	2201      	movs	r2, #1
 8005d50:	21ff      	movs	r1, #255	@ 0xff
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f002 fb9a 	bl	800848c <VL53L0X_WrByte>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d66:	2200      	movs	r2, #0
 8005d68:	2100      	movs	r1, #0
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f002 fb8e 	bl	800848c <VL53L0X_WrByte>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005d7e:	2206      	movs	r2, #6
 8005d80:	21ff      	movs	r1, #255	@ 0xff
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f002 fb82 	bl	800848c <VL53L0X_WrByte>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005d96:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	2183      	movs	r1, #131	@ 0x83
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 fa7b 	bl	800829a <VL53L0X_RdByte>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005db2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005db6:	f043 0304 	orr.w	r3, r3, #4
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2183      	movs	r1, #131	@ 0x83
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f002 fb63 	bl	800848c <VL53L0X_WrByte>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	21ff      	movs	r1, #255	@ 0xff
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f002 fb57 	bl	800848c <VL53L0X_WrByte>
 8005dde:	4603      	mov	r3, r0
 8005de0:	461a      	mov	r2, r3
 8005de2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005dec:	2201      	movs	r2, #1
 8005dee:	2181      	movs	r1, #129	@ 0x81
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f002 fb4b 	bl	800848c <VL53L0X_WrByte>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f002 fbc3 	bl	8008590 <VL53L0X_PollingDelay>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2180      	movs	r1, #128	@ 0x80
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f002 fb35 	bl	800848c <VL53L0X_WrByte>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8098 	beq.w	8005f6c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005e3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e40:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8091 	bne.w	8005f6c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005e4a:	226b      	movs	r2, #107	@ 0x6b
 8005e4c:	2194      	movs	r1, #148	@ 0x94
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f002 fb1c 	bl	800848c <VL53L0X_WrByte>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fefb 	bl	8005c5e <VL53L0X_device_read_strobe>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005e76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2190      	movs	r1, #144	@ 0x90
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f002 fac8 	bl	8008414 <VL53L0X_RdDWord>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	0bdb      	lsrs	r3, r3, #15
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005eae:	2224      	movs	r2, #36	@ 0x24
 8005eb0:	2194      	movs	r1, #148	@ 0x94
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f002 faea 	bl	800848c <VL53L0X_WrByte>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fec9 	bl	8005c5e <VL53L0X_device_read_strobe>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005eda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2190      	movs	r1, #144	@ 0x90
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f002 fa96 	bl	8008414 <VL53L0X_RdDWord>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	0e1b      	lsrs	r3, r3, #24
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005f14:	2225      	movs	r2, #37	@ 0x25
 8005f16:	2194      	movs	r1, #148	@ 0x94
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f002 fab7 	bl	800848c <VL53L0X_WrByte>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	461a      	mov	r2, r3
 8005f22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fe96 	bl	8005c5e <VL53L0X_device_read_strobe>
 8005f32:	4603      	mov	r3, r0
 8005f34:	461a      	mov	r2, r3
 8005f36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005f44:	461a      	mov	r2, r3
 8005f46:	2190      	movs	r1, #144	@ 0x90
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 fa63 	bl	8008414 <VL53L0X_RdDWord>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	0e1b      	lsrs	r3, r3, #24
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8189 	beq.w	800628a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005f78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f7c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 8182 	bne.w	800628a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005f86:	2202      	movs	r2, #2
 8005f88:	2194      	movs	r1, #148	@ 0x94
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 fa7e 	bl	800848c <VL53L0X_WrByte>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fe5d 	bl	8005c5e <VL53L0X_device_read_strobe>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005fb2:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2190      	movs	r1, #144	@ 0x90
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f002 f96d 	bl	800829a <VL53L0X_RdByte>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005fce:	227b      	movs	r2, #123	@ 0x7b
 8005fd0:	2194      	movs	r1, #148	@ 0x94
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f002 fa5a 	bl	800848c <VL53L0X_WrByte>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fe39 	bl	8005c5e <VL53L0X_device_read_strobe>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005ffa:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8005ffe:	461a      	mov	r2, r3
 8006000:	2190      	movs	r1, #144	@ 0x90
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 f949 	bl	800829a <VL53L0X_RdByte>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006010:	4313      	orrs	r3, r2
 8006012:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006016:	2277      	movs	r2, #119	@ 0x77
 8006018:	2194      	movs	r1, #148	@ 0x94
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f002 fa36 	bl	800848c <VL53L0X_WrByte>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006028:	4313      	orrs	r3, r2
 800602a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe15 	bl	8005c5e <VL53L0X_device_read_strobe>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800603c:	4313      	orrs	r3, r2
 800603e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006042:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006046:	461a      	mov	r2, r3
 8006048:	2190      	movs	r1, #144	@ 0x90
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f002 f9e2 	bl	8008414 <VL53L0X_RdDWord>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006058:	4313      	orrs	r3, r2
 800605a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	0e5b      	lsrs	r3, r3, #25
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006068:	b2db      	uxtb	r3, r3
 800606a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	0c9b      	lsrs	r3, r3, #18
 8006070:	b2db      	uxtb	r3, r3
 8006072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006076:	b2db      	uxtb	r3, r3
 8006078:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	0adb      	lsrs	r3, r3, #11
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006084:	b2db      	uxtb	r3, r3
 8006086:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006092:	b2db      	uxtb	r3, r3
 8006094:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	b2db      	uxtb	r3, r3
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80060a8:	2278      	movs	r2, #120	@ 0x78
 80060aa:	2194      	movs	r1, #148	@ 0x94
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f002 f9ed 	bl	800848c <VL53L0X_WrByte>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fdcc 	bl	8005c5e <VL53L0X_device_read_strobe>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80060d8:	461a      	mov	r2, r3
 80060da:	2190      	movs	r1, #144	@ 0x90
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 f999 	bl	8008414 <VL53L0X_RdDWord>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	0f5b      	lsrs	r3, r3, #29
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060fa:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80060fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006100:	4413      	add	r3, r2
 8006102:	b2db      	uxtb	r3, r3
 8006104:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	0d9b      	lsrs	r3, r3, #22
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006110:	b2db      	uxtb	r3, r3
 8006112:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	0bdb      	lsrs	r3, r3, #15
 8006118:	b2db      	uxtb	r3, r3
 800611a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612c:	b2db      	uxtb	r3, r3
 800612e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800613a:	b2db      	uxtb	r3, r3
 800613c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	b2db      	uxtb	r3, r3
 8006142:	019b      	lsls	r3, r3, #6
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006150:	2279      	movs	r2, #121	@ 0x79
 8006152:	2194      	movs	r1, #148	@ 0x94
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f002 f999 	bl	800848c <VL53L0X_WrByte>
 800615a:	4603      	mov	r3, r0
 800615c:	461a      	mov	r2, r3
 800615e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006162:	4313      	orrs	r3, r2
 8006164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fd78 	bl	8005c5e <VL53L0X_device_read_strobe>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006176:	4313      	orrs	r3, r2
 8006178:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800617c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006180:	461a      	mov	r2, r3
 8006182:	2190      	movs	r1, #144	@ 0x90
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f002 f945 	bl	8008414 <VL53L0X_RdDWord>
 800618a:	4603      	mov	r3, r0
 800618c:	461a      	mov	r2, r3
 800618e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006192:	4313      	orrs	r3, r2
 8006194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	0e9b      	lsrs	r3, r3, #26
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80061a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80061a8:	4413      	add	r3, r2
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	0cdb      	lsrs	r3, r3, #19
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	0b1b      	lsrs	r3, r3, #12
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80061ea:	227a      	movs	r2, #122	@ 0x7a
 80061ec:	2194      	movs	r1, #148	@ 0x94
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f002 f94c 	bl	800848c <VL53L0X_WrByte>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fd2b 	bl	8005c5e <VL53L0X_device_read_strobe>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006210:	4313      	orrs	r3, r2
 8006212:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006216:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800621a:	461a      	mov	r2, r3
 800621c:	2190      	movs	r1, #144	@ 0x90
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f002 f8f8 	bl	8008414 <VL53L0X_RdDWord>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800622c:	4313      	orrs	r3, r2
 800622e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	0f9b      	lsrs	r3, r3, #30
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800623c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800623e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006242:	4413      	add	r3, r2
 8006244:	b2db      	uxtb	r3, r3
 8006246:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	0ddb      	lsrs	r3, r3, #23
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006252:	b2db      	uxtb	r3, r3
 8006254:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006260:	b2db      	uxtb	r3, r3
 8006262:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	0a5b      	lsrs	r3, r3, #9
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80f1 	beq.w	8006478 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006296:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800629a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f040 80ea 	bne.w	8006478 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80062a4:	227b      	movs	r2, #123	@ 0x7b
 80062a6:	2194      	movs	r1, #148	@ 0x94
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f002 f8ef 	bl	800848c <VL53L0X_WrByte>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fcce 	bl	8005c5e <VL53L0X_device_read_strobe>
 80062c2:	4603      	mov	r3, r0
 80062c4:	461a      	mov	r2, r3
 80062c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80062d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80062d4:	461a      	mov	r2, r3
 80062d6:	2190      	movs	r1, #144	@ 0x90
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f002 f89b 	bl	8008414 <VL53L0X_RdDWord>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80062ec:	227c      	movs	r2, #124	@ 0x7c
 80062ee:	2194      	movs	r1, #148	@ 0x94
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f002 f8cb 	bl	800848c <VL53L0X_WrByte>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80062fe:	4313      	orrs	r3, r2
 8006300:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fcaa 	bl	8005c5e <VL53L0X_device_read_strobe>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006312:	4313      	orrs	r3, r2
 8006314:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800631c:	461a      	mov	r2, r3
 800631e:	2190      	movs	r1, #144	@ 0x90
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f002 f877 	bl	8008414 <VL53L0X_RdDWord>
 8006326:	4603      	mov	r3, r0
 8006328:	461a      	mov	r2, r3
 800632a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800632e:	4313      	orrs	r3, r2
 8006330:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006334:	2273      	movs	r2, #115	@ 0x73
 8006336:	2194      	movs	r1, #148	@ 0x94
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f002 f8a7 	bl	800848c <VL53L0X_WrByte>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006346:	4313      	orrs	r3, r2
 8006348:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fc86 	bl	8005c5e <VL53L0X_device_read_strobe>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800635a:	4313      	orrs	r3, r2
 800635c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006360:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006364:	461a      	mov	r2, r3
 8006366:	2190      	movs	r1, #144	@ 0x90
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f002 f853 	bl	8008414 <VL53L0X_RdDWord>
 800636e:	4603      	mov	r3, r0
 8006370:	461a      	mov	r2, r3
 8006372:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006376:	4313      	orrs	r3, r2
 8006378:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006380:	b29b      	uxth	r3, r3
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006384:	2274      	movs	r2, #116	@ 0x74
 8006386:	2194      	movs	r1, #148	@ 0x94
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f002 f87f 	bl	800848c <VL53L0X_WrByte>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006396:	4313      	orrs	r3, r2
 8006398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fc5e 	bl	8005c5e <VL53L0X_device_read_strobe>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461a      	mov	r2, r3
 80063a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063b4:	461a      	mov	r2, r3
 80063b6:	2190      	movs	r1, #144	@ 0x90
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f002 f82b 	bl	8008414 <VL53L0X_RdDWord>
 80063be:	4603      	mov	r3, r0
 80063c0:	461a      	mov	r2, r3
 80063c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80063d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063d2:	4313      	orrs	r3, r2
 80063d4:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80063d6:	2275      	movs	r2, #117	@ 0x75
 80063d8:	2194      	movs	r1, #148	@ 0x94
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f002 f856 	bl	800848c <VL53L0X_WrByte>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fc35 	bl	8005c5e <VL53L0X_device_read_strobe>
 80063f4:	4603      	mov	r3, r0
 80063f6:	461a      	mov	r2, r3
 80063f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006402:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006406:	461a      	mov	r2, r3
 8006408:	2190      	movs	r1, #144	@ 0x90
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f002 f802 	bl	8008414 <VL53L0X_RdDWord>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006418:	4313      	orrs	r3, r2
 800641a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8006422:	b29b      	uxth	r3, r3
 8006424:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006426:	2276      	movs	r2, #118	@ 0x76
 8006428:	2194      	movs	r1, #148	@ 0x94
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 f82e 	bl	800848c <VL53L0X_WrByte>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006438:	4313      	orrs	r3, r2
 800643a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fc0d 	bl	8005c5e <VL53L0X_device_read_strobe>
 8006444:	4603      	mov	r3, r0
 8006446:	461a      	mov	r2, r3
 8006448:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800644c:	4313      	orrs	r3, r2
 800644e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006452:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006456:	461a      	mov	r2, r3
 8006458:	2190      	movs	r1, #144	@ 0x90
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 ffda 	bl	8008414 <VL53L0X_RdDWord>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006468:	4313      	orrs	r3, r2
 800646a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006472:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006474:	4313      	orrs	r3, r2
 8006476:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006478:	2200      	movs	r2, #0
 800647a:	2181      	movs	r1, #129	@ 0x81
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f002 f805 	bl	800848c <VL53L0X_WrByte>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800648a:	4313      	orrs	r3, r2
 800648c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006490:	2206      	movs	r2, #6
 8006492:	21ff      	movs	r1, #255	@ 0xff
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fff9 	bl	800848c <VL53L0X_WrByte>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80064a8:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 80064ac:	461a      	mov	r2, r3
 80064ae:	2183      	movs	r1, #131	@ 0x83
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fef2 	bl	800829a <VL53L0X_RdByte>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064be:	4313      	orrs	r3, r2
 80064c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80064c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064c8:	f023 0304 	bic.w	r3, r3, #4
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	2183      	movs	r1, #131	@ 0x83
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 ffda 	bl	800848c <VL53L0X_WrByte>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064e6:	2201      	movs	r2, #1
 80064e8:	21ff      	movs	r1, #255	@ 0xff
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 ffce 	bl	800848c <VL53L0X_WrByte>
 80064f0:	4603      	mov	r3, r0
 80064f2:	461a      	mov	r2, r3
 80064f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80064fe:	2201      	movs	r2, #1
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 ffc2 	bl	800848c <VL53L0X_WrByte>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006510:	4313      	orrs	r3, r2
 8006512:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006516:	2200      	movs	r2, #0
 8006518:	21ff      	movs	r1, #255	@ 0xff
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 ffb6 	bl	800848c <VL53L0X_WrByte>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006528:	4313      	orrs	r3, r2
 800652a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800652e:	2200      	movs	r2, #0
 8006530:	2180      	movs	r1, #128	@ 0x80
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 ffaa 	bl	800848c <VL53L0X_WrByte>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006540:	4313      	orrs	r3, r2
 8006542:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006546:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 808f 	bne.w	800666e <VL53L0X_get_info_from_device+0x98e>
 8006550:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006554:	2b07      	cmp	r3, #7
 8006556:	f000 808a 	beq.w	800666e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d024      	beq.n	80065ae <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006564:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006568:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11e      	bne.n	80065ae <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8006576:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8006580:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006584:	2300      	movs	r3, #0
 8006586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006588:	e00e      	b.n	80065a8 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800658a:	f107 0208 	add.w	r2, r7, #8
 800658e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006590:	4413      	add	r3, r2
 8006592:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006598:	4413      	add	r3, r2
 800659a:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800659e:	460a      	mov	r2, r1
 80065a0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80065a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a4:	3301      	adds	r3, #1
 80065a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	dded      	ble.n	800658a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d018      	beq.n	80065ea <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80065b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80065bc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d112      	bne.n	80065ea <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065c4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065ce:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	33f3      	adds	r3, #243	@ 0xf3
 80065dc:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80065de:	f107 0310 	add.w	r3, r7, #16
 80065e2:	4619      	mov	r1, r3
 80065e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065e6:	f016 fa7e 	bl	801cae6 <strcpy>

		}

		if (((option & 4) == 4) &&
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d030      	beq.n	8006656 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80065f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80065f8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d12a      	bne.n	8006656 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006612:	025b      	lsls	r3, r3, #9
 8006614:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800661a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800662a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800662c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006634:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006638:	fb02 f303 	mul.w	r3, r2, r3
 800663c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800663e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 8006642:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006646:	425b      	negs	r3, r3
 8006648:	b29b      	uxth	r3, r3
 800664a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800664e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006656:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	4313      	orrs	r3, r2
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006664:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800666e:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8006672:	4618      	mov	r0, r3
 8006674:	3760      	adds	r7, #96	@ 0x60
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006686:	f240 6277 	movw	r2, #1655	@ 0x677
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006692:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006696:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80066a8:	68bb      	ldr	r3, [r7, #8]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b087      	sub	sp, #28
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80066d6:	e005      	b.n	80066e4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80066de:	89fb      	ldrh	r3, [r7, #14]
 80066e0:	3301      	adds	r3, #1
 80066e2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2bff      	cmp	r3, #255	@ 0xff
 80066e8:	d8f6      	bhi.n	80066d8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80066ea:	89fb      	ldrh	r3, [r7, #14]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80066f8:	4413      	add	r3, r2
 80066fa:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80066fc:	8afb      	ldrh	r3, [r7, #22]

}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	4603      	mov	r3, r0
 8006712:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	0a12      	lsrs	r2, r2, #8
 8006720:	b292      	uxth	r2, r2
 8006722:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006724:	3301      	adds	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	4619      	mov	r1, r3
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff ff93 	bl	800667a <VL53L0X_calc_macro_period_ps>
 8006754:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800675c:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <VL53L0X_calc_timeout_mclks+0x50>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	099b      	lsrs	r3, r3, #6
 8006764:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800676c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	441a      	add	r2, r3
	timeout_period_mclks =
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	fbb2 f3f3 	udiv	r3, r2, r3
 800677c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800677e:	69fb      	ldr	r3, [r7, #28]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3720      	adds	r7, #32
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	10624dd3 	.word	0x10624dd3

0800678c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	807b      	strh	r3, [r7, #2]
 8006798:	4613      	mov	r3, r2
 800679a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80067a0:	787b      	ldrb	r3, [r7, #1]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff68 	bl	800667a <VL53L0X_calc_macro_period_ps>
 80067aa:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80067b2:	4a0b      	ldr	r2, [pc, #44]	@ (80067e0 <VL53L0X_calc_timeout_us+0x54>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	099b      	lsrs	r3, r3, #6
 80067ba:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	4413      	add	r3, r2
	actual_timeout_period_us =
 80067ca:	4a05      	ldr	r2, [pc, #20]	@ (80067e0 <VL53L0X_calc_timeout_us+0x54>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80067d4:	697b      	ldr	r3, [r7, #20]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	10624dd3 	.word	0x10624dd3

080067e4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08c      	sub	sp, #48	@ 0x30
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	460b      	mov	r3, r1
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <get_sequence_step_timeout+0x38>
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d002      	beq.n	800681c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d127      	bne.n	800686c <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800681c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006820:	461a      	mov	r2, r3
 8006822:	2100      	movs	r1, #0
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7fd fa83 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006830:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006838:	f107 0320 	add.w	r3, r7, #32
 800683c:	461a      	mov	r2, r3
 800683e:	2146      	movs	r1, #70	@ 0x46
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f001 fd2a 	bl	800829a <VL53L0X_RdByte>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800684c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff ff5a 	bl	800670a <VL53L0X_decode_timeout>
 8006856:	4603      	mov	r3, r0
 8006858:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800685a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800685e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006860:	4619      	mov	r1, r3
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff ff92 	bl	800678c <VL53L0X_calc_timeout_us>
 8006868:	62b8      	str	r0, [r7, #40]	@ 0x28
 800686a:	e092      	b.n	8006992 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d135      	bne.n	80068de <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006872:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006876:	461a      	mov	r2, r3
 8006878:	2100      	movs	r1, #0
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7fd fa58 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006886:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 8081 	bne.w	8006992 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006890:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006894:	461a      	mov	r2, r3
 8006896:	2100      	movs	r1, #0
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7fd fa49 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 800689e:	4603      	mov	r3, r0
 80068a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80068a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 80068ac:	f107 031e 	add.w	r3, r7, #30
 80068b0:	461a      	mov	r2, r3
 80068b2:	2151      	movs	r1, #81	@ 0x51
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 fd77 	bl	80083a8 <VL53L0X_RdWord>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80068c0:	8bfb      	ldrh	r3, [r7, #30]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff ff21 	bl	800670a <VL53L0X_decode_timeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80068cc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80068d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068d2:	4619      	mov	r1, r3
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff ff59 	bl	800678c <VL53L0X_calc_timeout_us>
 80068da:	62b8      	str	r0, [r7, #40]	@ 0x28
 80068dc:	e059      	b.n	8006992 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d156      	bne.n	8006992 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80068e4:	f107 0314 	add.w	r3, r7, #20
 80068e8:	4619      	mov	r1, r3
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7fd fb2a 	bl	8003f44 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01d      	beq.n	8006936 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068fa:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80068fe:	461a      	mov	r2, r3
 8006900:	2100      	movs	r1, #0
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7fd fa14 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800690e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8006916:	f107 031e 	add.w	r3, r7, #30
 800691a:	461a      	mov	r2, r3
 800691c:	2151      	movs	r1, #81	@ 0x51
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f001 fd42 	bl	80083a8 <VL53L0X_RdWord>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800692a:	8bfb      	ldrh	r3, [r7, #30]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff feec 	bl	800670a <VL53L0X_decode_timeout>
 8006932:	4603      	mov	r3, r0
 8006934:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006936:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800693e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006942:	461a      	mov	r2, r3
 8006944:	2101      	movs	r1, #1
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7fd f9f2 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006952:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800695a:	f107 031c 	add.w	r3, r7, #28
 800695e:	461a      	mov	r2, r3
 8006960:	2171      	movs	r1, #113	@ 0x71
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f001 fd20 	bl	80083a8 <VL53L0X_RdWord>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800696e:	8bbb      	ldrh	r3, [r7, #28]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff feca 	bl	800670a <VL53L0X_decode_timeout>
 8006976:	4603      	mov	r3, r0
 8006978:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800697a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800697c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006982:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006988:	4619      	mov	r1, r3
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fefe 	bl	800678c <VL53L0X_calc_timeout_us>
 8006990:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006996:	601a      	str	r2, [r3, #0]

	return Status;
 8006998:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800699c:	4618      	mov	r0, r3
 800699e:	3730      	adds	r7, #48	@ 0x30
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	@ 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	460b      	mov	r3, r1
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <set_sequence_step_timeout+0x26>
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d002      	beq.n	80069ca <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d138      	bne.n	8006a3c <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069ca:	f107 031d 	add.w	r3, r7, #29
 80069ce:	461a      	mov	r2, r3
 80069d0:	2100      	movs	r1, #0
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7fd f9ac 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80069de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11a      	bne.n	8006a1c <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80069e6:	7f7b      	ldrb	r3, [r7, #29]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff fea3 	bl	8006738 <VL53L0X_calc_timeout_mclks>
 80069f2:	4603      	mov	r3, r0
 80069f4:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80069f6:	8bfb      	ldrh	r3, [r7, #30]
 80069f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fc:	d903      	bls.n	8006a06 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80069fe:	23ff      	movs	r3, #255	@ 0xff
 8006a00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006a04:	e004      	b.n	8006a10 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006a06:	8bfb      	ldrh	r3, [r7, #30]
 8006a08:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 80ad 	bne.w	8006b80 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8006a26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2146      	movs	r1, #70	@ 0x46
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 fd2c 	bl	800848c <VL53L0X_WrByte>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006a3a:	e0a1      	b.n	8006b80 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d135      	bne.n	8006aae <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11b      	bne.n	8006a82 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a4a:	f107 031d 	add.w	r3, r7, #29
 8006a4e:	461a      	mov	r2, r3
 8006a50:	2100      	movs	r1, #0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7fd f96c 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006a5e:	7f7b      	ldrb	r3, [r7, #29]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fe67 	bl	8006738 <VL53L0X_calc_timeout_mclks>
 8006a6a:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006a6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fe20 	bl	80066b6 <VL53L0X_encode_timeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a7a:	8b7a      	ldrh	r2, [r7, #26]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006a82:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d108      	bne.n	8006a9c <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006a8a:	8b7b      	ldrh	r3, [r7, #26]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2151      	movs	r1, #81	@ 0x51
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f001 fd1f 	bl	80084d4 <VL53L0X_WrWord>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d16d      	bne.n	8006b80 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8006aac:	e068      	b.n	8006b80 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d162      	bne.n	8006b7a <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006ab4:	f107 0314 	add.w	r3, r7, #20
 8006ab8:	4619      	mov	r1, r3
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7fd fa42 	bl	8003f44 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01d      	beq.n	8006b06 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006aca:	f107 031d 	add.w	r3, r7, #29
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7fd f92c 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10f      	bne.n	8006b06 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006ae6:	f107 031a 	add.w	r3, r7, #26
 8006aea:	461a      	mov	r2, r3
 8006aec:	2151      	movs	r1, #81	@ 0x51
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 fc5a 	bl	80083a8 <VL53L0X_RdWord>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006afa:	8b7b      	ldrh	r3, [r7, #26]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fe04 	bl	800670a <VL53L0X_decode_timeout>
 8006b02:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006b04:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b0e:	f107 031d 	add.w	r3, r7, #29
 8006b12:	461a      	mov	r2, r3
 8006b14:	2101      	movs	r1, #1
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7fd f90a 	bl	8003d30 <VL53L0X_GetVcselPulsePeriod>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d12a      	bne.n	8006b80 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006b2a:	7f7b      	ldrb	r3, [r7, #29]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff fe01 	bl	8006738 <VL53L0X_calc_timeout_mclks>
 8006b36:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8006b38:	847b      	strh	r3, [r7, #34]	@ 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006b3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006b3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b3e:	4413      	add	r3, r2
 8006b40:	847b      	strh	r3, [r7, #34]	@ 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006b42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fdb6 	bl	80066b6 <VL53L0X_encode_timeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8006b4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006b56:	8c3b      	ldrh	r3, [r7, #32]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2171      	movs	r1, #113	@ 0x71
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f001 fcb9 	bl	80084d4 <VL53L0X_WrWord>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006b68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d107      	bne.n	8006b80 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8006b78:	e002      	b.n	8006b80 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b7a:	23fc      	movs	r3, #252	@ 0xfc
 8006b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 8006b80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	@ 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	@ 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006ba8:	2312      	movs	r3, #18
 8006baa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006bae:	2308      	movs	r3, #8
 8006bb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006bb4:	230e      	movs	r3, #14
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006bbe:	78bb      	ldrb	r3, [r7, #2]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bca:	23fc      	movs	r3, #252	@ 0xfc
 8006bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bd0:	e020      	b.n	8006c14 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10d      	bne.n	8006bf4 <VL53L0X_set_vcsel_pulse_period+0x68>
 8006bd8:	78ba      	ldrb	r2, [r7, #2]
 8006bda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d304      	bcc.n	8006bec <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006be2:	78ba      	ldrb	r2, [r7, #2]
 8006be4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d903      	bls.n	8006bf4 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bec:	23fc      	movs	r3, #252	@ 0xfc
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bf2:	e00f      	b.n	8006c14 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10c      	bne.n	8006c14 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006bfa:	78ba      	ldrb	r2, [r7, #2]
 8006bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d304      	bcc.n	8006c0e <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006c04:	78ba      	ldrb	r2, [r7, #2]
 8006c06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d902      	bls.n	8006c14 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c0e:	23fc      	movs	r3, #252	@ 0xfc
 8006c10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006c14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c20:	e237      	b.n	8007092 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d150      	bne.n	8006cca <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006c28:	78bb      	ldrb	r3, [r7, #2]
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d110      	bne.n	8006c50 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006c2e:	2218      	movs	r2, #24
 8006c30:	2157      	movs	r1, #87	@ 0x57
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fc2a 	bl	800848c <VL53L0X_WrByte>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006c3e:	2208      	movs	r2, #8
 8006c40:	2156      	movs	r1, #86	@ 0x56
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fc22 	bl	800848c <VL53L0X_WrByte>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c4e:	e17f      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006c50:	78bb      	ldrb	r3, [r7, #2]
 8006c52:	2b0e      	cmp	r3, #14
 8006c54:	d110      	bne.n	8006c78 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006c56:	2230      	movs	r2, #48	@ 0x30
 8006c58:	2157      	movs	r1, #87	@ 0x57
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fc16 	bl	800848c <VL53L0X_WrByte>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006c66:	2208      	movs	r2, #8
 8006c68:	2156      	movs	r1, #86	@ 0x56
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fc0e 	bl	800848c <VL53L0X_WrByte>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c76:	e16b      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006c78:	78bb      	ldrb	r3, [r7, #2]
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d110      	bne.n	8006ca0 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006c7e:	2240      	movs	r2, #64	@ 0x40
 8006c80:	2157      	movs	r1, #87	@ 0x57
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fc02 	bl	800848c <VL53L0X_WrByte>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006c8e:	2208      	movs	r2, #8
 8006c90:	2156      	movs	r1, #86	@ 0x56
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fbfa 	bl	800848c <VL53L0X_WrByte>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c9e:	e157      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006ca0:	78bb      	ldrb	r3, [r7, #2]
 8006ca2:	2b12      	cmp	r3, #18
 8006ca4:	f040 8154 	bne.w	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006ca8:	2250      	movs	r2, #80	@ 0x50
 8006caa:	2157      	movs	r1, #87	@ 0x57
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fbed 	bl	800848c <VL53L0X_WrByte>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006cb8:	2208      	movs	r2, #8
 8006cba:	2156      	movs	r1, #86	@ 0x56
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fbe5 	bl	800848c <VL53L0X_WrByte>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cc8:	e142      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	f040 813f 	bne.w	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006cd2:	78bb      	ldrb	r3, [r7, #2]
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d14c      	bne.n	8006d72 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006cd8:	2210      	movs	r2, #16
 8006cda:	2148      	movs	r1, #72	@ 0x48
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 fbd5 	bl	800848c <VL53L0X_WrByte>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006ce8:	2208      	movs	r2, #8
 8006cea:	2147      	movs	r1, #71	@ 0x47
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fbcd 	bl	800848c <VL53L0X_WrByte>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	2132      	movs	r1, #50	@ 0x32
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fbc5 	bl	800848c <VL53L0X_WrByte>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006d10:	220c      	movs	r2, #12
 8006d12:	2130      	movs	r1, #48	@ 0x30
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fbb9 	bl	800848c <VL53L0X_WrByte>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006d28:	2201      	movs	r2, #1
 8006d2a:	21ff      	movs	r1, #255	@ 0xff
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 fbad 	bl	800848c <VL53L0X_WrByte>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006d40:	2230      	movs	r2, #48	@ 0x30
 8006d42:	2130      	movs	r1, #48	@ 0x30
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fba1 	bl	800848c <VL53L0X_WrByte>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	21ff      	movs	r1, #255	@ 0xff
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fb95 	bl	800848c <VL53L0X_WrByte>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006d70:	e0ee      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006d72:	78bb      	ldrb	r3, [r7, #2]
 8006d74:	2b0a      	cmp	r3, #10
 8006d76:	d14c      	bne.n	8006e12 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006d78:	2228      	movs	r2, #40	@ 0x28
 8006d7a:	2148      	movs	r1, #72	@ 0x48
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fb85 	bl	800848c <VL53L0X_WrByte>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006d88:	2208      	movs	r2, #8
 8006d8a:	2147      	movs	r1, #71	@ 0x47
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fb7d 	bl	800848c <VL53L0X_WrByte>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006d98:	2203      	movs	r2, #3
 8006d9a:	2132      	movs	r1, #50	@ 0x32
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fb75 	bl	800848c <VL53L0X_WrByte>
 8006da2:	4603      	mov	r3, r0
 8006da4:	461a      	mov	r2, r3
 8006da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006db0:	2209      	movs	r2, #9
 8006db2:	2130      	movs	r1, #48	@ 0x30
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fb69 	bl	800848c <VL53L0X_WrByte>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006dc8:	2201      	movs	r2, #1
 8006dca:	21ff      	movs	r1, #255	@ 0xff
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fb5d 	bl	800848c <VL53L0X_WrByte>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006de0:	2220      	movs	r2, #32
 8006de2:	2130      	movs	r1, #48	@ 0x30
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fb51 	bl	800848c <VL53L0X_WrByte>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461a      	mov	r2, r3
 8006dee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	21ff      	movs	r1, #255	@ 0xff
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fb45 	bl	800848c <VL53L0X_WrByte>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e10:	e09e      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006e12:	78bb      	ldrb	r3, [r7, #2]
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d14c      	bne.n	8006eb2 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006e18:	2238      	movs	r2, #56	@ 0x38
 8006e1a:	2148      	movs	r1, #72	@ 0x48
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fb35 	bl	800848c <VL53L0X_WrByte>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006e28:	2208      	movs	r2, #8
 8006e2a:	2147      	movs	r1, #71	@ 0x47
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 fb2d 	bl	800848c <VL53L0X_WrByte>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006e38:	2203      	movs	r2, #3
 8006e3a:	2132      	movs	r1, #50	@ 0x32
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fb25 	bl	800848c <VL53L0X_WrByte>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006e50:	2208      	movs	r2, #8
 8006e52:	2130      	movs	r1, #48	@ 0x30
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fb19 	bl	800848c <VL53L0X_WrByte>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e68:	2201      	movs	r2, #1
 8006e6a:	21ff      	movs	r1, #255	@ 0xff
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 fb0d 	bl	800848c <VL53L0X_WrByte>
 8006e72:	4603      	mov	r3, r0
 8006e74:	461a      	mov	r2, r3
 8006e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006e80:	2220      	movs	r2, #32
 8006e82:	2130      	movs	r1, #48	@ 0x30
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fb01 	bl	800848c <VL53L0X_WrByte>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	21ff      	movs	r1, #255	@ 0xff
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 faf5 	bl	800848c <VL53L0X_WrByte>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006eb0:	e04e      	b.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006eb2:	78bb      	ldrb	r3, [r7, #2]
 8006eb4:	2b0e      	cmp	r3, #14
 8006eb6:	d14b      	bne.n	8006f50 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006eb8:	2248      	movs	r2, #72	@ 0x48
 8006eba:	2148      	movs	r1, #72	@ 0x48
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fae5 	bl	800848c <VL53L0X_WrByte>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006ec8:	2208      	movs	r2, #8
 8006eca:	2147      	movs	r1, #71	@ 0x47
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fadd 	bl	800848c <VL53L0X_WrByte>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006ed8:	2203      	movs	r2, #3
 8006eda:	2132      	movs	r1, #50	@ 0x32
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fad5 	bl	800848c <VL53L0X_WrByte>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	2130      	movs	r1, #48	@ 0x30
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 fac9 	bl	800848c <VL53L0X_WrByte>
 8006efa:	4603      	mov	r3, r0
 8006efc:	461a      	mov	r2, r3
 8006efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f08:	2201      	movs	r2, #1
 8006f0a:	21ff      	movs	r1, #255	@ 0xff
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 fabd 	bl	800848c <VL53L0X_WrByte>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006f20:	2220      	movs	r2, #32
 8006f22:	2130      	movs	r1, #48	@ 0x30
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fab1 	bl	800848c <VL53L0X_WrByte>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006f38:	2200      	movs	r2, #0
 8006f3a:	21ff      	movs	r1, #255	@ 0xff
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 faa5 	bl	800848c <VL53L0X_WrByte>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d17e      	bne.n	8007056 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006f58:	78bb      	ldrb	r3, [r7, #2]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fe38 	bl	8005bd0 <VL53L0X_encode_vcsel_period>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependent on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d045      	beq.n	8006ffc <VL53L0X_set_vcsel_pulse_period+0x470>
 8006f70:	e06e      	b.n	8007050 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006f72:	f107 0314 	add.w	r3, r7, #20
 8006f76:	461a      	mov	r2, r3
 8006f78:	2103      	movs	r1, #3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fc32 	bl	80067e4 <get_sequence_step_timeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006f8e:	f107 0310 	add.w	r3, r7, #16
 8006f92:	461a      	mov	r2, r3
 8006f94:	2102      	movs	r1, #2
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fc24 	bl	80067e4 <get_sequence_step_timeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006fa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006faa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2150      	movs	r1, #80	@ 0x50
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fa6a 	bl	800848c <VL53L0X_WrByte>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006fbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d108      	bne.n	8006fd8 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	2103      	movs	r1, #3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fce9 	bl	80069a4 <set_sequence_step_timeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8006fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d108      	bne.n	8006ff2 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fcdc 	bl	80069a4 <set_sequence_step_timeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	78ba      	ldrb	r2, [r7, #2]
 8006ff6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006ffa:	e02c      	b.n	8007056 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006ffc:	f107 0318 	add.w	r3, r7, #24
 8007000:	461a      	mov	r2, r3
 8007002:	2104      	movs	r1, #4
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fbed 	bl	80067e4 <get_sequence_step_timeout>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007010:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007018:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800701c:	461a      	mov	r2, r3
 800701e:	2170      	movs	r1, #112	@ 0x70
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 fa33 	bl	800848c <VL53L0X_WrByte>
 8007026:	4603      	mov	r3, r0
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800702c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007030:	2b00      	cmp	r3, #0
 8007032:	d108      	bne.n	8007046 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	461a      	mov	r2, r3
 8007038:	2104      	movs	r1, #4
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fcb2 	bl	80069a4 <set_sequence_step_timeout>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	78ba      	ldrb	r2, [r7, #2]
 800704a:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800704e:	e002      	b.n	8007056 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007050:	23fc      	movs	r3, #252	@ 0xfc
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007056:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007064:	69f9      	ldr	r1, [r7, #28]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fc fe24 	bl	8003cb4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007072:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800707a:	f107 010f 	add.w	r1, r7, #15
 800707e:	2301      	movs	r3, #1
 8007080:	2200      	movs	r2, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fe fcc0 	bl	8005a08 <VL53L0X_perform_phase_calibration>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800708e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007092:	4618      	mov	r0, r3
 8007094:	3728      	adds	r7, #40	@ 0x28
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	460b      	mov	r3, r1
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d00a      	beq.n	80070cc <VL53L0X_get_vcsel_pulse_period+0x32>
 80070b6:	e013      	b.n	80070e0 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80070b8:	f107 0316 	add.w	r3, r7, #22
 80070bc:	461a      	mov	r2, r3
 80070be:	2150      	movs	r1, #80	@ 0x50
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 f8ea 	bl	800829a <VL53L0X_RdByte>
 80070c6:	4603      	mov	r3, r0
 80070c8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80070ca:	e00b      	b.n	80070e4 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80070cc:	f107 0316 	add.w	r3, r7, #22
 80070d0:	461a      	mov	r2, r3
 80070d2:	2170      	movs	r1, #112	@ 0x70
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f001 f8e0 	bl	800829a <VL53L0X_RdByte>
 80070da:	4603      	mov	r3, r0
 80070dc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80070de:	e001      	b.n	80070e4 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070e0:	23fc      	movs	r3, #252	@ 0xfc
 80070e2:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80070e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d107      	bne.n	80070fc <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80070ec:	7dbb      	ldrb	r3, [r7, #22]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fd5b 	bl	8005baa <VL53L0X_decode_vcsel_period>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	701a      	strb	r2, [r3, #0]

	return Status;
 80070fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b092      	sub	sp, #72	@ 0x48
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007118:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800711c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800711e:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8007124:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007128:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800712a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007130:	f240 234e 	movw	r3, #590	@ 0x24e
 8007134:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8007136:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800713a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800713c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007140:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007142:	f240 2326 	movw	r3, #550	@ 0x226
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800714c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007150:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	429a      	cmp	r2, r3
 800715c:	d205      	bcs.n	800716a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800715e:	23fc      	movs	r3, #252	@ 0xfc
 8007160:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8007164:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007168:	e0aa      	b.n	80072c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800716a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fc fee1 	bl	8003f44 <VL53L0X_GetSequenceStepEnables>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007188:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800718c:	2b00      	cmp	r3, #0
 800718e:	d15b      	bne.n	8007248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007190:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007196:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800719c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d052      	beq.n	8007248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80071a2:	f107 0310 	add.w	r3, r7, #16
 80071a6:	461a      	mov	r2, r3
 80071a8:	2102      	movs	r1, #2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff fb1a 	bl	80067e4 <get_sequence_step_timeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80071b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80071be:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80071c2:	e07d      	b.n	80072c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80071c4:	7d3b      	ldrb	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00f      	beq.n	80071ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80071ca:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80071cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ce:	4413      	add	r3, r2
 80071d0:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d204      	bcs.n	80071e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80071da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e2:	e002      	b.n	80071ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071e4:	23fc      	movs	r3, #252	@ 0xfc
 80071e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80071ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80071f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80071f6:	e063      	b.n	80072c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80071f8:	7dbb      	ldrb	r3, [r7, #22]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007202:	4413      	add	r3, r2
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800720c:	429a      	cmp	r2, r3
 800720e:	d204      	bcs.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007210:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	643b      	str	r3, [r7, #64]	@ 0x40
 8007218:	e016      	b.n	8007248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800721a:	23fc      	movs	r3, #252	@ 0xfc
 800721c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007220:	e012      	b.n	8007248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007222:	7d7b      	ldrb	r3, [r7, #21]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800722c:	4413      	add	r3, r2
 800722e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007234:	429a      	cmp	r2, r3
 8007236:	d204      	bcs.n	8007242 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007240:	e002      	b.n	8007248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007242:	23fc      	movs	r3, #252	@ 0xfc
 8007244:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007248:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007250:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007254:	e034      	b.n	80072c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d019      	beq.n	8007290 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800725c:	f107 030c 	add.w	r3, r7, #12
 8007260:	461a      	mov	r2, r3
 8007262:	2103      	movs	r1, #3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff fabd 	bl	80067e4 <get_sequence_step_timeout>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007274:	4413      	add	r3, r2
 8007276:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800727c:	429a      	cmp	r2, r3
 800727e:	d204      	bcs.n	800728a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	643b      	str	r3, [r7, #64]	@ 0x40
 8007288:	e002      	b.n	8007290 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800728a:	23fc      	movs	r3, #252	@ 0xfc
 800728c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007290:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007294:	2b00      	cmp	r3, #0
 8007296:	d111      	bne.n	80072bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007298:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800729e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	643b      	str	r3, [r7, #64]	@ 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 80072a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072a8:	2104      	movs	r1, #4
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fb7a 	bl	80069a4 <set_sequence_step_timeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80072bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3748      	adds	r7, #72	@ 0x48
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b090      	sub	sp, #64	@ 0x40
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80072d8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80072dc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80072de:	f240 7376 	movw	r3, #1910	@ 0x776
 80072e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80072e4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80072ea:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80072ee:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80072f0:	f240 234e 	movw	r3, #590	@ 0x24e
 80072f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80072f6:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80072fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80072fc:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007302:	f240 2326 	movw	r3, #550	@ 0x226
 8007306:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800730c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	441a      	add	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007316:	f107 0318 	add.w	r3, r7, #24
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7fc fe11 	bl	8003f44 <VL53L0X_GetSequenceStepEnables>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007328:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007330:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007334:	e075      	b.n	8007422 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007336:	7e3b      	ldrb	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800733c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007342:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007344:	2b00      	cmp	r3, #0
 8007346:	d030      	beq.n	80073aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007348:	f107 0310 	add.w	r3, r7, #16
 800734c:	461a      	mov	r2, r3
 800734e:	2102      	movs	r1, #2
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fa47 	bl	80067e4 <get_sequence_step_timeout>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800735c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007360:	2b00      	cmp	r3, #0
 8007362:	d122      	bne.n	80073aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007364:	7e3b      	ldrb	r3, [r7, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800736e:	6939      	ldr	r1, [r7, #16]
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007374:	441a      	add	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800737a:	7ebb      	ldrb	r3, [r7, #26]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007384:	6939      	ldr	r1, [r7, #16]
 8007386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007388:	440b      	add	r3, r1
 800738a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800738c:	441a      	add	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	e00a      	b.n	80073aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007394:	7e7b      	ldrb	r3, [r7, #25]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800739e:	6939      	ldr	r1, [r7, #16]
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80073a4:	441a      	add	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d114      	bne.n	80073dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80073b2:	7efb      	ldrb	r3, [r7, #27]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d011      	beq.n	80073dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	461a      	mov	r2, r3
 80073be:	2103      	movs	r1, #3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff fa0f 	bl	80067e4 <get_sequence_step_timeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80073d0:	68f9      	ldr	r1, [r7, #12]
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80073d6:	441a      	add	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d114      	bne.n	800740e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80073e4:	7f3b      	ldrb	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d011      	beq.n	800740e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80073ea:	f107 0314 	add.w	r3, r7, #20
 80073ee:	461a      	mov	r2, r3
 80073f0:	2104      	movs	r1, #4
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f9f6 	bl	80067e4 <get_sequence_step_timeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007408:	441a      	add	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800740e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800741e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007422:	4618      	mov	r0, r3
 8007424:	3740      	adds	r7, #64	@ 0x40
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007436:	2300      	movs	r3, #0
 8007438:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800743e:	e0c6      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	4413      	add	r3, r2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	74fb      	strb	r3, [r7, #19]
		Index++;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3301      	adds	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007450:	7cfb      	ldrb	r3, [r7, #19]
 8007452:	2bff      	cmp	r3, #255	@ 0xff
 8007454:	f040 808d 	bne.w	8007572 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4413      	add	r3, r2
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	747b      	strb	r3, [r7, #17]
			Index++;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	3301      	adds	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007468:	7c7b      	ldrb	r3, [r7, #17]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d87e      	bhi.n	800756c <VL53L0X_load_tuning_settings+0x140>
 800746e:	a201      	add	r2, pc, #4	@ (adr r2, 8007474 <VL53L0X_load_tuning_settings+0x48>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	08007485 	.word	0x08007485
 8007478:	080074bf 	.word	0x080074bf
 800747c:	080074f9 	.word	0x080074f9
 8007480:	08007533 	.word	0x08007533
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4413      	add	r3, r2
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	743b      	strb	r3, [r7, #16]
				Index++;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	3301      	adds	r3, #1
 8007492:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	3301      	adds	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80074a4:	7c3b      	ldrb	r3, [r7, #16]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	4413      	add	r3, r2
 80074b2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	89ba      	ldrh	r2, [r7, #12]
 80074b8:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 80074bc:	e087      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	4413      	add	r3, r2
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	743b      	strb	r3, [r7, #16]
				Index++;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3301      	adds	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	4413      	add	r3, r2
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80074de:	7c3b      	ldrb	r3, [r7, #16]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	89ba      	ldrh	r2, [r7, #12]
 80074f2:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 80074f6:	e06a      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	4413      	add	r3, r2
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	743b      	strb	r3, [r7, #16]
				Index++;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	3301      	adds	r3, #1
 8007506:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	4413      	add	r3, r2
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	3301      	adds	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007518:	7c3b      	ldrb	r3, [r7, #16]
 800751a:	b29b      	uxth	r3, r3
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	b29a      	uxth	r2, r3
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	b29b      	uxth	r3, r3
 8007524:	4413      	add	r3, r2
 8007526:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	89ba      	ldrh	r2, [r7, #12]
 800752c:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8007530:	e04d      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	4413      	add	r3, r2
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	743b      	strb	r3, [r7, #16]
				Index++;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3301      	adds	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	4413      	add	r3, r2
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	3301      	adds	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007552:	7c3b      	ldrb	r3, [r7, #16]
 8007554:	b29b      	uxth	r3, r3
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	b29a      	uxth	r2, r3
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4413      	add	r3, r2
 8007560:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	89ba      	ldrh	r2, [r7, #12]
 8007566:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
				break;
 800756a:	e030      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800756c:	23fc      	movs	r3, #252	@ 0xfc
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e02d      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d828      	bhi.n	80075ca <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4413      	add	r3, r2
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	3301      	adds	r3, #1
 8007586:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e00f      	b.n	80075ae <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	4413      	add	r3, r2
 8007594:	7819      	ldrb	r1, [r3, #0]
 8007596:	f107 0208 	add.w	r2, r7, #8
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	4413      	add	r3, r2
 800759e:	460a      	mov	r2, r1
 80075a0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	3301      	adds	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	7cfb      	ldrb	r3, [r7, #19]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	dbeb      	blt.n	800758e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80075b6:	7cfb      	ldrb	r3, [r7, #19]
 80075b8:	f107 0208 	add.w	r2, r7, #8
 80075bc:	7cb9      	ldrb	r1, [r7, #18]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fe96 	bl	80082f0 <VL53L0X_WriteMulti>
 80075c4:	4603      	mov	r3, r0
 80075c6:	77fb      	strb	r3, [r7, #31]
 80075c8:	e001      	b.n	80075ce <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075ca:	23fc      	movs	r3, #252	@ 0xfc
 80075cc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	4413      	add	r3, r2
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <VL53L0X_load_tuning_settings+0x1b8>
 80075da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f43f af2e 	beq.w	8007440 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3720      	adds	r7, #32
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007606:	f107 0313 	add.w	r3, r7, #19
 800760a:	4619      	mov	r1, r3
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7fc fd65 	bl	80040dc <VL53L0X_GetXTalkCompensationEnable>
 8007612:	4603      	mov	r3, r0
 8007614:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8007616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d111      	bne.n	8007642 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800761e:	7cfb      	ldrb	r3, [r7, #19]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	8a9b      	ldrh	r3, [r3, #20]
 800762e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3380      	adds	r3, #128	@ 0x80
 800763c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007642:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007666:	f107 0310 	add.w	r3, r7, #16
 800766a:	461a      	mov	r2, r3
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff ffbe 	bl	80075f0 <VL53L0X_get_total_xtalk_rate>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d105      	bne.n	800768c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	441a      	add	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]

	return Status;
 800768c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b09a      	sub	sp, #104	@ 0x68
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80076a6:	2312      	movs	r3, #18
 80076a8:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80076aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80076ae:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80076b0:	2342      	movs	r3, #66	@ 0x42
 80076b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80076b4:	2306      	movs	r3, #6
 80076b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80076b8:	2307      	movs	r3, #7
 80076ba:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 3150 	ldrh.w	r3, [r3, #336]	@ 0x150
	dmaxCalRange_mm =
 80076c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80076d0:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80076d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	3380      	adds	r3, #128	@ 0x80
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80076e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01a      	beq.n	800772e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	029b      	lsls	r3, r3, #10
 80076fc:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007704:	4413      	add	r3, r2
 8007706:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007708:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007710:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007712:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800771c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771e:	fb03 f303 	mul.w	r3, r3, r3
 8007722:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007726:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800772a:	0c1b      	lsrs	r3, r3, #16
 800772c:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007744:	fb03 f303 	mul.w	r3, r3, r3
 8007748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800774a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800774c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007756:	085a      	lsrs	r2, r3, #1
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	441a      	add	r2, r3
 800775c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007768:	fb02 f303 	mul.w	r3, r2, r3
 800776c:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007774:	d302      	bcc.n	800777c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007776:	4b54      	ldr	r3, [pc, #336]	@ (80078c8 <VL53L0X_calc_dmax+0x230>)
 8007778:	663b      	str	r3, [r7, #96]	@ 0x60
 800777a:	e015      	b.n	80077a8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800777c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800777e:	085a      	lsrs	r2, r3, #1
 8007780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007782:	441a      	add	r2, r3
 8007784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800778c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800778e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007798:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80077a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077a2:	fb03 f303 	mul.w	r3, r3, r3
 80077a6:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80077a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077aa:	039b      	lsls	r3, r3, #14
 80077ac:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80077b0:	4a46      	ldr	r2, [pc, #280]	@ (80078cc <VL53L0X_calc_dmax+0x234>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	fb03 f303 	mul.w	r3, r3, r3
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80077c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c4:	fb03 f303 	mul.w	r3, r3, r3
 80077c8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	3308      	adds	r3, #8
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80077d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80077da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077dc:	4613      	mov	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	4413      	add	r3, r2
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80077ec:	0b9b      	lsrs	r3, r3, #14
 80077ee:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80077f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077f4:	4413      	add	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80077f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4413      	add	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	039b      	lsls	r3, r3, #14
 8007810:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	085b      	lsrs	r3, r3, #1
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	4413      	add	r3, r2
 800781a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007836:	4a25      	ldr	r2, [pc, #148]	@ (80078cc <VL53L0X_calc_dmax+0x234>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	099b      	lsrs	r3, r3, #6
 800783e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800784c:	4a1f      	ldr	r2, [pc, #124]	@ (80078cc <VL53L0X_calc_dmax+0x234>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	099b      	lsrs	r3, r3, #6
 8007854:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007858:	3380      	adds	r3, #128	@ 0x80
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	085a      	lsrs	r2, r3, #1
 8007868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786a:	441a      	add	r2, r3
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007874:	e001      	b.n	800787a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800787a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800787c:	f7fe f9bb 	bl	8005bf6 <VL53L0X_isqrt>
 8007880:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	085a      	lsrs	r2, r3, #1
 800788c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788e:	441a      	add	r2, r3
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	fbb2 f3f3 	udiv	r3, r2, r3
 8007896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007898:	e001      	b.n	800789e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800789e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80078a0:	f7fe f9a9 	bl	8005bf6 <VL53L0X_isqrt>
 80078a4:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 80078a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d902      	bls.n	80078ba <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80078b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078b8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80078ba:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3768      	adds	r7, #104	@ 0x68
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	fff00000 	.word	0xfff00000
 80078cc:	10624dd3 	.word	0x10624dd3

080078d0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b0b2      	sub	sp, #200	@ 0xc8
 80078d4:	af04      	add	r7, sp, #16
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80078de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80078e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80078e6:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80078ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80078ee:	2342      	movs	r3, #66	@ 0x42
 80078f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80078f4:	f241 235c 	movw	r3, #4700	@ 0x125c
 80078f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80078fc:	4b6b      	ldr	r3, [pc, #428]	@ (8007aac <VL53L0X_calc_sigma_estimate+0x1dc>)
 80078fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007902:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800790a:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800790e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	67fb      	str	r3, [r7, #124]	@ 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007918:	4b65      	ldr	r3, [pc, #404]	@ (8007ab0 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800791a:	67bb      	str	r3, [r7, #120]	@ 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800791c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007920:	677b      	str	r3, [r7, #116]	@ 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007922:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8007926:	673b      	str	r3, [r7, #112]	@ 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8007928:	f240 6377 	movw	r3, #1655	@ 0x677
 800792c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800792e:	2300      	movs	r3, #0
 8007930:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007942:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	66bb      	str	r3, [r7, #104]	@ 0x68

	correctedSignalRate_mcps =
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	667b      	str	r3, [r7, #100]	@ 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007950:	f107 0310 	add.w	r3, r7, #16
 8007954:	461a      	mov	r2, r3
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7ff fe78 	bl	800764e <VL53L0X_get_total_signal_rate>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007964:	f107 0314 	add.w	r3, r7, #20
 8007968:	461a      	mov	r2, r3
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fe3f 	bl	80075f0 <VL53L0X_get_total_xtalk_rate>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	663b      	str	r3, [r7, #96]	@ 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007986:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	663b      	str	r3, [r7, #96]	@ 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007994:	fb02 f303 	mul.w	r3, r2, r3
 8007998:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800799c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80079a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d902      	bls.n	80079ac <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80079a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 80079ac:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d164      	bne.n	8007a7e <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80079ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80079c2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079c6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80079ca:	461a      	mov	r2, r3
 80079cc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7fe feb2 	bl	8006738 <VL53L0X_calc_timeout_mclks>
 80079d4:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079dc:	653b      	str	r3, [r7, #80]	@ 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80079e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80079ec:	461a      	mov	r2, r3
 80079ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7fe fea1 	bl	8006738 <VL53L0X_calc_timeout_mclks>
 80079f6:	64b8      	str	r0, [r7, #72]	@ 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80079f8:	2303      	movs	r3, #3
 80079fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (finalRangeVcselPCLKS == 8)
 80079fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d102      	bne.n	8007a0c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8007a06:	2302      	movs	r3, #2
 8007a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a10:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007a12:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8007a16:	fb02 f303 	mul.w	r3, r2, r3
 8007a1a:	02db      	lsls	r3, r3, #11
 8007a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a24:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007a28:	4a22      	ldr	r2, [pc, #136]	@ (8007ab4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	099b      	lsrs	r3, r3, #6
 8007a30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8007a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
 8007a3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a46:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	099b      	lsrs	r3, r3, #6
 8007a52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3380      	adds	r3, #128	@ 0x80
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a70:	3380      	adds	r3, #128	@ 0x80
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007a7e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8007a86:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8007a8a:	e127      	b.n	8007cdc <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 8007a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d112      	bne.n	8007ab8 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a98:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007aa0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		*pDmax_mm = 0;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	e115      	b.n	8007cd8 <VL53L0X_calc_sigma_estimate+0x408>
 8007aac:	028f87ae 	.word	0x028f87ae
 8007ab0:	0006999a 	.word	0x0006999a
 8007ab4:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8007ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007aca:	647b      	str	r3, [r7, #68]	@ 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ace:	041a      	lsls	r2, r3, #16
 8007ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ade:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d902      	bls.n	8007aea <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007ae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007aea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007aee:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007af2:	fb02 f303 	mul.w	r3, r2, r3
 8007af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007afe:	4613      	mov	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe f875 	bl	8005bf6 <VL53L0X_isqrt>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	643b      	str	r3, [r7, #64]	@ 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	891b      	ldrh	r3, [r3, #8]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b22:	041a      	lsls	r2, r3, #16
 8007b24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b28:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8007b2a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8007ce4 <VL53L0X_calc_sigma_estimate+0x414>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	099b      	lsrs	r3, r3, #6
 8007b36:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007b38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b3a:	041a      	lsls	r2, r3, #16
 8007b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b40:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8007b42:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007b46:	4a67      	ldr	r2, [pc, #412]	@ (8007ce4 <VL53L0X_calc_sigma_estimate+0x414>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	099b      	lsrs	r3, r3, #6
 8007b4e:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007b56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfb8      	it	lt
 8007b62:	425b      	neglt	r3, r3
 8007b64:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007b6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8007b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b80:	fb02 f303 	mul.w	r3, r2, r3
 8007b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b8a:	4413      	add	r3, r2
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8007b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b92:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8007b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8007b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8007b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba0:	fb03 f303 	mul.w	r3, r3, r3
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8007ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba8:	0b9b      	lsrs	r3, r3, #14
 8007baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	fb03 f303 	mul.w	r3, r3, r3
 8007bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

		sqr2 = sigmaEstimateP2;
 8007bc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007bd4:	0c1b      	lsrs	r3, r3, #16
 8007bd6:	627b      	str	r3, [r7, #36]	@ 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	fb03 f303 	mul.w	r3, r3, r3
 8007bde:	627b      	str	r3, [r7, #36]	@ 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	4413      	add	r3, r2
 8007be6:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007be8:	6a38      	ldr	r0, [r7, #32]
 8007bea:	f7fe f804 	bl	8005bf6 <VL53L0X_isqrt>
 8007bee:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	041b      	lsls	r3, r3, #16
 8007bf4:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3332      	adds	r3, #50	@ 0x32
 8007bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8007ce8 <VL53L0X_calc_sigma_estimate+0x418>)
 8007bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007c00:	095a      	lsrs	r2, r3, #5
 8007c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c10:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
 8007c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c20:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8007c24:	3308      	adds	r3, #8
 8007c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		sigmaEstRtn		 /= 10000;
 8007c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8007cec <VL53L0X_calc_sigma_estimate+0x41c>)
 8007c30:	fba2 2303 	umull	r2, r3, r2, r3
 8007c34:	0b5b      	lsrs	r3, r3, #13
 8007c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007c3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d903      	bls.n	8007c4e <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c52:	fb03 f303 	mul.w	r3, r3, r3
 8007c56:	62bb      	str	r3, [r7, #40]	@ 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8007c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c5c:	fb03 f303 	mul.w	r3, r3, r3
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	4413      	add	r3, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd ffc4 	bl	8005bf6 <VL53L0X_isqrt>
 8007c6e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c76:	fb02 f303 	mul.w	r3, r2, r3
 8007c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007c7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <VL53L0X_calc_sigma_estimate+0x3c8>
 8007c84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <VL53L0X_calc_sigma_estimate+0x3c8>
 8007c8c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d903      	bls.n	8007ca0 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ca6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
		Status = VL53L0X_calc_dmax(
 8007cb2:	6939      	ldr	r1, [r7, #16]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	9303      	str	r3, [sp, #12]
 8007cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cbc:	9302      	str	r3, [sp, #8]
 8007cbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f7ff fce3 	bl	8007698 <VL53L0X_calc_dmax>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cd8:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	37b8      	adds	r7, #184	@ 0xb8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	10624dd3 	.word	0x10624dd3
 8007ce8:	51eb851f 	.word	0x51eb851f
 8007cec:	d1b71759 	.word	0xd1b71759

08007cf0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b090      	sub	sp, #64	@ 0x40
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	72fb      	strb	r3, [r7, #11]
 8007d00:	4613      	mov	r3, r2
 8007d02:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	10db      	asrs	r3, r3, #3
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007d50:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d017      	beq.n	8007d88 <VL53L0X_get_pal_range_status+0x98>
 8007d58:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d5c:	2b05      	cmp	r3, #5
 8007d5e:	d013      	beq.n	8007d88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007d60:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d64:	2b07      	cmp	r3, #7
 8007d66:	d00f      	beq.n	8007d88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007d68:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d6c:	2b0c      	cmp	r3, #12
 8007d6e:	d00b      	beq.n	8007d88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007d70:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d74:	2b0d      	cmp	r3, #13
 8007d76:	d007      	beq.n	8007d88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007d78:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d7c:	2b0e      	cmp	r3, #14
 8007d7e:	d003      	beq.n	8007d88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007d80:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d103      	bne.n	8007d90 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8007d8e:	e002      	b.n	8007d96 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8007d96:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d107      	bne.n	8007dae <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d9e:	2201      	movs	r2, #1
 8007da0:	21ff      	movs	r1, #255	@ 0xff
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fb72 	bl	800848c <VL53L0X_WrByte>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8007dae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8007db6:	f107 0316 	add.w	r3, r7, #22
 8007dba:	461a      	mov	r2, r3
 8007dbc:	21b6      	movs	r1, #182	@ 0xb6
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 faf2 	bl	80083a8 <VL53L0X_RdWord>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007dca:	8afb      	ldrh	r3, [r7, #22]
 8007dcc:	025b      	lsls	r3, r3, #9
 8007dce:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8007dd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d107      	bne.n	8007de8 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007dd8:	2200      	movs	r2, #0
 8007dda:	21ff      	movs	r1, #255	@ 0xff
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fb55 	bl	800848c <VL53L0X_WrByte>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dec:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007df0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007df8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2100      	movs	r1, #0
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7fc fa3f 	bl	8004284 <VL53L0X_GetLimitCheckEnable>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007e0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02e      	beq.n	8007e72 <VL53L0X_get_pal_range_status+0x182>
 8007e14:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d12a      	bne.n	8007e72 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007e1c:	f107 0310 	add.w	r3, r7, #16
 8007e20:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007e24:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff fd52 	bl	80078d0 <VL53L0X_calc_sigma_estimate>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007e32:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e40:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007e42:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d113      	bne.n	8007e72 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e4a:	f107 0320 	add.w	r3, r7, #32
 8007e4e:	461a      	mov	r2, r3
 8007e50:	2100      	movs	r1, #0
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7fc fa9c 	bl	8004390 <VL53L0X_GetLimitCheckValue>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8007e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e66:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d902      	bls.n	8007e72 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007e72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007e7a:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2102      	movs	r1, #2
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7fc f9fe 	bl	8004284 <VL53L0X_GetLimitCheckEnable>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007e8e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d017      	beq.n	8007ec6 <VL53L0X_get_pal_range_status+0x1d6>
 8007e96:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d113      	bne.n	8007ec6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e9e:	f107 031c 	add.w	r3, r7, #28
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7fc fa72 	bl	8004390 <VL53L0X_GetLimitCheckValue>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007eb8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d902      	bls.n	8007ec6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007ec6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007ece:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2103      	movs	r1, #3
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7fc f9d4 	bl	8004284 <VL53L0X_GetLimitCheckEnable>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d023      	beq.n	8007f32 <VL53L0X_get_pal_range_status+0x242>
 8007eea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d11f      	bne.n	8007f32 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007ef2:	893b      	ldrh	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007efc:	e005      	b.n	8007f0a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	021a      	lsls	r2, r3, #8
 8007f02:	893b      	ldrh	r3, [r7, #8]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007f0a:	f107 0318 	add.w	r3, r7, #24
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2103      	movs	r1, #3
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7fc fa3c 	bl	8004390 <VL53L0X_GetLimitCheckValue>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007f24:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d202      	bcs.n	8007f32 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f32:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d14a      	bne.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007f3a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d103      	bne.n	8007f4a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f44:	22ff      	movs	r2, #255	@ 0xff
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	e042      	b.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007f4a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d007      	beq.n	8007f62 <VL53L0X_get_pal_range_status+0x272>
 8007f52:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d003      	beq.n	8007f62 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007f5a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d103      	bne.n	8007f6a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f64:	2205      	movs	r2, #5
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e032      	b.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007f6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f6e:	2b06      	cmp	r3, #6
 8007f70:	d003      	beq.n	8007f7a <VL53L0X_get_pal_range_status+0x28a>
 8007f72:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d103      	bne.n	8007f82 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e026      	b.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007f82:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d007      	beq.n	8007f9a <VL53L0X_get_pal_range_status+0x2aa>
 8007f8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007f8e:	2b0a      	cmp	r3, #10
 8007f90:	d003      	beq.n	8007f9a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007f92:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d103      	bne.n	8007fa2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	e016      	b.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007fa2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d003      	beq.n	8007fb2 <VL53L0X_get_pal_range_status+0x2c2>
 8007faa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d103      	bne.n	8007fba <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e00a      	b.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007fba:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d103      	bne.n	8007fca <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e002      	b.n	8007fd0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fda:	2200      	movs	r2, #0
 8007fdc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007fde:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7fc f94c 	bl	8004284 <VL53L0X_GetLimitCheckEnable>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d14f      	bne.n	800809a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <VL53L0X_get_pal_range_status+0x31a>
 8008002:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008006:	2b01      	cmp	r3, #1
 8008008:	d103      	bne.n	8008012 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008010:	e002      	b.n	8008018 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800801e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008022:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008026:	2b04      	cmp	r3, #4
 8008028:	d003      	beq.n	8008032 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800802a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008032:	2301      	movs	r3, #1
 8008034:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008038:	e002      	b.n	8008040 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008046:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800804a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <VL53L0X_get_pal_range_status+0x36a>
 8008052:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008060:	e002      	b.n	8008068 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800806e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008072:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <VL53L0X_get_pal_range_status+0x392>
 800807a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800807e:	2b01      	cmp	r3, #1
 8008080:	d103      	bne.n	800808a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008088:	e002      	b.n	8008090 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008096:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800809a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800809e:	4618      	mov	r0, r3
 80080a0:	3740      	adds	r7, #64	@ 0x40
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 80080b6:	2102      	movs	r1, #2
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7fd fe11 	bl	8005ce0 <VL53L0X_get_info_from_device>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 80080c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d11c      	bne.n	8008104 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
 80080d0:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 80080d2:	7dbb      	ldrb	r3, [r7, #22]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d107      	bne.n	80080e8 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3340      	adds	r3, #64	@ 0x40
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e00d      	b.n	8008104 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 20f2 	ldrb.w	r2, [r3, #242]	@ 0xf2
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	33f3      	adds	r3, #243	@ 0xf3
 80080f6:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3340      	adds	r3, #64	@ 0x40
 80080fc:	6939      	ldr	r1, [r7, #16]
 80080fe:	4618      	mov	r0, r3
 8008100:	f014 fcf1 	bl	801cae6 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008104:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8008110:	b5b0      	push	{r4, r5, r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800811e:	f107 030d 	add.w	r3, r7, #13
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff ffbd 	bl	80080a6 <VL53L0X_check_part_used>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8008130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d13b      	bne.n	80081b0 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 8008138:	7b7b      	ldrb	r3, [r7, #13]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d108      	bne.n	8008150 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	4a30      	ldr	r2, [pc, #192]	@ (8008204 <VL53L0X_get_device_info+0xf4>)
 8008142:	461c      	mov	r4, r3
 8008144:	4613      	mov	r3, r2
 8008146:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008148:	6020      	str	r0, [r4, #0]
 800814a:	6061      	str	r1, [r4, #4]
 800814c:	60a2      	str	r2, [r4, #8]
 800814e:	e027      	b.n	80081a0 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 8008150:	7b7b      	ldrb	r3, [r7, #13]
 8008152:	2b22      	cmp	r3, #34	@ 0x22
 8008154:	d80b      	bhi.n	800816e <VL53L0X_get_device_info+0x5e>
 8008156:	7b7b      	ldrb	r3, [r7, #13]
 8008158:	2b20      	cmp	r3, #32
 800815a:	d008      	beq.n	800816e <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	4a2a      	ldr	r2, [pc, #168]	@ (8008208 <VL53L0X_get_device_info+0xf8>)
 8008160:	461c      	mov	r4, r3
 8008162:	4613      	mov	r3, r2
 8008164:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	6061      	str	r1, [r4, #4]
 800816a:	60a2      	str	r2, [r4, #8]
 800816c:	e018      	b.n	80081a0 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800816e:	7b7b      	ldrb	r3, [r7, #13]
 8008170:	2b26      	cmp	r3, #38	@ 0x26
 8008172:	d808      	bhi.n	8008186 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	4a25      	ldr	r2, [pc, #148]	@ (800820c <VL53L0X_get_device_info+0xfc>)
 8008178:	461c      	mov	r4, r3
 800817a:	4613      	mov	r3, r2
 800817c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800817e:	6020      	str	r0, [r4, #0]
 8008180:	6061      	str	r1, [r4, #4]
 8008182:	60a2      	str	r2, [r4, #8]
 8008184:	e00c      	b.n	80081a0 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	4a21      	ldr	r2, [pc, #132]	@ (8008210 <VL53L0X_get_device_info+0x100>)
 800818a:	461d      	mov	r5, r3
 800818c:	4614      	mov	r4, r2
 800818e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008190:	6028      	str	r0, [r5, #0]
 8008192:	6069      	str	r1, [r5, #4]
 8008194:	60aa      	str	r2, [r5, #8]
 8008196:	60eb      	str	r3, [r5, #12]
 8008198:	6820      	ldr	r0, [r4, #0]
 800819a:	6128      	str	r0, [r5, #16]
 800819c:	7923      	ldrb	r3, [r4, #4]
 800819e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	3320      	adds	r3, #32
 80081a4:	491b      	ldr	r1, [pc, #108]	@ (8008214 <VL53L0X_get_device_info+0x104>)
 80081a6:	461a      	mov	r2, r3
 80081a8:	460b      	mov	r3, r1
 80081aa:	cb03      	ldmia	r3!, {r0, r1}
 80081ac:	6010      	str	r0, [r2, #0]
 80081ae:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d108      	bne.n	80081ca <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	3360      	adds	r3, #96	@ 0x60
 80081bc:	461a      	mov	r2, r3
 80081be:	21c0      	movs	r1, #192	@ 0xc0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f86a 	bl	800829a <VL53L0X_RdByte>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d112      	bne.n	80081f8 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 80081d2:	f107 030e 	add.w	r3, r7, #14
 80081d6:	461a      	mov	r2, r3
 80081d8:	21c2      	movs	r1, #194	@ 0xc2
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f85d 	bl	800829a <VL53L0X_RdByte>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	091b      	lsrs	r3, r3, #4
 80081f0:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	}

	return Status;
 80081f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bdb0      	pop	{r4, r5, r7, pc}
 8008204:	0801ee4c 	.word	0x0801ee4c
 8008208:	0801ee58 	.word	0x0801ee58
 800820c:	0801ee64 	.word	0x0801ee64
 8008210:	0801ee70 	.word	0x0801ee70
 8008214:	0801ee88 	.word	0x0801ee88

08008218 <_I2CWrite>:
/* Private function prototypes -----------------------------------------------*/
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	330a      	adds	r3, #10
 8008228:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8008236:	4619      	mov	r1, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	b29a      	uxth	r2, r3
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	f009 f82a 	bl	801129c <HAL_I2C_Master_Transmit>
 8008248:	4603      	mov	r3, r0
 800824a:	613b      	str	r3, [r7, #16]
    
    return status;
 800824c:	693b      	ldr	r3, [r7, #16]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008256:	b580      	push	{r7, lr}
 8008258:	b088      	sub	sp, #32
 800825a:	af02      	add	r7, sp, #8
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	330a      	adds	r3, #10
 8008266:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	b2db      	uxtb	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	b29a      	uxth	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4613      	mov	r3, r2
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	f009 f920 	bl	80114cc <HAL_I2C_Master_Receive>
 800828c:	4603      	mov	r3, r0
 800828e:	613b      	str	r3, [r7, #16]
    
    return status;
 8008290:	693b      	ldr	r3, [r7, #16]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	460b      	mov	r3, r1
 80082a4:	607a      	str	r2, [r7, #4]
 80082a6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80082ac:	f107 030b 	add.w	r3, r7, #11
 80082b0:	2201      	movs	r2, #1
 80082b2:	4619      	mov	r1, r3
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff ffaf 	bl	8008218 <_I2CWrite>
 80082ba:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082c2:	23ec      	movs	r3, #236	@ 0xec
 80082c4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80082c6:	e00c      	b.n	80082e2 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 80082c8:	2201      	movs	r2, #1
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff ffc2 	bl	8008256 <_I2CRead>
 80082d2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082da:	23ec      	movs	r3, #236	@ 0xec
 80082dc:	75fb      	strb	r3, [r7, #23]
 80082de:	e000      	b.n	80082e2 <VL53L0X_RdByte+0x48>
    }
done:
 80082e0:	bf00      	nop
    return Status;
 80082e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	460b      	mov	r3, r1
 80082fe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008300:	2300      	movs	r3, #0
 8008302:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b3f      	cmp	r3, #63	@ 0x3f
 8008308:	d902      	bls.n	8008310 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800830a:	f06f 0303 	mvn.w	r3, #3
 800830e:	e016      	b.n	800833e <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 8008310:	4a0d      	ldr	r2, [pc, #52]	@ (8008348 <VL53L0X_WriteMulti+0x58>)
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	480c      	ldr	r0, [pc, #48]	@ (800834c <VL53L0X_WriteMulti+0x5c>)
 800831c:	f014 fbeb 	bl	801caf6 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	461a      	mov	r2, r3
 8008326:	4908      	ldr	r1, [pc, #32]	@ (8008348 <VL53L0X_WriteMulti+0x58>)
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff75 	bl	8008218 <_I2CWrite>
 800832e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008336:	23ec      	movs	r3, #236	@ 0xec
 8008338:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800833a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000af4 	.word	0x20000af4
 800834c:	20000af5 	.word	0x20000af5

08008350 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	460b      	mov	r3, r1
 800835e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008360:	2300      	movs	r3, #0
 8008362:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8008364:	f107 030b 	add.w	r3, r7, #11
 8008368:	2201      	movs	r2, #1
 800836a:	4619      	mov	r1, r3
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff ff53 	bl	8008218 <_I2CWrite>
 8008372:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800837a:	23ec      	movs	r3, #236	@ 0xec
 800837c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800837e:	e00c      	b.n	800839a <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff ff66 	bl	8008256 <_I2CRead>
 800838a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008392:	23ec      	movs	r3, #236	@ 0xec
 8008394:	75fb      	strb	r3, [r7, #23]
 8008396:	e000      	b.n	800839a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008398:	bf00      	nop
    return Status;
 800839a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	460b      	mov	r3, r1
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80083ba:	f107 030b 	add.w	r3, r7, #11
 80083be:	2201      	movs	r2, #1
 80083c0:	4619      	mov	r1, r3
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff ff28 	bl	8008218 <_I2CWrite>
 80083c8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083d0:	23ec      	movs	r3, #236	@ 0xec
 80083d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083d4:	e015      	b.n	8008402 <VL53L0X_RdWord+0x5a>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80083d6:	2202      	movs	r2, #2
 80083d8:	490d      	ldr	r1, [pc, #52]	@ (8008410 <VL53L0X_RdWord+0x68>)
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7ff ff3b 	bl	8008256 <_I2CRead>
 80083e0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083e8:	23ec      	movs	r3, #236	@ 0xec
 80083ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083ec:	e009      	b.n	8008402 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <VL53L0X_RdWord+0x68>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4a06      	ldr	r2, [pc, #24]	@ (8008410 <VL53L0X_RdWord+0x68>)
 80083f8:	7852      	ldrb	r2, [r2, #1]
 80083fa:	4413      	add	r3, r2
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8008402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000af4 	.word	0x20000af4

08008414 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	460b      	mov	r3, r1
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8008426:	f107 030b 	add.w	r3, r7, #11
 800842a:	2201      	movs	r2, #1
 800842c:	4619      	mov	r1, r3
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f7ff fef2 	bl	8008218 <_I2CWrite>
 8008434:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800843c:	23ec      	movs	r3, #236	@ 0xec
 800843e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008440:	e01b      	b.n	800847a <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008442:	2204      	movs	r2, #4
 8008444:	4910      	ldr	r1, [pc, #64]	@ (8008488 <VL53L0X_RdDWord+0x74>)
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff ff05 	bl	8008256 <_I2CRead>
 800844c:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008454:	23ec      	movs	r3, #236	@ 0xec
 8008456:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008458:	e00f      	b.n	800847a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800845a:	4b0b      	ldr	r3, [pc, #44]	@ (8008488 <VL53L0X_RdDWord+0x74>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	061a      	lsls	r2, r3, #24
 8008460:	4b09      	ldr	r3, [pc, #36]	@ (8008488 <VL53L0X_RdDWord+0x74>)
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	041b      	lsls	r3, r3, #16
 8008466:	441a      	add	r2, r3
 8008468:	4b07      	ldr	r3, [pc, #28]	@ (8008488 <VL53L0X_RdDWord+0x74>)
 800846a:	789b      	ldrb	r3, [r3, #2]
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	4413      	add	r3, r2
 8008470:	4a05      	ldr	r2, [pc, #20]	@ (8008488 <VL53L0X_RdDWord+0x74>)
 8008472:	78d2      	ldrb	r2, [r2, #3]
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800847a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000af4 	.word	0x20000af4

0800848c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
 8008498:	4613      	mov	r3, r2
 800849a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80084a0:	4a0b      	ldr	r2, [pc, #44]	@ (80084d0 <VL53L0X_WrByte+0x44>)
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80084a6:	4a0a      	ldr	r2, [pc, #40]	@ (80084d0 <VL53L0X_WrByte+0x44>)
 80084a8:	78bb      	ldrb	r3, [r7, #2]
 80084aa:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80084ac:	2202      	movs	r2, #2
 80084ae:	4908      	ldr	r1, [pc, #32]	@ (80084d0 <VL53L0X_WrByte+0x44>)
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff feb1 	bl	8008218 <_I2CWrite>
 80084b6:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80084be:	23ec      	movs	r3, #236	@ 0xec
 80084c0:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 80084c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000af4 	.word	0x20000af4

080084d4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
 80084e0:	4613      	mov	r3, r2
 80084e2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80084e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008524 <VL53L0X_WrWord+0x50>)
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80084ee:	883b      	ldrh	r3, [r7, #0]
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <VL53L0X_WrWord+0x50>)
 80084f8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80084fa:	883b      	ldrh	r3, [r7, #0]
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <VL53L0X_WrWord+0x50>)
 8008500:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008502:	2203      	movs	r2, #3
 8008504:	4907      	ldr	r1, [pc, #28]	@ (8008524 <VL53L0X_WrWord+0x50>)
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fe86 	bl	8008218 <_I2CWrite>
 800850c:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008514:	23ec      	movs	r3, #236	@ 0xec
 8008516:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8008518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000af4 	.word	0x20000af4

08008528 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	4608      	mov	r0, r1
 8008532:	4611      	mov	r1, r2
 8008534:	461a      	mov	r2, r3
 8008536:	4603      	mov	r3, r0
 8008538:	70fb      	strb	r3, [r7, #3]
 800853a:	460b      	mov	r3, r1
 800853c:	70bb      	strb	r3, [r7, #2]
 800853e:	4613      	mov	r3, r2
 8008540:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008546:	f107 020e 	add.w	r2, r7, #14
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fea3 	bl	800829a <VL53L0X_RdByte>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 8008558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d110      	bne.n	8008582 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8008560:	7bba      	ldrb	r2, [r7, #14]
 8008562:	78bb      	ldrb	r3, [r7, #2]
 8008564:	4013      	ands	r3, r2
 8008566:	b2da      	uxtb	r2, r3
 8008568:	787b      	ldrb	r3, [r7, #1]
 800856a:	4313      	orrs	r3, r2
 800856c:	b2db      	uxtb	r3, r3
 800856e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008570:	7bba      	ldrb	r2, [r7, #14]
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff ff88 	bl	800848c <VL53L0X_WrByte>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
 8008580:	e000      	b.n	8008584 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008582:	bf00      	nop
done:
    return Status;
 8008584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800859c:	2002      	movs	r0, #2
 800859e:	f7f9 f92b 	bl	80017f8 <HAL_Delay>
    return status;
 80085a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_DEV Dev)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08a      	sub	sp, #40	@ 0x28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 80085b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 80085be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80085c2:	623b      	str	r3, [r7, #32]
	uint32_t timingBudget = 33000;
 80085c4:	f248 03e8 	movw	r3, #33000	@ 0x80e8
 80085c8:	61fb      	str	r3, [r7, #28]
	uint8_t preRangeVcselPeriod = 14;
 80085ca:	230e      	movs	r3, #14
 80085cc:	76fb      	strb	r3, [r7, #27]
	uint8_t finalRangeVcselPeriod = 10;
 80085ce:	230a      	movs	r3, #10
 80085d0:	76bb      	strb	r3, [r7, #26]

                          
  if( Dev->Present){
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80a4 	beq.w	8008726 <SetupSingleShot+0x176>
    status=VL53L0X_StaticInit(Dev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fb f8fa 	bl	80037d8 <VL53L0X_StaticInit>
 80085e4:	4603      	mov	r3, r0
 80085e6:	617b      	str	r3, [r7, #20]
    if( status ){
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <SetupSingleShot+0x44>
      printf("VL53L0X_StaticInit failed\n");
 80085ee:	4850      	ldr	r0, [pc, #320]	@ (8008730 <SetupSingleShot+0x180>)
 80085f0:	f014 f8fa 	bl	801c7e8 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80085f4:	f107 0212 	add.w	r2, r7, #18
 80085f8:	f107 0313 	add.w	r3, r7, #19
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fb ffba 	bl	8004578 <VL53L0X_PerformRefCalibration>
 8008604:	4603      	mov	r3, r0
 8008606:	617b      	str	r3, [r7, #20]
    if( status ){
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <SetupSingleShot+0x64>
      printf("VL53L0X_PerformRefCalibration failed\n");
 800860e:	4849      	ldr	r0, [pc, #292]	@ (8008734 <SetupSingleShot+0x184>)
 8008610:	f014 f8ea 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8008614:	f107 020b 	add.w	r2, r7, #11
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fc fbf6 	bl	8004e10 <VL53L0X_PerformRefSpadManagement>
 8008624:	4603      	mov	r3, r0
 8008626:	617b      	str	r3, [r7, #20]
    if( status ){
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <SetupSingleShot+0x84>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800862e:	4842      	ldr	r0, [pc, #264]	@ (8008738 <SetupSingleShot+0x188>)
 8008630:	f014 f8da 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8008634:	2100      	movs	r1, #0
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fb fade 	bl	8003bf8 <VL53L0X_SetDeviceMode>
 800863c:	4603      	mov	r3, r0
 800863e:	617b      	str	r3, [r7, #20]
    if( status ){
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <SetupSingleShot+0x9c>
      printf("VL53L0X_SetDeviceMode failed\n");
 8008646:	483d      	ldr	r0, [pc, #244]	@ (800873c <SetupSingleShot+0x18c>)
 8008648:	f014 f8ce 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 800864c:	2201      	movs	r2, #1
 800864e:	2100      	movs	r1, #0
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fb fd8b 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 8008656:	4603      	mov	r3, r0
 8008658:	617b      	str	r3, [r7, #20]
    if( status ){
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <SetupSingleShot+0xb6>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8008660:	4837      	ldr	r0, [pc, #220]	@ (8008740 <SetupSingleShot+0x190>)
 8008662:	f014 f8c1 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8008666:	2201      	movs	r2, #1
 8008668:	2101      	movs	r1, #1
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fb fd7e 	bl	800416c <VL53L0X_SetLimitCheckEnable>
 8008670:	4603      	mov	r3, r0
 8008672:	617b      	str	r3, [r7, #20]
    if( status ){
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <SetupSingleShot+0xd0>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800867a:	4831      	ldr	r0, [pc, #196]	@ (8008740 <SetupSingleShot+0x190>)
 800867c:	f014 f8b4 	bl	801c7e8 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 8008680:	f641 1399 	movw	r3, #6553	@ 0x1999
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
    sigmaLimit = (FixPoint1616_t)(60*65536);
 8008686:	f44f 1370 	mov.w	r3, #3932160	@ 0x3c0000
 800868a:	623b      	str	r3, [r7, #32]
    timingBudget = 33000;
 800868c:	f248 03e8 	movw	r3, #33000	@ 0x80e8
 8008690:	61fb      	str	r3, [r7, #28]
    preRangeVcselPeriod = 18;
 8008692:	2312      	movs	r3, #18
 8008694:	76fb      	strb	r3, [r7, #27]
    finalRangeVcselPeriod = 14;
 8008696:	230e      	movs	r3, #14
 8008698:	76bb      	strb	r3, [r7, #26]
    
    status = VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800869a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869c:	2101      	movs	r1, #1
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fb fe14 	bl	80042cc <VL53L0X_SetLimitCheckValue>
 80086a4:	4603      	mov	r3, r0
 80086a6:	617b      	str	r3, [r7, #20]
    
    if( status ){
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <SetupSingleShot+0x104>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80086ae:	4825      	ldr	r0, [pc, #148]	@ (8008744 <SetupSingleShot+0x194>)
 80086b0:	f014 f89a 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80086b4:	6a3a      	ldr	r2, [r7, #32]
 80086b6:	2100      	movs	r1, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7fb fe07 	bl	80042cc <VL53L0X_SetLimitCheckValue>
 80086be:	4603      	mov	r3, r0
 80086c0:	617b      	str	r3, [r7, #20]
    if( status ){
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <SetupSingleShot+0x11e>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80086c8:	481e      	ldr	r0, [pc, #120]	@ (8008744 <SetupSingleShot+0x194>)
 80086ca:	f014 f88d 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,  timingBudget);
 80086ce:	69f9      	ldr	r1, [r7, #28]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fb faef 	bl	8003cb4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80086d6:	4603      	mov	r3, r0
 80086d8:	617b      	str	r3, [r7, #20]
    if( status ){
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <SetupSingleShot+0x136>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80086e0:	4819      	ldr	r0, [pc, #100]	@ (8008748 <SetupSingleShot+0x198>)
 80086e2:	f014 f881 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80086e6:	7efb      	ldrb	r3, [r7, #27]
 80086e8:	461a      	mov	r2, r3
 80086ea:	2100      	movs	r1, #0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7fb fb07 	bl	8003d00 <VL53L0X_SetVcselPulsePeriod>
 80086f2:	4603      	mov	r3, r0
 80086f4:	617b      	str	r3, [r7, #20]
    if( status ){
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <SetupSingleShot+0x152>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80086fc:	4813      	ldr	r0, [pc, #76]	@ (800874c <SetupSingleShot+0x19c>)
 80086fe:	f014 f873 	bl	801c7e8 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8008702:	7ebb      	ldrb	r3, [r7, #26]
 8008704:	461a      	mov	r2, r3
 8008706:	2101      	movs	r1, #1
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7fb faf9 	bl	8003d00 <VL53L0X_SetVcselPulsePeriod>
 800870e:	4603      	mov	r3, r0
 8008710:	617b      	str	r3, [r7, #20]
    if( status ){
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <SetupSingleShot+0x16e>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8008718:	480c      	ldr	r0, [pc, #48]	@ (800874c <SetupSingleShot+0x19c>)
 800871a:	f014 f865 	bl	801c7e8 <puts>
    }
    
    Dev->LeakyFirst=1;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
  }
}
 8008726:	bf00      	nop
 8008728:	3728      	adds	r7, #40	@ 0x28
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	0801f2f0 	.word	0x0801f2f0
 8008734:	0801f30c 	.word	0x0801f30c
 8008738:	0801f334 	.word	0x0801f334
 800873c:	0801f35c 	.word	0x0801f35c
 8008740:	0801f37c 	.word	0x0801f37c
 8008744:	0801f3a0 	.word	0x0801f3a0
 8008748:	0801f3c4 	.word	0x0801f3c4
 800874c:	0801f3fc 	.word	0x0801f3fc

08008750 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008754:	4b03      	ldr	r3, [pc, #12]	@ (8008764 <LL_FLASH_GetUDN+0x14>)
 8008756:	681b      	ldr	r3, [r3, #0]
}
 8008758:	4618      	mov	r0, r3
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	1fff7580 	.word	0x1fff7580

08008768 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800876c:	4b03      	ldr	r3, [pc, #12]	@ (800877c <LL_FLASH_GetDeviceID+0x14>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	b2db      	uxtb	r3, r3
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	1fff7584 	.word	0x1fff7584

08008780 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008784:	4b03      	ldr	r3, [pc, #12]	@ (8008794 <LL_FLASH_GetSTCompanyID+0x14>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	0a1b      	lsrs	r3, r3, #8
}
 800878a:	4618      	mov	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	1fff7584 	.word	0x1fff7584

08008798 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879a:	b0b1      	sub	sp, #196	@ 0xc4
 800879c:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800879e:	2392      	movs	r3, #146	@ 0x92
 80087a0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 80087a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80087a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr;  
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80087ac:	4b93      	ldr	r3, [pc, #588]	@ (80089fc <APP_BLE_Init+0x264>)
 80087ae:	463c      	mov	r4, r7
 80087b0:	461d      	mov	r5, r3
 80087b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087c2:	c403      	stmia	r4!, {r0, r1}
 80087c4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80087c6:	f000 facd 	bl	8008d64 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80087ca:	2101      	movs	r1, #1
 80087cc:	2002      	movs	r0, #2
 80087ce:	f013 f83f 	bl	801b850 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80087d2:	4a8b      	ldr	r2, [pc, #556]	@ (8008a00 <APP_BLE_Init+0x268>)
 80087d4:	2100      	movs	r1, #0
 80087d6:	2002      	movs	r0, #2
 80087d8:	f013 f966 	bl	801baa8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80087dc:	463b      	mov	r3, r7
 80087de:	4618      	mov	r0, r3
 80087e0:	f011 fa48 	bl	8019c74 <SHCI_C2_BLE_Init>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  if (status != SHCI_Success)
 80087ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d008      	beq.n	8008804 <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80087f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80087f6:	4619      	mov	r1, r3
 80087f8:	4882      	ldr	r0, [pc, #520]	@ (8008a04 <APP_BLE_Init+0x26c>)
 80087fa:	f013 ff8d 	bl	801c718 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80087fe:	f7fa fc5d 	bl	80030bc <Error_Handler>
 8008802:	e002      	b.n	800880a <APP_BLE_Init+0x72>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8008804:	4880      	ldr	r0, [pc, #512]	@ (8008a08 <APP_BLE_Init+0x270>)
 8008806:	f013 ff87 	bl	801c718 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800880a:	f000 fac1 	bl	8008d90 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800880e:	f012 f985 	bl	801ab1c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008812:	4b7e      	ldr	r3, [pc, #504]	@ (8008a0c <APP_BLE_Init+0x274>)
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800881a:	4b7c      	ldr	r3, [pc, #496]	@ (8008a0c <APP_BLE_Init+0x274>)
 800881c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008820:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008822:	4a7b      	ldr	r2, [pc, #492]	@ (8008a10 <APP_BLE_Init+0x278>)
 8008824:	2100      	movs	r1, #0
 8008826:	2001      	movs	r0, #1
 8008828:	f013 f93e 	bl	801baa8 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800882c:	2006      	movs	r0, #6
 800882e:	f010 fcee 	bl	801920e <aci_hal_set_radio_activity_mask>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  if (ret != BLE_STATUS_SUCCESS)
 8008838:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <APP_BLE_Init+0xb6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8008840:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8008844:	4619      	mov	r1, r3
 8008846:	4873      	ldr	r0, [pc, #460]	@ (8008a14 <APP_BLE_Init+0x27c>)
 8008848:	f013 ff66 	bl	801c718 <iprintf>
 800884c:	e002      	b.n	8008854 <APP_BLE_Init+0xbc>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800884e:	4872      	ldr	r0, [pc, #456]	@ (8008a18 <APP_BLE_Init+0x280>)
 8008850:	f013 ff62 	bl	801c718 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8008854:	f001 fab4 	bl	8009dc0 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  /**
  * Initialize MOTENV Server Application
  */
  MOTENV_APP_Init();
 8008858:	f000 ffb6 	bl	80097c8 <MOTENV_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800885c:	4b6f      	ldr	r3, [pc, #444]	@ (8008a1c <APP_BLE_Init+0x284>)
 800885e:	2200      	movs	r2, #0
 8008860:	496f      	ldr	r1, [pc, #444]	@ (8008a20 <APP_BLE_Init+0x288>)
 8008862:	2000      	movs	r0, #0
 8008864:	f7f9 fe66 	bl	8002534 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8008868:	4b6e      	ldr	r3, [pc, #440]	@ (8008a24 <APP_BLE_Init+0x28c>)
 800886a:	2200      	movs	r2, #0
 800886c:	496e      	ldr	r1, [pc, #440]	@ (8008a28 <APP_BLE_Init+0x290>)
 800886e:	2000      	movs	r0, #0
 8008870:	f7f9 fe60 	bl	8002534 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008874:	4b65      	ldr	r3, [pc, #404]	@ (8008a0c <APP_BLE_Init+0x274>)
 8008876:	2200      	movs	r2, #0
 8008878:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800887a:	4b64      	ldr	r3, [pc, #400]	@ (8008a0c <APP_BLE_Init+0x274>)
 800887c:	2200      	movs	r2, #0
 800887e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8008880:	4b6a      	ldr	r3, [pc, #424]	@ (8008a2c <APP_BLE_Init+0x294>)
 8008882:	2280      	movs	r2, #128	@ 0x80
 8008884:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8008886:	4b6a      	ldr	r3, [pc, #424]	@ (8008a30 <APP_BLE_Init+0x298>)
 8008888:	22a0      	movs	r2, #160	@ 0xa0
 800888a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800888c:	2001      	movs	r0, #1
 800888e:	f000 fc2f 	bl	80090f0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8008892:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8008896:	f011 fa31 	bl	8019cfc <SHCI_GetWirelessFwInfo>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	f040 8092 	bne.w	80089c6 <APP_BLE_Init+0x22e>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 80088a2:	f000 fcd1 	bl	8009248 <BleGetBdAddress>
 80088a6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 80088aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088ae:	3305      	adds	r3, #5
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461d      	mov	r5, r3
 80088b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088b8:	3304      	adds	r3, #4
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	461e      	mov	r6, r3
 80088be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088c2:	3303      	adds	r3, #3
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088cc:	3302      	adds	r3, #2
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088d6:	3301      	adds	r3, #1
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	461c      	mov	r4, r3
 80088dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80088e6:	9303      	str	r3, [sp, #12]
 80088e8:	9402      	str	r4, [sp, #8]
 80088ea:	9101      	str	r1, [sp, #4]
 80088ec:	9200      	str	r2, [sp, #0]
 80088ee:	4633      	mov	r3, r6
 80088f0:	462a      	mov	r2, r5
 80088f2:	4950      	ldr	r1, [pc, #320]	@ (8008a34 <APP_BLE_Init+0x29c>)
 80088f4:	f013 ff80 	bl	801c7f8 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80088f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	4619      	mov	r1, r3
 8008908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800890c:	789b      	ldrb	r3, [r3, #2]
 800890e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	460b      	mov	r3, r1
 8008916:	4948      	ldr	r1, [pc, #288]	@ (8008a38 <APP_BLE_Init+0x2a0>)
 8008918:	f013 ff6e 	bl	801c7f8 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800891c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008920:	78db      	ldrb	r3, [r3, #3]
 8008922:	461a      	mov	r2, r3
 8008924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008928:	791b      	ldrb	r3, [r3, #4]
 800892a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800892e:	4943      	ldr	r1, [pc, #268]	@ (8008a3c <APP_BLE_Init+0x2a4>)
 8008930:	f013 ff62 	bl	801c7f8 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8008934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008938:	7a9b      	ldrb	r3, [r3, #10]
 800893a:	461a      	mov	r2, r3
 800893c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008940:	7adb      	ldrb	r3, [r3, #11]
 8008942:	4619      	mov	r1, r3
 8008944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008948:	7b1b      	ldrb	r3, [r3, #12]
 800894a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	460b      	mov	r3, r1
 8008952:	493b      	ldr	r1, [pc, #236]	@ (8008a40 <APP_BLE_Init+0x2a8>)
 8008954:	f013 ff50 	bl	801c7f8 <siprintf>
     
     BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 8008958:	2100      	movs	r1, #0
 800895a:	2000      	movs	r0, #0
 800895c:	f006 ff26 	bl	800f7ac <BSP_LCD_Clear>
     BSP_LCD_Refresh(0);
 8008960:	2000      	movs	r0, #0
 8008962:	f006 fdfb 	bl	800f55c <BSP_LCD_Refresh>
     UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)BdAddress, LEFT_MODE);
 8008966:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800896a:	2303      	movs	r3, #3
 800896c:	2100      	movs	r1, #0
 800896e:	2000      	movs	r0, #0
 8008970:	f012 fd04 	bl	801b37c <UTIL_LCD_DisplayStringAt>
     UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)StackVersion, LEFT_MODE);
 8008974:	f012 fc72 	bl	801b25c <UTIL_LCD_GetFont>
 8008978:	4603      	mov	r3, r0
 800897a:	88db      	ldrh	r3, [r3, #6]
 800897c:	4619      	mov	r1, r3
 800897e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8008982:	2303      	movs	r3, #3
 8008984:	2000      	movs	r0, #0
 8008986:	f012 fcf9 	bl	801b37c <UTIL_LCD_DisplayStringAt>
     UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)StackBranch, LEFT_MODE);
 800898a:	f012 fc67 	bl	801b25c <UTIL_LCD_GetFont>
 800898e:	4603      	mov	r3, r0
 8008990:	88db      	ldrh	r3, [r3, #6]
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	4619      	mov	r1, r3
 8008996:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800899a:	2303      	movs	r3, #3
 800899c:	2000      	movs	r0, #0
 800899e:	f012 fced 	bl	801b37c <UTIL_LCD_DisplayStringAt>
     UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)FusVersion, LEFT_MODE);
 80089a2:	f012 fc5b 	bl	801b25c <UTIL_LCD_GetFont>
 80089a6:	4603      	mov	r3, r0
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	461a      	mov	r2, r3
 80089ac:	4613      	mov	r3, r2
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	4413      	add	r3, r2
 80089b2:	4619      	mov	r1, r3
 80089b4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80089b8:	2303      	movs	r3, #3
 80089ba:	2000      	movs	r0, #0
 80089bc:	f012 fcde 	bl	801b37c <UTIL_LCD_DisplayStringAt>
     BSP_LCD_Refresh(0);
 80089c0:	2000      	movs	r0, #0
 80089c2:	f006 fdcb 	bl	800f55c <BSP_LCD_Refresh>
   }
   HAL_Delay(4000);
 80089c6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80089ca:	f7f8 ff15 	bl	80017f8 <HAL_Delay>
   /* Displays Application */
   BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 80089ce:	2100      	movs	r1, #0
 80089d0:	2000      	movs	r0, #0
 80089d2:	f006 feeb 	bl	800f7ac <BSP_LCD_Clear>
   BSP_LCD_Refresh(0);
 80089d6:	2000      	movs	r0, #0
 80089d8:	f006 fdc0 	bl	800f55c <BSP_LCD_Refresh>
   UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"WB BLE Sensor", CENTER_MODE);
 80089dc:	2301      	movs	r3, #1
 80089de:	4a19      	ldr	r2, [pc, #100]	@ (8008a44 <APP_BLE_Init+0x2ac>)
 80089e0:	2100      	movs	r1, #0
 80089e2:	2000      	movs	r0, #0
 80089e4:	f012 fcca 	bl	801b37c <UTIL_LCD_DisplayStringAt>
   BSP_LCD_Refresh(0);
 80089e8:	2000      	movs	r0, #0
 80089ea:	f006 fdb7 	bl	800f55c <BSP_LCD_Refresh>
   
   VL53L0X_Start_Measure();
 80089ee:	f7f9 f84b 	bl	8001a88 <VL53L0X_Start_Measure>
  /* USER CODE END APP_BLE_Init_2 */

  return;
 80089f2:	bf00      	nop
}
 80089f4:	37b4      	adds	r7, #180	@ 0xb4
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089fa:	bf00      	nop
 80089fc:	0801f564 	.word	0x0801f564
 8008a00:	08019699 	.word	0x08019699
 8008a04:	0801f420 	.word	0x0801f420
 8008a08:	0801f458 	.word	0x0801f458
 8008a0c:	20000b3c 	.word	0x20000b3c
 8008a10:	080092d1 	.word	0x080092d1
 8008a14:	0801f480 	.word	0x0801f480
 8008a18:	0801f4c4 	.word	0x0801f4c4
 8008a1c:	08009329 	.word	0x08009329
 8008a20:	20000bbd 	.word	0x20000bbd
 8008a24:	08009339 	.word	0x08009339
 8008a28:	20000bbe 	.word	0x20000bbe
 8008a2c:	20000bc0 	.word	0x20000bc0
 8008a30:	20000bc2 	.word	0x20000bc2
 8008a34:	0801f4fc 	.word	0x0801f4fc
 8008a38:	0801f51c 	.word	0x0801f51c
 8008a3c:	0801f530 	.word	0x0801f530
 8008a40:	0801f544 	.word	0x0801f544
 8008a44:	0801f554 	.word	0x0801f554

08008a48 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008a48:	b5b0      	push	{r4, r5, r7, lr}
 8008a4a:	b090      	sub	sp, #64	@ 0x40
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008a50:	2392      	movs	r3, #146	@ 0x92
 8008a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2bff      	cmp	r3, #255	@ 0xff
 8008a62:	f000 8124 	beq.w	8008cae <SVCCTL_App_Notification+0x266>
 8008a66:	2bff      	cmp	r3, #255	@ 0xff
 8008a68:	f300 814c 	bgt.w	8008d04 <SVCCTL_App_Notification+0x2bc>
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d002      	beq.n	8008a76 <SVCCTL_App_Notification+0x2e>
 8008a70:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a72:	d030      	beq.n	8008ad6 <SVCCTL_App_Notification+0x8e>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008a74:	e146      	b.n	8008d04 <SVCCTL_App_Notification+0x2bc>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	3302      	adds	r3, #2
 8008a7a:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	4ba3      	ldr	r3, [pc, #652]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008a86:	8adb      	ldrh	r3, [r3, #22]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d114      	bne.n	8008ab6 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008a8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008a92:	4ba0      	ldr	r3, [pc, #640]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8008a9a:	489f      	ldr	r0, [pc, #636]	@ (8008d18 <SVCCTL_App_Notification+0x2d0>)
 8008a9c:	f013 fea4 	bl	801c7e8 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008aa6:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8008aa8:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8008aae:	461a      	mov	r2, r3
 8008ab0:	489a      	ldr	r0, [pc, #616]	@ (8008d1c <SVCCTL_App_Notification+0x2d4>)
 8008ab2:	f013 fe31 	bl	801c718 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	f000 fb1a 	bl	80090f0 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8008abc:	4b98      	ldr	r3, [pc, #608]	@ (8008d20 <SVCCTL_App_Notification+0x2d8>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008ac2:	4b94      	ldr	r3, [pc, #592]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008ac4:	8ada      	ldrh	r2, [r3, #22]
 8008ac6:	4b96      	ldr	r3, [pc, #600]	@ (8008d20 <SVCCTL_App_Notification+0x2d8>)
 8008ac8:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8008aca:	4895      	ldr	r0, [pc, #596]	@ (8008d20 <SVCCTL_App_Notification+0x2d8>)
 8008acc:	f001 f964 	bl	8009d98 <P2PS_APP_Notification>
      VL53L0X_Start_Measure();
 8008ad0:	f7f8 ffda 	bl	8001a88 <VL53L0X_Start_Measure>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008ad4:	e119      	b.n	8008d0a <SVCCTL_App_Notification+0x2c2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	3302      	adds	r3, #2
 8008ada:	623b      	str	r3, [r7, #32]
      switch (p_meta_evt->subevent)
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b0c      	cmp	r3, #12
 8008ae2:	d033      	beq.n	8008b4c <SVCCTL_App_Notification+0x104>
 8008ae4:	2b0c      	cmp	r3, #12
 8008ae6:	f300 80e0 	bgt.w	8008caa <SVCCTL_App_Notification+0x262>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d06c      	beq.n	8008bc8 <SVCCTL_App_Notification+0x180>
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	f040 80db 	bne.w	8008caa <SVCCTL_App_Notification+0x262>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	3301      	adds	r3, #1
 8008af8:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8008afa:	488a      	ldr	r0, [pc, #552]	@ (8008d24 <SVCCTL_App_Notification+0x2dc>)
 8008afc:	f013 fe74 	bl	801c7e8 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008b06:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f7 fcf3 	bl	80004f4 <__aeabi_i2d>
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	4b85      	ldr	r3, [pc, #532]	@ (8008d28 <SVCCTL_App_Notification+0x2e0>)
 8008b14:	f7f7 fd58 	bl	80005c8 <__aeabi_dmul>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008b26:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008b28:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	005b      	lsls	r3, r3, #1
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	9400      	str	r4, [sp, #0]
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4879      	ldr	r0, [pc, #484]	@ (8008d2c <SVCCTL_App_Notification+0x2e4>)
 8008b46:	f013 fde7 	bl	801c718 <iprintf>
          break;
 8008b4a:	e0af      	b.n	8008cac <SVCCTL_App_Notification+0x264>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8008b52:	4877      	ldr	r0, [pc, #476]	@ (8008d30 <SVCCTL_App_Notification+0x2e8>)
 8008b54:	f013 fde0 	bl	801c718 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <SVCCTL_App_Notification+0x120>
            APP_DBG_MSG("status ok \n");
 8008b60:	4874      	ldr	r0, [pc, #464]	@ (8008d34 <SVCCTL_App_Notification+0x2ec>)
 8008b62:	f013 fe41 	bl	801c7e8 <puts>
 8008b66:	e002      	b.n	8008b6e <SVCCTL_App_Notification+0x126>
            APP_DBG_MSG("status nok \n");
 8008b68:	4873      	ldr	r0, [pc, #460]	@ (8008d38 <SVCCTL_App_Notification+0x2f0>)
 8008b6a:	f013 fe3d 	bl	801c7e8 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8008b6e:	4b69      	ldr	r3, [pc, #420]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008b70:	8adb      	ldrh	r3, [r3, #22]
 8008b72:	f107 020e 	add.w	r2, r7, #14
 8008b76:	f107 010f 	add.w	r1, r7, #15
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f010 fbbf 	bl	80192fe <hci_le_read_phy>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8008b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <SVCCTL_App_Notification+0x14e>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8008b8e:	486b      	ldr	r0, [pc, #428]	@ (8008d3c <SVCCTL_App_Notification+0x2f4>)
 8008b90:	f013 fdc2 	bl	801c718 <iprintf>
          break;
 8008b94:	e08a      	b.n	8008cac <SVCCTL_App_Notification+0x264>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8008b96:	486a      	ldr	r0, [pc, #424]	@ (8008d40 <SVCCTL_App_Notification+0x2f8>)
 8008b98:	f013 fe26 	bl	801c7e8 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d10a      	bne.n	8008bb8 <SVCCTL_App_Notification+0x170>
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d107      	bne.n	8008bb8 <SVCCTL_App_Notification+0x170>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4619      	mov	r1, r3
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4864      	ldr	r0, [pc, #400]	@ (8008d44 <SVCCTL_App_Notification+0x2fc>)
 8008bb2:	f013 fdb1 	bl	801c718 <iprintf>
          break;
 8008bb6:	e079      	b.n	8008cac <SVCCTL_App_Notification+0x264>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4860      	ldr	r0, [pc, #384]	@ (8008d44 <SVCCTL_App_Notification+0x2fc>)
 8008bc2:	f013 fda9 	bl	801c718 <iprintf>
          break;
 8008bc6:	e071      	b.n	8008cac <SVCCTL_App_Notification+0x264>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008bce:	4b51      	ldr	r3, [pc, #324]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008bd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7f9 fd27 	bl	8002628 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	4619      	mov	r1, r3
 8008be4:	4858      	ldr	r0, [pc, #352]	@ (8008d48 <SVCCTL_App_Notification+0x300>)
 8008be6:	f013 fd97 	bl	801c718 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008bee:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008bf4:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008bfa:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008c00:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008c06:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	9101      	str	r1, [sp, #4]
 8008c10:	9200      	str	r2, [sp, #0]
 8008c12:	462b      	mov	r3, r5
 8008c14:	4622      	mov	r2, r4
 8008c16:	4601      	mov	r1, r0
 8008c18:	484c      	ldr	r0, [pc, #304]	@ (8008d4c <SVCCTL_App_Notification+0x304>)
 8008c1a:	f013 fd7d 	bl	801c718 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8008c24:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7f7 fc64 	bl	80004f4 <__aeabi_i2d>
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	4b3d      	ldr	r3, [pc, #244]	@ (8008d28 <SVCCTL_App_Notification+0x2e0>)
 8008c32:	f7f7 fcc9 	bl	80005c8 <__aeabi_dmul>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8008c44:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008c46:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	9400      	str	r4, [sp, #0]
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4832      	ldr	r0, [pc, #200]	@ (8008d2c <SVCCTL_App_Notification+0x2e4>)
 8008c64:	f013 fd58 	bl	801c718 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008c68:	4b2a      	ldr	r3, [pc, #168]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008c6a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d104      	bne.n	8008c7c <SVCCTL_App_Notification+0x234>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008c72:	4b28      	ldr	r3, [pc, #160]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008c74:	2206      	movs	r2, #6
 8008c76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008c7a:	e003      	b.n	8008c84 <SVCCTL_App_Notification+0x23c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008c7c:	4b25      	ldr	r3, [pc, #148]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008c7e:	2205      	movs	r2, #5
 8008c80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	4b21      	ldr	r3, [pc, #132]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008c8e:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8008c90:	4b23      	ldr	r3, [pc, #140]	@ (8008d20 <SVCCTL_App_Notification+0x2d8>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008c96:	4b1f      	ldr	r3, [pc, #124]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008c98:	8ada      	ldrh	r2, [r3, #22]
 8008c9a:	4b21      	ldr	r3, [pc, #132]	@ (8008d20 <SVCCTL_App_Notification+0x2d8>)
 8008c9c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8008c9e:	4820      	ldr	r0, [pc, #128]	@ (8008d20 <SVCCTL_App_Notification+0x2d8>)
 8008ca0:	f001 f87a 	bl	8009d98 <P2PS_APP_Notification>
          VL53L0X_Stop_Measure();
 8008ca4:	f7f8 fefe 	bl	8001aa4 <VL53L0X_Stop_Measure>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008ca8:	e000      	b.n	8008cac <SVCCTL_App_Notification+0x264>
          break;
 8008caa:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008cac:	e02d      	b.n	8008d0a <SVCCTL_App_Notification+0x2c2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <SVCCTL_App_Notification+0x2a2>
 8008cc2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	dc1e      	bgt.n	8008d08 <SVCCTL_App_Notification+0x2c0>
 8008cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cce:	d015      	beq.n	8008cfc <SVCCTL_App_Notification+0x2b4>
 8008cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cd4:	dc18      	bgt.n	8008d08 <SVCCTL_App_Notification+0x2c0>
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d012      	beq.n	8008d00 <SVCCTL_App_Notification+0x2b8>
 8008cda:	f240 4207 	movw	r2, #1031	@ 0x407
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d112      	bne.n	8008d08 <SVCCTL_App_Notification+0x2c0>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8008ce2:	481b      	ldr	r0, [pc, #108]	@ (8008d50 <SVCCTL_App_Notification+0x308>)
 8008ce4:	f013 fd18 	bl	801c718 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008ce8:	e00b      	b.n	8008d02 <SVCCTL_App_Notification+0x2ba>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8008cea:	481a      	ldr	r0, [pc, #104]	@ (8008d54 <SVCCTL_App_Notification+0x30c>)
 8008cec:	f013 fd14 	bl	801c718 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008cf0:	4b08      	ldr	r3, [pc, #32]	@ (8008d14 <SVCCTL_App_Notification+0x2cc>)
 8008cf2:	8adb      	ldrh	r3, [r3, #22]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f010 f8f4 	bl	8018ee2 <aci_gatt_confirm_indication>
        break;
 8008cfa:	e002      	b.n	8008d02 <SVCCTL_App_Notification+0x2ba>
          break;
 8008cfc:	bf00      	nop
 8008cfe:	e003      	b.n	8008d08 <SVCCTL_App_Notification+0x2c0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008d00:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008d02:	e001      	b.n	8008d08 <SVCCTL_App_Notification+0x2c0>
      break;
 8008d04:	bf00      	nop
 8008d06:	e000      	b.n	8008d0a <SVCCTL_App_Notification+0x2c2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008d08:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008d0a:	2301      	movs	r3, #1
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3730      	adds	r7, #48	@ 0x30
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bdb0      	pop	{r4, r5, r7, pc}
 8008d14:	20000b3c 	.word	0x20000b3c
 8008d18:	0801f5a0 	.word	0x0801f5a0
 8008d1c:	0801f5cc 	.word	0x0801f5cc
 8008d20:	20000bc4 	.word	0x20000bc4
 8008d24:	0801f608 	.word	0x0801f608
 8008d28:	3ff40000 	.word	0x3ff40000
 8008d2c:	0801f63c 	.word	0x0801f63c
 8008d30:	0801f6a8 	.word	0x0801f6a8
 8008d34:	0801f6d8 	.word	0x0801f6d8
 8008d38:	0801f6e4 	.word	0x0801f6e4
 8008d3c:	0801f6f0 	.word	0x0801f6f0
 8008d40:	0801f710 	.word	0x0801f710
 8008d44:	0801f730 	.word	0x0801f730
 8008d48:	0801f754 	.word	0x0801f754
 8008d4c:	0801f79c 	.word	0x0801f79c
 8008d50:	0801f7ec 	.word	0x0801f7ec
 8008d54:	0801f814 	.word	0x0801f814

08008d58 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8008d5c:	f001 f856 	bl	8009e0c <P2PS_APP_SW1_Button_Action>
}
 8008d60:	bf00      	nop
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008d6a:	4b06      	ldr	r3, [pc, #24]	@ (8008d84 <Ble_Tl_Init+0x20>)
 8008d6c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008d6e:	4b06      	ldr	r3, [pc, #24]	@ (8008d88 <Ble_Tl_Init+0x24>)
 8008d70:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008d72:	463b      	mov	r3, r7
 8008d74:	4619      	mov	r1, r3
 8008d76:	4805      	ldr	r0, [pc, #20]	@ (8008d8c <Ble_Tl_Init+0x28>)
 8008d78:	f010 fc72 	bl	8019660 <hci_init>

  return;
 8008d7c:	bf00      	nop
}
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20030028 	.word	0x20030028
 8008d88:	080093c3 	.word	0x080093c3
 8008d8c:	0800938b 	.word	0x0800938b

08008d90 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d92:	b08d      	sub	sp, #52	@ 0x34
 8008d94:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008d96:	2300      	movs	r3, #0
 8008d98:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008d9a:	2392      	movs	r3, #146	@ 0x92
 8008d9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8008d9e:	48a5      	ldr	r0, [pc, #660]	@ (8009034 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008da0:	f013 fd22 	bl	801c7e8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008da4:	f010 fa87 	bl	80192b6 <hci_reset>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	4619      	mov	r1, r3
 8008db6:	48a0      	ldr	r0, [pc, #640]	@ (8009038 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8008db8:	f013 fcae 	bl	801c718 <iprintf>
 8008dbc:	e002      	b.n	8008dc4 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8008dbe:	489f      	ldr	r0, [pc, #636]	@ (800903c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8008dc0:	f013 fd12 	bl	801c7e8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008dc4:	f000 fa40 	bl	8009248 <BleGetBdAddress>
 8008dc8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	2106      	movs	r1, #6
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f010 f931 	bl	8019036 <aci_hal_write_config_data>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	4619      	mov	r1, r3
 8008de2:	4897      	ldr	r0, [pc, #604]	@ (8009040 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8008de4:	f013 fc98 	bl	801c718 <iprintf>
 8008de8:	e021      	b.n	8008e2e <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8008dea:	4896      	ldr	r0, [pc, #600]	@ (8009044 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8008dec:	f013 fcfc 	bl	801c7e8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3305      	adds	r3, #5
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	4618      	mov	r0, r3
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	461c      	mov	r4, r3
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	3303      	adds	r3, #3
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	461d      	mov	r5, r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	3302      	adds	r3, #2
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	4619      	mov	r1, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	9101      	str	r1, [sp, #4]
 8008e20:	9200      	str	r2, [sp, #0]
 8008e22:	462b      	mov	r3, r5
 8008e24:	4622      	mov	r2, r4
 8008e26:	4601      	mov	r1, r0
 8008e28:	4887      	ldr	r0, [pc, #540]	@ (8009048 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8008e2a:	f013 fc75 	bl	801c718 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	3305      	adds	r3, #5
 8008e32:	781a      	ldrb	r2, [r3, #0]
 8008e34:	4b85      	ldr	r3, [pc, #532]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e36:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	781a      	ldrb	r2, [r3, #0]
 8008e3e:	4b83      	ldr	r3, [pc, #524]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e40:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	3303      	adds	r3, #3
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	4b80      	ldr	r3, [pc, #512]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e4a:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	3302      	adds	r3, #2
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	4b7e      	ldr	r3, [pc, #504]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e54:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e5e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	4b79      	ldr	r3, [pc, #484]	@ (800904c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e66:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008e68:	4a79      	ldr	r2, [pc, #484]	@ (8009050 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8008e6a:	2110      	movs	r1, #16
 8008e6c:	2018      	movs	r0, #24
 8008e6e:	f010 f8e2 	bl	8019036 <aci_hal_write_config_data>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4874      	ldr	r0, [pc, #464]	@ (8009054 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8008e82:	f013 fc49 	bl	801c718 <iprintf>
 8008e86:	e002      	b.n	8008e8e <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8008e88:	4873      	ldr	r0, [pc, #460]	@ (8009058 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8008e8a:	f013 fcad 	bl	801c7e8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008e8e:	4a73      	ldr	r2, [pc, #460]	@ (800905c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8008e90:	2110      	movs	r1, #16
 8008e92:	2008      	movs	r0, #8
 8008e94:	f010 f8cf 	bl	8019036 <aci_hal_write_config_data>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	486e      	ldr	r0, [pc, #440]	@ (8009060 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8008ea8:	f013 fc36 	bl	801c718 <iprintf>
 8008eac:	e002      	b.n	8008eb4 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8008eae:	486d      	ldr	r0, [pc, #436]	@ (8009064 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8008eb0:	f013 fc9a 	bl	801c7e8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008eb4:	2118      	movs	r1, #24
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f010 f942 	bl	8019140 <aci_hal_set_tx_power_level>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4867      	ldr	r0, [pc, #412]	@ (8009068 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8008ecc:	f013 fc24 	bl	801c718 <iprintf>
 8008ed0:	e002      	b.n	8008ed8 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8008ed2:	4866      	ldr	r0, [pc, #408]	@ (800906c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8008ed4:	f013 fc88 	bl	801c7e8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008ed8:	f00f fd57 	bl	801898a <aci_gatt_init>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4861      	ldr	r0, [pc, #388]	@ (8009070 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8008eec:	f013 fc14 	bl	801c718 <iprintf>
 8008ef0:	e002      	b.n	8008ef8 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8008ef2:	4860      	ldr	r0, [pc, #384]	@ (8009074 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8008ef4:	f013 fc78 	bl	801c7e8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d02b      	beq.n	8008f62 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "WB5M DK";
 8008f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8009078 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8008f0c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008f0e:	1dba      	adds	r2, r7, #6
 8008f10:	7bf8      	ldrb	r0, [r7, #15]
 8008f12:	1cbb      	adds	r3, r7, #2
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	1d3b      	adds	r3, r7, #4
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f00f fbf0 	bl	8018704 <aci_gap_init>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	4619      	mov	r1, r3
 8008f32:	4852      	ldr	r0, [pc, #328]	@ (800907c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8008f34:	f013 fbf0 	bl	801c718 <iprintf>
 8008f38:	e002      	b.n	8008f40 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8008f3a:	4851      	ldr	r0, [pc, #324]	@ (8009080 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8008f3c:	f013 fc54 	bl	801c7e8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008f40:	88fc      	ldrh	r4, [r7, #6]
 8008f42:	88bd      	ldrh	r5, [r7, #4]
 8008f44:	68b8      	ldr	r0, [r7, #8]
 8008f46:	f7f7 f97b 	bl	8000240 <strlen>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	2200      	movs	r2, #0
 8008f56:	4629      	mov	r1, r5
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f00f ff19 	bl	8018d90 <aci_gatt_update_char_value>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008f62:	88f8      	ldrh	r0, [r7, #6]
 8008f64:	8879      	ldrh	r1, [r7, #2]
 8008f66:	463b      	mov	r3, r7
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f00f ff0f 	bl	8018d90 <aci_gatt_update_char_value>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008f76:	2202      	movs	r2, #2
 8008f78:	2102      	movs	r1, #2
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	f010 fa3d 	bl	80193fa <hci_le_set_default_phy>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	483d      	ldr	r0, [pc, #244]	@ (8009084 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8008f90:	f013 fbc2 	bl	801c718 <iprintf>
 8008f94:	e002      	b.n	8008f9c <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8008f96:	483c      	ldr	r0, [pc, #240]	@ (8009088 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8008f98:	f013 fc26 	bl	801c7e8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f00f fa94 	bl	80184d4 <aci_gap_set_io_capability>
 8008fac:	4603      	mov	r3, r0
 8008fae:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4835      	ldr	r0, [pc, #212]	@ (8009090 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8008fbc:	f013 fbac 	bl	801c718 <iprintf>
 8008fc0:	e002      	b.n	8008fc8 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8008fc2:	4834      	ldr	r0, [pc, #208]	@ (8009094 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8008fc4:	f013 fc10 	bl	801c7e8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008fc8:	4b30      	ldr	r3, [pc, #192]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008fce:	4b2f      	ldr	r3, [pc, #188]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fd6:	2210      	movs	r2, #16
 8008fd8:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008fda:	4b2c      	ldr	r3, [pc, #176]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8009098 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8008fe4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008fe6:	4b29      	ldr	r3, [pc, #164]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008fec:	4b27      	ldr	r3, [pc, #156]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008fee:	789c      	ldrb	r4, [r3, #2]
 8008ff0:	4b26      	ldr	r3, [pc, #152]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008ff2:	785d      	ldrb	r5, [r3, #1]
 8008ff4:	4b25      	ldr	r3, [pc, #148]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008ff6:	791b      	ldrb	r3, [r3, #4]
 8008ff8:	4a24      	ldr	r2, [pc, #144]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008ffa:	7952      	ldrb	r2, [r2, #5]
 8008ffc:	4923      	ldr	r1, [pc, #140]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8008ffe:	78c9      	ldrb	r1, [r1, #3]
 8009000:	4822      	ldr	r0, [pc, #136]	@ (800908c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009002:	6880      	ldr	r0, [r0, #8]
 8009004:	2600      	movs	r6, #0
 8009006:	9604      	str	r6, [sp, #16]
 8009008:	9003      	str	r0, [sp, #12]
 800900a:	9102      	str	r1, [sp, #8]
 800900c:	9201      	str	r2, [sp, #4]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	2300      	movs	r3, #0
 8009012:	2201      	movs	r2, #1
 8009014:	4629      	mov	r1, r5
 8009016:	4620      	mov	r0, r4
 8009018:	f00f fab0 	bl	801857c <aci_gap_set_authentication_requirement>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d03c      	beq.n	80090a0 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	4619      	mov	r1, r3
 800902a:	481c      	ldr	r0, [pc, #112]	@ (800909c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800902c:	f013 fb74 	bl	801c718 <iprintf>
 8009030:	e039      	b.n	80090a6 <Ble_Hci_Gap_Gatt_Init+0x316>
 8009032:	bf00      	nop
 8009034:	0801f83c 	.word	0x0801f83c
 8009038:	0801f868 	.word	0x0801f868
 800903c:	0801f898 	.word	0x0801f898
 8009040:	0801f8b8 	.word	0x0801f8b8
 8009044:	0801f914 	.word	0x0801f914
 8009048:	0801f960 	.word	0x0801f960
 800904c:	2000044c 	.word	0x2000044c
 8009050:	080205c4 	.word	0x080205c4
 8009054:	0801f99c 	.word	0x0801f99c
 8009058:	0801f9f4 	.word	0x0801f9f4
 800905c:	080205d4 	.word	0x080205d4
 8009060:	0801fa3c 	.word	0x0801fa3c
 8009064:	0801fa94 	.word	0x0801fa94
 8009068:	0801fadc 	.word	0x0801fadc
 800906c:	0801fb1c 	.word	0x0801fb1c
 8009070:	0801fb4c 	.word	0x0801fb4c
 8009074:	0801fb80 	.word	0x0801fb80
 8009078:	0801fba4 	.word	0x0801fba4
 800907c:	0801fbac 	.word	0x0801fbac
 8009080:	0801fbdc 	.word	0x0801fbdc
 8009084:	0801fbfc 	.word	0x0801fbfc
 8009088:	0801fc38 	.word	0x0801fc38
 800908c:	20000b3c 	.word	0x20000b3c
 8009090:	0801fc64 	.word	0x0801fc64
 8009094:	0801fca4 	.word	0x0801fca4
 8009098:	0001b207 	.word	0x0001b207
 800909c:	0801fcd4 	.word	0x0801fcd4
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80090a0:	480e      	ldr	r0, [pc, #56]	@ (80090dc <Ble_Hci_Gap_Gatt_Init+0x34c>)
 80090a2:	f013 fba1 	bl	801c7e8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80090a6:	4b0e      	ldr	r3, [pc, #56]	@ (80090e0 <Ble_Hci_Gap_Gatt_Init+0x350>)
 80090a8:	789b      	ldrb	r3, [r3, #2]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00f      	beq.n	80090ce <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 80090ae:	f00f fc48 	bl	8018942 <aci_gap_configure_filter_accept_list>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	4619      	mov	r1, r3
 80090c0:	4808      	ldr	r0, [pc, #32]	@ (80090e4 <Ble_Hci_Gap_Gatt_Init+0x354>)
 80090c2:	f013 fb29 	bl	801c718 <iprintf>
 80090c6:	e002      	b.n	80090ce <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80090c8:	4807      	ldr	r0, [pc, #28]	@ (80090e8 <Ble_Hci_Gap_Gatt_Init+0x358>)
 80090ca:	f013 fb8d 	bl	801c7e8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80090ce:	4807      	ldr	r0, [pc, #28]	@ (80090ec <Ble_Hci_Gap_Gatt_Init+0x35c>)
 80090d0:	f013 fb22 	bl	801c718 <iprintf>
}
 80090d4:	bf00      	nop
 80090d6:	371c      	adds	r7, #28
 80090d8:	46bd      	mov	sp, r7
 80090da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090dc:	0801fd20 	.word	0x0801fd20
 80090e0:	20000b3c 	.word	0x20000b3c
 80090e4:	0801fd5c 	.word	0x0801fd5c
 80090e8:	0801fd9c 	.word	0x0801fd9c
 80090ec:	0801fdcc 	.word	0x0801fdcc

080090f0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08c      	sub	sp, #48	@ 0x30
 80090f4:	af08      	add	r7, sp, #32
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80090fa:	2392      	movs	r3, #146	@ 0x92
 80090fc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d106      	bne.n	8009112 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8009104:	4b41      	ldr	r3, [pc, #260]	@ (800920c <Adv_Request+0x11c>)
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800910a:	4b41      	ldr	r3, [pc, #260]	@ (8009210 <Adv_Request+0x120>)
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	81bb      	strh	r3, [r7, #12]
 8009110:	e005      	b.n	800911e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8009112:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8009116:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8009118:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800911c:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800911e:	4b3d      	ldr	r3, [pc, #244]	@ (8009214 <Adv_Request+0x124>)
 8009120:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009124:	4618      	mov	r0, r3
 8009126:	f7f9 fa7f 	bl	8002628 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d119      	bne.n	8009164 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8009130:	4b38      	ldr	r3, [pc, #224]	@ (8009214 <Adv_Request+0x124>)
 8009132:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009136:	2b01      	cmp	r3, #1
 8009138:	d004      	beq.n	8009144 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800913a:	4b36      	ldr	r3, [pc, #216]	@ (8009214 <Adv_Request+0x124>)
 800913c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009140:	2b02      	cmp	r3, #2
 8009142:	d10f      	bne.n	8009164 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8009144:	f00f f8a8 	bl	8018298 <aci_gap_set_non_discoverable>
 8009148:	4603      	mov	r3, r0
 800914a:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	4619      	mov	r1, r3
 8009156:	4830      	ldr	r0, [pc, #192]	@ (8009218 <Adv_Request+0x128>)
 8009158:	f013 fade 	bl	801c718 <iprintf>
 800915c:	e002      	b.n	8009164 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800915e:	482f      	ldr	r0, [pc, #188]	@ (800921c <Adv_Request+0x12c>)
 8009160:	f013 fb42 	bl	801c7e8 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009164:	4a2b      	ldr	r2, [pc, #172]	@ (8009214 <Adv_Request+0x124>)
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800916c:	4b29      	ldr	r3, [pc, #164]	@ (8009214 <Adv_Request+0x124>)
 800916e:	7e1b      	ldrb	r3, [r3, #24]
 8009170:	89ba      	ldrh	r2, [r7, #12]
 8009172:	89f9      	ldrh	r1, [r7, #14]
 8009174:	2000      	movs	r0, #0
 8009176:	9006      	str	r0, [sp, #24]
 8009178:	2000      	movs	r0, #0
 800917a:	9005      	str	r0, [sp, #20]
 800917c:	4828      	ldr	r0, [pc, #160]	@ (8009220 <Adv_Request+0x130>)
 800917e:	9004      	str	r0, [sp, #16]
 8009180:	9303      	str	r3, [sp, #12]
 8009182:	4b28      	ldr	r3, [pc, #160]	@ (8009224 <Adv_Request+0x134>)
 8009184:	9302      	str	r3, [sp, #8]
 8009186:	2308      	movs	r3, #8
 8009188:	9301      	str	r3, [sp, #4]
 800918a:	2300      	movs	r3, #0
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	2300      	movs	r3, #0
 8009190:	2000      	movs	r0, #0
 8009192:	f00f f8a5 	bl	80182e0 <aci_gap_set_discoverable>
 8009196:	4603      	mov	r3, r0
 8009198:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80091a0:	7afb      	ldrb	r3, [r7, #11]
 80091a2:	4619      	mov	r1, r3
 80091a4:	4820      	ldr	r0, [pc, #128]	@ (8009228 <Adv_Request+0x138>)
 80091a6:	f013 fab7 	bl	801c718 <iprintf>
 80091aa:	e002      	b.n	80091b2 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80091ac:	481f      	ldr	r0, [pc, #124]	@ (800922c <Adv_Request+0x13c>)
 80091ae:	f013 fb1b 	bl	801c7e8 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 80091b2:	491f      	ldr	r1, [pc, #124]	@ (8009230 <Adv_Request+0x140>)
 80091b4:	200e      	movs	r0, #14
 80091b6:	f00f fb52 	bl	801885e <aci_gap_update_adv_data>
 80091ba:	4603      	mov	r3, r0
 80091bc:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00e      	beq.n	80091e2 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d105      	bne.n	80091d6 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	4619      	mov	r1, r3
 80091ce:	4819      	ldr	r0, [pc, #100]	@ (8009234 <Adv_Request+0x144>)
 80091d0:	f013 faa2 	bl	801c718 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80091d4:	e017      	b.n	8009206 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	4619      	mov	r1, r3
 80091da:	4817      	ldr	r0, [pc, #92]	@ (8009238 <Adv_Request+0x148>)
 80091dc:	f013 fa9c 	bl	801c718 <iprintf>
  return;
 80091e0:	e011      	b.n	8009206 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 80091e2:	79fb      	ldrb	r3, [r7, #7]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d10a      	bne.n	80091fe <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80091e8:	4814      	ldr	r0, [pc, #80]	@ (800923c <Adv_Request+0x14c>)
 80091ea:	f013 fa95 	bl	801c718 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80091ee:	4b09      	ldr	r3, [pc, #36]	@ (8009214 <Adv_Request+0x124>)
 80091f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091f4:	4912      	ldr	r1, [pc, #72]	@ (8009240 <Adv_Request+0x150>)
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f9 fa9a 	bl	8002730 <HW_TS_Start>
  return;
 80091fc:	e003      	b.n	8009206 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 80091fe:	4811      	ldr	r0, [pc, #68]	@ (8009244 <Adv_Request+0x154>)
 8009200:	f013 fa8a 	bl	801c718 <iprintf>
  return;
 8009204:	bf00      	nop
}
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000bc0 	.word	0x20000bc0
 8009210:	20000bc2 	.word	0x20000bc2
 8009214:	20000b3c 	.word	0x20000b3c
 8009218:	0801fdf8 	.word	0x0801fdf8
 800921c:	0801fe44 	.word	0x0801fe44
 8009220:	20000b55 	.word	0x20000b55
 8009224:	080205e4 	.word	0x080205e4
 8009228:	0801fe8c 	.word	0x0801fe8c
 800922c:	0801fec4 	.word	0x0801fec4
 8009230:	2000044c 	.word	0x2000044c
 8009234:	0801feec 	.word	0x0801feec
 8009238:	0801ff20 	.word	0x0801ff20
 800923c:	0801ff58 	.word	0x0801ff58
 8009240:	0001e046 	.word	0x0001e046
 8009244:	0801ff80 	.word	0x0801ff80

08009248 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800924e:	f7ff fa7f 	bl	8008750 <LL_FLASH_GetUDN>
 8009252:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925a:	d023      	beq.n	80092a4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800925c:	f7ff fa90 	bl	8008780 <LL_FLASH_GetSTCompanyID>
 8009260:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009262:	f7ff fa81 	bl	8008768 <LL_FLASH_GetDeviceID>
 8009266:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b16      	ldr	r3, [pc, #88]	@ (80092c8 <BleGetBdAddress+0x80>)
 800926e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	0a1b      	lsrs	r3, r3, #8
 8009274:	b2da      	uxtb	r2, r3
 8009276:	4b14      	ldr	r3, [pc, #80]	@ (80092c8 <BleGetBdAddress+0x80>)
 8009278:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	b2da      	uxtb	r2, r3
 800927e:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <BleGetBdAddress+0x80>)
 8009280:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <BleGetBdAddress+0x80>)
 8009288:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	0a1b      	lsrs	r3, r3, #8
 800928e:	b2da      	uxtb	r2, r3
 8009290:	4b0d      	ldr	r3, [pc, #52]	@ (80092c8 <BleGetBdAddress+0x80>)
 8009292:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	0c1b      	lsrs	r3, r3, #16
 8009298:	b2da      	uxtb	r2, r3
 800929a:	4b0b      	ldr	r3, [pc, #44]	@ (80092c8 <BleGetBdAddress+0x80>)
 800929c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800929e:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <BleGetBdAddress+0x80>)
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e00b      	b.n	80092bc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80092a4:	2000      	movs	r0, #0
 80092a6:	f010 fb97 	bl	80199d8 <OTP_Read>
 80092aa:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e001      	b.n	80092bc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80092b8:	4b04      	ldr	r3, [pc, #16]	@ (80092cc <BleGetBdAddress+0x84>)
 80092ba:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80092bc:	697b      	ldr	r3, [r7, #20]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000b34 	.word	0x20000b34
 80092cc:	080205bc 	.word	0x080205bc

080092d0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80092d6:	4b10      	ldr	r3, [pc, #64]	@ (8009318 <Adv_Cancel+0x48>)
 80092d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092dc:	2b05      	cmp	r3, #5
 80092de:	d017      	beq.n	8009310 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80092e0:	2392      	movs	r3, #146	@ 0x92
 80092e2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80092e4:	f00e ffd8 	bl	8018298 <aci_gap_set_non_discoverable>
 80092e8:	4603      	mov	r3, r0
 80092ea:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80092ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009318 <Adv_Cancel+0x48>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80092fa:	4808      	ldr	r0, [pc, #32]	@ (800931c <Adv_Cancel+0x4c>)
 80092fc:	f013 fa0c 	bl	801c718 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009300:	e006      	b.n	8009310 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 8009302:	4807      	ldr	r0, [pc, #28]	@ (8009320 <Adv_Cancel+0x50>)
 8009304:	f013 fa08 	bl	801c718 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8009308:	4806      	ldr	r0, [pc, #24]	@ (8009324 <Adv_Cancel+0x54>)
 800930a:	f013 fa05 	bl	801c718 <iprintf>
  return;
 800930e:	bf00      	nop
 8009310:	bf00      	nop
}
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000b3c 	.word	0x20000b3c
 800931c:	0801ffb0 	.word	0x0801ffb0
 8009320:	0801ffd4 	.word	0x0801ffd4
 8009324:	0801ffdc 	.word	0x0801ffdc

08009328 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800932c:	2100      	movs	r1, #0
 800932e:	2001      	movs	r0, #1
 8009330:	f012 fbdc 	bl	801baec <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8009334:	bf00      	nop
}
 8009336:	bd80      	pop	{r7, pc}

08009338 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800933c:	bf00      	nop
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800934e:	2100      	movs	r1, #0
 8009350:	2002      	movs	r0, #2
 8009352:	f012 fbcb 	bl	801baec <UTIL_SEQ_SetTask>

  return;
 8009356:	bf00      	nop
}
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009366:	2001      	movs	r0, #1
 8009368:	f012 fc2c 	bl	801bbc4 <UTIL_SEQ_SetEvt>

  return;
 800936c:	bf00      	nop
}
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800937c:	2001      	movs	r0, #1
 800937e:	f012 fc41 	bl	801bc04 <UTIL_SEQ_WaitEvt>

  return;
 8009382:	bf00      	nop
}
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	3308      	adds	r3, #8
 800939c:	4618      	mov	r0, r3
 800939e:	f011 fc0f 	bl	801abc0 <SVCCTL_UserEvtRx>
 80093a2:	4603      	mov	r3, r0
 80093a4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80093a6:	7afb      	ldrb	r3, [r7, #11]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80093b2:	e003      	b.n	80093bc <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
  return;
 80093ba:	bf00      	nop
}
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	4603      	mov	r3, r0
 80093ca:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <BLE_StatusNot+0x16>
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d006      	beq.n	80093e4 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80093d6:	e00b      	b.n	80093f0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80093d8:	231f      	movs	r3, #31
 80093da:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f012 fbb1 	bl	801bb44 <UTIL_SEQ_PauseTask>
      break;
 80093e2:	e005      	b.n	80093f0 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80093e4:	231f      	movs	r3, #31
 80093e6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f012 fbcb 	bl	801bb84 <UTIL_SEQ_ResumeTask>
      break;
 80093ee:	bf00      	nop
  }

  return;
 80093f0:	bf00      	nop
}
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <ENV_Context_Init>:
 * @brief  Init the HW/Environmental Service/Char Context
 * @param  None
 * @retval None
 */
void ENV_Context_Init(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* Env Sensors */

  ENV_Server_App_Context.hasPressure = 0;
 80093fc:	4b07      	ldr	r3, [pc, #28]	@ (800941c <ENV_Context_Init+0x24>)
 80093fe:	2200      	movs	r2, #0
 8009400:	731a      	strb	r2, [r3, #12]
  ENV_Server_App_Context.hasHumidity = 0;
 8009402:	4b06      	ldr	r3, [pc, #24]	@ (800941c <ENV_Context_Init+0x24>)
 8009404:	2200      	movs	r2, #0
 8009406:	735a      	strb	r2, [r3, #13]
  ENV_Server_App_Context.hasTemperature = 0;
 8009408:	4b04      	ldr	r3, [pc, #16]	@ (800941c <ENV_Context_Init+0x24>)
 800940a:	2200      	movs	r2, #0
 800940c:	739a      	strb	r2, [r3, #14]

  ENV_Set_Notification_Status(0);
 800940e:	2000      	movs	r0, #0
 8009410:	f000 f806 	bl	8009420 <ENV_Set_Notification_Status>

  /* Check Env caps */
  EnvSensor_GetCaps();
 8009414:	f000 f8e8 	bl	80095e8 <EnvSensor_GetCaps>
}
 8009418:	bf00      	nop
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000bc8 	.word	0x20000bc8

08009420 <ENV_Set_Notification_Status>:
 * @brief  Set the notification status (enabled/disabled)
 * @param  status The new notification status
 * @retval None
 */
void ENV_Set_Notification_Status(uint8_t status)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	71fb      	strb	r3, [r7, #7]
  ENV_Server_App_Context.NotificationStatus = status;
 800942a:	4a04      	ldr	r2, [pc, #16]	@ (800943c <ENV_Set_Notification_Status+0x1c>)
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	7013      	strb	r3, [r2, #0]
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	20000bc8 	.word	0x20000bc8

08009440 <ENV_Send_Notification_Task>:
 * @brief  Send a notification for Environmental char
 * @param  None
 * @retval None
 */
void ENV_Send_Notification_Task(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0

  if(ENV_Server_App_Context.NotificationStatus)
 8009444:	4b0d      	ldr	r3, [pc, #52]	@ (800947c <ENV_Send_Notification_Task+0x3c>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00c      	beq.n	8009466 <ENV_Send_Notification_Task+0x26>
  {
    if(debug_trace_enabled == 1){
 800944c:	4b0c      	ldr	r3, [pc, #48]	@ (8009480 <ENV_Send_Notification_Task+0x40>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d105      	bne.n	8009460 <ENV_Send_Notification_Task+0x20>
      APP_DBG_MSG("-- ENV APPLICATION SERVER : NOTIFY CLIENT WITH NEW ENV PARAMETER VALUE \n ");
 8009454:	480b      	ldr	r0, [pc, #44]	@ (8009484 <ENV_Send_Notification_Task+0x44>)
 8009456:	f013 f95f 	bl	801c718 <iprintf>
      APP_DBG_MSG(" \n\r");
 800945a:	480b      	ldr	r0, [pc, #44]	@ (8009488 <ENV_Send_Notification_Task+0x48>)
 800945c:	f013 f95c 	bl	801c718 <iprintf>
    }
    ENV_Update();
 8009460:	f000 f816 	bl	8009490 <ENV_Update>
    if(debug_trace_enabled == 1){
      APP_DBG_MSG("-- ENV APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
    }
  }

  return;
 8009464:	e007      	b.n	8009476 <ENV_Send_Notification_Task+0x36>
    if(debug_trace_enabled == 1){
 8009466:	4b06      	ldr	r3, [pc, #24]	@ (8009480 <ENV_Send_Notification_Task+0x40>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d103      	bne.n	8009476 <ENV_Send_Notification_Task+0x36>
      APP_DBG_MSG("-- ENV APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 800946e:	4807      	ldr	r0, [pc, #28]	@ (800948c <ENV_Send_Notification_Task+0x4c>)
 8009470:	f013 f952 	bl	801c718 <iprintf>
  return;
 8009474:	bf00      	nop
 8009476:	bf00      	nop
}
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000bc8 	.word	0x20000bc8
 8009480:	200007dc 	.word	0x200007dc
 8009484:	0801fff8 	.word	0x0801fff8
 8009488:	08020044 	.word	0x08020044
 800948c:	08020048 	.word	0x08020048

08009490 <ENV_Update>:
 * @brief  Update the Environmental char value
 * @param  None
 * @retval None
 */
void ENV_Update(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
  uint8_t tempIndex = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	71fb      	strb	r3, [r7, #7]
  uint8_t value[VALUE_LEN_ENV];
  uint8_t BuffPos = 2;
 800949a:	2302      	movs	r3, #2
 800949c:	71bb      	strb	r3, [r7, #6]
  /* Read ENV values */
  ENV_Handle_Sensor();
 800949e:	f000 f843 	bl	8009528 <ENV_Handle_Sensor>

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80094a2:	f006 fe2f 	bl	8010104 <HAL_GetTick>
 80094a6:	4603      	mov	r3, r0
 80094a8:	08db      	lsrs	r3, r3, #3
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	703b      	strb	r3, [r7, #0]
 80094ae:	f006 fe29 	bl	8010104 <HAL_GetTick>
 80094b2:	4603      	mov	r3, r0
 80094b4:	0adb      	lsrs	r3, r3, #11
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	707b      	strb	r3, [r7, #1]

  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 80094ba:	2300      	movs	r3, #0
 80094bc:	71fb      	strb	r3, [r7, #7]
 80094be:	e021      	b.n	8009504 <ENV_Update+0x74>
  {
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	4a18      	ldr	r2, [pc, #96]	@ (8009524 <ENV_Update+0x94>)
 80094c4:	3304      	adds	r3, #4
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	4413      	add	r3, r2
 80094ca:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80094ce:	79bb      	ldrb	r3, [r7, #6]
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	3308      	adds	r3, #8
 80094d4:	443b      	add	r3, r7
 80094d6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	4a11      	ldr	r2, [pc, #68]	@ (8009524 <ENV_Update+0x94>)
 80094de:	3304      	adds	r3, #4
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	4413      	add	r3, r2
 80094e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80094e8:	121b      	asrs	r3, r3, #8
 80094ea:	b219      	sxth	r1, r3
 80094ec:	79bb      	ldrb	r3, [r7, #6]
 80094ee:	463a      	mov	r2, r7
 80094f0:	4413      	add	r3, r2
 80094f2:	3301      	adds	r3, #1
 80094f4:	b2ca      	uxtb	r2, r1
 80094f6:	701a      	strb	r2, [r3, #0]
    BuffPos += TEMPERATURE_BYTES;
 80094f8:	79bb      	ldrb	r3, [r7, #6]
 80094fa:	3302      	adds	r3, #2
 80094fc:	71bb      	strb	r3, [r7, #6]
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	3301      	adds	r3, #1
 8009502:	71fb      	strb	r3, [r7, #7]
 8009504:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <ENV_Update+0x94>)
 8009506:	7b9b      	ldrb	r3, [r3, #14]
 8009508:	79fa      	ldrb	r2, [r7, #7]
 800950a:	429a      	cmp	r2, r3
 800950c:	d3d8      	bcc.n	80094c0 <ENV_Update+0x30>
  }
  
  MOTENV_STM_App_Update_Char(ENV_CHAR_UUID, VALUE_LEN_ENV, (uint8_t *)&value);
 800950e:	463b      	mov	r3, r7
 8009510:	461a      	mov	r2, r3
 8009512:	2104      	movs	r1, #4
 8009514:	f44f 50e8 	mov.w	r0, #7424	@ 0x1d00
 8009518:	f000 fdfa 	bl	800a110 <MOTENV_STM_App_Update_Char>

  return;
 800951c:	bf00      	nop
}
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	20000bc8 	.word	0x20000bc8

08009528 <ENV_Handle_Sensor>:
 * @brief  Parse the values read by Environmental sensors
 * @param  None
 * @retval None
 */
static void ENV_Handle_Sensor(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
  float temperature = 0.0;
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
  int32_t decPart= 0, intPart=0;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	2300      	movs	r3, #0
 800953a:	61bb      	str	r3, [r7, #24]

  char tempValue[16];
  
  UTIL_LCD_ClearStringLine(2);
 800953c:	2002      	movs	r0, #2
 800953e:	f011 feb9 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
  UTIL_LCD_ClearStringLine(3);
 8009542:	2003      	movs	r0, #3
 8009544:	f011 feb6 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
  UTIL_LCD_ClearStringLine(4);
 8009548:	2004      	movs	r0, #4
 800954a:	f011 feb3 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
  
  if(ENV_Server_App_Context.hasTemperature >= 1)
 800954e:	4b24      	ldr	r3, [pc, #144]	@ (80095e0 <ENV_Handle_Sensor+0xb8>)
 8009550:	7b9b      	ldrb	r3, [r3, #14]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d03c      	beq.n	80095d0 <ENV_Handle_Sensor+0xa8>
  {    
    BSP_ENV_SENSOR_GetValue(ENV_SENSOR_STTS22H_0, ENV_TEMPERATURE, &temperature);
 8009556:	f107 0314 	add.w	r3, r7, #20
 800955a:	461a      	mov	r2, r3
 800955c:	2101      	movs	r1, #1
 800955e:	2000      	movs	r0, #0
 8009560:	f005 fdfc 	bl	800f15c <BSP_ENV_SENSOR_GetValue>
    sprintf(tempValue,"Temp 1 : %2.1f C",temperature);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	4618      	mov	r0, r3
 8009568:	f7f6 ffd6 	bl	8000518 <__aeabi_f2d>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	1d38      	adds	r0, r7, #4
 8009572:	491c      	ldr	r1, [pc, #112]	@ (80095e4 <ENV_Handle_Sensor+0xbc>)
 8009574:	f013 f940 	bl	801c7f8 <siprintf>
    UTIL_LCD_DisplayStringAtLine(3,(uint8_t*)tempValue);
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	4619      	mov	r1, r3
 800957c:	2003      	movs	r0, #3
 800957e:	f011 ffab 	bl	801b4d8 <UTIL_LCD_DisplayStringAtLine>
    MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8009582:	edd7 7a05 	vldr	s15, [r7, #20]
 8009586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800958a:	ee17 3a90 	vmov	r3, s15
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	ed97 7a05 	vldr	s14, [r7, #20]
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800959e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80095a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ae:	ee17 3a90 	vmov	r3, s15
 80095b2:	61fb      	str	r3, [r7, #28]
    ENV_Server_App_Context.TemperatureValue[0] = intPart*10+decPart;    
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	0092      	lsls	r2, r2, #2
 80095bc:	4413      	add	r3, r2
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4413      	add	r3, r2
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	b21a      	sxth	r2, r3
 80095cc:	4b04      	ldr	r3, [pc, #16]	@ (80095e0 <ENV_Handle_Sensor+0xb8>)
 80095ce:	815a      	strh	r2, [r3, #10]
  }
  BSP_LCD_Refresh(0);
 80095d0:	2000      	movs	r0, #0
 80095d2:	f005 ffc3 	bl	800f55c <BSP_LCD_Refresh>
}
 80095d6:	bf00      	nop
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000bc8 	.word	0x20000bc8
 80095e4:	08020094 	.word	0x08020094

080095e8 <EnvSensor_GetCaps>:
 * @brief  Check the Environmental active capabilities and set the ADV data accordingly
 * @param  None
 * @retval None
 */
static void EnvSensor_GetCaps(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
 
  ENV_Server_App_Context.hasPressure = 0;
 80095ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	731a      	strb	r2, [r3, #12]
  ENV_Server_App_Context.hasHumidity = 0;
 80095f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	735a      	strb	r2, [r3, #13]
  ENV_Server_App_Context.hasTemperature = 1;
 80095f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	739a      	strb	r2, [r3, #14]

  /* Update BLE ADV field (Env) */
  if(ENV_Server_App_Context.hasTemperature > 1)
 80095fe:	4b19      	ldr	r3, [pc, #100]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 8009600:	7b9b      	ldrb	r3, [r3, #14]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d907      	bls.n	8009616 <EnvSensor_GetCaps+0x2e>
  {
    a_ManufData[5] |= 0x05; /* Two Temperature values*/
 8009606:	4b18      	ldr	r3, [pc, #96]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 8009608:	795b      	ldrb	r3, [r3, #5]
 800960a:	f043 0305 	orr.w	r3, r3, #5
 800960e:	b2da      	uxtb	r2, r3
 8009610:	4b15      	ldr	r3, [pc, #84]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 8009612:	715a      	strb	r2, [r3, #5]
 8009614:	e00a      	b.n	800962c <EnvSensor_GetCaps+0x44>
  }
  else if(ENV_Server_App_Context.hasTemperature == 1)
 8009616:	4b13      	ldr	r3, [pc, #76]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 8009618:	7b9b      	ldrb	r3, [r3, #14]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d106      	bne.n	800962c <EnvSensor_GetCaps+0x44>
  {
    a_ManufData[5] |= 0x04; /* One Temperature value*/
 800961e:	4b12      	ldr	r3, [pc, #72]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 8009620:	795b      	ldrb	r3, [r3, #5]
 8009622:	f043 0304 	orr.w	r3, r3, #4
 8009626:	b2da      	uxtb	r2, r3
 8009628:	4b0f      	ldr	r3, [pc, #60]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 800962a:	715a      	strb	r2, [r3, #5]
  }

  if(ENV_Server_App_Context.hasHumidity)
 800962c:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 800962e:	7b5b      	ldrb	r3, [r3, #13]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <EnvSensor_GetCaps+0x5a>
  {
    a_ManufData[5] |= 0x08; /* Humidity value */
 8009634:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 8009636:	795b      	ldrb	r3, [r3, #5]
 8009638:	f043 0308 	orr.w	r3, r3, #8
 800963c:	b2da      	uxtb	r2, r3
 800963e:	4b0a      	ldr	r3, [pc, #40]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 8009640:	715a      	strb	r2, [r3, #5]
  }

  if(ENV_Server_App_Context.hasPressure)
 8009642:	4b08      	ldr	r3, [pc, #32]	@ (8009664 <EnvSensor_GetCaps+0x7c>)
 8009644:	7b1b      	ldrb	r3, [r3, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d006      	beq.n	8009658 <EnvSensor_GetCaps+0x70>
  {
    a_ManufData[5] |= 0x10; /* Pressure value*/
 800964a:	4b07      	ldr	r3, [pc, #28]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 800964c:	795b      	ldrb	r3, [r3, #5]
 800964e:	f043 0310 	orr.w	r3, r3, #16
 8009652:	b2da      	uxtb	r2, r3
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <EnvSensor_GetCaps+0x80>)
 8009656:	715a      	strb	r2, [r3, #5]
  }
}
 8009658:	bf00      	nop
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000bc8 	.word	0x20000bc8
 8009668:	2000044c 	.word	0x2000044c

0800966c <MOTENV_STM_App_Notification>:
 *         (e.g., on notification enabling/disabling request, start/stop the timer)
 * @param  pNotification: Request data coming from the GATT Client
 * @retval None
 */
void MOTENV_STM_App_Notification(MOTENV_STM_App_Notification_evt_t *pNotification)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  switch(pNotification->Motenv_Evt_Opcode)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b04      	cmp	r3, #4
 800967a:	f200 808d 	bhi.w	8009798 <MOTENV_STM_App_Notification+0x12c>
 800967e:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <MOTENV_STM_App_Notification+0x18>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	080096c3 	.word	0x080096c3
 8009688:	08009741 	.word	0x08009741
 800968c:	08009699 	.word	0x08009699
 8009690:	08009703 	.word	0x08009703
 8009694:	0800977f 	.word	0x0800977f
  {
    /*
     * Env char notification enabled
     */
    case HW_ENV_NOTIFY_ENABLED_EVT:
      ENV_Set_Notification_Status(1);
 8009698:	2001      	movs	r0, #1
 800969a:	f7ff fec1 	bl	8009420 <ENV_Set_Notification_Status>
      if(debug_trace_enabled == 1){
 800969e:	4b42      	ldr	r3, [pc, #264]	@ (80097a8 <MOTENV_STM_App_Notification+0x13c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d105      	bne.n	80096b2 <MOTENV_STM_App_Notification+0x46>
        APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ENV NOTIFICATION ENABLED\n");
 80096a6:	4841      	ldr	r0, [pc, #260]	@ (80097ac <MOTENV_STM_App_Notification+0x140>)
 80096a8:	f013 f89e 	bl	801c7e8 <puts>
        APP_DBG_MSG(" \n\r");
 80096ac:	4840      	ldr	r0, [pc, #256]	@ (80097b0 <MOTENV_STM_App_Notification+0x144>)
 80096ae:	f013 f833 	bl	801c718 <iprintf>
      }
      /* Start the timer used to update the Env characteristic */
      HW_TS_Start(MOTENV_Server_App_Context.Env_Update_Timer_Id, ENVIRONMENT_UPDATE_PERIOD);
 80096b2:	4b40      	ldr	r3, [pc, #256]	@ (80097b4 <MOTENV_STM_App_Notification+0x148>)
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7f9 f838 	bl	8002730 <HW_TS_Start>
      break; /* HW_ENV_NOTIFY_ENABLED_EVT */
 80096c0:	e06d      	b.n	800979e <MOTENV_STM_App_Notification+0x132>

    /*
     * Motion char notification enabled
     */
    case HW_MOTION_NOTIFY_ENABLED_EVT:
      UTIL_LCD_ClearStringLine(2);
 80096c2:	2002      	movs	r0, #2
 80096c4:	f011 fdf6 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_ClearStringLine(3);
 80096c8:	2003      	movs	r0, #3
 80096ca:	f011 fdf3 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_ClearStringLine(4);
 80096ce:	2004      	movs	r0, #4
 80096d0:	f011 fdf0 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      BSP_LCD_Refresh(0);
 80096d4:	2000      	movs	r0, #0
 80096d6:	f005 ff41 	bl	800f55c <BSP_LCD_Refresh>
      MOTION_Set_Notification_Status(1);
 80096da:	2001      	movs	r0, #1
 80096dc:	f000 f8cc 	bl	8009878 <MOTION_Set_Notification_Status>
      if(debug_trace_enabled == 1){
 80096e0:	4b31      	ldr	r3, [pc, #196]	@ (80097a8 <MOTENV_STM_App_Notification+0x13c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d105      	bne.n	80096f4 <MOTENV_STM_App_Notification+0x88>
        APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION NOTIFICATION ENABLED\n");
 80096e8:	4833      	ldr	r0, [pc, #204]	@ (80097b8 <MOTENV_STM_App_Notification+0x14c>)
 80096ea:	f013 f87d 	bl	801c7e8 <puts>
        APP_DBG_MSG(" \n\r");
 80096ee:	4830      	ldr	r0, [pc, #192]	@ (80097b0 <MOTENV_STM_App_Notification+0x144>)
 80096f0:	f013 f812 	bl	801c718 <iprintf>
      }
      /* Start the timer used to update the AccGyroMag characteristic */
      HW_TS_Start(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id, ACC_GYRO_MAG_UPDATE_PERIOD);
 80096f4:	4b2f      	ldr	r3, [pc, #188]	@ (80097b4 <MOTENV_STM_App_Notification+0x148>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2166      	movs	r1, #102	@ 0x66
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f9 f818 	bl	8002730 <HW_TS_Start>
      break; /* HW_MOTION_NOTIFY_ENABLED_EVT */
 8009700:	e04d      	b.n	800979e <MOTENV_STM_App_Notification+0x132>

    /*
     * Env char notification disabled
     */
    case HW_ENV_NOTIFY_DISABLED_EVT:
      UTIL_LCD_ClearStringLine(2);
 8009702:	2002      	movs	r0, #2
 8009704:	f011 fdd6 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_ClearStringLine(3);
 8009708:	2003      	movs	r0, #3
 800970a:	f011 fdd3 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_ClearStringLine(4);
 800970e:	2004      	movs	r0, #4
 8009710:	f011 fdd0 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      BSP_LCD_Refresh(0);
 8009714:	2000      	movs	r0, #0
 8009716:	f005 ff21 	bl	800f55c <BSP_LCD_Refresh>
      ENV_Set_Notification_Status(0);
 800971a:	2000      	movs	r0, #0
 800971c:	f7ff fe80 	bl	8009420 <ENV_Set_Notification_Status>
      if(debug_trace_enabled == 1){
 8009720:	4b21      	ldr	r3, [pc, #132]	@ (80097a8 <MOTENV_STM_App_Notification+0x13c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d105      	bne.n	8009734 <MOTENV_STM_App_Notification+0xc8>
        APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ENV NOTIFICATION DISABLED\n");
 8009728:	4824      	ldr	r0, [pc, #144]	@ (80097bc <MOTENV_STM_App_Notification+0x150>)
 800972a:	f013 f85d 	bl	801c7e8 <puts>
        APP_DBG_MSG(" \n\r");
 800972e:	4820      	ldr	r0, [pc, #128]	@ (80097b0 <MOTENV_STM_App_Notification+0x144>)
 8009730:	f012 fff2 	bl	801c718 <iprintf>
      }
      /* Stop the timer used to update the Env characteristic */
      HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 8009734:	4b1f      	ldr	r3, [pc, #124]	@ (80097b4 <MOTENV_STM_App_Notification+0x148>)
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	4618      	mov	r0, r3
 800973a:	f7f8 ff75 	bl	8002628 <HW_TS_Stop>
      break; /* HW_ENV_NOTIFY_DISABLED_EVT */
 800973e:	e02e      	b.n	800979e <MOTENV_STM_App_Notification+0x132>

    /*
     * Motion char notification disabled
     */
    case HW_MOTION_NOTIFY_DISABLED_EVT:
      UTIL_LCD_ClearStringLine(2);
 8009740:	2002      	movs	r0, #2
 8009742:	f011 fdb7 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_ClearStringLine(3);
 8009746:	2003      	movs	r0, #3
 8009748:	f011 fdb4 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_ClearStringLine(4);
 800974c:	2004      	movs	r0, #4
 800974e:	f011 fdb1 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
      BSP_LCD_Refresh(0);
 8009752:	2000      	movs	r0, #0
 8009754:	f005 ff02 	bl	800f55c <BSP_LCD_Refresh>
      MOTION_Set_Notification_Status(0);
 8009758:	2000      	movs	r0, #0
 800975a:	f000 f88d 	bl	8009878 <MOTION_Set_Notification_Status>
      if(debug_trace_enabled == 1){
 800975e:	4b12      	ldr	r3, [pc, #72]	@ (80097a8 <MOTENV_STM_App_Notification+0x13c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d105      	bne.n	8009772 <MOTENV_STM_App_Notification+0x106>
        APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION NOTIFICATION DISABLED\n");
 8009766:	4816      	ldr	r0, [pc, #88]	@ (80097c0 <MOTENV_STM_App_Notification+0x154>)
 8009768:	f013 f83e 	bl	801c7e8 <puts>
        APP_DBG_MSG(" \n\r");
 800976c:	4810      	ldr	r0, [pc, #64]	@ (80097b0 <MOTENV_STM_App_Notification+0x144>)
 800976e:	f012 ffd3 	bl	801c718 <iprintf>
      }
      /* Stop the timer used to update the Motion characteristic */
      HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 8009772:	4b10      	ldr	r3, [pc, #64]	@ (80097b4 <MOTENV_STM_App_Notification+0x148>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f7f8 ff56 	bl	8002628 <HW_TS_Stop>
      break; /* HW_ENV_NOTIFY_DISABLED_EVT */
 800977c:	e00f      	b.n	800979e <MOTENV_STM_App_Notification+0x132>

    /*
     * Env char read request
     */
    case HW_ENV_READ_EVT:
      ENV_Update();
 800977e:	f7ff fe87 	bl	8009490 <ENV_Update>
      if(debug_trace_enabled == 1){
 8009782:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <MOTENV_STM_App_Notification+0x13c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d108      	bne.n	800979c <MOTENV_STM_App_Notification+0x130>
        APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ENV READ\n");
 800978a:	480e      	ldr	r0, [pc, #56]	@ (80097c4 <MOTENV_STM_App_Notification+0x158>)
 800978c:	f013 f82c 	bl	801c7e8 <puts>
        APP_DBG_MSG(" \n\r");
 8009790:	4807      	ldr	r0, [pc, #28]	@ (80097b0 <MOTENV_STM_App_Notification+0x144>)
 8009792:	f012 ffc1 	bl	801c718 <iprintf>
      }
      break; /* HW_ENV_READ_EVT */
 8009796:	e001      	b.n	800979c <MOTENV_STM_App_Notification+0x130>
      
    default:
      break; /* DEFAULT */
 8009798:	bf00      	nop
 800979a:	e000      	b.n	800979e <MOTENV_STM_App_Notification+0x132>
      break; /* HW_ENV_READ_EVT */
 800979c:	bf00      	nop
  }

  return;
 800979e:	bf00      	nop
}
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	200007dc 	.word	0x200007dc
 80097ac:	080200a8 	.word	0x080200a8
 80097b0:	080200e4 	.word	0x080200e4
 80097b4:	20000bd8 	.word	0x20000bd8
 80097b8:	080200e8 	.word	0x080200e8
 80097bc:	08020128 	.word	0x08020128
 80097c0:	08020164 	.word	0x08020164
 80097c4:	080201a4 	.word	0x080201a4

080097c8 <MOTENV_APP_Init>:
 * @brief  Init the MOTENV APP (Register Tasks, Create Notification timers)
 * @param  None
 * @retval None
 */
void MOTENV_APP_Init(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ACC_GYRO_MAG_ID, UTIL_SEQ_RFU, MOTION_Send_Notification_Task);
 80097cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <MOTENV_APP_Init+0x38>)
 80097ce:	2100      	movs	r1, #0
 80097d0:	2004      	movs	r0, #4
 80097d2:	f012 f969 	bl	801baa8 <UTIL_SEQ_RegTask>
  /* Create timer to get the AccGyroMag params and update charecteristic */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 80097d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009804 <MOTENV_APP_Init+0x3c>)
 80097d8:	2201      	movs	r2, #1
 80097da:	490b      	ldr	r1, [pc, #44]	@ (8009808 <MOTENV_APP_Init+0x40>)
 80097dc:	2000      	movs	r0, #0
 80097de:	f7f8 fea9 	bl	8002534 <HW_TS_Create>
        &(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id),
        hw_ts_Repeated,
        MOTENV_AccGyroMagUpdate_Timer_Callback);

  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ENVIRONMENT_ID, UTIL_SEQ_RFU, ENV_Send_Notification_Task);
 80097e2:	4a0a      	ldr	r2, [pc, #40]	@ (800980c <MOTENV_APP_Init+0x44>)
 80097e4:	2100      	movs	r1, #0
 80097e6:	2008      	movs	r0, #8
 80097e8:	f012 f95e 	bl	801baa8 <UTIL_SEQ_RegTask>
  /* Create timer to change the Environment params and update charecteristic */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 80097ec:	4b08      	ldr	r3, [pc, #32]	@ (8009810 <MOTENV_APP_Init+0x48>)
 80097ee:	2201      	movs	r2, #1
 80097f0:	4908      	ldr	r1, [pc, #32]	@ (8009814 <MOTENV_APP_Init+0x4c>)
 80097f2:	2000      	movs	r0, #0
 80097f4:	f7f8 fe9e 	bl	8002534 <HW_TS_Create>
        MOTENV_EnvUpdate_Timer_Callback);

  /**
   * Initialize MOTENV application context
   */
  MOTENV_APP_context_Init();
 80097f8:	f000 f81e 	bl	8009838 <MOTENV_APP_context_Init>

  return;
 80097fc:	bf00      	nop
}
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	080098b1 	.word	0x080098b1
 8009804:	08009819 	.word	0x08009819
 8009808:	20000bd8 	.word	0x20000bd8
 800980c:	08009441 	.word	0x08009441
 8009810:	08009829 	.word	0x08009829
 8009814:	20000bd9 	.word	0x20000bd9

08009818 <MOTENV_AccGyroMagUpdate_Timer_Callback>:
 *         for Motion Char (Acc-Gyro-Mag) notification
 * @param  None
 * @retval None
 */
static void MOTENV_AccGyroMagUpdate_Timer_Callback(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ACC_GYRO_MAG_ID, CFG_SCH_PRIO_0);
 800981c:	2100      	movs	r1, #0
 800981e:	2004      	movs	r0, #4
 8009820:	f012 f964 	bl	801baec <UTIL_SEQ_SetTask>
}
 8009824:	bf00      	nop
 8009826:	bd80      	pop	{r7, pc}

08009828 <MOTENV_EnvUpdate_Timer_Callback>:
 *         for Environmental Char notification
 * @param  None
 * @retval None
 */
static void MOTENV_EnvUpdate_Timer_Callback(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ENVIRONMENT_ID, CFG_SCH_PRIO_0);
 800982c:	2100      	movs	r1, #0
 800982e:	2008      	movs	r0, #8
 8009830:	f012 f95c 	bl	801baec <UTIL_SEQ_SetTask>
}
 8009834:	bf00      	nop
 8009836:	bd80      	pop	{r7, pc}

08009838 <MOTENV_APP_context_Init>:
 * @brief  Init Context for each Service exposed by MOTENV Server App
 * @param  None
 * @retval None
 */
static void MOTENV_APP_context_Init(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  /* Init ENV context */
  ENV_Context_Init();
 800983c:	f7ff fddc 	bl	80093f8 <ENV_Context_Init>

  /* Init MOTION Context */
  MOTION_Context_Init();
 8009840:	f000 f802 	bl	8009848 <MOTION_Context_Init>

}
 8009844:	bf00      	nop
 8009846:	bd80      	pop	{r7, pc}

08009848 <MOTION_Context_Init>:
 * @brief  Init the HW/Motion Service/Char Context
 * @param  None
 * @retval None
 */
void MOTION_Context_Init(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
  /* Motion Sensors */
  MOTION_Server_App_Context.hasAcc = 0;
 800984c:	4b09      	ldr	r3, [pc, #36]	@ (8009874 <MOTION_Context_Init+0x2c>)
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  MOTION_Server_App_Context.hasGyro = 0;
 8009854:	4b07      	ldr	r3, [pc, #28]	@ (8009874 <MOTION_Context_Init+0x2c>)
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  MOTION_Server_App_Context.hasMag = 0;
 800985c:	4b05      	ldr	r3, [pc, #20]	@ (8009874 <MOTION_Context_Init+0x2c>)
 800985e:	2200      	movs	r2, #0
 8009860:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  MOTION_Set_Notification_Status(0);
 8009864:	2000      	movs	r0, #0
 8009866:	f000 f807 	bl	8009878 <MOTION_Set_Notification_Status>

  /* Check Motion caps */
  MOTION_GetCaps();
 800986a:	f000 f9b3 	bl	8009bd4 <MOTION_GetCaps>
}
 800986e:	bf00      	nop
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20000bdc 	.word	0x20000bdc

08009878 <MOTION_Set_Notification_Status>:
 * @brief  Set the notification status (enabled/disabled)
 * @param  status The new notification status
 * @retval None
 */
void MOTION_Set_Notification_Status(uint8_t status)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	71fb      	strb	r3, [r7, #7]
  MOTION_Server_App_Context.NotificationStatus = status;
 8009882:	4a09      	ldr	r2, [pc, #36]	@ (80098a8 <MOTION_Set_Notification_Status+0x30>)
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	7013      	strb	r3, [r2, #0]
  if(status == 0){
 8009888:	79fb      	ldrb	r3, [r7, #7]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d103      	bne.n	8009896 <MOTION_Set_Notification_Status+0x1e>
    stopPrintValue = 1;
 800988e:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <MOTION_Set_Notification_Status+0x34>)
 8009890:	2201      	movs	r2, #1
 8009892:	601a      	str	r2, [r3, #0]
  }else{
    stopPrintValue = 0;
  }
}
 8009894:	e002      	b.n	800989c <MOTION_Set_Notification_Status+0x24>
    stopPrintValue = 0;
 8009896:	4b05      	ldr	r3, [pc, #20]	@ (80098ac <MOTION_Set_Notification_Status+0x34>)
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	20000bdc 	.word	0x20000bdc
 80098ac:	20000c08 	.word	0x20000c08

080098b0 <MOTION_Send_Notification_Task>:
 * @brief  Send a notification for Motion (Acc/Gyro/Mag) char
 * @param  None
 * @retval None
 */
void MOTION_Send_Notification_Task(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
  uint8_t value[VALUE_LEN_MOTION];

  /* Read Motion values */
  MOTION_Handle_Sensor();
 80098b6:	f000 f899 	bl	80099ec <MOTION_Handle_Sensor>

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80098ba:	f006 fc23 	bl	8010104 <HAL_GetTick>
 80098be:	4603      	mov	r3, r0
 80098c0:	08db      	lsrs	r3, r3, #3
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	703b      	strb	r3, [r7, #0]
 80098c6:	f006 fc1d 	bl	8010104 <HAL_GetTick>
 80098ca:	4603      	mov	r3, r0
 80098cc:	0adb      	lsrs	r3, r3, #11
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	707b      	strb	r3, [r7, #1]

  if(MOTION_Server_App_Context.hasAcc == 1)
 80098d2:	4b40      	ldr	r3, [pc, #256]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 80098d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d11a      	bne.n	8009912 <MOTION_Send_Notification_Task+0x62>
  {
    STORE_LE_16(value+2, MOTION_Server_App_Context.acceleration.x);
 80098dc:	4b3d      	ldr	r3, [pc, #244]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	70bb      	strb	r3, [r7, #2]
 80098e4:	4b3b      	ldr	r3, [pc, #236]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	121b      	asrs	r3, r3, #8
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	70fb      	strb	r3, [r7, #3]
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 80098ee:	4b39      	ldr	r3, [pc, #228]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	713b      	strb	r3, [r7, #4]
 80098f6:	4b37      	ldr	r3, [pc, #220]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	121b      	asrs	r3, r3, #8
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	717b      	strb	r3, [r7, #5]
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 8009900:	4b34      	ldr	r3, [pc, #208]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	71bb      	strb	r3, [r7, #6]
 8009908:	4b32      	ldr	r3, [pc, #200]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	121b      	asrs	r3, r3, #8
 800990e:	b2db      	uxtb	r3, r3
 8009910:	71fb      	strb	r3, [r7, #7]
  }

  if(MOTION_Server_App_Context.hasGyro == 1)
 8009912:	4b30      	ldr	r3, [pc, #192]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009914:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009918:	2b01      	cmp	r3, #1
 800991a:	d138      	bne.n	800998e <MOTION_Send_Notification_Task+0xde>
  {
    MOTION_Server_App_Context.angular_velocity.x/=100;
 800991c:	4b2d      	ldr	r3, [pc, #180]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	4a2d      	ldr	r2, [pc, #180]	@ (80099d8 <MOTION_Send_Notification_Task+0x128>)
 8009922:	fb82 1203 	smull	r1, r2, r2, r3
 8009926:	1152      	asrs	r2, r2, #5
 8009928:	17db      	asrs	r3, r3, #31
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	4a29      	ldr	r2, [pc, #164]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 800992e:	6113      	str	r3, [r2, #16]
    MOTION_Server_App_Context.angular_velocity.y/=100;
 8009930:	4b28      	ldr	r3, [pc, #160]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	4a28      	ldr	r2, [pc, #160]	@ (80099d8 <MOTION_Send_Notification_Task+0x128>)
 8009936:	fb82 1203 	smull	r1, r2, r2, r3
 800993a:	1152      	asrs	r2, r2, #5
 800993c:	17db      	asrs	r3, r3, #31
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	4a24      	ldr	r2, [pc, #144]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009942:	6153      	str	r3, [r2, #20]
    MOTION_Server_App_Context.angular_velocity.z/=100;
 8009944:	4b23      	ldr	r3, [pc, #140]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	4a23      	ldr	r2, [pc, #140]	@ (80099d8 <MOTION_Send_Notification_Task+0x128>)
 800994a:	fb82 1203 	smull	r1, r2, r2, r3
 800994e:	1152      	asrs	r2, r2, #5
 8009950:	17db      	asrs	r3, r3, #31
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	4a1f      	ldr	r2, [pc, #124]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009956:	6193      	str	r3, [r2, #24]

    STORE_LE_16(value+8, MOTION_Server_App_Context.angular_velocity.x);
 8009958:	4b1e      	ldr	r3, [pc, #120]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	723b      	strb	r3, [r7, #8]
 8009960:	4b1c      	ldr	r3, [pc, #112]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	121b      	asrs	r3, r3, #8
 8009966:	b2db      	uxtb	r3, r3
 8009968:	727b      	strb	r3, [r7, #9]
    STORE_LE_16(value+10, MOTION_Server_App_Context.angular_velocity.y);
 800996a:	4b1a      	ldr	r3, [pc, #104]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	72bb      	strb	r3, [r7, #10]
 8009972:	4b18      	ldr	r3, [pc, #96]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	121b      	asrs	r3, r3, #8
 8009978:	b2db      	uxtb	r3, r3
 800997a:	72fb      	strb	r3, [r7, #11]
    STORE_LE_16(value+12, MOTION_Server_App_Context.angular_velocity.z);
 800997c:	4b15      	ldr	r3, [pc, #84]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	b2db      	uxtb	r3, r3
 8009982:	733b      	strb	r3, [r7, #12]
 8009984:	4b13      	ldr	r3, [pc, #76]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	121b      	asrs	r3, r3, #8
 800998a:	b2db      	uxtb	r3, r3
 800998c:	737b      	strb	r3, [r7, #13]
  }

  if(MOTION_Server_App_Context.NotificationStatus)
 800998e:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <MOTION_Send_Notification_Task+0x124>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d011      	beq.n	80099ba <MOTION_Send_Notification_Task+0x10a>
  {
    if(debug_trace_enabled == 1){
 8009996:	4b11      	ldr	r3, [pc, #68]	@ (80099dc <MOTION_Send_Notification_Task+0x12c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d105      	bne.n	80099aa <MOTION_Send_Notification_Task+0xfa>
      APP_DBG_MSG("-- MOTION APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 800999e:	4810      	ldr	r0, [pc, #64]	@ (80099e0 <MOTION_Send_Notification_Task+0x130>)
 80099a0:	f012 feba 	bl	801c718 <iprintf>
      APP_DBG_MSG(" \n\r");
 80099a4:	480f      	ldr	r0, [pc, #60]	@ (80099e4 <MOTION_Send_Notification_Task+0x134>)
 80099a6:	f012 feb7 	bl	801c718 <iprintf>
    }
    MOTENV_STM_App_Update_Char(MOTION_CHAR_UUID, VALUE_LEN_MOTION, (uint8_t *)&value);
 80099aa:	463b      	mov	r3, r7
 80099ac:	461a      	mov	r2, r3
 80099ae:	210e      	movs	r1, #14
 80099b0:	f44f 4060 	mov.w	r0, #57344	@ 0xe000
 80099b4:	f000 fbac 	bl	800a110 <MOTENV_STM_App_Update_Char>
    if(debug_trace_enabled == 1){
      APP_DBG_MSG("-- MOTION APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
    }
  }

  return;
 80099b8:	e007      	b.n	80099ca <MOTION_Send_Notification_Task+0x11a>
    if(debug_trace_enabled == 1){
 80099ba:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <MOTION_Send_Notification_Task+0x12c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d103      	bne.n	80099ca <MOTION_Send_Notification_Task+0x11a>
      APP_DBG_MSG("-- MOTION APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 80099c2:	4809      	ldr	r0, [pc, #36]	@ (80099e8 <MOTION_Send_Notification_Task+0x138>)
 80099c4:	f012 fea8 	bl	801c718 <iprintf>
  return;
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
}
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000bdc 	.word	0x20000bdc
 80099d8:	51eb851f 	.word	0x51eb851f
 80099dc:	200007dc 	.word	0x200007dc
 80099e0:	080201d0 	.word	0x080201d0
 80099e4:	08020220 	.word	0x08020220
 80099e8:	08020224 	.word	0x08020224

080099ec <MOTION_Handle_Sensor>:
 * @brief  Parse the values read by Motion sensors
 * @param  None
 * @retval None
 */
static void MOTION_Handle_Sensor(void)
{
 80099ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80099f0:	b09e      	sub	sp, #120	@ 0x78
 80099f2:	af04      	add	r7, sp, #16
  
  char accValue[18];
  char gyroValue[18];
  float accX,accY,accZ,gyroX,gyroY,gyroZ;
  
  if(MOTION_Server_App_Context.hasAcc == 1)
 80099f4:	4b72      	ldr	r3, [pc, #456]	@ (8009bc0 <MOTION_Handle_Sensor+0x1d4>)
 80099f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d143      	bne.n	8009a86 <MOTION_Handle_Sensor+0x9a>
  {
    memset(&acceleration, 0, sizeof(MOTION_SENSOR_Axes_t));
 80099fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009a02:	220c      	movs	r2, #12
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f012 ffee 	bl	801c9e8 <memset>
    BSP_MOTION_SENSOR_GetAxes(MOTION_SENSOR_ISM330DHCX_0, MOTION_ACCELERO, &acceleration);
 8009a0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009a10:	461a      	mov	r2, r3
 8009a12:	2102      	movs	r1, #2
 8009a14:	2000      	movs	r0, #0
 8009a16:	f006 f995 	bl	800fd44 <BSP_MOTION_SENSOR_GetAxes>
  
    accX = (float)acceleration.x;
 8009a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1c:	ee07 3a90 	vmov	s15, r3
 8009a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a24:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    accY = (float)acceleration.y;
 8009a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a32:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    accZ = (float)acceleration.z;
 8009a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a38:	ee07 3a90 	vmov	s15, r3
 8009a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a40:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    sprintf(accValue,"%5.0f|%5.0f|%5.0f",accX,accY,accZ);
 8009a44:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8009a46:	f7f6 fd67 	bl	8000518 <__aeabi_f2d>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	4689      	mov	r9, r1
 8009a4e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8009a50:	f7f6 fd62 	bl	8000518 <__aeabi_f2d>
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009a5a:	f7f6 fd5d 	bl	8000518 <__aeabi_f2d>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	f107 0018 	add.w	r0, r7, #24
 8009a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a6a:	e9cd 4500 	strd	r4, r5, [sp]
 8009a6e:	4642      	mov	r2, r8
 8009a70:	464b      	mov	r3, r9
 8009a72:	4954      	ldr	r1, [pc, #336]	@ (8009bc4 <MOTION_Handle_Sensor+0x1d8>)
 8009a74:	f012 fec0 	bl	801c7f8 <siprintf>
      
    MOTION_Server_App_Context.acceleration = acceleration;
 8009a78:	4b51      	ldr	r3, [pc, #324]	@ (8009bc0 <MOTION_Handle_Sensor+0x1d4>)
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8009a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
  
  if(MOTION_Server_App_Context.hasGyro == 1)
 8009a86:	4b4e      	ldr	r3, [pc, #312]	@ (8009bc0 <MOTION_Handle_Sensor+0x1d4>)
 8009a88:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d160      	bne.n	8009b52 <MOTION_Handle_Sensor+0x166>
  {
    memset(&angular_velocity, 0, sizeof(MOTION_SENSOR_Axes_t));
 8009a90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009a94:	220c      	movs	r2, #12
 8009a96:	2100      	movs	r1, #0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f012 ffa5 	bl	801c9e8 <memset>
    BSP_MOTION_SENSOR_GetAxes(MOTION_SENSOR_ISM330DHCX_0, MOTION_GYRO, &angular_velocity);
 8009a9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	f006 f94c 	bl	800fd44 <BSP_MOTION_SENSOR_GetAxes>
    
    gyroX = (float)((angular_velocity.x) / 100.0);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7f6 fd20 	bl	80004f4 <__aeabi_i2d>
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	4b43      	ldr	r3, [pc, #268]	@ (8009bc8 <MOTION_Handle_Sensor+0x1dc>)
 8009aba:	f7f6 feaf 	bl	800081c <__aeabi_ddiv>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f7f7 f857 	bl	8000b78 <__aeabi_d2f>
 8009aca:	4603      	mov	r3, r0
 8009acc:	65bb      	str	r3, [r7, #88]	@ 0x58
    gyroY = (float)((angular_velocity.y) / 100.0);
 8009ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7f6 fd0f 	bl	80004f4 <__aeabi_i2d>
 8009ad6:	f04f 0200 	mov.w	r2, #0
 8009ada:	4b3b      	ldr	r3, [pc, #236]	@ (8009bc8 <MOTION_Handle_Sensor+0x1dc>)
 8009adc:	f7f6 fe9e 	bl	800081c <__aeabi_ddiv>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	f7f7 f846 	bl	8000b78 <__aeabi_d2f>
 8009aec:	4603      	mov	r3, r0
 8009aee:	657b      	str	r3, [r7, #84]	@ 0x54
    gyroZ = (float)((angular_velocity.z) / 100.0);
 8009af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f6 fcfe 	bl	80004f4 <__aeabi_i2d>
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	4b32      	ldr	r3, [pc, #200]	@ (8009bc8 <MOTION_Handle_Sensor+0x1dc>)
 8009afe:	f7f6 fe8d 	bl	800081c <__aeabi_ddiv>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4610      	mov	r0, r2
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f7f7 f835 	bl	8000b78 <__aeabi_d2f>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	653b      	str	r3, [r7, #80]	@ 0x50
    sprintf(gyroValue,"%5.0f|%5.0f|%5.0f",gyroX,gyroY,gyroZ);
 8009b12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009b14:	f7f6 fd00 	bl	8000518 <__aeabi_f2d>
 8009b18:	4680      	mov	r8, r0
 8009b1a:	4689      	mov	r9, r1
 8009b1c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009b1e:	f7f6 fcfb 	bl	8000518 <__aeabi_f2d>
 8009b22:	4604      	mov	r4, r0
 8009b24:	460d      	mov	r5, r1
 8009b26:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009b28:	f7f6 fcf6 	bl	8000518 <__aeabi_f2d>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	1d38      	adds	r0, r7, #4
 8009b32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b36:	e9cd 4500 	strd	r4, r5, [sp]
 8009b3a:	4642      	mov	r2, r8
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	4921      	ldr	r1, [pc, #132]	@ (8009bc4 <MOTION_Handle_Sensor+0x1d8>)
 8009b40:	f012 fe5a 	bl	801c7f8 <siprintf>
      
    MOTION_Server_App_Context.angular_velocity = angular_velocity;
 8009b44:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc0 <MOTION_Handle_Sensor+0x1d4>)
 8009b46:	3310      	adds	r3, #16
 8009b48:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }

  if(MOTION_Server_App_Context.hasMag == 1)
 8009b52:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc0 <MOTION_Handle_Sensor+0x1d4>)
 8009b54:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d10c      	bne.n	8009b76 <MOTION_Handle_Sensor+0x18a>
  {
    magnetic_field.x = 1;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    magnetic_field.y = 1;
 8009b60:	2301      	movs	r3, #1
 8009b62:	633b      	str	r3, [r7, #48]	@ 0x30
    magnetic_field.z = 1;
 8009b64:	2301      	movs	r3, #1
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
    MOTION_Server_App_Context.magnetic_field = magnetic_field;
 8009b68:	4b15      	ldr	r3, [pc, #84]	@ (8009bc0 <MOTION_Handle_Sensor+0x1d4>)
 8009b6a:	331c      	adds	r3, #28
 8009b6c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }

  if(stopPrintValue == 0){   
 8009b76:	4b15      	ldr	r3, [pc, #84]	@ (8009bcc <MOTION_Handle_Sensor+0x1e0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d11a      	bne.n	8009bb4 <MOTION_Handle_Sensor+0x1c8>
    UTIL_LCD_ClearStringLine(2);
 8009b7e:	2002      	movs	r0, #2
 8009b80:	f011 fb98 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
    UTIL_LCD_ClearStringLine(3);
 8009b84:	2003      	movs	r0, #3
 8009b86:	f011 fb95 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
    UTIL_LCD_ClearStringLine(4);
 8009b8a:	2004      	movs	r0, #4
 8009b8c:	f011 fb92 	bl	801b2b4 <UTIL_LCD_ClearStringLine>
       
    UTIL_LCD_DisplayStringAtLine(2,(uint8_t*)"Accelero and Gyro");
 8009b90:	490f      	ldr	r1, [pc, #60]	@ (8009bd0 <MOTION_Handle_Sensor+0x1e4>)
 8009b92:	2002      	movs	r0, #2
 8009b94:	f011 fca0 	bl	801b4d8 <UTIL_LCD_DisplayStringAtLine>
    UTIL_LCD_DisplayStringAtLine(3,(uint8_t*)accValue);
 8009b98:	f107 0318 	add.w	r3, r7, #24
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	2003      	movs	r0, #3
 8009ba0:	f011 fc9a 	bl	801b4d8 <UTIL_LCD_DisplayStringAtLine>
    UTIL_LCD_DisplayStringAtLine(4,(uint8_t*)gyroValue);
 8009ba4:	1d3b      	adds	r3, r7, #4
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	2004      	movs	r0, #4
 8009baa:	f011 fc95 	bl	801b4d8 <UTIL_LCD_DisplayStringAtLine>
      
    BSP_LCD_Refresh(0);
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f005 fcd4 	bl	800f55c <BSP_LCD_Refresh>
  }
}
 8009bb4:	bf00      	nop
 8009bb6:	3768      	adds	r7, #104	@ 0x68
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000bdc 	.word	0x20000bdc
 8009bc4:	08020274 	.word	0x08020274
 8009bc8:	40590000 	.word	0x40590000
 8009bcc:	20000c08 	.word	0x20000c08
 8009bd0:	08020288 	.word	0x08020288

08009bd4 <MOTION_GetCaps>:
 * @brief  Check the Motion active capabilities and set the ADV data accordingly
 * @param  None
 * @retval None
 */
static void MOTION_GetCaps(void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  MOTION_Server_App_Context.hasMag = 0;
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009c50 <MOTION_GetCaps+0x7c>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  MOTION_Server_App_Context.hasGyro = 1;
 8009be0:	4b1b      	ldr	r3, [pc, #108]	@ (8009c50 <MOTION_GetCaps+0x7c>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  MOTION_Server_App_Context.hasAcc = 1;
 8009be8:	4b19      	ldr	r3, [pc, #100]	@ (8009c50 <MOTION_GetCaps+0x7c>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  /* Update BLE ADV field (Motion) */
  if(MOTION_Server_App_Context.hasAcc)
 8009bf0:	4b17      	ldr	r3, [pc, #92]	@ (8009c50 <MOTION_GetCaps+0x7c>)
 8009bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00d      	beq.n	8009c16 <MOTION_GetCaps+0x42>
  {
    a_ManufData[5] |= 0x80; /* Acc value */
 8009bfa:	4b16      	ldr	r3, [pc, #88]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009bfc:	795b      	ldrb	r3, [r3, #5]
 8009bfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c06:	715a      	strb	r2, [r3, #5]
    a_ManufData[6] |= 0x04; /* Extended Acc events */
 8009c08:	4b12      	ldr	r3, [pc, #72]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c0a:	799b      	ldrb	r3, [r3, #6]
 8009c0c:	f043 0304 	orr.w	r3, r3, #4
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	4b10      	ldr	r3, [pc, #64]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c14:	719a      	strb	r2, [r3, #6]
  }
  if(MOTION_Server_App_Context.hasGyro)
 8009c16:	4b0e      	ldr	r3, [pc, #56]	@ (8009c50 <MOTION_GetCaps+0x7c>)
 8009c18:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d006      	beq.n	8009c2e <MOTION_GetCaps+0x5a>
  {
    a_ManufData[5] |= 0x40; /* Gyro value */
 8009c20:	4b0c      	ldr	r3, [pc, #48]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c22:	795b      	ldrb	r3, [r3, #5]
 8009c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c2c:	715a      	strb	r2, [r3, #5]
  }
  if(MOTION_Server_App_Context.hasMag)
 8009c2e:	4b08      	ldr	r3, [pc, #32]	@ (8009c50 <MOTION_GetCaps+0x7c>)
 8009c30:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d006      	beq.n	8009c46 <MOTION_GetCaps+0x72>
  {
    a_ManufData[5] |= 0x20; /* Mag value */
 8009c38:	4b06      	ldr	r3, [pc, #24]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c3a:	795b      	ldrb	r3, [r3, #5]
 8009c3c:	f043 0320 	orr.w	r3, r3, #32
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	4b04      	ldr	r3, [pc, #16]	@ (8009c54 <MOTION_GetCaps+0x80>)
 8009c44:	715a      	strb	r2, [r3, #5]
  }
}
 8009c46:	bf00      	nop
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20000bdc 	.word	0x20000bdc
 8009c54:	2000044c 	.word	0x2000044c

08009c58 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d01a      	beq.n	8009c9e <P2PS_STM_App_Notification+0x46>
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	dc7b      	bgt.n	8009d64 <P2PS_STM_App_Notification+0x10c>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <P2PS_STM_App_Notification+0x1e>
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d00a      	beq.n	8009c8a <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8009c74:	e076      	b.n	8009d64 <P2PS_STM_App_Notification+0x10c>
      P2P_Server_App_Context.Notification_Status = 1;
 8009c76:	4b3f      	ldr	r3, [pc, #252]	@ (8009d74 <P2PS_STM_App_Notification+0x11c>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8009c7c:	483e      	ldr	r0, [pc, #248]	@ (8009d78 <P2PS_STM_App_Notification+0x120>)
 8009c7e:	f012 fdb3 	bl	801c7e8 <puts>
      APP_DBG_MSG(" \n\r");
 8009c82:	483e      	ldr	r0, [pc, #248]	@ (8009d7c <P2PS_STM_App_Notification+0x124>)
 8009c84:	f012 fd48 	bl	801c718 <iprintf>
      break;
 8009c88:	e06f      	b.n	8009d6a <P2PS_STM_App_Notification+0x112>
      P2P_Server_App_Context.Notification_Status = 0;
 8009c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8009d74 <P2PS_STM_App_Notification+0x11c>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8009c90:	483b      	ldr	r0, [pc, #236]	@ (8009d80 <P2PS_STM_App_Notification+0x128>)
 8009c92:	f012 fda9 	bl	801c7e8 <puts>
      APP_DBG_MSG(" \n\r");
 8009c96:	4839      	ldr	r0, [pc, #228]	@ (8009d7c <P2PS_STM_App_Notification+0x124>)
 8009c98:	f012 fd3e 	bl	801c718 <iprintf>
      break;
 8009c9c:	e065      	b.n	8009d6a <P2PS_STM_App_Notification+0x112>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d12b      	bne.n	8009d00 <P2PS_STM_App_Notification+0xa8>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	3301      	adds	r3, #1
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d114      	bne.n	8009cde <P2PS_STM_App_Notification+0x86>
          aPwmLedGsData[PWM_LED_RED] = PWM_LED_GSDATA_OFF;
 8009cb4:	4b33      	ldr	r3, [pc, #204]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
          aPwmLedGsData[PWM_LED_GREEN] = PWM_LED_GSDATA_OFF;
 8009cba:	4b32      	ldr	r3, [pc, #200]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	705a      	strb	r2, [r3, #1]
          aPwmLedGsData[PWM_LED_BLUE] = PWM_LED_GSDATA_7_0;
 8009cc0:	4b30      	ldr	r3, [pc, #192]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009cc2:	2222      	movs	r2, #34	@ 0x22
 8009cc4:	709a      	strb	r2, [r3, #2]
          BSP_PWM_LED_On(aPwmLedGsData);
 8009cc6:	482f      	ldr	r0, [pc, #188]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009cc8:	f004 f99c 	bl	800e004 <BSP_PWM_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8009ccc:	482e      	ldr	r0, [pc, #184]	@ (8009d88 <P2PS_STM_App_Notification+0x130>)
 8009cce:	f012 fd8b 	bl	801c7e8 <puts>
          APP_DBG_MSG(" \n\r");
 8009cd2:	482a      	ldr	r0, [pc, #168]	@ (8009d7c <P2PS_STM_App_Notification+0x124>)
 8009cd4:	f012 fd20 	bl	801c718 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8009cd8:	4b26      	ldr	r3, [pc, #152]	@ (8009d74 <P2PS_STM_App_Notification+0x11c>)
 8009cda:	2201      	movs	r2, #1
 8009cdc:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <P2PS_STM_App_Notification+0xa8>
          LED_Off();
 8009cea:	f7f7 fbd8 	bl	800149e <LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8009cee:	4827      	ldr	r0, [pc, #156]	@ (8009d8c <P2PS_STM_App_Notification+0x134>)
 8009cf0:	f012 fd7a 	bl	801c7e8 <puts>
          APP_DBG_MSG(" \n\r");
 8009cf4:	4821      	ldr	r0, [pc, #132]	@ (8009d7c <P2PS_STM_App_Notification+0x124>)
 8009cf6:	f012 fd0f 	bl	801c718 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8009cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8009d74 <P2PS_STM_App_Notification+0x11c>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d12e      	bne.n	8009d68 <P2PS_STM_App_Notification+0x110>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d114      	bne.n	8009d40 <P2PS_STM_App_Notification+0xe8>
          aPwmLedGsData[PWM_LED_RED] = PWM_LED_GSDATA_OFF;
 8009d16:	4b1b      	ldr	r3, [pc, #108]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
          aPwmLedGsData[PWM_LED_GREEN] = PWM_LED_GSDATA_OFF;
 8009d1c:	4b19      	ldr	r3, [pc, #100]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	705a      	strb	r2, [r3, #1]
          aPwmLedGsData[PWM_LED_BLUE] = PWM_LED_GSDATA_47_0;
 8009d22:	4b18      	ldr	r3, [pc, #96]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009d24:	2281      	movs	r2, #129	@ 0x81
 8009d26:	709a      	strb	r2, [r3, #2]
          LED_On(aPwmLedGsData);
 8009d28:	4816      	ldr	r0, [pc, #88]	@ (8009d84 <P2PS_STM_App_Notification+0x12c>)
 8009d2a:	f7f7 fba9 	bl	8001480 <LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8009d2e:	4818      	ldr	r0, [pc, #96]	@ (8009d90 <P2PS_STM_App_Notification+0x138>)
 8009d30:	f012 fd5a 	bl	801c7e8 <puts>
          APP_DBG_MSG(" \n\r");
 8009d34:	4811      	ldr	r0, [pc, #68]	@ (8009d7c <P2PS_STM_App_Notification+0x124>)
 8009d36:	f012 fcef 	bl	801c718 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d74 <P2PS_STM_App_Notification+0x11c>)
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	3301      	adds	r3, #1
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10d      	bne.n	8009d68 <P2PS_STM_App_Notification+0x110>
          LED_Off();
 8009d4c:	f7f7 fba7 	bl	800149e <LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8009d50:	4810      	ldr	r0, [pc, #64]	@ (8009d94 <P2PS_STM_App_Notification+0x13c>)
 8009d52:	f012 fd49 	bl	801c7e8 <puts>
          APP_DBG_MSG(" \n\r");
 8009d56:	4809      	ldr	r0, [pc, #36]	@ (8009d7c <P2PS_STM_App_Notification+0x124>)
 8009d58:	f012 fcde 	bl	801c718 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8009d5c:	4b05      	ldr	r3, [pc, #20]	@ (8009d74 <P2PS_STM_App_Notification+0x11c>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	709a      	strb	r2, [r3, #2]
      break;
 8009d62:	e001      	b.n	8009d68 <P2PS_STM_App_Notification+0x110>
      break;
 8009d64:	bf00      	nop
 8009d66:	e000      	b.n	8009d6a <P2PS_STM_App_Notification+0x112>
      break;
 8009d68:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8009d6a:	bf00      	nop
}
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20000c0c 	.word	0x20000c0c
 8009d78:	0802029c 	.word	0x0802029c
 8009d7c:	080202d0 	.word	0x080202d0
 8009d80:	080202d4 	.word	0x080202d4
 8009d84:	20000c14 	.word	0x20000c14
 8009d88:	08020308 	.word	0x08020308
 8009d8c:	08020330 	.word	0x08020330
 8009d90:	08020358 	.word	0x08020358
 8009d94:	08020380 	.word	0x08020380

08009d98 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <P2PS_APP_Notification+0x1c>
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d000      	beq.n	8009dae <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8009dac:	e003      	b.n	8009db6 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8009dae:	f000 f819 	bl	8009de4 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8009db2:	e000      	b.n	8009db6 <P2PS_APP_Notification+0x1e>
    break;
 8009db4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8009db6:	bf00      	nop
}
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8009dc4:	4a05      	ldr	r2, [pc, #20]	@ (8009ddc <P2PS_APP_Init+0x1c>)
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	2010      	movs	r0, #16
 8009dca:	f011 fe6d 	bl	801baa8 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8009dce:	4b04      	ldr	r3, [pc, #16]	@ (8009de0 <P2PS_APP_Init+0x20>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8009dd4:	f000 f806 	bl	8009de4 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8009dd8:	bf00      	nop
}
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	08009e1d 	.word	0x08009e1d
 8009de0:	20000c0c 	.word	0x20000c0c

08009de4 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  
  LED_Off();
 8009de8:	f7f7 fb59 	bl	800149e <LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8009dec:	4b06      	ldr	r3, [pc, #24]	@ (8009e08 <P2PS_APP_LED_BUTTON_context_Init+0x24>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8009df2:	4b05      	ldr	r3, [pc, #20]	@ (8009e08 <P2PS_APP_LED_BUTTON_context_Init+0x24>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8009df8:	4b03      	ldr	r3, [pc, #12]	@ (8009e08 <P2PS_APP_LED_BUTTON_context_Init+0x24>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8009dfe:	4b02      	ldr	r3, [pc, #8]	@ (8009e08 <P2PS_APP_LED_BUTTON_context_Init+0x24>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8009e04:	bf00      	nop
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20000c0c 	.word	0x20000c0c

08009e0c <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8009e10:	2100      	movs	r1, #0
 8009e12:	2010      	movs	r0, #16
 8009e14:	f011 fe6a 	bl	801baec <UTIL_SEQ_SetTask>

  return;
 8009e18:	bf00      	nop
}
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8009e20:	4b1d      	ldr	r3, [pc, #116]	@ (8009e98 <P2PS_Send_Notification+0x7c>)
 8009e22:	791b      	ldrb	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d111      	bne.n	8009e4c <P2PS_Send_Notification+0x30>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8009e28:	4b1b      	ldr	r3, [pc, #108]	@ (8009e98 <P2PS_Send_Notification+0x7c>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	711a      	strb	r2, [r3, #4]
    UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"BUTTON-1 STATUS: 1", LEFT_MODE);
 8009e2e:	f011 fa15 	bl	801b25c <UTIL_LCD_GetFont>
 8009e32:	4603      	mov	r3, r0
 8009e34:	88db      	ldrh	r3, [r3, #6]
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	4619      	mov	r1, r3
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	4a17      	ldr	r2, [pc, #92]	@ (8009e9c <P2PS_Send_Notification+0x80>)
 8009e3e:	2000      	movs	r0, #0
 8009e40:	f011 fa9c 	bl	801b37c <UTIL_LCD_DisplayStringAt>
    BSP_LCD_Refresh(0);
 8009e44:	2000      	movs	r0, #0
 8009e46:	f005 fb89 	bl	800f55c <BSP_LCD_Refresh>
 8009e4a:	e010      	b.n	8009e6e <P2PS_Send_Notification+0x52>
  } 
  else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8009e4c:	4b12      	ldr	r3, [pc, #72]	@ (8009e98 <P2PS_Send_Notification+0x7c>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	711a      	strb	r2, [r3, #4]
    UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"BUTTON-1 STATUS: 0", LEFT_MODE);
 8009e52:	f011 fa03 	bl	801b25c <UTIL_LCD_GetFont>
 8009e56:	4603      	mov	r3, r0
 8009e58:	88db      	ldrh	r3, [r3, #6]
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	2303      	movs	r3, #3
 8009e60:	4a0f      	ldr	r2, [pc, #60]	@ (8009ea0 <P2PS_Send_Notification+0x84>)
 8009e62:	2000      	movs	r0, #0
 8009e64:	f011 fa8a 	bl	801b37c <UTIL_LCD_DisplayStringAt>
    BSP_LCD_Refresh(0);
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f005 fb77 	bl	800f55c <BSP_LCD_Refresh>
  }
  
  if(P2P_Server_App_Context.Notification_Status){ 
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <P2PS_Send_Notification+0x7c>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <P2PS_Send_Notification+0x72>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8009e76:	480b      	ldr	r0, [pc, #44]	@ (8009ea4 <P2PS_Send_Notification+0x88>)
 8009e78:	f012 fc4e 	bl	801c718 <iprintf>
    APP_DBG_MSG(" \n\r");
 8009e7c:	480a      	ldr	r0, [pc, #40]	@ (8009ea8 <P2PS_Send_Notification+0x8c>)
 8009e7e:	f012 fc4b 	bl	801c718 <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8009e82:	490a      	ldr	r1, [pc, #40]	@ (8009eac <P2PS_Send_Notification+0x90>)
 8009e84:	f64f 6042 	movw	r0, #65090	@ 0xfe42
 8009e88:	f00f fed2 	bl	8019c30 <P2PS_STM_App_Update_Char>
  } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
  }

  return;
 8009e8c:	e003      	b.n	8009e96 <P2PS_Send_Notification+0x7a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8009e8e:	4808      	ldr	r0, [pc, #32]	@ (8009eb0 <P2PS_Send_Notification+0x94>)
 8009e90:	f012 fc42 	bl	801c718 <iprintf>
  return;
 8009e94:	bf00      	nop
}
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000c0c 	.word	0x20000c0c
 8009e9c:	080203a8 	.word	0x080203a8
 8009ea0:	080203bc 	.word	0x080203bc
 8009ea4:	080203d0 	.word	0x080203d0
 8009ea8:	080202d0 	.word	0x080202d0
 8009eac:	20000c0f 	.word	0x20000c0f
 8009eb0:	08020410 	.word	0x08020410

08009eb4 <Motenv_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Motenv_Event_Handler(void *Event)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08c      	sub	sp, #48	@ 0x30
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  aci_gatt_read_permit_req_event_rp0 *read_permit_req;
  MOTENV_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch(event_pckt->evt)
 8009ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2bff      	cmp	r3, #255	@ 0xff
 8009ece:	d175      	bne.n	8009fbc <Motenv_Event_Handler+0x108>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	3302      	adds	r3, #2
 8009ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      switch(blecore_evt->ecode)
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f640 4201 	movw	r2, #3073	@ 0xc01
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d01d      	beq.n	8009f20 <Motenv_Event_Handler+0x6c>
 8009ee4:	f640 4214 	movw	r2, #3092	@ 0xc14
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d163      	bne.n	8009fb4 <Motenv_Event_Handler+0x100>
      {
        /* Handle Read request from GATT Client */
        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE:
        {
          read_permit_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	3302      	adds	r3, #2
 8009ef0:	623b      	str	r3, [r7, #32]
          /* Env char */
          if(read_permit_req->Attribute_Handle == (aMotenvContext.HWEnvCharHdle + 1U))
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4b34      	ldr	r3, [pc, #208]	@ (8009fcc <Motenv_Event_Handler+0x118>)
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	3301      	adds	r3, #1
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d106      	bne.n	8009f12 <Motenv_Event_Handler+0x5e>
          {
            /**
            * Notify to application
            */
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ ENV CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = HW_ENV_READ_EVT;
 8009f04:	2304      	movs	r3, #4
 8009f06:	733b      	strb	r3, [r7, #12]
            MOTENV_STM_App_Notification(&Notification);
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff fbad 	bl	800966c <MOTENV_STM_App_Notification>
          }
          else
          {
            /* do nothing */
          }
          (void)aci_gatt_allow_read(read_permit_req->Connection_Handle);
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f00f f837 	bl	8018f8c <aci_gatt_allow_read>
          break;
 8009f1e:	e04c      	b.n	8009fba <Motenv_Event_Handler+0x106>
        }

        /* Handle Write request or Notification enabling from GATT Client */
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          read_permit_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	3302      	adds	r3, #2
 8009f24:	623b      	str	r3, [r7, #32]
          
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	3302      	adds	r3, #2
 8009f2a:	61fb      	str	r3, [r7, #28]
          /* Env char */
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWEnvCharHdle + 2U))
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	885b      	ldrh	r3, [r3, #2]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	461a      	mov	r2, r3
 8009f34:	4b25      	ldr	r3, [pc, #148]	@ (8009fcc <Motenv_Event_Handler+0x118>)
 8009f36:	889b      	ldrh	r3, [r3, #4]
 8009f38:	3302      	adds	r3, #2
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d118      	bne.n	8009f70 <Motenv_Event_Handler+0xbc>
          {
            /**
            * Descriptor handle
            */
            return_value = SVCCTL_EvtAckFlowEnable;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /**
            * Notify to application
            */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	7a1b      	ldrb	r3, [r3, #8]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d007      	beq.n	8009f60 <Motenv_Event_Handler+0xac>
            {
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_ENABLED_EVT;
 8009f50:	2302      	movs	r3, #2
 8009f52:	733b      	strb	r3, [r7, #12]
              MOTENV_STM_App_Notification(&Notification);
 8009f54:	f107 030c 	add.w	r3, r7, #12
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff fb87 	bl	800966c <MOTENV_STM_App_Notification>

          else
          {
            /* do nothing */
          }
          break;
 8009f5e:	e02b      	b.n	8009fb8 <Motenv_Event_Handler+0x104>
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_DISABLED_EVT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	733b      	strb	r3, [r7, #12]
              MOTENV_STM_App_Notification(&Notification);
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fb7f 	bl	800966c <MOTENV_STM_App_Notification>
          break;
 8009f6e:	e023      	b.n	8009fb8 <Motenv_Event_Handler+0x104>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.HWMotionCharHdle + 2U))
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	885b      	ldrh	r3, [r3, #2]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	4b14      	ldr	r3, [pc, #80]	@ (8009fcc <Motenv_Event_Handler+0x118>)
 8009f7a:	885b      	ldrh	r3, [r3, #2]
 8009f7c:	3302      	adds	r3, #2
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d11a      	bne.n	8009fb8 <Motenv_Event_Handler+0x104>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009f82:	2301      	movs	r3, #1
 8009f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	7a1b      	ldrb	r3, [r3, #8]
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d007      	beq.n	8009fa4 <Motenv_Event_Handler+0xf0>
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_ENABLED_EVT;
 8009f94:	2300      	movs	r3, #0
 8009f96:	733b      	strb	r3, [r7, #12]
              MOTENV_STM_App_Notification(&Notification);
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff fb65 	bl	800966c <MOTENV_STM_App_Notification>
          break;
 8009fa2:	e009      	b.n	8009fb8 <Motenv_Event_Handler+0x104>
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_DISABLED_EVT;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	733b      	strb	r3, [r7, #12]
              MOTENV_STM_App_Notification(&Notification);
 8009fa8:	f107 030c 	add.w	r3, r7, #12
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff fb5d 	bl	800966c <MOTENV_STM_App_Notification>
          break;
 8009fb2:	e001      	b.n	8009fb8 <Motenv_Event_Handler+0x104>
       }

        default:
          break;
 8009fb4:	bf00      	nop
 8009fb6:	e002      	b.n	8009fbe <Motenv_Event_Handler+0x10a>
          break;
 8009fb8:	bf00      	nop
      }
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8009fba:	e000      	b.n	8009fbe <Motenv_Event_Handler+0x10a>
    }

    default:
      break;
 8009fbc:	bf00      	nop
  }

  return(return_value);
 8009fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Motenv_Event_Handler */
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3730      	adds	r7, #48	@ 0x30
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000c18 	.word	0x20000c18

08009fd0 <MOTENV_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void MOTENV_STM_Init(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08a      	sub	sp, #40	@ 0x28
 8009fd4:	af06      	add	r7, sp, #24
  Char_UUID_t uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Motenv_Event_Handler);
 8009fd6:	484a      	ldr	r0, [pc, #296]	@ (800a100 <MOTENV_STM_Init+0x130>)
 8009fd8:	f010 fdd8 	bl	801ab8c <SVCCTL_RegisterSvcHandler>
  
  /**
   *   Add HW Service
   */
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 8009fdc:	231b      	movs	r3, #27
 8009fde:	703b      	strb	r3, [r7, #0]
 8009fe0:	23c5      	movs	r3, #197	@ 0xc5
 8009fe2:	707b      	strb	r3, [r7, #1]
 8009fe4:	23d5      	movs	r3, #213	@ 0xd5
 8009fe6:	70bb      	strb	r3, [r7, #2]
 8009fe8:	23a5      	movs	r3, #165	@ 0xa5
 8009fea:	70fb      	strb	r3, [r7, #3]
 8009fec:	2302      	movs	r3, #2
 8009fee:	713b      	strb	r3, [r7, #4]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	717b      	strb	r3, [r7, #5]
 8009ff4:	23b4      	movs	r3, #180	@ 0xb4
 8009ff6:	71bb      	strb	r3, [r7, #6]
 8009ff8:	239a      	movs	r3, #154	@ 0x9a
 8009ffa:	71fb      	strb	r3, [r7, #7]
 8009ffc:	23e1      	movs	r3, #225	@ 0xe1
 8009ffe:	723b      	strb	r3, [r7, #8]
 800a000:	2311      	movs	r3, #17
 800a002:	727b      	strb	r3, [r7, #9]
 800a004:	2301      	movs	r3, #1
 800a006:	72bb      	strb	r3, [r7, #10]
 800a008:	2300      	movs	r3, #0
 800a00a:	72fb      	strb	r3, [r7, #11]
 800a00c:	2300      	movs	r3, #0
 800a00e:	733b      	strb	r3, [r7, #12]
 800a010:	2300      	movs	r3, #0
 800a012:	737b      	strb	r3, [r7, #13]
 800a014:	2300      	movs	r3, #0
 800a016:	73bb      	strb	r3, [r7, #14]
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800a01c:	4639      	mov	r1, r7
 800a01e:	4b39      	ldr	r3, [pc, #228]	@ (800a104 <MOTENV_STM_Init+0x134>)
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	230a      	movs	r3, #10
 800a024:	2201      	movs	r2, #1
 800a026:	2002      	movs	r0, #2
 800a028:	f00e fcd4 	bl	80189d4 <aci_gatt_add_service>
                             1+(3*HW_CHAR_NUMBER), /*Max_Attribute_Records*/
                             &(aMotenvContext.HWSvcHdle));
  /**
   *   Add Motion Characteristic for HW Service
   */
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800a02c:	231b      	movs	r3, #27
 800a02e:	703b      	strb	r3, [r7, #0]
 800a030:	23c5      	movs	r3, #197	@ 0xc5
 800a032:	707b      	strb	r3, [r7, #1]
 800a034:	23d5      	movs	r3, #213	@ 0xd5
 800a036:	70bb      	strb	r3, [r7, #2]
 800a038:	23a5      	movs	r3, #165	@ 0xa5
 800a03a:	70fb      	strb	r3, [r7, #3]
 800a03c:	2302      	movs	r3, #2
 800a03e:	713b      	strb	r3, [r7, #4]
 800a040:	2300      	movs	r3, #0
 800a042:	717b      	strb	r3, [r7, #5]
 800a044:	2336      	movs	r3, #54	@ 0x36
 800a046:	71bb      	strb	r3, [r7, #6]
 800a048:	23ac      	movs	r3, #172	@ 0xac
 800a04a:	71fb      	strb	r3, [r7, #7]
 800a04c:	23e1      	movs	r3, #225	@ 0xe1
 800a04e:	723b      	strb	r3, [r7, #8]
 800a050:	2311      	movs	r3, #17
 800a052:	727b      	strb	r3, [r7, #9]
 800a054:	2301      	movs	r3, #1
 800a056:	72bb      	strb	r3, [r7, #10]
 800a058:	2300      	movs	r3, #0
 800a05a:	72fb      	strb	r3, [r7, #11]
 800a05c:	2300      	movs	r3, #0
 800a05e:	733b      	strb	r3, [r7, #12]
 800a060:	2300      	movs	r3, #0
 800a062:	737b      	strb	r3, [r7, #13]
 800a064:	23c0      	movs	r3, #192	@ 0xc0
 800a066:	73bb      	strb	r3, [r7, #14]
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800a06c:	4b25      	ldr	r3, [pc, #148]	@ (800a104 <MOTENV_STM_Init+0x134>)
 800a06e:	8818      	ldrh	r0, [r3, #0]
 800a070:	463a      	mov	r2, r7
 800a072:	4b25      	ldr	r3, [pc, #148]	@ (800a108 <MOTENV_STM_Init+0x138>)
 800a074:	9305      	str	r3, [sp, #20]
 800a076:	2300      	movs	r3, #0
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	2310      	movs	r3, #16
 800a07c:	9303      	str	r3, [sp, #12]
 800a07e:	2304      	movs	r3, #4
 800a080:	9302      	str	r3, [sp, #8]
 800a082:	2300      	movs	r3, #0
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	2310      	movs	r3, #16
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	230e      	movs	r3, #14
 800a08c:	2102      	movs	r1, #2
 800a08e:	f00e fd77 	bl	8018b80 <aci_gatt_add_char>
                          &(aMotenvContext.HWMotionCharHdle));

    /**
     *   Add Env Characteristic for HW Service
     */
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
 800a092:	231b      	movs	r3, #27
 800a094:	703b      	strb	r3, [r7, #0]
 800a096:	23c5      	movs	r3, #197	@ 0xc5
 800a098:	707b      	strb	r3, [r7, #1]
 800a09a:	23d5      	movs	r3, #213	@ 0xd5
 800a09c:	70bb      	strb	r3, [r7, #2]
 800a09e:	23a5      	movs	r3, #165	@ 0xa5
 800a0a0:	70fb      	strb	r3, [r7, #3]
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	713b      	strb	r3, [r7, #4]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	717b      	strb	r3, [r7, #5]
 800a0aa:	2336      	movs	r3, #54	@ 0x36
 800a0ac:	71bb      	strb	r3, [r7, #6]
 800a0ae:	23ac      	movs	r3, #172	@ 0xac
 800a0b0:	71fb      	strb	r3, [r7, #7]
 800a0b2:	23e1      	movs	r3, #225	@ 0xe1
 800a0b4:	723b      	strb	r3, [r7, #8]
 800a0b6:	2311      	movs	r3, #17
 800a0b8:	727b      	strb	r3, [r7, #9]
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	72bb      	strb	r3, [r7, #10]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	72fb      	strb	r3, [r7, #11]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	733b      	strb	r3, [r7, #12]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	737b      	strb	r3, [r7, #13]
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	73bb      	strb	r3, [r7, #14]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800a0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a104 <MOTENV_STM_Init+0x134>)
 800a0d4:	8818      	ldrh	r0, [r3, #0]
 800a0d6:	463a      	mov	r2, r7
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <MOTENV_STM_Init+0x13c>)
 800a0da:	9305      	str	r3, [sp, #20]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9304      	str	r3, [sp, #16]
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	9303      	str	r3, [sp, #12]
 800a0e4:	2304      	movs	r3, #4
 800a0e6:	9302      	str	r3, [sp, #8]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	2312      	movs	r3, #18
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	2102      	movs	r1, #2
 800a0f4:	f00e fd44 	bl	8018b80 <aci_gatt_add_char>
                            GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, /* gattEvtMask */
                            16, /* encryKeySize */
                            0, /* isVariable: 1 */
                            &(aMotenvContext.HWEnvCharHdle));

  return;
 800a0f8:	bf00      	nop
} /* end MOTENV_STM_Init */
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08009eb5 	.word	0x08009eb5
 800a104:	20000c18 	.word	0x20000c18
 800a108:	20000c1a 	.word	0x20000c1a
 800a10c:	20000c1c 	.word	0x20000c1c

0800a110 <MOTENV_STM_App_Update_Char>:
 * @param  payloadLen: Length of the char value to be notified
 * @param  pPayload: Char value to be notified
 * @retval BLE status
 */
tBleStatus MOTENV_STM_App_Update_Char(uint16_t UUID, uint8_t payloadLen, uint8_t *pPayload) 
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af02      	add	r7, sp, #8
 800a116:	4603      	mov	r3, r0
 800a118:	603a      	str	r2, [r7, #0]
 800a11a:	80fb      	strh	r3, [r7, #6]
 800a11c:	460b      	mov	r3, r1
 800a11e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a120:	2392      	movs	r3, #146	@ 0x92
 800a122:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800a124:	88fb      	ldrh	r3, [r7, #6]
 800a126:	f5b3 5fe8 	cmp.w	r3, #7424	@ 0x1d00
 800a12a:	d003      	beq.n	800a134 <MOTENV_STM_App_Update_Char+0x24>
 800a12c:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800a130:	d00e      	beq.n	800a150 <MOTENV_STM_App_Update_Char+0x40>
                                         pPayload);

      break;

    default:
      break;
 800a132:	e01b      	b.n	800a16c <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800a134:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <MOTENV_STM_App_Update_Char+0x68>)
 800a136:	8818      	ldrh	r0, [r3, #0]
 800a138:	4b0f      	ldr	r3, [pc, #60]	@ (800a178 <MOTENV_STM_App_Update_Char+0x68>)
 800a13a:	8899      	ldrh	r1, [r3, #4]
 800a13c:	797a      	ldrb	r2, [r7, #5]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	4613      	mov	r3, r2
 800a144:	2200      	movs	r2, #0
 800a146:	f00e fe23 	bl	8018d90 <aci_gatt_update_char_value>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]
      break;
 800a14e:	e00d      	b.n	800a16c <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800a150:	4b09      	ldr	r3, [pc, #36]	@ (800a178 <MOTENV_STM_App_Update_Char+0x68>)
 800a152:	8818      	ldrh	r0, [r3, #0]
 800a154:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <MOTENV_STM_App_Update_Char+0x68>)
 800a156:	8859      	ldrh	r1, [r3, #2]
 800a158:	797a      	ldrb	r2, [r7, #5]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	4613      	mov	r3, r2
 800a160:	2200      	movs	r2, #0
 800a162:	f00e fe15 	bl	8018d90 <aci_gatt_update_char_value>
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]
      break;
 800a16a:	bf00      	nop
  }

  return result;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000c18 	.word	0x20000c18

0800a17c <LL_PWR_EnableBootC2>:
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a180:	4b05      	ldr	r3, [pc, #20]	@ (800a198 <LL_PWR_EnableBootC2+0x1c>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	4a04      	ldr	r2, [pc, #16]	@ (800a198 <LL_PWR_EnableBootC2+0x1c>)
 800a186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a18a:	60d3      	str	r3, [r2, #12]
}
 800a18c:	bf00      	nop
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	58000400 	.word	0x58000400

0800a19c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a1a4:	4b06      	ldr	r3, [pc, #24]	@ (800a1c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a1a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a1aa:	4905      	ldr	r1, [pc, #20]	@ (800a1c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	58000800 	.word	0x58000800

0800a1c4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a1cc:	4b05      	ldr	r3, [pc, #20]	@ (800a1e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a1ce:	6a1a      	ldr	r2, [r3, #32]
 800a1d0:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	620b      	str	r3, [r1, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	58000800 	.word	0x58000800

0800a1e8 <LL_AHB3_GRP1_EnableClock>:
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a1f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4013      	ands	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a20c:	68fb      	ldr	r3, [r7, #12]
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a226:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a22a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4313      	orrs	r3, r2
 800a232:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a23a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4013      	ands	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a244:	68fb      	ldr	r3, [r7, #12]
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800a252:	b480      	push	{r7}
 800a254:	b083      	sub	sp, #12
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f043 0201 	orr.w	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	041b      	lsls	r3, r3, #16
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	605a      	str	r2, [r3, #4]
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	041b      	lsls	r3, r3, #16
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	605a      	str	r2, [r3, #4]
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	43db      	mvns	r3, r3
 800a2ee:	401a      	ands	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	605a      	str	r2, [r3, #4]
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	609a      	str	r2, [r3, #8]
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	041a      	lsls	r2, r3, #16
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	609a      	str	r2, [r3, #8]
}
 800a32e:	bf00      	nop
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	4013      	ands	r3, r2
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d101      	bne.n	800a356 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	69da      	ldr	r2, [r3, #28]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	4013      	ands	r3, r2
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d101      	bne.n	800a380 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e000      	b.n	800a382 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
	...

0800a390 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a394:	2102      	movs	r1, #2
 800a396:	4818      	ldr	r0, [pc, #96]	@ (800a3f8 <HW_IPCC_Rx_Handler+0x68>)
 800a398:	f7ff ffe4 	bl	800a364 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d008      	beq.n	800a3b4 <HW_IPCC_Rx_Handler+0x24>
 800a3a2:	4b15      	ldr	r3, [pc, #84]	@ (800a3f8 <HW_IPCC_Rx_Handler+0x68>)
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a3ae:	f000 f8d5 	bl	800a55c <HW_IPCC_SYS_EvtHandler>
 800a3b2:	e01e      	b.n	800a3f2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	4810      	ldr	r0, [pc, #64]	@ (800a3f8 <HW_IPCC_Rx_Handler+0x68>)
 800a3b8:	f7ff ffd4 	bl	800a364 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <HW_IPCC_Rx_Handler+0x44>
 800a3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3f8 <HW_IPCC_Rx_Handler+0x68>)
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d102      	bne.n	800a3d4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800a3ce:	f000 f889 	bl	800a4e4 <HW_IPCC_BLE_EvtHandler>
 800a3d2:	e00e      	b.n	800a3f2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a3d4:	2108      	movs	r1, #8
 800a3d6:	4808      	ldr	r0, [pc, #32]	@ (800a3f8 <HW_IPCC_Rx_Handler+0x68>)
 800a3d8:	f7ff ffc4 	bl	800a364 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d008      	beq.n	800a3f4 <HW_IPCC_Rx_Handler+0x64>
 800a3e2:	4b05      	ldr	r3, [pc, #20]	@ (800a3f8 <HW_IPCC_Rx_Handler+0x68>)
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d102      	bne.n	800a3f4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a3ee:	f000 f901 	bl	800a5f4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
}
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	58000c00 	.word	0x58000c00

0800a3fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a400:	2102      	movs	r1, #2
 800a402:	4818      	ldr	r0, [pc, #96]	@ (800a464 <HW_IPCC_Tx_Handler+0x68>)
 800a404:	f7ff ff99 	bl	800a33a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d108      	bne.n	800a420 <HW_IPCC_Tx_Handler+0x24>
 800a40e:	4b15      	ldr	r3, [pc, #84]	@ (800a464 <HW_IPCC_Tx_Handler+0x68>)
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a41a:	f000 f893 	bl	800a544 <HW_IPCC_SYS_CmdEvtHandler>
 800a41e:	e01e      	b.n	800a45e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a420:	2108      	movs	r1, #8
 800a422:	4810      	ldr	r0, [pc, #64]	@ (800a464 <HW_IPCC_Tx_Handler+0x68>)
 800a424:	f7ff ff89 	bl	800a33a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d108      	bne.n	800a440 <HW_IPCC_Tx_Handler+0x44>
 800a42e:	4b0d      	ldr	r3, [pc, #52]	@ (800a464 <HW_IPCC_Tx_Handler+0x68>)
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d102      	bne.n	800a440 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a43a:	f000 f8bd 	bl	800a5b8 <HW_IPCC_MM_FreeBufHandler>
 800a43e:	e00e      	b.n	800a45e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a440:	2120      	movs	r1, #32
 800a442:	4808      	ldr	r0, [pc, #32]	@ (800a464 <HW_IPCC_Tx_Handler+0x68>)
 800a444:	f7ff ff79 	bl	800a33a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d108      	bne.n	800a460 <HW_IPCC_Tx_Handler+0x64>
 800a44e:	4b05      	ldr	r3, [pc, #20]	@ (800a464 <HW_IPCC_Tx_Handler+0x68>)
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d102      	bne.n	800a460 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a45a:	f000 f84f 	bl	800a4fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
}
 800a462:	bd80      	pop	{r7, pc}
 800a464:	58000c00 	.word	0x58000c00

0800a468 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a46c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a470:	f7ff fed3 	bl	800a21a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a474:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a478:	f7ff fea4 	bl	800a1c4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a47c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a480:	f7ff fe8c 	bl	800a19c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a484:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a486:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a488:	f7ff fe78 	bl	800a17c <LL_PWR_EnableBootC2>

  return;
 800a48c:	bf00      	nop
}
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a494:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a498:	f7ff fea6 	bl	800a1e8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a49c:	4806      	ldr	r0, [pc, #24]	@ (800a4b8 <HW_IPCC_Init+0x28>)
 800a49e:	f7ff fee8 	bl	800a272 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a4a2:	4805      	ldr	r0, [pc, #20]	@ (800a4b8 <HW_IPCC_Init+0x28>)
 800a4a4:	f7ff fed5 	bl	800a252 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a4a8:	202c      	movs	r0, #44	@ 0x2c
 800a4aa:	f005 ffb0 	bl	801040e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a4ae:	202d      	movs	r0, #45	@ 0x2d
 800a4b0:	f005 ffad 	bl	801040e <HAL_NVIC_EnableIRQ>

  return;
 800a4b4:	bf00      	nop
}
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	58000c00 	.word	0x58000c00

0800a4bc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	4802      	ldr	r0, [pc, #8]	@ (800a4cc <HW_IPCC_BLE_Init+0x10>)
 800a4c4:	f7ff ff0a 	bl	800a2dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a4c8:	bf00      	nop
}
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	58000c00 	.word	0x58000c00

0800a4d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4802      	ldr	r0, [pc, #8]	@ (800a4e0 <HW_IPCC_BLE_SendCmd+0x10>)
 800a4d8:	f7ff ff20 	bl	800a31c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a4dc:	bf00      	nop
}
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	58000c00 	.word	0x58000c00

0800a4e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a4e8:	f010 fc4e 	bl	801ad88 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	4802      	ldr	r0, [pc, #8]	@ (800a4f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a4f0:	f7ff ff06 	bl	800a300 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a4f4:	bf00      	nop
}
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	58000c00 	.word	0x58000c00

0800a4fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a500:	2120      	movs	r1, #32
 800a502:	4803      	ldr	r0, [pc, #12]	@ (800a510 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a504:	f7ff fed8 	bl	800a2b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a508:	f010 fc6e 	bl	801ade8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a50c:	bf00      	nop
}
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	58000c00 	.word	0x58000c00

0800a514 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a518:	2102      	movs	r1, #2
 800a51a:	4802      	ldr	r0, [pc, #8]	@ (800a524 <HW_IPCC_SYS_Init+0x10>)
 800a51c:	f7ff fede 	bl	800a2dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a520:	bf00      	nop
}
 800a522:	bd80      	pop	{r7, pc}
 800a524:	58000c00 	.word	0x58000c00

0800a528 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a52c:	2102      	movs	r1, #2
 800a52e:	4804      	ldr	r0, [pc, #16]	@ (800a540 <HW_IPCC_SYS_SendCmd+0x18>)
 800a530:	f7ff fef4 	bl	800a31c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a534:	2102      	movs	r1, #2
 800a536:	4802      	ldr	r0, [pc, #8]	@ (800a540 <HW_IPCC_SYS_SendCmd+0x18>)
 800a538:	f7ff feab 	bl	800a292 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a53c:	bf00      	nop
}
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	58000c00 	.word	0x58000c00

0800a544 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a548:	2102      	movs	r1, #2
 800a54a:	4803      	ldr	r0, [pc, #12]	@ (800a558 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a54c:	f7ff feb4 	bl	800a2b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a550:	f010 fc9a 	bl	801ae88 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a554:	bf00      	nop
}
 800a556:	bd80      	pop	{r7, pc}
 800a558:	58000c00 	.word	0x58000c00

0800a55c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a560:	f010 fca8 	bl	801aeb4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a564:	2102      	movs	r1, #2
 800a566:	4802      	ldr	r0, [pc, #8]	@ (800a570 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a568:	f7ff feca 	bl	800a300 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a56c:	bf00      	nop
}
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	58000c00 	.word	0x58000c00

0800a574 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a57c:	2108      	movs	r1, #8
 800a57e:	480c      	ldr	r0, [pc, #48]	@ (800a5b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a580:	f7ff fedb 	bl	800a33a <LL_C1_IPCC_IsActiveFlag_CHx>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d007      	beq.n	800a59a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a58a:	4a0a      	ldr	r2, [pc, #40]	@ (800a5b4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a590:	2108      	movs	r1, #8
 800a592:	4807      	ldr	r0, [pc, #28]	@ (800a5b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a594:	f7ff fe7d 	bl	800a292 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a598:	e006      	b.n	800a5a8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a59e:	2108      	movs	r1, #8
 800a5a0:	4803      	ldr	r0, [pc, #12]	@ (800a5b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a5a2:	f7ff febb 	bl	800a31c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a5a6:	bf00      	nop
}
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	58000c00 	.word	0x58000c00
 800a5b4:	20000c20 	.word	0x20000c20

0800a5b8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a5bc:	2108      	movs	r1, #8
 800a5be:	4806      	ldr	r0, [pc, #24]	@ (800a5d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a5c0:	f7ff fe7a 	bl	800a2b8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a5c4:	4b05      	ldr	r3, [pc, #20]	@ (800a5dc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a5ca:	2108      	movs	r1, #8
 800a5cc:	4802      	ldr	r0, [pc, #8]	@ (800a5d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a5ce:	f7ff fea5 	bl	800a31c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a5d2:	bf00      	nop
}
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	58000c00 	.word	0x58000c00
 800a5dc:	20000c20 	.word	0x20000c20

0800a5e0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5e4:	2108      	movs	r1, #8
 800a5e6:	4802      	ldr	r0, [pc, #8]	@ (800a5f0 <HW_IPCC_TRACES_Init+0x10>)
 800a5e8:	f7ff fe78 	bl	800a2dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a5ec:	bf00      	nop
}
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	58000c00 	.word	0x58000c00

0800a5f4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a5f8:	f010 fd04 	bl	801b004 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5fc:	2108      	movs	r1, #8
 800a5fe:	4802      	ldr	r0, [pc, #8]	@ (800a608 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a600:	f7ff fe7e 	bl	800a300 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a604:	bf00      	nop
}
 800a606:	bd80      	pop	{r7, pc}
 800a608:	58000c00 	.word	0x58000c00

0800a60c <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d103      	bne.n	800a628 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800a620:	f04f 33ff 	mov.w	r3, #4294967295
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e04d      	b.n	800a6c4 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	7b1a      	ldrb	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	691a      	ldr	r2, [r3, #16]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	695a      	ldr	r2, [r3, #20]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a1b      	ldr	r2, [pc, #108]	@ (800a6d0 <ISM330DHCX_RegisterBusIO+0xc4>)
 800a664:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a1a      	ldr	r2, [pc, #104]	@ (800a6d4 <ISM330DHCX_RegisterBusIO+0xc8>)
 800a66a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d103      	bne.n	800a682 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 800a67a:	f04f 33ff 	mov.w	r3, #4294967295
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	e020      	b.n	800a6c4 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4798      	blx	r3
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e016      	b.n	800a6c4 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d112      	bne.n	800a6c4 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10d      	bne.n	800a6c4 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800a6a8:	230c      	movs	r3, #12
 800a6aa:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 800a6ac:	7afb      	ldrb	r3, [r7, #11]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	2112      	movs	r1, #18
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fd61 	bl	800b17a <ISM330DHCX_Write_Reg>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 800a6be:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0800b5e9 	.word	0x0800b5e9
 800a6d4:	0800b61f 	.word	0x0800b61f

0800a6d8 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	331c      	adds	r3, #28
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f001 fd12 	bl	800c110 <ism330dhcx_device_conf_set>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800a6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f6:	e078      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	331c      	adds	r3, #28
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 fd89 	bl	800c216 <ism330dhcx_auto_increment_set>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	e06c      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	331c      	adds	r3, #28
 800a714:	2101      	movs	r1, #1
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fd57 	bl	800c1ca <ism330dhcx_reset_set>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d002      	beq.n	800a728 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	e060      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	331c      	adds	r3, #28
 800a72c:	2101      	movs	r1, #1
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 fd71 	bl	800c216 <ism330dhcx_auto_increment_set>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 800a73a:	f04f 33ff 	mov.w	r3, #4294967295
 800a73e:	e054      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	331c      	adds	r3, #28
 800a744:	2101      	movs	r1, #1
 800a746:	4618      	mov	r0, r3
 800a748:	f001 fc2c 	bl	800bfa4 <ism330dhcx_block_data_update_set>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800a752:	f04f 33ff 	mov.w	r3, #4294967295
 800a756:	e048      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	331c      	adds	r3, #28
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 fd7f 	bl	800c262 <ism330dhcx_fifo_mode_set>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295
 800a76e:	e03c      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2204      	movs	r2, #4
 800a774:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	331c      	adds	r3, #28
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fff6 	bl	800b770 <ism330dhcx_xl_data_rate_set>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295
 800a78e:	e02c      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	331c      	adds	r3, #28
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f000 ff8c 	bl	800b6b4 <ism330dhcx_xl_full_scale_set>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 800a7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a6:	e020      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2204      	movs	r2, #4
 800a7ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	331c      	adds	r3, #28
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 fa26 	bl	800bc08 <ism330dhcx_gy_data_rate_set>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800a7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c6:	e010      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	331c      	adds	r3, #28
 800a7cc:	210c      	movs	r1, #12
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 f9a2 	bl	800bb18 <ism330dhcx_gy_full_scale_set>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 800a7da:	f04f 33ff 	mov.w	r3, #4294967295
 800a7de:	e004      	b.n	800a7ea <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f888 	bl	800a910 <ISM330DHCX_ACC_Disable>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 800a806:	f04f 33ff 	mov.w	r3, #4294967295
 800a80a:	e015      	b.n	800a838 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa92 	bl	800ad36 <ISM330DHCX_GYRO_Disable>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	e00c      	b.n	800a838 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  pObj->is_initialized = 0;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	331c      	adds	r3, #28
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	4618      	mov	r0, r3
 800a852:	f001 fca9 	bl	800c1a8 <ism330dhcx_device_id_get>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	e000      	b.n	800a864 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2201      	movs	r2, #1
 800a87a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2201      	movs	r2, #1
 800a880:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2200      	movs	r2, #0
 800a886:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2200      	movs	r2, #0
 800a88c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a894:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2210      	movs	r2, #16
 800a89a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	4a07      	ldr	r2, [pc, #28]	@ (800a8c4 <ISM330DHCX_GetCapabilities+0x58>)
 800a8a6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	4a06      	ldr	r2, [pc, #24]	@ (800a8c4 <ISM330DHCX_GetCapabilities+0x58>)
 800a8ac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	45d05800 	.word	0x45d05800

0800a8c8 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e014      	b.n	800a908 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f103 021c 	add.w	r2, r3, #28
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f000 ff3f 	bl	800b770 <ism330dhcx_xl_data_rate_set>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fc:	e004      	b.n	800a908 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	e01f      	b.n	800a966 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f103 021c 	add.w	r2, r3, #28
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	332b      	adds	r3, #43	@ 0x2b
 800a930:	4619      	mov	r1, r3
 800a932:	4610      	mov	r0, r2
 800a934:	f001 f888 	bl	800ba48 <ism330dhcx_xl_data_rate_get>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800a93e:	f04f 33ff 	mov.w	r3, #4294967295
 800a942:	e010      	b.n	800a966 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	331c      	adds	r3, #28
 800a948:	2100      	movs	r1, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 ff10 	bl	800b770 <ism330dhcx_xl_data_rate_set>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e004      	b.n	800a966 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	331c      	adds	r3, #28
 800a982:	f107 020b 	add.w	r2, r7, #11
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 feb9 	bl	800b700 <ism330dhcx_xl_full_scale_get>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800a994:	f04f 33ff 	mov.w	r3, #4294967295
 800a998:	e023      	b.n	800a9e2 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800a99a:	7afb      	ldrb	r3, [r7, #11]
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d81b      	bhi.n	800a9d8 <ISM330DHCX_ACC_GetSensitivity+0x68>
 800a9a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a8 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9b9 	.word	0x0800a9b9
 800a9ac:	0800a9d1 	.word	0x0800a9d1
 800a9b0:	0800a9c1 	.word	0x0800a9c1
 800a9b4:	0800a9c9 	.word	0x0800a9c9
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a9ec <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 800a9bc:	601a      	str	r2, [r3, #0]
      break;
 800a9be:	e00f      	b.n	800a9e0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	4a0b      	ldr	r2, [pc, #44]	@ (800a9f0 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800a9c4:	601a      	str	r2, [r3, #0]
      break;
 800a9c6:	e00b      	b.n	800a9e0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	4a0a      	ldr	r2, [pc, #40]	@ (800a9f4 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 800a9cc:	601a      	str	r2, [r3, #0]
      break;
 800a9ce:	e007      	b.n	800a9e0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	4a09      	ldr	r2, [pc, #36]	@ (800a9f8 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 800a9d4:	601a      	str	r2, [r3, #0]
      break;
 800a9d6:	e003      	b.n	800a9e0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800a9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9dc:	60fb      	str	r3, [r7, #12]
      break;
 800a9de:	bf00      	nop
  }

  return ret;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	3d79db23 	.word	0x3d79db23
 800a9f0:	3df9db23 	.word	0x3df9db23
 800a9f4:	3e79db23 	.word	0x3e79db23
 800a9f8:	3ef9db23 	.word	0x3ef9db23

0800a9fc <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	331c      	adds	r3, #28
 800aa0e:	f107 020b 	add.w	r2, r7, #11
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 f817 	bl	800ba48 <ism330dhcx_xl_data_rate_get>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800aa20:	f04f 33ff 	mov.w	r3, #4294967295
 800aa24:	e04e      	b.n	800aac4 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	2b0a      	cmp	r3, #10
 800aa2a:	d846      	bhi.n	800aaba <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 800aa2c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa34 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa61 	.word	0x0800aa61
 800aa38:	0800aa6b 	.word	0x0800aa6b
 800aa3c:	0800aa73 	.word	0x0800aa73
 800aa40:	0800aa7b 	.word	0x0800aa7b
 800aa44:	0800aa83 	.word	0x0800aa83
 800aa48:	0800aa8b 	.word	0x0800aa8b
 800aa4c:	0800aa93 	.word	0x0800aa93
 800aa50:	0800aa9b 	.word	0x0800aa9b
 800aa54:	0800aaa3 	.word	0x0800aaa3
 800aa58:	0800aaab 	.word	0x0800aaab
 800aa5c:	0800aab3 	.word	0x0800aab3
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	f04f 0200 	mov.w	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
      break;
 800aa68:	e02b      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	4a17      	ldr	r2, [pc, #92]	@ (800aacc <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 800aa6e:	601a      	str	r2, [r3, #0]
      break;
 800aa70:	e027      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	4a16      	ldr	r2, [pc, #88]	@ (800aad0 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 800aa76:	601a      	str	r2, [r3, #0]
      break;
 800aa78:	e023      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	4a15      	ldr	r2, [pc, #84]	@ (800aad4 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 800aa7e:	601a      	str	r2, [r3, #0]
      break;
 800aa80:	e01f      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	4a14      	ldr	r2, [pc, #80]	@ (800aad8 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 800aa86:	601a      	str	r2, [r3, #0]
      break;
 800aa88:	e01b      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	4a13      	ldr	r2, [pc, #76]	@ (800aadc <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 800aa8e:	601a      	str	r2, [r3, #0]
      break;
 800aa90:	e017      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	4a12      	ldr	r2, [pc, #72]	@ (800aae0 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 800aa96:	601a      	str	r2, [r3, #0]
      break;
 800aa98:	e013      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	4a11      	ldr	r2, [pc, #68]	@ (800aae4 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 800aa9e:	601a      	str	r2, [r3, #0]
      break;
 800aaa0:	e00f      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	4a10      	ldr	r2, [pc, #64]	@ (800aae8 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 800aaa6:	601a      	str	r2, [r3, #0]
      break;
 800aaa8:	e00b      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	4a0f      	ldr	r2, [pc, #60]	@ (800aaec <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 800aaae:	601a      	str	r2, [r3, #0]
      break;
 800aab0:	e007      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	4a0e      	ldr	r2, [pc, #56]	@ (800aaf0 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 800aab6:	601a      	str	r2, [r3, #0]
      break;
 800aab8:	e003      	b.n	800aac2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	60fb      	str	r3, [r7, #12]
      break;
 800aac0:	bf00      	nop
  }

  return ret;
 800aac2:	68fb      	ldr	r3, [r7, #12]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	41480000 	.word	0x41480000
 800aad0:	41d00000 	.word	0x41d00000
 800aad4:	42500000 	.word	0x42500000
 800aad8:	42d00000 	.word	0x42d00000
 800aadc:	43500000 	.word	0x43500000
 800aae0:	43d00000 	.word	0x43d00000
 800aae4:	44504000 	.word	0x44504000
 800aae8:	44d04000 	.word	0x44d04000
 800aaec:	45504000 	.word	0x45504000
 800aaf0:	45d05800 	.word	0x45d05800

0800aaf4 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d106      	bne.n	800ab18 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800ab0a:	ed97 0a00 	vldr	s0, [r7]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fb4e 	bl	800b1b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 800ab14:	4603      	mov	r3, r0
 800ab16:	e005      	b.n	800ab24 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800ab18:	ed97 0a00 	vldr	s0, [r7]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fbd3 	bl	800b2c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 800ab22:	4603      	mov	r3, r0
  }
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	331c      	adds	r3, #28
 800ab3e:	f107 020b 	add.w	r2, r7, #11
 800ab42:	4611      	mov	r1, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 fddb 	bl	800b700 <ism330dhcx_xl_full_scale_get>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800ab50:	f04f 33ff 	mov.w	r3, #4294967295
 800ab54:	e023      	b.n	800ab9e <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800ab56:	7afb      	ldrb	r3, [r7, #11]
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d81b      	bhi.n	800ab94 <ISM330DHCX_ACC_GetFullScale+0x68>
 800ab5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <ISM330DHCX_ACC_GetFullScale+0x38>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab8d 	.word	0x0800ab8d
 800ab6c:	0800ab7d 	.word	0x0800ab7d
 800ab70:	0800ab85 	.word	0x0800ab85
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2202      	movs	r2, #2
 800ab78:	601a      	str	r2, [r3, #0]
      break;
 800ab7a:	e00f      	b.n	800ab9c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2204      	movs	r2, #4
 800ab80:	601a      	str	r2, [r3, #0]
      break;
 800ab82:	e00b      	b.n	800ab9c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2208      	movs	r2, #8
 800ab88:	601a      	str	r2, [r3, #0]
      break;
 800ab8a:	e007      	b.n	800ab9c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2210      	movs	r2, #16
 800ab90:	601a      	str	r2, [r3, #0]
      break;
 800ab92:	e003      	b.n	800ab9c <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 800ab94:	f04f 33ff 	mov.w	r3, #4294967295
 800ab98:	60fb      	str	r3, [r7, #12]
      break;
 800ab9a:	bf00      	nop
  }

  return ret;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop

0800aba8 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	dd0b      	ble.n	800abd0 <ISM330DHCX_ACC_SetFullScale+0x28>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2b04      	cmp	r3, #4
 800abbc:	dd06      	ble.n	800abcc <ISM330DHCX_ACC_SetFullScale+0x24>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	dc01      	bgt.n	800abc8 <ISM330DHCX_ACC_SetFullScale+0x20>
 800abc4:	2303      	movs	r3, #3
 800abc6:	e004      	b.n	800abd2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800abc8:	2301      	movs	r3, #1
 800abca:	e002      	b.n	800abd2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800abcc:	2302      	movs	r3, #2
 800abce:	e000      	b.n	800abd2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800abd0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800abd2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	331c      	adds	r3, #28
 800abd8:	7bfa      	ldrb	r2, [r7, #15]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fd69 	bl	800b6b4 <ism330dhcx_xl_full_scale_set>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	e000      	b.n	800abf0 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	331c      	adds	r3, #28
 800ac06:	f107 0208 	add.w	r2, r7, #8
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f001 fa37 	bl	800c080 <ism330dhcx_acceleration_raw_get>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 800ac18:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1c:	e00c      	b.n	800ac38 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800ac1e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800ac26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800ac2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800ac4a:	f04f 0300 	mov.w	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	331c      	adds	r3, #28
 800ac54:	f107 0210 	add.w	r2, r7, #16
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f001 fa10 	bl	800c080 <ism330dhcx_acceleration_raw_get>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 800ac66:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6a:	e03c      	b.n	800ace6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800ac6c:	f107 030c 	add.w	r3, r7, #12
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fe7c 	bl	800a970 <ISM330DHCX_ACC_GetSensitivity>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800ac7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac82:	e030      	b.n	800ace6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800ac84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac90:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac9c:	ee17 2a90 	vmov	r2, s15
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800aca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800acb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acbc:	ee17 2a90 	vmov	r2, s15
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800acc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800acc8:	ee07 3a90 	vmov	s15, r3
 800accc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800acd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800acd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800acdc:	ee17 2a90 	vmov	r2, s15
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	e014      	b.n	800ad2e <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f103 021c 	add.w	r2, r3, #28
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f000 ff78 	bl	800bc08 <ism330dhcx_gy_data_rate_set>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800ad1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad22:	e004      	b.n	800ad2e <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e01f      	b.n	800ad8c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f103 021c 	add.w	r2, r3, #28
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	332c      	adds	r3, #44	@ 0x2c
 800ad56:	4619      	mov	r1, r3
 800ad58:	4610      	mov	r0, r2
 800ad5a:	f001 f8c1 	bl	800bee0 <ism330dhcx_gy_data_rate_get>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800ad64:	f04f 33ff 	mov.w	r3, #4294967295
 800ad68:	e010      	b.n	800ad8c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	331c      	adds	r3, #28
 800ad6e:	2100      	movs	r1, #0
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 ff49 	bl	800bc08 <ism330dhcx_gy_data_rate_set>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800ad7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad80:	e004      	b.n	800ad8c <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	331c      	adds	r3, #28
 800ada6:	f107 020b 	add.w	r2, r7, #11
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fed9 	bl	800bb64 <ism330dhcx_gy_full_scale_get>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 800adb8:	f04f 33ff 	mov.w	r3, #4294967295
 800adbc:	e039      	b.n	800ae32 <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800adbe:	7afb      	ldrb	r3, [r7, #11]
 800adc0:	2b0c      	cmp	r3, #12
 800adc2:	d831      	bhi.n	800ae28 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 800adc4:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800ae09 	.word	0x0800ae09
 800add0:	0800ae29 	.word	0x0800ae29
 800add4:	0800ae01 	.word	0x0800ae01
 800add8:	0800ae29 	.word	0x0800ae29
 800addc:	0800ae11 	.word	0x0800ae11
 800ade0:	0800ae29 	.word	0x0800ae29
 800ade4:	0800ae29 	.word	0x0800ae29
 800ade8:	0800ae29 	.word	0x0800ae29
 800adec:	0800ae19 	.word	0x0800ae19
 800adf0:	0800ae29 	.word	0x0800ae29
 800adf4:	0800ae29 	.word	0x0800ae29
 800adf8:	0800ae29 	.word	0x0800ae29
 800adfc:	0800ae21 	.word	0x0800ae21
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	4a0e      	ldr	r2, [pc, #56]	@ (800ae3c <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 800ae04:	601a      	str	r2, [r3, #0]
      break;
 800ae06:	e013      	b.n	800ae30 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	@ (800ae40 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 800ae0c:	601a      	str	r2, [r3, #0]
      break;
 800ae0e:	e00f      	b.n	800ae30 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	4a0c      	ldr	r2, [pc, #48]	@ (800ae44 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 800ae14:	601a      	str	r2, [r3, #0]
      break;
 800ae16:	e00b      	b.n	800ae30 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	4a0b      	ldr	r2, [pc, #44]	@ (800ae48 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 800ae1c:	601a      	str	r2, [r3, #0]
      break;
 800ae1e:	e007      	b.n	800ae30 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	4a0a      	ldr	r2, [pc, #40]	@ (800ae4c <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 800ae24:	601a      	str	r2, [r3, #0]
      break;
 800ae26:	e003      	b.n	800ae30 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	60fb      	str	r3, [r7, #12]
      break;
 800ae2e:	bf00      	nop
  }

  return ret;
 800ae30:	68fb      	ldr	r3, [r7, #12]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	408c0000 	.word	0x408c0000
 800ae40:	410c0000 	.word	0x410c0000
 800ae44:	418c0000 	.word	0x418c0000
 800ae48:	420c0000 	.word	0x420c0000
 800ae4c:	428c0000 	.word	0x428c0000

0800ae50 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	331c      	adds	r3, #28
 800ae62:	f107 020b 	add.w	r2, r7, #11
 800ae66:	4611      	mov	r1, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f001 f839 	bl	800bee0 <ism330dhcx_gy_data_rate_get>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800ae74:	f04f 33ff 	mov.w	r3, #4294967295
 800ae78:	e04e      	b.n	800af18 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	2b0a      	cmp	r3, #10
 800ae7e:	d846      	bhi.n	800af0e <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 800ae80:	a201      	add	r2, pc, #4	@ (adr r2, 800ae88 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800aeb5 	.word	0x0800aeb5
 800ae8c:	0800aebf 	.word	0x0800aebf
 800ae90:	0800aec7 	.word	0x0800aec7
 800ae94:	0800aecf 	.word	0x0800aecf
 800ae98:	0800aed7 	.word	0x0800aed7
 800ae9c:	0800aedf 	.word	0x0800aedf
 800aea0:	0800aee7 	.word	0x0800aee7
 800aea4:	0800aeef 	.word	0x0800aeef
 800aea8:	0800aef7 	.word	0x0800aef7
 800aeac:	0800aeff 	.word	0x0800aeff
 800aeb0:	0800af07 	.word	0x0800af07
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	f04f 0200 	mov.w	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
      break;
 800aebc:	e02b      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	4a17      	ldr	r2, [pc, #92]	@ (800af20 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800aec2:	601a      	str	r2, [r3, #0]
      break;
 800aec4:	e027      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	4a16      	ldr	r2, [pc, #88]	@ (800af24 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 800aeca:	601a      	str	r2, [r3, #0]
      break;
 800aecc:	e023      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	4a15      	ldr	r2, [pc, #84]	@ (800af28 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 800aed2:	601a      	str	r2, [r3, #0]
      break;
 800aed4:	e01f      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	4a14      	ldr	r2, [pc, #80]	@ (800af2c <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 800aeda:	601a      	str	r2, [r3, #0]
      break;
 800aedc:	e01b      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	4a13      	ldr	r2, [pc, #76]	@ (800af30 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800aee2:	601a      	str	r2, [r3, #0]
      break;
 800aee4:	e017      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	4a12      	ldr	r2, [pc, #72]	@ (800af34 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 800aeea:	601a      	str	r2, [r3, #0]
      break;
 800aeec:	e013      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	4a11      	ldr	r2, [pc, #68]	@ (800af38 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 800aef2:	601a      	str	r2, [r3, #0]
      break;
 800aef4:	e00f      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	4a10      	ldr	r2, [pc, #64]	@ (800af3c <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 800aefa:	601a      	str	r2, [r3, #0]
      break;
 800aefc:	e00b      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	4a0f      	ldr	r2, [pc, #60]	@ (800af40 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800af02:	601a      	str	r2, [r3, #0]
      break;
 800af04:	e007      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	4a0e      	ldr	r2, [pc, #56]	@ (800af44 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 800af0a:	601a      	str	r2, [r3, #0]
      break;
 800af0c:	e003      	b.n	800af16 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800af0e:	f04f 33ff 	mov.w	r3, #4294967295
 800af12:	60fb      	str	r3, [r7, #12]
      break;
 800af14:	bf00      	nop
  }

  return ret;
 800af16:	68fb      	ldr	r3, [r7, #12]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	41480000 	.word	0x41480000
 800af24:	41d00000 	.word	0x41d00000
 800af28:	42500000 	.word	0x42500000
 800af2c:	42d00000 	.word	0x42d00000
 800af30:	43500000 	.word	0x43500000
 800af34:	43d00000 	.word	0x43d00000
 800af38:	44504000 	.word	0x44504000
 800af3c:	44d04000 	.word	0x44d04000
 800af40:	45504000 	.word	0x45504000
 800af44:	45d05800 	.word	0x45d05800

0800af48 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d106      	bne.n	800af6c <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800af5e:	ed97 0a00 	vldr	s0, [r7]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fa32 	bl	800b3cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 800af68:	4603      	mov	r3, r0
 800af6a:	e005      	b.n	800af78 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800af6c:	ed97 0a00 	vldr	s0, [r7]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fab7 	bl	800b4e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800af76:	4603      	mov	r3, r0
  }
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	331c      	adds	r3, #28
 800af92:	f107 020b 	add.w	r2, r7, #11
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 fde3 	bl	800bb64 <ism330dhcx_gy_full_scale_get>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 800afa4:	f04f 33ff 	mov.w	r3, #4294967295
 800afa8:	e03c      	b.n	800b024 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 800afaa:	7afb      	ldrb	r3, [r7, #11]
 800afac:	2b0c      	cmp	r3, #12
 800afae:	d834      	bhi.n	800b01a <ISM330DHCX_GYRO_GetFullScale+0x9a>
 800afb0:	a201      	add	r2, pc, #4	@ (adr r2, 800afb8 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800afb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb6:	bf00      	nop
 800afb8:	0800aff5 	.word	0x0800aff5
 800afbc:	0800b01b 	.word	0x0800b01b
 800afc0:	0800afed 	.word	0x0800afed
 800afc4:	0800b01b 	.word	0x0800b01b
 800afc8:	0800affd 	.word	0x0800affd
 800afcc:	0800b01b 	.word	0x0800b01b
 800afd0:	0800b01b 	.word	0x0800b01b
 800afd4:	0800b01b 	.word	0x0800b01b
 800afd8:	0800b007 	.word	0x0800b007
 800afdc:	0800b01b 	.word	0x0800b01b
 800afe0:	0800b01b 	.word	0x0800b01b
 800afe4:	0800b01b 	.word	0x0800b01b
 800afe8:	0800b011 	.word	0x0800b011
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	227d      	movs	r2, #125	@ 0x7d
 800aff0:	601a      	str	r2, [r3, #0]
      break;
 800aff2:	e016      	b.n	800b022 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	22fa      	movs	r2, #250	@ 0xfa
 800aff8:	601a      	str	r2, [r3, #0]
      break;
 800affa:	e012      	b.n	800b022 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b002:	601a      	str	r2, [r3, #0]
      break;
 800b004:	e00d      	b.n	800b022 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b00c:	601a      	str	r2, [r3, #0]
      break;
 800b00e:	e008      	b.n	800b022 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800b016:	601a      	str	r2, [r3, #0]
      break;
 800b018:	e003      	b.n	800b022 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 800b01a:	f04f 33ff 	mov.w	r3, #4294967295
 800b01e:	60fb      	str	r3, [r7, #12]
      break;
 800b020:	bf00      	nop
  }

  return ret;
 800b022:	68fb      	ldr	r3, [r7, #12]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b7d      	cmp	r3, #125	@ 0x7d
 800b03a:	dd12      	ble.n	800b062 <ISM330DHCX_GYRO_SetFullScale+0x36>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2bfa      	cmp	r3, #250	@ 0xfa
 800b040:	dd0d      	ble.n	800b05e <ISM330DHCX_GYRO_SetFullScale+0x32>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b048:	dd07      	ble.n	800b05a <ISM330DHCX_GYRO_SetFullScale+0x2e>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b050:	dc01      	bgt.n	800b056 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 800b052:	2308      	movs	r3, #8
 800b054:	e006      	b.n	800b064 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800b056:	230c      	movs	r3, #12
 800b058:	e004      	b.n	800b064 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800b05a:	2304      	movs	r3, #4
 800b05c:	e002      	b.n	800b064 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800b05e:	2300      	movs	r3, #0
 800b060:	e000      	b.n	800b064 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800b062:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 800b064:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	331c      	adds	r3, #28
 800b06a:	7bfa      	ldrb	r2, [r7, #15]
 800b06c:	4611      	mov	r1, r2
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fd52 	bl	800bb18 <ism330dhcx_gy_full_scale_set>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 800b07a:	f04f 33ff 	mov.w	r3, #4294967295
 800b07e:	e000      	b.n	800b082 <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	331c      	adds	r3, #28
 800b098:	f107 0208 	add.w	r2, r7, #8
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 ffa6 	bl	800bff0 <ism330dhcx_angular_rate_raw_get>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	e00c      	b.n	800b0ca <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800b0b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800b0b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800b0c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	331c      	adds	r3, #28
 800b0e0:	f107 0210 	add.w	r2, r7, #16
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 ff82 	bl	800bff0 <ism330dhcx_angular_rate_raw_get>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800b0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f6:	e03c      	b.n	800b172 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800b0f8:	f107 030c 	add.w	r3, r7, #12
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff fe48 	bl	800ad94 <ISM330DHCX_GYRO_GetSensitivity>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295
 800b10e:	e030      	b.n	800b172 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800b110:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b114:	ee07 3a90 	vmov	s15, r3
 800b118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b11c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b120:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b128:	ee17 2a90 	vmov	r2, s15
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800b130:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b134:	ee07 3a90 	vmov	s15, r3
 800b138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b13c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b148:	ee17 2a90 	vmov	r2, s15
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800b150:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b154:	ee07 3a90 	vmov	s15, r3
 800b158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b15c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b160:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b168:	ee17 2a90 	vmov	r2, s15
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	460b      	mov	r3, r1
 800b184:	70fb      	strb	r3, [r7, #3]
 800b186:	4613      	mov	r3, r2
 800b188:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f103 001c 	add.w	r0, r3, #28
 800b190:	1cba      	adds	r2, r7, #2
 800b192:	78f9      	ldrb	r1, [r7, #3]
 800b194:	2301      	movs	r3, #1
 800b196:	f000 fa75 	bl	800b684 <ism330dhcx_write_reg>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a4:	e000      	b.n	800b1a8 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800b1bc:	edd7 7a00 	vldr	s15, [r7]
 800b1c0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800b1c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1cc:	d801      	bhi.n	800b1d2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e058      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b1d2:	edd7 7a00 	vldr	s15, [r7]
 800b1d6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800b1da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e2:	d801      	bhi.n	800b1e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	e04d      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b1e8:	edd7 7a00 	vldr	s15, [r7]
 800b1ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b2ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800b1f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f8:	d801      	bhi.n	800b1fe <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e042      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b1fe:	edd7 7a00 	vldr	s15, [r7]
 800b202:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800b2b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 800b206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b20e:	d801      	bhi.n	800b214 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800b210:	2304      	movs	r3, #4
 800b212:	e037      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b214:	edd7 7a00 	vldr	s15, [r7]
 800b218:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b2b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 800b21c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b224:	d801      	bhi.n	800b22a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800b226:	2305      	movs	r3, #5
 800b228:	e02c      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b22a:	edd7 7a00 	vldr	s15, [r7]
 800b22e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b2b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800b232:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	d801      	bhi.n	800b240 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 800b23c:	2306      	movs	r3, #6
 800b23e:	e021      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b240:	edd7 7a00 	vldr	s15, [r7]
 800b244:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b2bc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800b248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b250:	d801      	bhi.n	800b256 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800b252:	2307      	movs	r3, #7
 800b254:	e016      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b256:	edd7 7a00 	vldr	s15, [r7]
 800b25a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b2c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800b25e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b266:	d801      	bhi.n	800b26c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800b268:	2308      	movs	r3, #8
 800b26a:	e00b      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b26c:	edd7 7a00 	vldr	s15, [r7]
 800b270:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b2c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 800b274:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27c:	d801      	bhi.n	800b282 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800b27e:	2309      	movs	r3, #9
 800b280:	e000      	b.n	800b284 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800b282:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 800b284:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	331c      	adds	r3, #28
 800b28a:	7bfa      	ldrb	r2, [r7, #15]
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fa6e 	bl	800b770 <ism330dhcx_xl_data_rate_set>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800b29a:	f04f 33ff 	mov.w	r3, #4294967295
 800b29e:	e000      	b.n	800b2a2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	42500000 	.word	0x42500000
 800b2b0:	42d00000 	.word	0x42d00000
 800b2b4:	43500000 	.word	0x43500000
 800b2b8:	43d00000 	.word	0x43d00000
 800b2bc:	44504000 	.word	0x44504000
 800b2c0:	44d04000 	.word	0x44d04000
 800b2c4:	45504000 	.word	0x45504000

0800b2c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800b2d4:	edd7 7a00 	vldr	s15, [r7]
 800b2d8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800b2dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e4:	d801      	bhi.n	800b2ea <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e058      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b2ea:	edd7 7a00 	vldr	s15, [r7]
 800b2ee:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800b2f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fa:	d801      	bhi.n	800b300 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e04d      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b300:	edd7 7a00 	vldr	s15, [r7]
 800b304:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b3b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800b308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b310:	d801      	bhi.n	800b316 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800b312:	2303      	movs	r3, #3
 800b314:	e042      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b316:	edd7 7a00 	vldr	s15, [r7]
 800b31a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b3b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800b31e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b326:	d801      	bhi.n	800b32c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 800b328:	2304      	movs	r3, #4
 800b32a:	e037      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b32c:	edd7 7a00 	vldr	s15, [r7]
 800b330:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b3b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800b334:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33c:	d801      	bhi.n	800b342 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800b33e:	2305      	movs	r3, #5
 800b340:	e02c      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b342:	edd7 7a00 	vldr	s15, [r7]
 800b346:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b3bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800b34a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b352:	d801      	bhi.n	800b358 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 800b354:	2306      	movs	r3, #6
 800b356:	e021      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b358:	edd7 7a00 	vldr	s15, [r7]
 800b35c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b3c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800b360:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b368:	d801      	bhi.n	800b36e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800b36a:	2307      	movs	r3, #7
 800b36c:	e016      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b36e:	edd7 7a00 	vldr	s15, [r7]
 800b372:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b3c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800b376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37e:	d801      	bhi.n	800b384 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800b380:	2308      	movs	r3, #8
 800b382:	e00b      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b384:	edd7 7a00 	vldr	s15, [r7]
 800b388:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b3c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 800b38c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b394:	d801      	bhi.n	800b39a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800b396:	2309      	movs	r3, #9
 800b398:	e000      	b.n	800b39c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800b39a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	42500000 	.word	0x42500000
 800b3b4:	42d00000 	.word	0x42d00000
 800b3b8:	43500000 	.word	0x43500000
 800b3bc:	43d00000 	.word	0x43d00000
 800b3c0:	44504000 	.word	0x44504000
 800b3c4:	44d04000 	.word	0x44d04000
 800b3c8:	45504000 	.word	0x45504000

0800b3cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800b3d8:	edd7 7a00 	vldr	s15, [r7]
 800b3dc:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800b3e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e8:	d801      	bhi.n	800b3ee <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e058      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b3ee:	edd7 7a00 	vldr	s15, [r7]
 800b3f2:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800b3f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fe:	d801      	bhi.n	800b404 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800b400:	2302      	movs	r3, #2
 800b402:	e04d      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b404:	edd7 7a00 	vldr	s15, [r7]
 800b408:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b4c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800b40c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	d801      	bhi.n	800b41a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800b416:	2303      	movs	r3, #3
 800b418:	e042      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b41a:	edd7 7a00 	vldr	s15, [r7]
 800b41e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800b4cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800b422:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42a:	d801      	bhi.n	800b430 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800b42c:	2304      	movs	r3, #4
 800b42e:	e037      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b430:	edd7 7a00 	vldr	s15, [r7]
 800b434:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b4d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800b438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	d801      	bhi.n	800b446 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800b442:	2305      	movs	r3, #5
 800b444:	e02c      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b446:	edd7 7a00 	vldr	s15, [r7]
 800b44a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800b4d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800b44e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b456:	d801      	bhi.n	800b45c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800b458:	2306      	movs	r3, #6
 800b45a:	e021      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b45c:	edd7 7a00 	vldr	s15, [r7]
 800b460:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b4d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800b464:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46c:	d801      	bhi.n	800b472 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800b46e:	2307      	movs	r3, #7
 800b470:	e016      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b472:	edd7 7a00 	vldr	s15, [r7]
 800b476:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b4dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800b47a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b482:	d801      	bhi.n	800b488 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800b484:	2308      	movs	r3, #8
 800b486:	e00b      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b488:	edd7 7a00 	vldr	s15, [r7]
 800b48c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b4e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800b490:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b498:	d801      	bhi.n	800b49e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800b49a:	2309      	movs	r3, #9
 800b49c:	e000      	b.n	800b4a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800b49e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800b4a0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	331c      	adds	r3, #28
 800b4a6:	7bfa      	ldrb	r2, [r7, #15]
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fbac 	bl	800bc08 <ism330dhcx_gy_data_rate_set>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	e000      	b.n	800b4be <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	42500000 	.word	0x42500000
 800b4cc:	42d00000 	.word	0x42d00000
 800b4d0:	43500000 	.word	0x43500000
 800b4d4:	43d00000 	.word	0x43d00000
 800b4d8:	44504000 	.word	0x44504000
 800b4dc:	44d04000 	.word	0x44d04000
 800b4e0:	45504000 	.word	0x45504000

0800b4e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800b4f0:	edd7 7a00 	vldr	s15, [r7]
 800b4f4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800b4f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b500:	d801      	bhi.n	800b506 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800b502:	2301      	movs	r3, #1
 800b504:	e058      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b506:	edd7 7a00 	vldr	s15, [r7]
 800b50a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800b50e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b516:	d801      	bhi.n	800b51c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800b518:	2302      	movs	r3, #2
 800b51a:	e04d      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b51c:	edd7 7a00 	vldr	s15, [r7]
 800b520:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800b5cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800b524:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52c:	d801      	bhi.n	800b532 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800b52e:	2303      	movs	r3, #3
 800b530:	e042      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b532:	edd7 7a00 	vldr	s15, [r7]
 800b536:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800b5d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800b53a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b542:	d801      	bhi.n	800b548 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800b544:	2304      	movs	r3, #4
 800b546:	e037      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b548:	edd7 7a00 	vldr	s15, [r7]
 800b54c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b5d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800b550:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b558:	d801      	bhi.n	800b55e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800b55a:	2305      	movs	r3, #5
 800b55c:	e02c      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b55e:	edd7 7a00 	vldr	s15, [r7]
 800b562:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800b5d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800b566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b56e:	d801      	bhi.n	800b574 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800b570:	2306      	movs	r3, #6
 800b572:	e021      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b574:	edd7 7a00 	vldr	s15, [r7]
 800b578:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b5dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800b57c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	d801      	bhi.n	800b58a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800b586:	2307      	movs	r3, #7
 800b588:	e016      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b58a:	edd7 7a00 	vldr	s15, [r7]
 800b58e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800b5e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800b592:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	d801      	bhi.n	800b5a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800b59c:	2308      	movs	r3, #8
 800b59e:	e00b      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b5a0:	edd7 7a00 	vldr	s15, [r7]
 800b5a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b5e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800b5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	d801      	bhi.n	800b5b6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800b5b2:	2309      	movs	r3, #9
 800b5b4:	e000      	b.n	800b5b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800b5b6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	42500000 	.word	0x42500000
 800b5d0:	42d00000 	.word	0x42d00000
 800b5d4:	43500000 	.word	0x43500000
 800b5d8:	43d00000 	.word	0x43d00000
 800b5dc:	44504000 	.word	0x44504000
 800b5e0:	44d04000 	.word	0x44d04000
 800b5e4:	45504000 	.word	0x45504000

0800b5e8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800b5e8:	b590      	push	{r4, r7, lr}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	607a      	str	r2, [r7, #4]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	72fb      	strb	r3, [r7, #11]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	695c      	ldr	r4, [r3, #20]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	7b1b      	ldrb	r3, [r3, #12]
 800b608:	4618      	mov	r0, r3
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	b299      	uxth	r1, r3
 800b60e:	893b      	ldrh	r3, [r7, #8]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	47a0      	blx	r4
 800b614:	4603      	mov	r3, r0
}
 800b616:	4618      	mov	r0, r3
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd90      	pop	{r4, r7, pc}

0800b61e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800b61e:	b590      	push	{r4, r7, lr}
 800b620:	b087      	sub	sp, #28
 800b622:	af00      	add	r7, sp, #0
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	461a      	mov	r2, r3
 800b62a:	460b      	mov	r3, r1
 800b62c:	72fb      	strb	r3, [r7, #11]
 800b62e:	4613      	mov	r3, r2
 800b630:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	691c      	ldr	r4, [r3, #16]
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	7b1b      	ldrb	r3, [r3, #12]
 800b63e:	4618      	mov	r0, r3
 800b640:	7afb      	ldrb	r3, [r7, #11]
 800b642:	b299      	uxth	r1, r3
 800b644:	893b      	ldrh	r3, [r7, #8]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	47a0      	blx	r4
 800b64a:	4603      	mov	r3, r0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	371c      	adds	r7, #28
 800b650:	46bd      	mov	sp, r7
 800b652:	bd90      	pop	{r4, r7, pc}

0800b654 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 800b654:	b590      	push	{r4, r7, lr}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	607a      	str	r2, [r7, #4]
 800b65e:	461a      	mov	r2, r3
 800b660:	460b      	mov	r3, r1
 800b662:	72fb      	strb	r3, [r7, #11]
 800b664:	4613      	mov	r3, r2
 800b666:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	685c      	ldr	r4, [r3, #4]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6898      	ldr	r0, [r3, #8]
 800b670:	893b      	ldrh	r3, [r7, #8]
 800b672:	7af9      	ldrb	r1, [r7, #11]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	47a0      	blx	r4
 800b678:	6178      	str	r0, [r7, #20]

  return ret;
 800b67a:	697b      	ldr	r3, [r7, #20]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	371c      	adds	r7, #28
 800b680:	46bd      	mov	sp, r7
 800b682:	bd90      	pop	{r4, r7, pc}

0800b684 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 800b684:	b590      	push	{r4, r7, lr}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	607a      	str	r2, [r7, #4]
 800b68e:	461a      	mov	r2, r3
 800b690:	460b      	mov	r3, r1
 800b692:	72fb      	strb	r3, [r7, #11]
 800b694:	4613      	mov	r3, r2
 800b696:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681c      	ldr	r4, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6898      	ldr	r0, [r3, #8]
 800b6a0:	893b      	ldrh	r3, [r7, #8]
 800b6a2:	7af9      	ldrb	r1, [r7, #11]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	47a0      	blx	r4
 800b6a8:	6178      	str	r0, [r7, #20]

  return ret;
 800b6aa:	697b      	ldr	r3, [r7, #20]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	371c      	adds	r7, #28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd90      	pop	{r4, r7, pc}

0800b6b4 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800b6c0:	f107 0208 	add.w	r2, r7, #8
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	2110      	movs	r1, #16
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ffc3 	bl	800b654 <ism330dhcx_read_reg>
 800b6ce:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10f      	bne.n	800b6f6 <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800b6d6:	78fb      	ldrb	r3, [r7, #3]
 800b6d8:	f003 0303 	and.w	r3, r3, #3
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	7a3b      	ldrb	r3, [r7, #8]
 800b6e0:	f362 0383 	bfi	r3, r2, #2, #2
 800b6e4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800b6e6:	f107 0208 	add.w	r2, r7, #8
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	2110      	movs	r1, #16
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff ffc8 	bl	800b684 <ism330dhcx_write_reg>
 800b6f4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800b70a:	f107 0208 	add.w	r2, r7, #8
 800b70e:	2301      	movs	r3, #1
 800b710:	2110      	movs	r1, #16
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff ff9e 	bl	800b654 <ism330dhcx_read_reg>
 800b718:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 800b71a:	7a3b      	ldrb	r3, [r7, #8]
 800b71c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b03      	cmp	r3, #3
 800b724:	d81a      	bhi.n	800b75c <ism330dhcx_xl_full_scale_get+0x5c>
 800b726:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <ism330dhcx_xl_full_scale_get+0x2c>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b73d 	.word	0x0800b73d
 800b730:	0800b745 	.word	0x0800b745
 800b734:	0800b74d 	.word	0x0800b74d
 800b738:	0800b755 	.word	0x0800b755
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
      break;
 800b742:	e00f      	b.n	800b764 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2201      	movs	r2, #1
 800b748:	701a      	strb	r2, [r3, #0]
      break;
 800b74a:	e00b      	b.n	800b764 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]
      break;
 800b752:	e007      	b.n	800b764 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2203      	movs	r2, #3
 800b758:	701a      	strb	r2, [r3, #0]
      break;
 800b75a:	e003      	b.n	800b764 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2200      	movs	r2, #0
 800b760:	701a      	strb	r2, [r3, #0]
      break;
 800b762:	bf00      	nop
  }

  return ret;
 800b764:	68fb      	ldr	r3, [r7, #12]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop

0800b770 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	460b      	mov	r3, r1
 800b77a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800b780:	f107 030c 	add.w	r3, r7, #12
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fd91 	bl	800c2ae <ism330dhcx_fsm_enable_get>
 800b78c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f040 80c4 	bne.w	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800b796:	7b3b      	ldrb	r3, [r7, #12]
 800b798:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b79c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800b79e:	7b3b      	ldrb	r3, [r7, #12]
 800b7a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b7a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800b7aa:	7b3b      	ldrb	r3, [r7, #12]
 800b7ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b7b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800b7b6:	7b3b      	ldrb	r3, [r7, #12]
 800b7b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b7bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800b7c2:	7b3b      	ldrb	r3, [r7, #12]
 800b7c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b7c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800b7ce:	7b3b      	ldrb	r3, [r7, #12]
 800b7d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b7d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800b7da:	7b3b      	ldrb	r3, [r7, #12]
 800b7dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b7e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800b7e6:	7b3b      	ldrb	r3, [r7, #12]
 800b7e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b7ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800b7f2:	7b7b      	ldrb	r3, [r7, #13]
 800b7f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b7f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800b7fe:	7b7b      	ldrb	r3, [r7, #13]
 800b800:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800b806:	4313      	orrs	r3, r2
 800b808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800b80a:	7b7b      	ldrb	r3, [r7, #13]
 800b80c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800b812:	4313      	orrs	r3, r2
 800b814:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800b816:	7b7b      	ldrb	r3, [r7, #13]
 800b818:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b81c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800b81e:	4313      	orrs	r3, r2
 800b820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800b822:	7b7b      	ldrb	r3, [r7, #13]
 800b824:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800b82a:	4313      	orrs	r3, r2
 800b82c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800b82e:	7b7b      	ldrb	r3, [r7, #13]
 800b830:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b834:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800b836:	4313      	orrs	r3, r2
 800b838:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800b83a:	7b7b      	ldrb	r3, [r7, #13]
 800b83c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b840:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800b842:	4313      	orrs	r3, r2
 800b844:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800b846:	7b7b      	ldrb	r3, [r7, #13]
 800b848:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b84c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800b84e:	4313      	orrs	r3, r2
 800b850:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800b852:	2b01      	cmp	r3, #1
 800b854:	d163      	bne.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800b856:	f107 030b 	add.w	r3, r7, #11
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fd53 	bl	800c308 <ism330dhcx_fsm_data_rate_get>
 800b862:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d159      	bne.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d853      	bhi.n	800b918 <ism330dhcx_xl_data_rate_set+0x1a8>
 800b870:	a201      	add	r2, pc, #4	@ (adr r2, 800b878 <ism330dhcx_xl_data_rate_set+0x108>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b889 	.word	0x0800b889
 800b87c:	0800b89b 	.word	0x0800b89b
 800b880:	0800b8b9 	.word	0x0800b8b9
 800b884:	0800b8e3 	.word	0x0800b8e3
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b888:	78fb      	ldrb	r3, [r7, #3]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d102      	bne.n	800b894 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800b88e:	2301      	movs	r3, #1
 800b890:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b892:	e044      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800b894:	78fb      	ldrb	r3, [r7, #3]
 800b896:	75fb      	strb	r3, [r7, #23]
            break;
 800b898:	e041      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b89a:	78fb      	ldrb	r3, [r7, #3]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d102      	bne.n	800b8a6 <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b8a4:	e03b      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800b8a6:	78fb      	ldrb	r3, [r7, #3]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d102      	bne.n	800b8b2 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	75fb      	strb	r3, [r7, #23]
            break;
 800b8b0:	e035      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800b8b2:	78fb      	ldrb	r3, [r7, #3]
 800b8b4:	75fb      	strb	r3, [r7, #23]
            break;
 800b8b6:	e032      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b8b8:	78fb      	ldrb	r3, [r7, #3]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b8c2:	e02c      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d102      	bne.n	800b8d0 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	75fb      	strb	r3, [r7, #23]
            break;
 800b8ce:	e026      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d102      	bne.n	800b8dc <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	75fb      	strb	r3, [r7, #23]
            break;
 800b8da:	e020      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800b8dc:	78fb      	ldrb	r3, [r7, #3]
 800b8de:	75fb      	strb	r3, [r7, #23]
            break;
 800b8e0:	e01d      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b8e2:	78fb      	ldrb	r3, [r7, #3]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b8ec:	e017      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800b8ee:	78fb      	ldrb	r3, [r7, #3]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d102      	bne.n	800b8fa <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	75fb      	strb	r3, [r7, #23]
            break;
 800b8f8:	e011      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d102      	bne.n	800b906 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b900:	2304      	movs	r3, #4
 800b902:	75fb      	strb	r3, [r7, #23]
            break;
 800b904:	e00b      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d102      	bne.n	800b912 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b90c:	2304      	movs	r3, #4
 800b90e:	75fb      	strb	r3, [r7, #23]
            break;
 800b910:	e005      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800b912:	78fb      	ldrb	r3, [r7, #3]
 800b914:	75fb      	strb	r3, [r7, #23]
            break;
 800b916:	e002      	b.n	800b91e <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 800b918:	78fb      	ldrb	r3, [r7, #3]
 800b91a:	75fb      	strb	r3, [r7, #23]
            break;
 800b91c:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800b91e:	2300      	movs	r3, #0
 800b920:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d16c      	bne.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800b928:	f107 030a 	add.w	r3, r7, #10
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fd32 	bl	800c398 <ism330dhcx_mlc_get>
 800b934:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800b936:	7abb      	ldrb	r3, [r7, #10]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d162      	bne.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800b93c:	f107 0309 	add.w	r3, r7, #9
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fd52 	bl	800c3ec <ism330dhcx_mlc_data_rate_get>
 800b948:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d158      	bne.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 800b950:	7a7b      	ldrb	r3, [r7, #9]
 800b952:	2b03      	cmp	r3, #3
 800b954:	d852      	bhi.n	800b9fc <ism330dhcx_xl_data_rate_set+0x28c>
 800b956:	a201      	add	r2, pc, #4	@ (adr r2, 800b95c <ism330dhcx_xl_data_rate_set+0x1ec>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b96d 	.word	0x0800b96d
 800b960:	0800b97f 	.word	0x0800b97f
 800b964:	0800b99d 	.word	0x0800b99d
 800b968:	0800b9c7 	.word	0x0800b9c7
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d102      	bne.n	800b978 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800b972:	2301      	movs	r3, #1
 800b974:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b976:	e044      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	75fb      	strb	r3, [r7, #23]
            break;
 800b97c:	e041      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800b984:	2302      	movs	r3, #2
 800b986:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b988:	e03b      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d102      	bne.n	800b996 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800b990:	2302      	movs	r3, #2
 800b992:	75fb      	strb	r3, [r7, #23]
            break;
 800b994:	e035      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	75fb      	strb	r3, [r7, #23]
            break;
 800b99a:	e032      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d102      	bne.n	800b9a8 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b9a6:	e02c      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800b9a8:	78fb      	ldrb	r3, [r7, #3]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d102      	bne.n	800b9b4 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	75fb      	strb	r3, [r7, #23]
            break;
 800b9b2:	e026      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d102      	bne.n	800b9c0 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	75fb      	strb	r3, [r7, #23]
            break;
 800b9be:	e020      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	75fb      	strb	r3, [r7, #23]
            break;
 800b9c4:	e01d      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800b9c6:	78fb      	ldrb	r3, [r7, #3]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d102      	bne.n	800b9d2 <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b9cc:	2304      	movs	r3, #4
 800b9ce:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800b9d0:	e017      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d102      	bne.n	800b9de <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b9d8:	2304      	movs	r3, #4
 800b9da:	75fb      	strb	r3, [r7, #23]
            break;
 800b9dc:	e011      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d102      	bne.n	800b9ea <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b9e4:	2304      	movs	r3, #4
 800b9e6:	75fb      	strb	r3, [r7, #23]
            break;
 800b9e8:	e00b      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d102      	bne.n	800b9f6 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800b9f0:	2304      	movs	r3, #4
 800b9f2:	75fb      	strb	r3, [r7, #23]
            break;
 800b9f4:	e005      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	75fb      	strb	r3, [r7, #23]
            break;
 800b9fa:	e002      	b.n	800ba02 <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 800b9fc:	78fb      	ldrb	r3, [r7, #3]
 800b9fe:	75fb      	strb	r3, [r7, #23]
            break;
 800ba00:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d107      	bne.n	800ba18 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800ba08:	f107 0208 	add.w	r2, r7, #8
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	2110      	movs	r1, #16
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff fe1f 	bl	800b654 <ism330dhcx_read_reg>
 800ba16:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10f      	bne.n	800ba3e <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
 800ba20:	f003 030f 	and.w	r3, r3, #15
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	7a3b      	ldrb	r3, [r7, #8]
 800ba28:	f362 1307 	bfi	r3, r2, #4, #4
 800ba2c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800ba2e:	f107 0208 	add.w	r2, r7, #8
 800ba32:	2301      	movs	r3, #1
 800ba34:	2110      	movs	r1, #16
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff fe24 	bl	800b684 <ism330dhcx_write_reg>
 800ba3c:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800ba3e:	693b      	ldr	r3, [r7, #16]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800ba52:	f107 0208 	add.w	r2, r7, #8
 800ba56:	2301      	movs	r3, #1
 800ba58:	2110      	movs	r1, #16
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fdfa 	bl	800b654 <ism330dhcx_read_reg>
 800ba60:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 800ba62:	7a3b      	ldrb	r3, [r7, #8]
 800ba64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b0b      	cmp	r3, #11
 800ba6c:	d84a      	bhi.n	800bb04 <ism330dhcx_xl_data_rate_get+0xbc>
 800ba6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba74 <ism330dhcx_xl_data_rate_get+0x2c>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800baa5 	.word	0x0800baa5
 800ba78:	0800baad 	.word	0x0800baad
 800ba7c:	0800bab5 	.word	0x0800bab5
 800ba80:	0800babd 	.word	0x0800babd
 800ba84:	0800bac5 	.word	0x0800bac5
 800ba88:	0800bacd 	.word	0x0800bacd
 800ba8c:	0800bad5 	.word	0x0800bad5
 800ba90:	0800badd 	.word	0x0800badd
 800ba94:	0800bae5 	.word	0x0800bae5
 800ba98:	0800baed 	.word	0x0800baed
 800ba9c:	0800baf5 	.word	0x0800baf5
 800baa0:	0800bafd 	.word	0x0800bafd
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2200      	movs	r2, #0
 800baa8:	701a      	strb	r2, [r3, #0]
      break;
 800baaa:	e02f      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2201      	movs	r2, #1
 800bab0:	701a      	strb	r2, [r3, #0]
      break;
 800bab2:	e02b      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2202      	movs	r2, #2
 800bab8:	701a      	strb	r2, [r3, #0]
      break;
 800baba:	e027      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2203      	movs	r2, #3
 800bac0:	701a      	strb	r2, [r3, #0]
      break;
 800bac2:	e023      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2204      	movs	r2, #4
 800bac8:	701a      	strb	r2, [r3, #0]
      break;
 800baca:	e01f      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2205      	movs	r2, #5
 800bad0:	701a      	strb	r2, [r3, #0]
      break;
 800bad2:	e01b      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2206      	movs	r2, #6
 800bad8:	701a      	strb	r2, [r3, #0]
      break;
 800bada:	e017      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2207      	movs	r2, #7
 800bae0:	701a      	strb	r2, [r3, #0]
      break;
 800bae2:	e013      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2208      	movs	r2, #8
 800bae8:	701a      	strb	r2, [r3, #0]
      break;
 800baea:	e00f      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2209      	movs	r2, #9
 800baf0:	701a      	strb	r2, [r3, #0]
      break;
 800baf2:	e00b      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	220a      	movs	r2, #10
 800baf8:	701a      	strb	r2, [r3, #0]
      break;
 800bafa:	e007      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	220b      	movs	r2, #11
 800bb00:	701a      	strb	r2, [r3, #0]
      break;
 800bb02:	e003      	b.n	800bb0c <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2200      	movs	r2, #0
 800bb08:	701a      	strb	r2, [r3, #0]
      break;
 800bb0a:	bf00      	nop
  }

  return ret;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop

0800bb18 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800bb24:	f107 0208 	add.w	r2, r7, #8
 800bb28:	2301      	movs	r3, #1
 800bb2a:	2111      	movs	r1, #17
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff fd91 	bl	800b654 <ism330dhcx_read_reg>
 800bb32:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10f      	bne.n	800bb5a <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	f003 030f 	and.w	r3, r3, #15
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	7a3b      	ldrb	r3, [r7, #8]
 800bb44:	f362 0303 	bfi	r3, r2, #0, #4
 800bb48:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800bb4a:	f107 0208 	add.w	r2, r7, #8
 800bb4e:	2301      	movs	r3, #1
 800bb50:	2111      	movs	r1, #17
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff fd96 	bl	800b684 <ism330dhcx_write_reg>
 800bb58:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800bb6e:	f107 0208 	add.w	r2, r7, #8
 800bb72:	2301      	movs	r3, #1
 800bb74:	2111      	movs	r1, #17
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff fd6c 	bl	800b654 <ism330dhcx_read_reg>
 800bb7c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 800bb7e:	7a3b      	ldrb	r3, [r7, #8]
 800bb80:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b0c      	cmp	r3, #12
 800bb88:	d834      	bhi.n	800bbf4 <ism330dhcx_gy_full_scale_get+0x90>
 800bb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <ism330dhcx_gy_full_scale_get+0x2c>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbcd 	.word	0x0800bbcd
 800bb94:	0800bbed 	.word	0x0800bbed
 800bb98:	0800bbc5 	.word	0x0800bbc5
 800bb9c:	0800bbf5 	.word	0x0800bbf5
 800bba0:	0800bbd5 	.word	0x0800bbd5
 800bba4:	0800bbf5 	.word	0x0800bbf5
 800bba8:	0800bbf5 	.word	0x0800bbf5
 800bbac:	0800bbf5 	.word	0x0800bbf5
 800bbb0:	0800bbdd 	.word	0x0800bbdd
 800bbb4:	0800bbf5 	.word	0x0800bbf5
 800bbb8:	0800bbf5 	.word	0x0800bbf5
 800bbbc:	0800bbf5 	.word	0x0800bbf5
 800bbc0:	0800bbe5 	.word	0x0800bbe5
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	701a      	strb	r2, [r3, #0]
      break;
 800bbca:	e017      	b.n	800bbfc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]
      break;
 800bbd2:	e013      	b.n	800bbfc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2204      	movs	r2, #4
 800bbd8:	701a      	strb	r2, [r3, #0]
      break;
 800bbda:	e00f      	b.n	800bbfc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2208      	movs	r2, #8
 800bbe0:	701a      	strb	r2, [r3, #0]
      break;
 800bbe2:	e00b      	b.n	800bbfc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	220c      	movs	r2, #12
 800bbe8:	701a      	strb	r2, [r3, #0]
      break;
 800bbea:	e007      	b.n	800bbfc <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	701a      	strb	r2, [r3, #0]
      break;
 800bbf2:	e003      	b.n	800bbfc <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	701a      	strb	r2, [r3, #0]
      break;
 800bbfa:	bf00      	nop
  }

  return ret;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop

0800bc08 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800bc18:	f107 030c 	add.w	r3, r7, #12
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fb45 	bl	800c2ae <ism330dhcx_fsm_enable_get>
 800bc24:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 80c4 	bne.w	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800bc2e:	7b3b      	ldrb	r3, [r7, #12]
 800bc30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bc34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800bc36:	7b3b      	ldrb	r3, [r7, #12]
 800bc38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bc3c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800bc42:	7b3b      	ldrb	r3, [r7, #12]
 800bc44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bc48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800bc4e:	7b3b      	ldrb	r3, [r7, #12]
 800bc50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bc54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800bc5a:	7b3b      	ldrb	r3, [r7, #12]
 800bc5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800bc62:	4313      	orrs	r3, r2
 800bc64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800bc66:	7b3b      	ldrb	r3, [r7, #12]
 800bc68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bc6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800bc72:	7b3b      	ldrb	r3, [r7, #12]
 800bc74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bc78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800bc7e:	7b3b      	ldrb	r3, [r7, #12]
 800bc80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bc84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800bc86:	4313      	orrs	r3, r2
 800bc88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800bc8a:	7b7b      	ldrb	r3, [r7, #13]
 800bc8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bc90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800bc92:	4313      	orrs	r3, r2
 800bc94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800bc96:	7b7b      	ldrb	r3, [r7, #13]
 800bc98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bc9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800bca2:	7b7b      	ldrb	r3, [r7, #13]
 800bca4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bca8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800bcae:	7b7b      	ldrb	r3, [r7, #13]
 800bcb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bcb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800bcba:	7b7b      	ldrb	r3, [r7, #13]
 800bcbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bcc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800bcc6:	7b7b      	ldrb	r3, [r7, #13]
 800bcc8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bccc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800bcd2:	7b7b      	ldrb	r3, [r7, #13]
 800bcd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bcd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800bcde:	7b7b      	ldrb	r3, [r7, #13]
 800bce0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bce4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800bce6:	4313      	orrs	r3, r2
 800bce8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d163      	bne.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800bcee:	f107 030b 	add.w	r3, r7, #11
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fb07 	bl	800c308 <ism330dhcx_fsm_data_rate_get>
 800bcfa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d159      	bne.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800bd02:	7afb      	ldrb	r3, [r7, #11]
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	d853      	bhi.n	800bdb0 <ism330dhcx_gy_data_rate_set+0x1a8>
 800bd08:	a201      	add	r2, pc, #4	@ (adr r2, 800bd10 <ism330dhcx_gy_data_rate_set+0x108>)
 800bd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0e:	bf00      	nop
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd33 	.word	0x0800bd33
 800bd18:	0800bd51 	.word	0x0800bd51
 800bd1c:	0800bd7b 	.word	0x0800bd7b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d102      	bne.n	800bd2c <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800bd26:	2301      	movs	r3, #1
 800bd28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800bd2a:	e044      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	75fb      	strb	r3, [r7, #23]
            break;
 800bd30:	e041      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d102      	bne.n	800bd3e <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800bd38:	2302      	movs	r3, #2
 800bd3a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800bd3c:	e03b      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800bd3e:	78fb      	ldrb	r3, [r7, #3]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d102      	bne.n	800bd4a <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800bd44:	2302      	movs	r3, #2
 800bd46:	75fb      	strb	r3, [r7, #23]
            break;
 800bd48:	e035      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	75fb      	strb	r3, [r7, #23]
            break;
 800bd4e:	e032      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800bd56:	2303      	movs	r3, #3
 800bd58:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800bd5a:	e02c      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d102      	bne.n	800bd68 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800bd62:	2303      	movs	r3, #3
 800bd64:	75fb      	strb	r3, [r7, #23]
            break;
 800bd66:	e026      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d102      	bne.n	800bd74 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	75fb      	strb	r3, [r7, #23]
            break;
 800bd72:	e020      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	75fb      	strb	r3, [r7, #23]
            break;
 800bd78:	e01d      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800bd80:	2304      	movs	r3, #4
 800bd82:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800bd84:	e017      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d102      	bne.n	800bd92 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	75fb      	strb	r3, [r7, #23]
            break;
 800bd90:	e011      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800bd92:	78fb      	ldrb	r3, [r7, #3]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d102      	bne.n	800bd9e <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800bd98:	2304      	movs	r3, #4
 800bd9a:	75fb      	strb	r3, [r7, #23]
            break;
 800bd9c:	e00b      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800bd9e:	78fb      	ldrb	r3, [r7, #3]
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	d102      	bne.n	800bdaa <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800bda4:	2304      	movs	r3, #4
 800bda6:	75fb      	strb	r3, [r7, #23]
            break;
 800bda8:	e005      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800bdaa:	78fb      	ldrb	r3, [r7, #3]
 800bdac:	75fb      	strb	r3, [r7, #23]
            break;
 800bdae:	e002      	b.n	800bdb6 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	75fb      	strb	r3, [r7, #23]
            break;
 800bdb4:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d16c      	bne.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800bdc0:	f107 030a 	add.w	r3, r7, #10
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fae6 	bl	800c398 <ism330dhcx_mlc_get>
 800bdcc:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800bdce:	7abb      	ldrb	r3, [r7, #10]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d162      	bne.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800bdd4:	f107 0309 	add.w	r3, r7, #9
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fb06 	bl	800c3ec <ism330dhcx_mlc_data_rate_get>
 800bde0:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d158      	bne.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
      {
        switch (mlc_odr)
 800bde8:	7a7b      	ldrb	r3, [r7, #9]
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d852      	bhi.n	800be94 <ism330dhcx_gy_data_rate_set+0x28c>
 800bdee:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf4 <ism330dhcx_gy_data_rate_set+0x1ec>)
 800bdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf4:	0800be05 	.word	0x0800be05
 800bdf8:	0800be17 	.word	0x0800be17
 800bdfc:	0800be35 	.word	0x0800be35
 800be00:	0800be5f 	.word	0x0800be5f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <ism330dhcx_gy_data_rate_set+0x208>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800be0a:	2301      	movs	r3, #1
 800be0c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800be0e:	e044      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	75fb      	strb	r3, [r7, #23]
            break;
 800be14:	e041      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800be16:	78fb      	ldrb	r3, [r7, #3]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <ism330dhcx_gy_data_rate_set+0x21a>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800be1c:	2302      	movs	r3, #2
 800be1e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800be20:	e03b      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d102      	bne.n	800be2e <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800be28:	2302      	movs	r3, #2
 800be2a:	75fb      	strb	r3, [r7, #23]
            break;
 800be2c:	e035      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	75fb      	strb	r3, [r7, #23]
            break;
 800be32:	e032      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <ism330dhcx_gy_data_rate_set+0x238>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800be3a:	2303      	movs	r3, #3
 800be3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800be3e:	e02c      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d102      	bne.n	800be4c <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800be46:	2303      	movs	r3, #3
 800be48:	75fb      	strb	r3, [r7, #23]
            break;
 800be4a:	e026      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d102      	bne.n	800be58 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800be52:	2303      	movs	r3, #3
 800be54:	75fb      	strb	r3, [r7, #23]
            break;
 800be56:	e020      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	75fb      	strb	r3, [r7, #23]
            break;
 800be5c:	e01d      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 800be5e:	78fb      	ldrb	r3, [r7, #3]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <ism330dhcx_gy_data_rate_set+0x262>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800be64:	2304      	movs	r3, #4
 800be66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800be68:	e017      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800be6a:	78fb      	ldrb	r3, [r7, #3]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d102      	bne.n	800be76 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800be70:	2304      	movs	r3, #4
 800be72:	75fb      	strb	r3, [r7, #23]
            break;
 800be74:	e011      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 800be76:	78fb      	ldrb	r3, [r7, #3]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d102      	bne.n	800be82 <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800be7c:	2304      	movs	r3, #4
 800be7e:	75fb      	strb	r3, [r7, #23]
            break;
 800be80:	e00b      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 800be82:	78fb      	ldrb	r3, [r7, #3]
 800be84:	2b03      	cmp	r3, #3
 800be86:	d102      	bne.n	800be8e <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800be88:	2304      	movs	r3, #4
 800be8a:	75fb      	strb	r3, [r7, #23]
            break;
 800be8c:	e005      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800be8e:	78fb      	ldrb	r3, [r7, #3]
 800be90:	75fb      	strb	r3, [r7, #23]
            break;
 800be92:	e002      	b.n	800be9a <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 800be94:	78fb      	ldrb	r3, [r7, #3]
 800be96:	75fb      	strb	r3, [r7, #23]
            break;
 800be98:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d107      	bne.n	800beb0 <ism330dhcx_gy_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800bea0:	f107 0208 	add.w	r2, r7, #8
 800bea4:	2301      	movs	r3, #1
 800bea6:	2111      	movs	r1, #17
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff fbd3 	bl	800b654 <ism330dhcx_read_reg>
 800beae:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10f      	bne.n	800bed6 <ism330dhcx_gy_data_rate_set+0x2ce>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	f003 030f 	and.w	r3, r3, #15
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	7a3b      	ldrb	r3, [r7, #8]
 800bec0:	f362 1307 	bfi	r3, r2, #4, #4
 800bec4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 800bec6:	f107 0208 	add.w	r2, r7, #8
 800beca:	2301      	movs	r3, #1
 800becc:	2111      	movs	r1, #17
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff fbd8 	bl	800b684 <ism330dhcx_write_reg>
 800bed4:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800bed6:	693b      	ldr	r3, [r7, #16]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800beea:	f107 0208 	add.w	r2, r7, #8
 800beee:	2301      	movs	r3, #1
 800bef0:	2111      	movs	r1, #17
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7ff fbae 	bl	800b654 <ism330dhcx_read_reg>
 800bef8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 800befa:	7a3b      	ldrb	r3, [r7, #8]
 800befc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b0a      	cmp	r3, #10
 800bf04:	d844      	bhi.n	800bf90 <ism330dhcx_gy_data_rate_get+0xb0>
 800bf06:	a201      	add	r2, pc, #4	@ (adr r2, 800bf0c <ism330dhcx_gy_data_rate_get+0x2c>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf39 	.word	0x0800bf39
 800bf10:	0800bf41 	.word	0x0800bf41
 800bf14:	0800bf49 	.word	0x0800bf49
 800bf18:	0800bf51 	.word	0x0800bf51
 800bf1c:	0800bf59 	.word	0x0800bf59
 800bf20:	0800bf61 	.word	0x0800bf61
 800bf24:	0800bf69 	.word	0x0800bf69
 800bf28:	0800bf71 	.word	0x0800bf71
 800bf2c:	0800bf79 	.word	0x0800bf79
 800bf30:	0800bf81 	.word	0x0800bf81
 800bf34:	0800bf89 	.word	0x0800bf89
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]
      break;
 800bf3e:	e02b      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2201      	movs	r2, #1
 800bf44:	701a      	strb	r2, [r3, #0]
      break;
 800bf46:	e027      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	701a      	strb	r2, [r3, #0]
      break;
 800bf4e:	e023      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2203      	movs	r2, #3
 800bf54:	701a      	strb	r2, [r3, #0]
      break;
 800bf56:	e01f      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2204      	movs	r2, #4
 800bf5c:	701a      	strb	r2, [r3, #0]
      break;
 800bf5e:	e01b      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2205      	movs	r2, #5
 800bf64:	701a      	strb	r2, [r3, #0]
      break;
 800bf66:	e017      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2206      	movs	r2, #6
 800bf6c:	701a      	strb	r2, [r3, #0]
      break;
 800bf6e:	e013      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2207      	movs	r2, #7
 800bf74:	701a      	strb	r2, [r3, #0]
      break;
 800bf76:	e00f      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	701a      	strb	r2, [r3, #0]
      break;
 800bf7e:	e00b      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2209      	movs	r2, #9
 800bf84:	701a      	strb	r2, [r3, #0]
      break;
 800bf86:	e007      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	220a      	movs	r2, #10
 800bf8c:	701a      	strb	r2, [r3, #0]
      break;
 800bf8e:	e003      	b.n	800bf98 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2200      	movs	r2, #0
 800bf94:	701a      	strb	r2, [r3, #0]
      break;
 800bf96:	bf00      	nop
  }

  return ret;
 800bf98:	68fb      	ldr	r3, [r7, #12]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop

0800bfa4 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800bfb0:	f107 0208 	add.w	r2, r7, #8
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	2112      	movs	r1, #18
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff fb4b 	bl	800b654 <ism330dhcx_read_reg>
 800bfbe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10f      	bne.n	800bfe6 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800bfc6:	78fb      	ldrb	r3, [r7, #3]
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	7a3b      	ldrb	r3, [r7, #8]
 800bfd0:	f362 1386 	bfi	r3, r2, #6, #1
 800bfd4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800bfd6:	f107 0208 	add.w	r2, r7, #8
 800bfda:	2301      	movs	r3, #1
 800bfdc:	2112      	movs	r1, #18
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff fb50 	bl	800b684 <ism330dhcx_write_reg>
 800bfe4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 800bffa:	f107 020c 	add.w	r2, r7, #12
 800bffe:	2306      	movs	r3, #6
 800c000:	2122      	movs	r1, #34	@ 0x22
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fb26 	bl	800b654 <ism330dhcx_read_reg>
 800c008:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800c00a:	7b7b      	ldrb	r3, [r7, #13]
 800c00c:	b21a      	sxth	r2, r3
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	021b      	lsls	r3, r3, #8
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	7b3a      	ldrb	r2, [r7, #12]
 800c020:	4413      	add	r3, r2
 800c022:	b29b      	uxth	r3, r3
 800c024:	b21a      	sxth	r2, r3
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	3302      	adds	r3, #2
 800c030:	b212      	sxth	r2, r2
 800c032:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	3302      	adds	r3, #2
 800c038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	b29b      	uxth	r3, r3
 800c042:	7bba      	ldrb	r2, [r7, #14]
 800c044:	4413      	add	r3, r2
 800c046:	b29a      	uxth	r2, r3
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	3302      	adds	r3, #2
 800c04c:	b212      	sxth	r2, r2
 800c04e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800c050:	7c7a      	ldrb	r2, [r7, #17]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	3304      	adds	r3, #4
 800c056:	b212      	sxth	r2, r2
 800c058:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	3304      	adds	r3, #4
 800c05e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c062:	b29b      	uxth	r3, r3
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	b29b      	uxth	r3, r3
 800c068:	7c3a      	ldrb	r2, [r7, #16]
 800c06a:	4413      	add	r3, r2
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	3304      	adds	r3, #4
 800c072:	b212      	sxth	r2, r2
 800c074:	801a      	strh	r2, [r3, #0]

  return ret;
 800c076:	697b      	ldr	r3, [r7, #20]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800c08a:	f107 020c 	add.w	r2, r7, #12
 800c08e:	2306      	movs	r3, #6
 800c090:	2128      	movs	r1, #40	@ 0x28
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff fade 	bl	800b654 <ism330dhcx_read_reg>
 800c098:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800c09a:	7b7b      	ldrb	r3, [r7, #13]
 800c09c:	b21a      	sxth	r2, r3
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	7b3a      	ldrb	r2, [r7, #12]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	b21a      	sxth	r2, r3
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800c0ba:	7bfa      	ldrb	r2, [r7, #15]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	3302      	adds	r3, #2
 800c0c0:	b212      	sxth	r2, r2
 800c0c2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	3302      	adds	r3, #2
 800c0c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	7bba      	ldrb	r2, [r7, #14]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	3302      	adds	r3, #2
 800c0dc:	b212      	sxth	r2, r2
 800c0de:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800c0e0:	7c7a      	ldrb	r2, [r7, #17]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	b212      	sxth	r2, r2
 800c0e8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	021b      	lsls	r3, r3, #8
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	7c3a      	ldrb	r2, [r7, #16]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	3304      	adds	r3, #4
 800c102:	b212      	sxth	r2, r2
 800c104:	801a      	strh	r2, [r3, #0]

  return ret;
 800c106:	697b      	ldr	r3, [r7, #20]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 800c11c:	f107 0208 	add.w	r2, r7, #8
 800c120:	2301      	movs	r3, #1
 800c122:	2118      	movs	r1, #24
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7ff fa95 	bl	800b654 <ism330dhcx_read_reg>
 800c12a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10f      	bne.n	800c152 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	7a3b      	ldrb	r3, [r7, #8]
 800c13c:	f362 0341 	bfi	r3, r2, #1, #1
 800c140:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800c142:	f107 0208 	add.w	r2, r7, #8
 800c146:	2301      	movs	r3, #1
 800c148:	2118      	movs	r1, #24
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff fa9a 	bl	800b684 <ism330dhcx_write_reg>
 800c150:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800c152:	68fb      	ldr	r3, [r7, #12]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	460b      	mov	r3, r1
 800c166:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800c168:	f107 0208 	add.w	r2, r7, #8
 800c16c:	2301      	movs	r3, #1
 800c16e:	2101      	movs	r1, #1
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff fa6f 	bl	800b654 <ism330dhcx_read_reg>
 800c176:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10f      	bne.n	800c19e <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800c17e:	78fb      	ldrb	r3, [r7, #3]
 800c180:	f003 0303 	and.w	r3, r3, #3
 800c184:	b2da      	uxtb	r2, r3
 800c186:	7a3b      	ldrb	r3, [r7, #8]
 800c188:	f362 1387 	bfi	r3, r2, #6, #2
 800c18c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800c18e:	f107 0208 	add.w	r2, r7, #8
 800c192:	2301      	movs	r3, #1
 800c194:	2101      	movs	r1, #1
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fa74 	bl	800b684 <ism330dhcx_write_reg>
 800c19c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800c19e:	68fb      	ldr	r3, [r7, #12]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	210f      	movs	r1, #15
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7ff fa4b 	bl	800b654 <ism330dhcx_read_reg>
 800c1be:	60f8      	str	r0, [r7, #12]

  return ret;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800c1d6:	f107 0208 	add.w	r2, r7, #8
 800c1da:	2301      	movs	r3, #1
 800c1dc:	2112      	movs	r1, #18
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff fa38 	bl	800b654 <ism330dhcx_read_reg>
 800c1e4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10f      	bne.n	800c20c <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800c1ec:	78fb      	ldrb	r3, [r7, #3]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	7a3b      	ldrb	r3, [r7, #8]
 800c1f6:	f362 0300 	bfi	r3, r2, #0, #1
 800c1fa:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800c1fc:	f107 0208 	add.w	r2, r7, #8
 800c200:	2301      	movs	r3, #1
 800c202:	2112      	movs	r1, #18
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7ff fa3d 	bl	800b684 <ism330dhcx_write_reg>
 800c20a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800c20c:	68fb      	ldr	r3, [r7, #12]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800c222:	f107 0208 	add.w	r2, r7, #8
 800c226:	2301      	movs	r3, #1
 800c228:	2112      	movs	r1, #18
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff fa12 	bl	800b654 <ism330dhcx_read_reg>
 800c230:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10f      	bne.n	800c258 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 800c238:	78fb      	ldrb	r3, [r7, #3]
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	7a3b      	ldrb	r3, [r7, #8]
 800c242:	f362 0382 	bfi	r3, r2, #2, #1
 800c246:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800c248:	f107 0208 	add.w	r2, r7, #8
 800c24c:	2301      	movs	r3, #1
 800c24e:	2112      	movs	r1, #18
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff fa17 	bl	800b684 <ism330dhcx_write_reg>
 800c256:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800c258:	68fb      	ldr	r3, [r7, #12]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	460b      	mov	r3, r1
 800c26c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800c26e:	f107 0208 	add.w	r2, r7, #8
 800c272:	2301      	movs	r3, #1
 800c274:	210a      	movs	r1, #10
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7ff f9ec 	bl	800b654 <ism330dhcx_read_reg>
 800c27c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10f      	bne.n	800c2a4 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	7a3b      	ldrb	r3, [r7, #8]
 800c28e:	f362 0302 	bfi	r3, r2, #0, #3
 800c292:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800c294:	f107 0208 	add.w	r2, r7, #8
 800c298:	2301      	movs	r3, #1
 800c29a:	210a      	movs	r1, #10
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff f9f1 	bl	800b684 <ism330dhcx_write_reg>
 800c2a2:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800c2b8:	2102      	movs	r1, #2
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff ff4e 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c2c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800c2c8:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	2146      	movs	r1, #70	@ 0x46
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff f9c0 	bl	800b654 <ism330dhcx_read_reg>
 800c2d4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d107      	bne.n	800c2ec <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	2147      	movs	r1, #71	@ 0x47
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff f9b5 	bl	800b654 <ism330dhcx_read_reg>
 800c2ea:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d104      	bne.n	800c2fc <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff ff31 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c2fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800c312:	2102      	movs	r1, #2
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff ff21 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c31a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800c322:	f107 0208 	add.w	r2, r7, #8
 800c326:	2301      	movs	r3, #1
 800c328:	215f      	movs	r1, #95	@ 0x5f
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff f992 	bl	800b654 <ism330dhcx_read_reg>
 800c330:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d104      	bne.n	800c342 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800c338:	2100      	movs	r1, #0
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff ff0e 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c340:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800c342:	7a3b      	ldrb	r3, [r7, #8]
 800c344:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b03      	cmp	r3, #3
 800c34c:	d81a      	bhi.n	800c384 <ism330dhcx_fsm_data_rate_get+0x7c>
 800c34e:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <ism330dhcx_fsm_data_rate_get+0x4c>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c365 	.word	0x0800c365
 800c358:	0800c36d 	.word	0x0800c36d
 800c35c:	0800c375 	.word	0x0800c375
 800c360:	0800c37d 	.word	0x0800c37d
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
      break;
 800c36a:	e00f      	b.n	800c38c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2201      	movs	r2, #1
 800c370:	701a      	strb	r2, [r3, #0]
      break;
 800c372:	e00b      	b.n	800c38c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2202      	movs	r2, #2
 800c378:	701a      	strb	r2, [r3, #0]
      break;
 800c37a:	e007      	b.n	800c38c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2203      	movs	r2, #3
 800c380:	701a      	strb	r2, [r3, #0]
      break;
 800c382:	e003      	b.n	800c38c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	701a      	strb	r2, [r3, #0]
      break;
 800c38a:	bf00      	nop
  }

  return ret;
 800c38c:	68fb      	ldr	r3, [r7, #12]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop

0800c398 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800c3a2:	2102      	movs	r1, #2
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff fed9 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c3aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d107      	bne.n	800c3c2 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800c3b2:	f107 0208 	add.w	r2, r7, #8
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	2105      	movs	r1, #5
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff f94a 	bl	800b654 <ism330dhcx_read_reg>
 800c3c0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10b      	bne.n	800c3e0 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fec6 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c3d0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800c3d2:	7a3b      	ldrb	r3, [r7, #8]
 800c3d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	461a      	mov	r2, r3
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800c3f6:	2102      	movs	r1, #2
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff feaf 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c3fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d107      	bne.n	800c416 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800c406:	f107 0208 	add.w	r2, r7, #8
 800c40a:	2301      	movs	r3, #1
 800c40c:	2160      	movs	r1, #96	@ 0x60
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff f920 	bl	800b654 <ism330dhcx_read_reg>
 800c414:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d12a      	bne.n	800c472 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800c41c:	7a3b      	ldrb	r3, [r7, #8]
 800c41e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b03      	cmp	r3, #3
 800c426:	d81b      	bhi.n	800c460 <ism330dhcx_mlc_data_rate_get+0x74>
 800c428:	a201      	add	r2, pc, #4	@ (adr r2, 800c430 <ism330dhcx_mlc_data_rate_get+0x44>)
 800c42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42e:	bf00      	nop
 800c430:	0800c441 	.word	0x0800c441
 800c434:	0800c449 	.word	0x0800c449
 800c438:	0800c451 	.word	0x0800c451
 800c43c:	0800c459 	.word	0x0800c459
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2200      	movs	r2, #0
 800c444:	701a      	strb	r2, [r3, #0]
        break;
 800c446:	e00f      	b.n	800c468 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2201      	movs	r2, #1
 800c44c:	701a      	strb	r2, [r3, #0]
        break;
 800c44e:	e00b      	b.n	800c468 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2202      	movs	r2, #2
 800c454:	701a      	strb	r2, [r3, #0]
        break;
 800c456:	e007      	b.n	800c468 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2203      	movs	r2, #3
 800c45c:	701a      	strb	r2, [r3, #0]
        break;
 800c45e:	e003      	b.n	800c468 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2200      	movs	r2, #0
 800c464:	701a      	strb	r2, [r3, #0]
        break;
 800c466:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800c468:	2100      	movs	r1, #0
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7ff fe76 	bl	800c15c <ism330dhcx_mem_bank_set>
 800c470:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800c472:	68fb      	ldr	r3, [r7, #12]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <SSD1315_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO structure pointer.
  * @retval Component status.
  */
int32_t SSD1315_RegisterBusIO(SSD1315_Object_t *pObj, SSD1315_IO_t *pIO)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <SSD1315_RegisterBusIO+0x18>
  {
    ret = SSD1315_ERROR;
 800c48c:	f04f 33ff 	mov.w	r3, #4294967295
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	e01c      	b.n	800c4ce <SSD1315_RegisterBusIO+0x52>
  }
  else
  {
    pObj->IO.Init           = pIO->Init;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit         = pIO->DeInit;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	605a      	str	r2, [r3, #4]
    pObj->IO.WriteReg       = pIO->WriteReg;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	689a      	ldr	r2, [r3, #8]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	609a      	str	r2, [r3, #8]
    pObj->IO.ReadReg        = pIO->ReadReg;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68da      	ldr	r2, [r3, #12]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	60da      	str	r2, [r3, #12]
    pObj->IO.GetTick        = pIO->GetTick;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	611a      	str	r2, [r3, #16]

    pObj->Ctx.ReadReg       = SSD1315_ReadRegWrap;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a0c      	ldr	r2, [pc, #48]	@ (800c4f0 <SSD1315_RegisterBusIO+0x74>)
 800c4c0:	619a      	str	r2, [r3, #24]
    pObj->Ctx.WriteReg      = SSD1315_WriteRegWrap;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a0b      	ldr	r2, [pc, #44]	@ (800c4f4 <SSD1315_RegisterBusIO+0x78>)
 800c4c6:	615a      	str	r2, [r3, #20]
    pObj->Ctx.handle    = pObj;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	61da      	str	r2, [r3, #28]
  }

  if (pObj->IO.Init != NULL)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d004      	beq.n	800c4e0 <SSD1315_RegisterBusIO+0x64>
  {
      ret = pObj->IO.Init();
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4798      	blx	r3
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	e002      	b.n	800c4e6 <SSD1315_RegisterBusIO+0x6a>
  }
  else
  {
     ret = SSD1315_ERROR;
 800c4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	0800d381 	.word	0x0800d381
 800c4f4:	0800d3af 	.word	0x0800d3af

0800c4f8 <SSD1315_Init>:
  * @param  ColorCoding RGB mode.
  * @param  Orientation Display orientation.
  * @retval Component status.
  */
int32_t SSD1315_Init(SSD1315_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
  int32_t ret = SSD1315_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	617b      	str	r3, [r7, #20]
  uint8_t data;

  if((pObj == NULL) || (Orientation > SSD1315_ORIENTATION_LANDSCAPE))
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <SSD1315_Init+0x1c>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <SSD1315_Init+0x24>
  {
    ret = SSD1315_ERROR;
 800c514:	f04f 33ff 	mov.w	r3, #4294967295
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	e0ab      	b.n	800c674 <SSD1315_Init+0x17c>
  }
  else
  {
    if (pObj->IsInitialized == 0)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 80a3 	bne.w	800c66e <SSD1315_Init+0x176>
    {
      pObj->IsInitialized = 1;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 2020 	strb.w	r2, [r3, #32]
	  pObj->Orientation = Orientation;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)SSD1315_IO_Delay(pObj, 100);
 800c536:	2164      	movs	r1, #100	@ 0x64
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 ff6b 	bl	800d414 <SSD1315_IO_Delay>
      /* Driving ability setting */
      data = SSD1315_READWRITE_CMD;
 800c53e:	2380      	movs	r3, #128	@ 0x80
 800c540:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f103 0014 	add.w	r0, r3, #20
 800c548:	f107 0213 	add.w	r2, r7, #19
 800c54c:	2301      	movs	r3, #1
 800c54e:	2101      	movs	r1, #1
 800c550:	f000 ff7a 	bl	800d448 <ssd1315_write_reg>
 800c554:	4602      	mov	r2, r0
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	4413      	add	r3, r2
 800c55a:	617b      	str	r3, [r7, #20]
      data = SSD1315_CHARGE_PUMP_SETTING;
 800c55c:	238d      	movs	r3, #141	@ 0x8d
 800c55e:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f103 0014 	add.w	r0, r3, #20
 800c566:	f107 0213 	add.w	r2, r7, #19
 800c56a:	2301      	movs	r3, #1
 800c56c:	2101      	movs	r1, #1
 800c56e:	f000 ff6b 	bl	800d448 <ssd1315_write_reg>
 800c572:	4602      	mov	r2, r0
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	4413      	add	r3, r2
 800c578:	617b      	str	r3, [r7, #20]
      data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 800c57a:	2314      	movs	r3, #20
 800c57c:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f103 0014 	add.w	r0, r3, #20
 800c584:	f107 0213 	add.w	r2, r7, #19
 800c588:	2301      	movs	r3, #1
 800c58a:	2101      	movs	r1, #1
 800c58c:	f000 ff5c 	bl	800d448 <ssd1315_write_reg>
 800c590:	4602      	mov	r2, r0
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	4413      	add	r3, r2
 800c596:	617b      	str	r3, [r7, #20]
      data = SSD1315_MEMORY_ADRESS_MODE;
 800c598:	2320      	movs	r3, #32
 800c59a:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f103 0014 	add.w	r0, r3, #20
 800c5a2:	f107 0213 	add.w	r2, r7, #19
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	2101      	movs	r1, #1
 800c5aa:	f000 ff4d 	bl	800d448 <ssd1315_write_reg>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	617b      	str	r3, [r7, #20]
      data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f103 0014 	add.w	r0, r3, #20
 800c5c0:	f107 0213 	add.w	r2, r7, #19
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	f000 ff3e 	bl	800d448 <ssd1315_write_reg>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_START_LINE_1;
 800c5d4:	2340      	movs	r3, #64	@ 0x40
 800c5d6:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f103 0014 	add.w	r0, r3, #20
 800c5de:	f107 0213 	add.w	r2, r7, #19
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	f000 ff2f 	bl	800d448 <ssd1315_write_reg>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]
      data = SSD1315_REMAPPED_MODE;
 800c5f2:	23c8      	movs	r3, #200	@ 0xc8
 800c5f4:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f103 0014 	add.w	r0, r3, #20
 800c5fc:	f107 0213 	add.w	r2, r7, #19
 800c600:	2301      	movs	r3, #1
 800c602:	2101      	movs	r1, #1
 800c604:	f000 ff20 	bl	800d448 <ssd1315_write_reg>
 800c608:	4602      	mov	r2, r0
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	4413      	add	r3, r2
 800c60e:	617b      	str	r3, [r7, #20]
      data = SSD1315_CONTRAST_CONTROL;
 800c610:	23a1      	movs	r3, #161	@ 0xa1
 800c612:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f103 0014 	add.w	r0, r3, #20
 800c61a:	f107 0213 	add.w	r2, r7, #19
 800c61e:	2301      	movs	r3, #1
 800c620:	2101      	movs	r1, #1
 800c622:	f000 ff11 	bl	800d448 <ssd1315_write_reg>
 800c626:	4602      	mov	r2, r0
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	4413      	add	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_ON;
 800c62e:	23af      	movs	r3, #175	@ 0xaf
 800c630:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f103 0014 	add.w	r0, r3, #20
 800c638:	f107 0213 	add.w	r2, r7, #19
 800c63c:	2301      	movs	r3, #1
 800c63e:	2101      	movs	r1, #1
 800c640:	f000 ff02 	bl	800d448 <ssd1315_write_reg>
 800c644:	4602      	mov	r2, r0
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	4413      	add	r3, r2
 800c64a:	617b      	str	r3, [r7, #20]
      ssd1315_Clear(SSD1315_COLOR_BLACK); 
 800c64c:	2000      	movs	r0, #0
 800c64e:	f000 fec5 	bl	800d3dc <ssd1315_Clear>
      ret += ssd1315_write_reg(&pObj->Ctx, 1, PhysFrameBuffer,  SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f103 0014 	add.w	r0, r3, #20
 800c658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c65c:	4a0b      	ldr	r2, [pc, #44]	@ (800c68c <SSD1315_Init+0x194>)
 800c65e:	2101      	movs	r1, #1
 800c660:	f000 fef2 	bl	800d448 <ssd1315_write_reg>
 800c664:	4602      	mov	r2, r0
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	4413      	add	r3, r2
 800c66a:	617b      	str	r3, [r7, #20]
 800c66c:	e002      	b.n	800c674 <SSD1315_Init+0x17c>
    }
    else
    {
      ret = SSD1315_ERROR;
 800c66e:	f04f 33ff 	mov.w	r3, #4294967295
 800c672:	617b      	str	r3, [r7, #20]
    }
  }
  if(ret != SSD1315_OK)
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <SSD1315_Init+0x188>
  {
    ret = SSD1315_ERROR;
 800c67a:	f04f 33ff 	mov.w	r3, #4294967295
 800c67e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800c680:	697b      	ldr	r3, [r7, #20]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3718      	adds	r7, #24
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	20000c30 	.word	0x20000c30

0800c690 <SSD1315_DeInit>:
  * @brief  De-Initialize the ssd1315 LCD Component.
  * @param  pObj Component object.
  * @retval Component status.
  */
int32_t SSD1315_DeInit(SSD1315_Object_t *pObj)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized != 0U)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <SSD1315_DeInit+0x2c>
  {
    ret += SSD1315_DisplayOff(pObj);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f85e 	bl	800c768 <SSD1315_DisplayOff>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 0;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 2020 	strb.w	r2, [r3, #32]
  }

  if(ret != SSD1315_OK)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <SSD1315_DeInit+0x38>
  {
    ret = SSD1315_ERROR;
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <SSD1315_ReadID>:
  * @param  pObj Component object.
  * @param  Id Component ID.
  * @retval The component status.
  */
int32_t SSD1315_ReadID(SSD1315_Object_t *pObj, uint32_t *Id)
{
 800c6d2:	b480      	push	{r7}
 800c6d4:	b083      	sub	sp, #12
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Id;
  return SSD1315_ERROR;
 800c6dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <SSD1315_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOn(SSD1315_Object_t *pObj)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  data = SSD1315_CHARGE_PUMP_SETTING;
 800c6f8:	238d      	movs	r3, #141	@ 0x8d
 800c6fa:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f103 0014 	add.w	r0, r3, #20
 800c702:	f107 020b 	add.w	r2, r7, #11
 800c706:	2301      	movs	r3, #1
 800c708:	2101      	movs	r1, #1
 800c70a:	f000 fe9d 	bl	800d448 <ssd1315_write_reg>
 800c70e:	4602      	mov	r2, r0
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	4413      	add	r3, r2
 800c714:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 800c716:	2314      	movs	r3, #20
 800c718:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f103 0014 	add.w	r0, r3, #20
 800c720:	f107 020b 	add.w	r2, r7, #11
 800c724:	2301      	movs	r3, #1
 800c726:	2101      	movs	r1, #1
 800c728:	f000 fe8e 	bl	800d448 <ssd1315_write_reg>
 800c72c:	4602      	mov	r2, r0
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	4413      	add	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_ON;
 800c734:	23af      	movs	r3, #175	@ 0xaf
 800c736:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f103 0014 	add.w	r0, r3, #20
 800c73e:	f107 020b 	add.w	r2, r7, #11
 800c742:	2301      	movs	r3, #1
 800c744:	2101      	movs	r1, #1
 800c746:	f000 fe7f 	bl	800d448 <ssd1315_write_reg>
 800c74a:	4602      	mov	r2, r0
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4413      	add	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <SSD1315_DisplayOn+0x72>
  {
    ret = SSD1315_ERROR;
 800c758:	f04f 33ff 	mov.w	r3, #4294967295
 800c75c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800c75e:	68fb      	ldr	r3, [r7, #12]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <SSD1315_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOff(SSD1315_Object_t *pObj)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  data = SSD1315_CHARGE_PUMP_SETTING;
 800c774:	238d      	movs	r3, #141	@ 0x8d
 800c776:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f103 0014 	add.w	r0, r3, #20
 800c77e:	f107 020b 	add.w	r2, r7, #11
 800c782:	2301      	movs	r3, #1
 800c784:	2101      	movs	r1, #1
 800c786:	f000 fe5f 	bl	800d448 <ssd1315_write_reg>
 800c78a:	4602      	mov	r2, r0
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_1;
 800c792:	2310      	movs	r3, #16
 800c794:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f103 0014 	add.w	r0, r3, #20
 800c79c:	f107 020b 	add.w	r2, r7, #11
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	f000 fe50 	bl	800d448 <ssd1315_write_reg>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_OFF;
 800c7b0:	23ae      	movs	r3, #174	@ 0xae
 800c7b2:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f103 0014 	add.w	r0, r3, #20
 800c7ba:	f107 020b 	add.w	r2, r7, #11
 800c7be:	2301      	movs	r3, #1
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	f000 fe41 	bl	800d448 <ssd1315_write_reg>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <SSD1315_DisplayOff+0x72>
  {
    ret = SSD1315_ERROR;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800c7da:	68fb      	ldr	r3, [r7, #12]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <SSD1315_SetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be set.
  * @retval Component status.
  */
int32_t SSD1315_SetBrightness(SSD1315_Object_t *pObj, uint32_t Brightness)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 800c7ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <SSD1315_GetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be returned.
  * @retval Component status.
  */
int32_t SSD1315_GetBrightness(SSD1315_Object_t *pObj, uint32_t *Brightness)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 800c808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <SSD1315_SetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_SetOrientation(SSD1315_Object_t *pObj, uint32_t Orientation)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 800c822:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c826:	4618      	mov	r0, r3
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <SSD1315_GetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_GetOrientation(SSD1315_Object_t *pObj, uint32_t *Orientation)
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 800c83c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <SSD1315_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status.
  */
int32_t SSD1315_SetCursor(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
 /* Feature not supported */
 (void)pObj;
 (void)Xpos;
 (void)Ypos;
 return SSD1315_ERROR;
 800c858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <SSD1315_Refresh>:
  * @param  pObj Component object.
  * @retval The component status.
  */

int32_t SSD1315_Refresh(SSD1315_Object_t *pObj)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK; 
 800c870:	2300      	movs	r3, #0
 800c872:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  data = SSD1315_DISPLAY_START_LINE_1;
 800c874:	2340      	movs	r3, #64	@ 0x40
 800c876:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f103 0014 	add.w	r0, r3, #20
 800c87e:	f107 020b 	add.w	r2, r7, #11
 800c882:	2301      	movs	r3, #1
 800c884:	2101      	movs	r1, #1
 800c886:	f000 fddf 	bl	800d448 <ssd1315_write_reg>
 800c88a:	4602      	mov	r2, r0
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_COLUMN_ADRESS;
 800c892:	2321      	movs	r3, #33	@ 0x21
 800c894:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f103 0014 	add.w	r0, r3, #20
 800c89c:	f107 020b 	add.w	r2, r7, #11
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	f000 fdd0 	bl	800d448 <ssd1315_write_reg>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f103 0014 	add.w	r0, r3, #20
 800c8ba:	f107 020b 	add.w	r2, r7, #11
 800c8be:	2301      	movs	r3, #1
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	f000 fdc1 	bl	800d448 <ssd1315_write_reg>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_64;
 800c8ce:	237f      	movs	r3, #127	@ 0x7f
 800c8d0:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f103 0014 	add.w	r0, r3, #20
 800c8d8:	f107 020b 	add.w	r2, r7, #11
 800c8dc:	2301      	movs	r3, #1
 800c8de:	2101      	movs	r1, #1
 800c8e0:	f000 fdb2 	bl	800d448 <ssd1315_write_reg>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_PAGE_ADRESS;
 800c8ec:	2322      	movs	r3, #34	@ 0x22
 800c8ee:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f103 0014 	add.w	r0, r3, #20
 800c8f6:	f107 020b 	add.w	r2, r7, #11
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	f000 fda3 	bl	800d448 <ssd1315_write_reg>
 800c902:	4602      	mov	r2, r0
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4413      	add	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800c90a:	2300      	movs	r3, #0
 800c90c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f103 0014 	add.w	r0, r3, #20
 800c914:	f107 020b 	add.w	r2, r7, #11
 800c918:	2301      	movs	r3, #1
 800c91a:	2101      	movs	r1, #1
 800c91c:	f000 fd94 	bl	800d448 <ssd1315_write_reg>
 800c920:	4602      	mov	r2, r0
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	4413      	add	r3, r2
 800c926:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS_15;
 800c928:	230f      	movs	r3, #15
 800c92a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f103 0014 	add.w	r0, r3, #20
 800c932:	f107 020b 	add.w	r2, r7, #11
 800c936:	2301      	movs	r3, #1
 800c938:	2101      	movs	r1, #1
 800c93a:	f000 fd85 	bl	800d448 <ssd1315_write_reg>
 800c93e:	4602      	mov	r2, r0
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4413      	add	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f103 0014 	add.w	r0, r3, #20
 800c94c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c950:	4a09      	ldr	r2, [pc, #36]	@ (800c978 <SSD1315_Refresh+0x110>)
 800c952:	2101      	movs	r1, #1
 800c954:	f000 fd78 	bl	800d448 <ssd1315_write_reg>
 800c958:	4602      	mov	r2, r0
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4413      	add	r3, r2
 800c95e:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <SSD1315_Refresh+0x104>
  {
    ret = SSD1315_ERROR;
 800c966:	f04f 33ff 	mov.w	r3, #4294967295
 800c96a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800c96c:	68fb      	ldr	r3, [r7, #12]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20000c30 	.word	0x20000c30

0800c97c <SSD1315_DrawBitmap>:
  * @param  pBmp Bmp picture address.
  * @retval The component status.
  */

int32_t SSD1315_DrawBitmap(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08e      	sub	sp, #56	@ 0x38
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
 800c988:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index = 0, size = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c992:	2300      	movs	r3, #0
 800c994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0;
 800c996:	2300      	movs	r3, #0
 800c998:	623b      	str	r3, [r7, #32]
 800c99a:	2300      	movs	r3, #0
 800c99c:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0, y  = 0, y0 = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	61bb      	str	r3, [r7, #24]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	613b      	str	r3, [r7, #16]
  uint32_t XposBMP = 0, YposBMP  = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap size */
  size = pBmp[2] + (pBmp[3] << 8) + (pBmp[4] << 16)  + (pBmp[5] << 24);
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	3302      	adds	r3, #2
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	3303      	adds	r3, #3
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	021b      	lsls	r3, r3, #8
 800c9c2:	441a      	add	r2, r3
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	041b      	lsls	r3, r3, #16
 800c9cc:	441a      	add	r2, r3
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	3305      	adds	r3, #5
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	4413      	add	r3, r2
 800c9d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	330a      	adds	r3, #10
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	330b      	adds	r3, #11
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	021b      	lsls	r3, r3, #8
 800c9ea:	441a      	add	r2, r3
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	330c      	adds	r3, #12
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	041b      	lsls	r3, r3, #16
 800c9f4:	441a      	add	r2, r3
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	330d      	adds	r3, #13
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	061b      	lsls	r3, r3, #24
 800c9fe:	4413      	add	r3, r2
 800ca00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	3312      	adds	r3, #18
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	3313      	adds	r3, #19
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	021b      	lsls	r3, r3, #8
 800ca12:	441a      	add	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	3314      	adds	r3, #20
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	041b      	lsls	r3, r3, #16
 800ca1c:	441a      	add	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	3315      	adds	r3, #21
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	061b      	lsls	r3, r3, #24
 800ca26:	4413      	add	r3, r2
 800ca28:	61fb      	str	r3, [r7, #28]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	3316      	adds	r3, #22
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	3317      	adds	r3, #23
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	021b      	lsls	r3, r3, #8
 800ca3a:	441a      	add	r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	3318      	adds	r3, #24
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	041b      	lsls	r3, r3, #16
 800ca44:	441a      	add	r2, r3
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	3319      	adds	r3, #25
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	061b      	lsls	r3, r3, #24
 800ca4e:	4413      	add	r3, r2
 800ca50:	623b      	str	r3, [r7, #32]

  /* Size conversion */
  size = (size - index)/2;
 800ca52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	085b      	lsrs	r3, r3, #1
 800ca5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Apply offset to bypass header */
  pBmp += index;
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca60:	4413      	add	r3, r2
 800ca62:	603b      	str	r3, [r7, #0]

  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d116      	bne.n	800ca98 <SSD1315_DrawBitmap+0x11c>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	bf0c      	ite	eq
 800ca70:	2301      	moveq	r3, #1
 800ca72:	2300      	movne	r3, #0
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca7c:	bf0c      	ite	eq
 800ca7e:	2301      	moveq	r3, #1
 800ca80:	2300      	movne	r3, #0
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	4013      	ands	r3, r2
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d005      	beq.n	800ca98 <SSD1315_DrawBitmap+0x11c>
  {
    memcpy(PhysFrameBuffer, pBmp, size);
 800ca8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	4843      	ldr	r0, [pc, #268]	@ (800cba0 <SSD1315_DrawBitmap+0x224>)
 800ca92:	f010 f830 	bl	801caf6 <memcpy>
 800ca96:	e078      	b.n	800cb8a <SSD1315_DrawBitmap+0x20e>
  }
  else
  {
    x=Xpos+width;
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	61bb      	str	r3, [r7, #24]
    y=Ypos+height;
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	6a3b      	ldr	r3, [r7, #32]
 800caa4:	4413      	add	r3, r2
 800caa6:	617b      	str	r3, [r7, #20]
    y0 = Ypos;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	613b      	str	r3, [r7, #16]

    for(; Xpos < x; Xpos++, XposBMP++)
 800caac:	e069      	b.n	800cb82 <SSD1315_DrawBitmap+0x206>
    {
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	607b      	str	r3, [r7, #4]
 800cab2:	2300      	movs	r3, #0
 800cab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cab6:	e05a      	b.n	800cb6e <SSD1315_DrawBitmap+0x1f2>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f003 0307 	and.w	r3, r3, #7
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d121      	bne.n	800cb06 <SSD1315_DrawBitmap+0x18a>
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	2b07      	cmp	r3, #7
 800caca:	d91c      	bls.n	800cb06 <SSD1315_DrawBitmap+0x18a>
 800cacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cace:	f003 0307 	and.w	r3, r3, #7
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d117      	bne.n	800cb06 <SSD1315_DrawBitmap+0x18a>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pBmp[XposBMP+((YposBMP/8)*width)];
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	08db      	lsrs	r3, r3, #3
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	fb03 f202 	mul.w	r2, r3, r2
 800cae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae2:	4413      	add	r3, r2
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	441a      	add	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	08db      	lsrs	r3, r3, #3
 800caec:	01d9      	lsls	r1, r3, #7
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	440b      	add	r3, r1
 800caf2:	7811      	ldrb	r1, [r2, #0]
 800caf4:	4a2a      	ldr	r2, [pc, #168]	@ (800cba0 <SSD1315_DrawBitmap+0x224>)
 800caf6:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3307      	adds	r3, #7
 800cafc:	607b      	str	r3, [r7, #4]
          YposBMP+=7;
 800cafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb00:	3307      	adds	r3, #7
 800cb02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb04:	e02d      	b.n	800cb62 <SSD1315_DrawBitmap+0x1e6>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pBmp[XposBMP+((YposBMP/8)*width)]&(1<<(YposBMP%8))) != 0)
 800cb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb08:	08db      	lsrs	r3, r3, #3
 800cb0a:	69fa      	ldr	r2, [r7, #28]
 800cb0c:	fb03 f202 	mul.w	r2, r3, r2
 800cb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb12:	4413      	add	r3, r2
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	4413      	add	r3, r2
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	fa42 f303 	asr.w	r3, r2, r3
 800cb26:	f003 0301 	and.w	r3, r3, #1
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00c      	beq.n	800cb48 <SSD1315_DrawBitmap+0x1cc>
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 800cb2e:	23ff      	movs	r3, #255	@ 0xff
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	68b9      	ldr	r1, [r7, #8]
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 fa3d 	bl	800cfb4 <SSD1315_SetPixel>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d010      	beq.n	800cb62 <SSD1315_DrawBitmap+0x1e6>
              {
                ret = SSD1315_ERROR;
 800cb40:	f04f 33ff 	mov.w	r3, #4294967295
 800cb44:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 800cb46:	e016      	b.n	800cb76 <SSD1315_DrawBitmap+0x1fa>
              }
            }
            else
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	68b9      	ldr	r1, [r7, #8]
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f000 fa30 	bl	800cfb4 <SSD1315_SetPixel>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <SSD1315_DrawBitmap+0x1e6>
                {
                  ret = SSD1315_ERROR;
 800cb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5e:	637b      	str	r3, [r7, #52]	@ 0x34
                  break;
 800cb60:	e009      	b.n	800cb76 <SSD1315_DrawBitmap+0x1fa>
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3301      	adds	r3, #1
 800cb66:	607b      	str	r3, [r7, #4]
 800cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d3a0      	bcc.n	800cab8 <SSD1315_DrawBitmap+0x13c>
    for(; Xpos < x; Xpos++, XposBMP++)
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	60bb      	str	r3, [r7, #8]
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7e:	3301      	adds	r3, #1
 800cb80:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d391      	bcc.n	800caae <SSD1315_DrawBitmap+0x132>
            }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800cb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <SSD1315_DrawBitmap+0x21a>
   {
     ret = SSD1315_ERROR;
 800cb90:	f04f 33ff 	mov.w	r3, #4294967295
 800cb94:	637b      	str	r3, [r7, #52]	@ 0x34
   }
  return ret;
 800cb96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3738      	adds	r7, #56	@ 0x38
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20000c30 	.word	0x20000c30

0800cba4 <SSD1315_ShiftBitmap>:
  * @param  Yshift specifies number of pixel to shift on Y position.
  * @param  pbmp Bmp picture address in the internal Flash.
  * @retval The component status.
  */
int32_t SSD1315_ShiftBitmap(SSD1315_Object_t *pObj,uint16_t Xpos, uint16_t Ypos, int16_t Xshift, int16_t Yshift, uint8_t *pbmp)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b090      	sub	sp, #64	@ 0x40
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	4608      	mov	r0, r1
 800cbae:	4611      	mov	r1, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	817b      	strh	r3, [r7, #10]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	813b      	strh	r3, [r7, #8]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	80fb      	strh	r3, [r7, #6]
  int32_t  ret = SSD1315_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t index = 0, size = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0, original_width  = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbce:	2300      	movs	r3, #0
 800cbd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	623b      	str	r3, [r7, #32]
  uint32_t x = 0, y  = 0, y0 = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	61fb      	str	r3, [r7, #28]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61bb      	str	r3, [r7, #24]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	617b      	str	r3, [r7, #20]
  uint32_t XposBMP = 0, YposBMP  = 0, original_YposBMP = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbea:	2300      	movs	r3, #0
 800cbec:	613b      	str	r3, [r7, #16]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800cbee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbf0:	3302      	adds	r3, #2
 800cbf2:	881b      	ldrh	r3, [r3, #0]
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	627b      	str	r3, [r7, #36]	@ 0x24
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800cbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	041b      	lsls	r3, r3, #16
 800cc02:	461a      	mov	r2, r3
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	4313      	orrs	r3, r2
 800cc08:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800cc0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc0c:	330a      	adds	r3, #10
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	62bb      	str	r3, [r7, #40]	@ 0x28
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800cc14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc16:	330c      	adds	r3, #12
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	041b      	lsls	r3, r3, #16
 800cc1e:	461a      	mov	r2, r3
 800cc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc22:	4313      	orrs	r3, r2
 800cc24:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 800cc26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc28:	3312      	adds	r3, #18
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	637b      	str	r3, [r7, #52]	@ 0x34
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 800cc2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc30:	3314      	adds	r3, #20
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	041b      	lsls	r3, r3, #16
 800cc36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
  original_width = width;
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc3e:	623b      	str	r3, [r7, #32]
  if( Xshift>=0)
 800cc40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	db09      	blt.n	800cc5c <SSD1315_ShiftBitmap+0xb8>
  {
    Xpos = Xpos + Xshift;
 800cc48:	88fa      	ldrh	r2, [r7, #6]
 800cc4a:	897b      	ldrh	r3, [r7, #10]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	817b      	strh	r3, [r7, #10]
    width = width - Xshift;
 800cc50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc5a:	e008      	b.n	800cc6e <SSD1315_ShiftBitmap+0xca>
  }
  else
  {
    width = width + Xshift;
 800cc5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc62:	4413      	add	r3, r2
 800cc64:	637b      	str	r3, [r7, #52]	@ 0x34
    XposBMP = -Xshift;
 800cc66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc6a:	425b      	negs	r3, r3
 800cc6c:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 800cc6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc70:	3316      	adds	r3, #22
 800cc72:	881b      	ldrh	r3, [r3, #0]
 800cc74:	63bb      	str	r3, [r7, #56]	@ 0x38
  height |= (*(uint16_t *) (pbmp + 24)) << 16;
 800cc76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc78:	3318      	adds	r3, #24
 800cc7a:	881b      	ldrh	r3, [r3, #0]
 800cc7c:	041b      	lsls	r3, r3, #16
 800cc7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc80:	4313      	orrs	r3, r2
 800cc82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if( Yshift>=0)
 800cc84:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	db0a      	blt.n	800cca2 <SSD1315_ShiftBitmap+0xfe>
  {
    height = height - Yshift;
 800cc8c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800cc90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	63bb      	str	r3, [r7, #56]	@ 0x38
    Ypos = Ypos + Yshift;
 800cc96:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800cc9a:	893b      	ldrh	r3, [r7, #8]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	813b      	strh	r3, [r7, #8]
 800cca0:	e008      	b.n	800ccb4 <SSD1315_ShiftBitmap+0x110>
  }
  else
  {
    height = height + Yshift;
 800cca2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800cca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cca8:	4413      	add	r3, r2
 800ccaa:	63bb      	str	r3, [r7, #56]	@ 0x38
    YposBMP = -Yshift;
 800ccac:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800ccb0:	425b      	negs	r3, r3
 800ccb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  original_YposBMP = YposBMP;
 800ccb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb6:	613b      	str	r3, [r7, #16]
  
  /* Size conversion */
  size = (size - index)/2;
 800ccb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	085b      	lsrs	r3, r3, #1
 800ccc0:	627b      	str	r3, [r7, #36]	@ 0x24
  size = size - ((Xshift*height/8)+(Yshift*width/8 ));
 800ccc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccc8:	fb02 f303 	mul.w	r3, r2, r3
 800cccc:	08da      	lsrs	r2, r3, #3
 800ccce:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800ccd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ccd4:	fb01 f303 	mul.w	r3, r1, r3
 800ccd8:	08db      	lsrs	r3, r3, #3
 800ccda:	4413      	add	r3, r2
 800ccdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Apply offset to bypass header */
  pbmp += index;
 800cce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce6:	4413      	add	r3, r2
 800cce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  
  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 800ccea:	897b      	ldrh	r3, [r7, #10]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d116      	bne.n	800cd1e <SSD1315_ShiftBitmap+0x17a>
 800ccf0:	897b      	ldrh	r3, [r7, #10]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bf0c      	ite	eq
 800ccf6:	2301      	moveq	r3, #1
 800ccf8:	2300      	movne	r3, #0
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd02:	bf0c      	ite	eq
 800cd04:	2301      	moveq	r3, #1
 800cd06:	2300      	movne	r3, #0
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d005      	beq.n	800cd1e <SSD1315_ShiftBitmap+0x17a>
  {
    memcpy(PhysFrameBuffer, pbmp, size);
 800cd12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd14:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cd16:	4845      	ldr	r0, [pc, #276]	@ (800ce2c <SSD1315_ShiftBitmap+0x288>)
 800cd18:	f00f feed 	bl	801caf6 <memcpy>
 800cd1c:	e07a      	b.n	800ce14 <SSD1315_ShiftBitmap+0x270>
  }
  else
  {
    x=Xpos+width;
 800cd1e:	897b      	ldrh	r3, [r7, #10]
 800cd20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd22:	4413      	add	r3, r2
 800cd24:	61fb      	str	r3, [r7, #28]
    y=Ypos+height;
 800cd26:	893b      	ldrh	r3, [r7, #8]
 800cd28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd2a:	4413      	add	r3, r2
 800cd2c:	61bb      	str	r3, [r7, #24]
    y0 = Ypos;
 800cd2e:	893b      	ldrh	r3, [r7, #8]
 800cd30:	617b      	str	r3, [r7, #20]
    
    for(; Xpos < x; Xpos++, XposBMP++)
 800cd32:	e06b      	b.n	800ce0c <SSD1315_ShiftBitmap+0x268>
    {
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	813b      	strh	r3, [r7, #8]
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd3c:	e05c      	b.n	800cdf8 <SSD1315_ShiftBitmap+0x254>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 800cd3e:	893b      	ldrh	r3, [r7, #8]
 800cd40:	f003 0307 	and.w	r3, r3, #7
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d122      	bne.n	800cd90 <SSD1315_ShiftBitmap+0x1ec>
 800cd4a:	893b      	ldrh	r3, [r7, #8]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	2b07      	cmp	r3, #7
 800cd52:	d91d      	bls.n	800cd90 <SSD1315_ShiftBitmap+0x1ec>
 800cd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d118      	bne.n	800cd90 <SSD1315_ShiftBitmap+0x1ec>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pbmp[XposBMP+((YposBMP/8)*original_width)];
 800cd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd60:	08db      	lsrs	r3, r3, #3
 800cd62:	6a3a      	ldr	r2, [r7, #32]
 800cd64:	fb03 f202 	mul.w	r2, r3, r2
 800cd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6a:	4413      	add	r3, r2
 800cd6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd6e:	441a      	add	r2, r3
 800cd70:	8979      	ldrh	r1, [r7, #10]
 800cd72:	893b      	ldrh	r3, [r7, #8]
 800cd74:	08db      	lsrs	r3, r3, #3
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	01db      	lsls	r3, r3, #7
 800cd7a:	440b      	add	r3, r1
 800cd7c:	7811      	ldrb	r1, [r2, #0]
 800cd7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ce2c <SSD1315_ShiftBitmap+0x288>)
 800cd80:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800cd82:	893b      	ldrh	r3, [r7, #8]
 800cd84:	3307      	adds	r3, #7
 800cd86:	813b      	strh	r3, [r7, #8]
          YposBMP+=7;
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8a:	3307      	adds	r3, #7
 800cd8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd8e:	e02d      	b.n	800cdec <SSD1315_ShiftBitmap+0x248>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pbmp[XposBMP+((YposBMP/8)*original_width)]&(1<<(YposBMP%8))) != 0)
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	08db      	lsrs	r3, r3, #3
 800cd94:	6a3a      	ldr	r2, [r7, #32]
 800cd96:	fb03 f202 	mul.w	r2, r3, r2
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9c:	4413      	add	r3, r2
 800cd9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cda0:	4413      	add	r3, r2
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda8:	f003 0307 	and.w	r3, r3, #7
 800cdac:	fa42 f303 	asr.w	r3, r2, r3
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00c      	beq.n	800cdd2 <SSD1315_ShiftBitmap+0x22e>
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 800cdb8:	8979      	ldrh	r1, [r7, #10]
 800cdba:	893a      	ldrh	r2, [r7, #8]
 800cdbc:	23ff      	movs	r3, #255	@ 0xff
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f000 f8f8 	bl	800cfb4 <SSD1315_SetPixel>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d010      	beq.n	800cdec <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800cdca:	f04f 33ff 	mov.w	r3, #4294967295
 800cdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800cdd0:	e016      	b.n	800ce00 <SSD1315_ShiftBitmap+0x25c>
            }
          }
          else
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800cdd2:	8979      	ldrh	r1, [r7, #10]
 800cdd4:	893a      	ldrh	r2, [r7, #8]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 f8eb 	bl	800cfb4 <SSD1315_SetPixel>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
 800cde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800cdea:	e009      	b.n	800ce00 <SSD1315_ShiftBitmap+0x25c>
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 800cdec:	893b      	ldrh	r3, [r7, #8]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	813b      	strh	r3, [r7, #8]
 800cdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdf8:	893b      	ldrh	r3, [r7, #8]
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d89e      	bhi.n	800cd3e <SSD1315_ShiftBitmap+0x19a>
    for(; Xpos < x; Xpos++, XposBMP++)
 800ce00:	897b      	ldrh	r3, [r7, #10]
 800ce02:	3301      	adds	r3, #1
 800ce04:	817b      	strh	r3, [r7, #10]
 800ce06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce08:	3301      	adds	r3, #1
 800ce0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce0c:	897b      	ldrh	r3, [r7, #10]
 800ce0e:	69fa      	ldr	r2, [r7, #28]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d88f      	bhi.n	800cd34 <SSD1315_ShiftBitmap+0x190>
          }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800ce14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <SSD1315_ShiftBitmap+0x27c>
  {
    ret = SSD1315_ERROR;
 800ce1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  return ret;
 800ce20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3740      	adds	r7, #64	@ 0x40
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20000c30 	.word	0x20000c30

0800ce30 <SSD1315_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle height.
  * @retval The component status.
  */
int32_t SSD1315_FillRGBRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800ce42:	2300      	movs	r3, #0
 800ce44:	61bb      	str	r3, [r7, #24]
 800ce46:	e032      	b.n	800ceae <SSD1315_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	617b      	str	r3, [r7, #20]
 800ce4c:	e028      	b.n	800cea0 <SSD1315_FillRGBRect+0x70>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	461a      	mov	r2, r3
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	021b      	lsls	r3, r3, #8
 800ce5c:	431a      	orrs	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	3302      	adds	r3, #2
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	041b      	lsls	r3, r3, #16
 800ce66:	431a      	orrs	r2, r3
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	3303      	adds	r3, #3
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	061b      	lsls	r3, r3, #24
 800ce70:	4313      	orrs	r3, r2
 800ce72:	613b      	str	r3, [r7, #16]
      if(SSD1315_SetPixel (pObj, Xpos + j, Ypos + i, color)!= SSD1315_OK)
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	18d1      	adds	r1, r2, r3
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	441a      	add	r2, r3
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f000 f896 	bl	800cfb4 <SSD1315_SetPixel>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <SSD1315_FillRGBRect+0x64>
      {
        ret = SSD1315_ERROR;
 800ce8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce92:	61fb      	str	r3, [r7, #28]
      }
      pData += 4;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	3304      	adds	r3, #4
 800ce98:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d3d2      	bcc.n	800ce4e <SSD1315_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	61bb      	str	r3, [r7, #24]
 800ceae:	69ba      	ldr	r2, [r7, #24]
 800ceb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d3c8      	bcc.n	800ce48 <SSD1315_FillRGBRect+0x18>
    }
  }

  return ret;
 800ceb6:	69fb      	ldr	r3, [r7, #28]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3720      	adds	r7, #32
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <SSD1315_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawHLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]

  /* Sent a complete horizontal line */
  for (i = Xpos; i < (Xpos+Length); i++)
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	613b      	str	r3, [r7, #16]
 800ceda:	e008      	b.n	800ceee <SSD1315_DrawHLine+0x2e>
  {
    SSD1315_SetPixel(pObj,i, Ypos, Color);
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	6939      	ldr	r1, [r7, #16]
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f000 f866 	bl	800cfb4 <SSD1315_SetPixel>
  for (i = Xpos; i < (Xpos+Length); i++)
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	3301      	adds	r3, #1
 800ceec:	613b      	str	r3, [r7, #16]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	4413      	add	r3, r2
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d3f0      	bcc.n	800cedc <SSD1315_DrawHLine+0x1c>
  }
  if(ret != SSD1315_OK)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <SSD1315_DrawHLine+0x46>
  {
    ret = SSD1315_ERROR;
 800cf00:	f04f 33ff 	mov.w	r3, #4294967295
 800cf04:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800cf06:	697b      	ldr	r3, [r7, #20]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <SSD1315_DrawVLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawVLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	613b      	str	r3, [r7, #16]
  
  for (i = Ypos; i < (Ypos+Length); i++)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	613b      	str	r3, [r7, #16]
 800cf2a:	e008      	b.n	800cf3e <SSD1315_DrawVLine+0x2e>
  {
    SSD1315_SetPixel(pObj,Xpos, i, Color);
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 f83e 	bl	800cfb4 <SSD1315_SetPixel>
  for (i = Ypos; i < (Ypos+Length); i++)
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	613b      	str	r3, [r7, #16]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	4413      	add	r3, r2
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d3f0      	bcc.n	800cf2c <SSD1315_DrawVLine+0x1c>
  }
  if(ret != SSD1315_OK)
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <SSD1315_DrawVLine+0x46>
  {
    ret = SSD1315_ERROR;
 800cf50:	f04f 33ff 	mov.w	r3, #4294967295
 800cf54:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800cf56:	697b      	ldr	r3, [r7, #20]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <SSD1315_FillRect>:
  * @param  Height Rectangle height.
  * @param  Color Draw color.
  * @retval Component status.
  */
int32_t SSD1315_FillRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	603b      	str	r3, [r7, #0]
  int32_t ret = SSD1315_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for(i = 0U; i < Height; i++)
 800cf72:	2300      	movs	r3, #0
 800cf74:	613b      	str	r3, [r7, #16]
 800cf76:	e013      	b.n	800cfa0 <SSD1315_FillRect+0x40>
  {
    if (SSD1315_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != SSD1315_OK)
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	441a      	add	r2, r3
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	68b9      	ldr	r1, [r7, #8]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff ff9a 	bl	800cec0 <SSD1315_DrawHLine>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <SSD1315_FillRect+0x3a>
    {
      ret = SSD1315_ERROR;
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295
 800cf96:	617b      	str	r3, [r7, #20]
      break;
 800cf98:	e006      	b.n	800cfa8 <SSD1315_FillRect+0x48>
  for(i = 0U; i < Height; i++)
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	613b      	str	r3, [r7, #16]
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d3e7      	bcc.n	800cf78 <SSD1315_FillRect+0x18>
    }
  }

  return ret;
 800cfa8:	697b      	ldr	r3, [r7, #20]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3718      	adds	r7, #24
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
	...

0800cfb4 <SSD1315_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color.
  * @retval The component status.
  */
int32_t SSD1315_SetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  /* Set color */
  if (Color == SSD1315_COLOR_WHITE)
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	2bff      	cmp	r3, #255	@ 0xff
 800cfca:	d117      	bne.n	800cffc <SSD1315_SetPixel+0x48>
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	08db      	lsrs	r3, r3, #3
 800cfd0:	01d9      	lsls	r1, r3, #7
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	440a      	add	r2, r1
 800cfd6:	491c      	ldr	r1, [pc, #112]	@ (800d048 <SSD1315_SetPixel+0x94>)
 800cfd8:	5c8a      	ldrb	r2, [r1, r2]
 800cfda:	b251      	sxtb	r1, r2
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	f002 0207 	and.w	r2, r2, #7
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	fa00 f202 	lsl.w	r2, r0, r2
 800cfe8:	b252      	sxtb	r2, r2
 800cfea:	430a      	orrs	r2, r1
 800cfec:	b251      	sxtb	r1, r2
 800cfee:	01da      	lsls	r2, r3, #7
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	4413      	add	r3, r2
 800cff4:	b2c9      	uxtb	r1, r1
 800cff6:	4a14      	ldr	r2, [pc, #80]	@ (800d048 <SSD1315_SetPixel+0x94>)
 800cff8:	54d1      	strb	r1, [r2, r3]
 800cffa:	e018      	b.n	800d02e <SSD1315_SetPixel+0x7a>
  }
  else
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	08db      	lsrs	r3, r3, #3
 800d000:	01d9      	lsls	r1, r3, #7
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	440a      	add	r2, r1
 800d006:	4910      	ldr	r1, [pc, #64]	@ (800d048 <SSD1315_SetPixel+0x94>)
 800d008:	5c8a      	ldrb	r2, [r1, r2]
 800d00a:	b251      	sxtb	r1, r2
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	f002 0207 	and.w	r2, r2, #7
 800d012:	2001      	movs	r0, #1
 800d014:	fa00 f202 	lsl.w	r2, r0, r2
 800d018:	b252      	sxtb	r2, r2
 800d01a:	43d2      	mvns	r2, r2
 800d01c:	b252      	sxtb	r2, r2
 800d01e:	400a      	ands	r2, r1
 800d020:	b251      	sxtb	r1, r2
 800d022:	01da      	lsls	r2, r3, #7
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	4413      	add	r3, r2
 800d028:	b2c9      	uxtb	r1, r1
 800d02a:	4a07      	ldr	r2, [pc, #28]	@ (800d048 <SSD1315_SetPixel+0x94>)
 800d02c:	54d1      	strb	r1, [r2, r3]
  }
  if(ret != SSD1315_OK)
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <SSD1315_SetPixel+0x86>
  {
    ret = SSD1315_ERROR;
 800d034:	f04f 33ff 	mov.w	r3, #4294967295
 800d038:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800d03a:	697b      	ldr	r3, [r7, #20]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	371c      	adds	r7, #28
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr
 800d048:	20000c30 	.word	0x20000c30

0800d04c <SSD1315_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the LCD pixel color.
  * @retval The component status.
  */
int32_t SSD1315_GetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b087      	sub	sp, #28
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
   int32_t  ret = SSD1315_OK;
 800d05a:	2300      	movs	r3, #0
 800d05c:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  if ((Xpos >= SSD1315_LCD_PIXEL_WIDTH) || (Ypos >= SSD1315_LCD_PIXEL_HEIGHT)) 
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	2b7f      	cmp	r3, #127	@ 0x7f
 800d062:	d802      	bhi.n	800d06a <SSD1315_GetPixel+0x1e>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b3f      	cmp	r3, #63	@ 0x3f
 800d068:	d903      	bls.n	800d072 <SSD1315_GetPixel+0x26>
  {
    *Color = 0;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2200      	movs	r2, #0
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	e01c      	b.n	800d0ac <SSD1315_GetPixel+0x60>
  }
  else
  {
    *Color = PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] & (1 << Ypos%8);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	08db      	lsrs	r3, r3, #3
 800d076:	01da      	lsls	r2, r3, #7
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	4413      	add	r3, r2
 800d07c:	4a0f      	ldr	r2, [pc, #60]	@ (800d0bc <SSD1315_GetPixel+0x70>)
 800d07e:	5cd3      	ldrb	r3, [r2, r3]
 800d080:	4619      	mov	r1, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f003 0307 	and.w	r3, r3, #7
 800d088:	2201      	movs	r2, #1
 800d08a:	fa02 f303 	lsl.w	r3, r2, r3
 800d08e:	400b      	ands	r3, r1
 800d090:	461a      	mov	r2, r3
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	601a      	str	r2, [r3, #0]
    if (*Color != 0)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d003      	beq.n	800d0a6 <SSD1315_GetPixel+0x5a>
    {
      *Color = 1;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	e002      	b.n	800d0ac <SSD1315_GetPixel+0x60>
    }
    else
    {
      *Color = 0;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  return ret;
 800d0ac:	697b      	ldr	r3, [r7, #20]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	20000c30 	.word	0x20000c30

0800d0c0 <SSD1315_GetXSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Width.
  * @retval The component status.
  */
int32_t SSD1315_GetXSize(SSD1315_Object_t *pObj, uint32_t *XSize)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d103      	bne.n	800d0de <SSD1315_GetXSize+0x1e>
  {
    *XSize = 128;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2280      	movs	r2, #128	@ 0x80
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	e002      	b.n	800d0e4 <SSD1315_GetXSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 800d0de:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <SSD1315_GetYSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Height.
  * @retval The component status.
  */
int32_t SSD1315_GetYSize(SSD1315_Object_t *pObj, uint32_t *YSize)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b085      	sub	sp, #20
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	d103      	bne.n	800d110 <SSD1315_GetYSize+0x1e>
  {
    *YSize = 64;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2240      	movs	r2, #64	@ 0x40
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	e002      	b.n	800d116 <SSD1315_GetYSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 800d110:	f04f 33ff 	mov.w	r3, #4294967295
 800d114:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d116:	68fb      	ldr	r3, [r7, #12]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <SSD1315_SetPage>:
  * @param  pObj Component object.
  * @param  Page specifies the Page position (0-7).
  * @retval The component status.
  */
int32_t SSD1315_SetPage(SSD1315_Object_t *pObj, uint16_t Page)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Set Page position  */
  data = (SSD1315_SET_PAGE_START_ADRESS | Page);
 800d134:	887b      	ldrh	r3, [r7, #2]
 800d136:	b2db      	uxtb	r3, r3
 800d138:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f103 0014 	add.w	r0, r3, #20
 800d146:	f107 020b 	add.w	r2, r7, #11
 800d14a:	2301      	movs	r3, #1
 800d14c:	2101      	movs	r1, #1
 800d14e:	f000 f97b 	bl	800d448 <ssd1315_write_reg>
 800d152:	4602      	mov	r2, r0
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <SSD1315_SetPage+0x42>
  {
    ret = SSD1315_ERROR;
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800d166:	68fb      	ldr	r3, [r7, #12]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <SSD1315_SetColumn>:
  * @param  pObj Component object.
  * @param  Column specifies the Column position (0-127).
  * @retval The component status.
  */
int32_t SSD1315_SetColumn(SSD1315_Object_t *pObj, uint16_t Column)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  /* Set Column position  */

  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800d180:	2300      	movs	r3, #0
 800d182:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f103 0014 	add.w	r0, r3, #20
 800d18a:	f107 020b 	add.w	r2, r7, #11
 800d18e:	2301      	movs	r3, #1
 800d190:	2101      	movs	r1, #1
 800d192:	f000 f959 	bl	800d448 <ssd1315_write_reg>
 800d196:	4602      	mov	r2, r0
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4413      	add	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]
  data = (SSD1315_LOWER_COLUMN_START_ADRESS | Column);
 800d19e:	887b      	ldrh	r3, [r7, #2]
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f103 0014 	add.w	r0, r3, #20
 800d1aa:	f107 020b 	add.w	r2, r7, #11
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	f000 f949 	bl	800d448 <ssd1315_write_reg>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_32;
 800d1be:	231f      	movs	r3, #31
 800d1c0:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f103 0014 	add.w	r0, r3, #20
 800d1c8:	f107 020b 	add.w	r2, r7, #11
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	f000 f93a 	bl	800d448 <ssd1315_write_reg>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	4413      	add	r3, r2
 800d1da:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <SSD1315_SetColumn+0x78>
  {
    ret = SSD1315_ERROR;
 800d1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <SSD1315_ScrollingSetup>:
            @arg  0..7
  * @param  Frequency SSD1315_SCROLL_FREQ_2FRAMES to SSD1315_SCROLL_FREQ_256FRAMES
  * @retval The component status.
  */
int32_t SSD1315_ScrollingSetup(SSD1315_Object_t *pObj, uint16_t ScrollMode, uint16_t StartPage, uint16_t EndPage, uint16_t Frequency)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b086      	sub	sp, #24
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	4608      	mov	r0, r1
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	461a      	mov	r2, r3
 800d200:	4603      	mov	r3, r0
 800d202:	817b      	strh	r3, [r7, #10]
 800d204:	460b      	mov	r3, r1
 800d206:	813b      	strh	r3, [r7, #8]
 800d208:	4613      	mov	r3, r2
 800d20a:	80fb      	strh	r3, [r7, #6]
  int32_t ret = SSD1315_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
  uint8_t data;

  /* Scrolling setup sequence */
  data = ScrollMode;                                     /* Right/Left Horizontal Scroll */
 800d210:	897b      	ldrh	r3, [r7, #10]
 800d212:	b2db      	uxtb	r3, r3
 800d214:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f103 0014 	add.w	r0, r3, #20
 800d21c:	f107 0213 	add.w	r2, r7, #19
 800d220:	2301      	movs	r3, #1
 800d222:	2101      	movs	r1, #1
 800d224:	f000 f910 	bl	800d448 <ssd1315_write_reg>
 800d228:	4602      	mov	r2, r0
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	4413      	add	r3, r2
 800d22e:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800d230:	2300      	movs	r3, #0
 800d232:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f103 0014 	add.w	r0, r3, #20
 800d23a:	f107 0213 	add.w	r2, r7, #19
 800d23e:	2301      	movs	r3, #1
 800d240:	2101      	movs	r1, #1
 800d242:	f000 f901 	bl	800d448 <ssd1315_write_reg>
 800d246:	4602      	mov	r2, r0
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	4413      	add	r3, r2
 800d24c:	617b      	str	r3, [r7, #20]
  data = StartPage;                                      /* start page address*/
 800d24e:	893b      	ldrh	r3, [r7, #8]
 800d250:	b2db      	uxtb	r3, r3
 800d252:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f103 0014 	add.w	r0, r3, #20
 800d25a:	f107 0213 	add.w	r2, r7, #19
 800d25e:	2301      	movs	r3, #1
 800d260:	2101      	movs	r1, #1
 800d262:	f000 f8f1 	bl	800d448 <ssd1315_write_reg>
 800d266:	4602      	mov	r2, r0
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	4413      	add	r3, r2
 800d26c:	617b      	str	r3, [r7, #20]
  data = Frequency;                                      /* Frequency*/
 800d26e:	8c3b      	ldrh	r3, [r7, #32]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f103 0014 	add.w	r0, r3, #20
 800d27a:	f107 0213 	add.w	r2, r7, #19
 800d27e:	2301      	movs	r3, #1
 800d280:	2101      	movs	r1, #1
 800d282:	f000 f8e1 	bl	800d448 <ssd1315_write_reg>
 800d286:	4602      	mov	r2, r0
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	4413      	add	r3, r2
 800d28c:	617b      	str	r3, [r7, #20]
  data = EndPage;                                        /* End page address*/
 800d28e:	88fb      	ldrh	r3, [r7, #6]
 800d290:	b2db      	uxtb	r3, r3
 800d292:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f103 0014 	add.w	r0, r3, #20
 800d29a:	f107 0213 	add.w	r2, r7, #19
 800d29e:	2301      	movs	r3, #1
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	f000 f8d1 	bl	800d448 <ssd1315_write_reg>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;           
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f103 0014 	add.w	r0, r3, #20
 800d2b8:	f107 0213 	add.w	r2, r7, #19
 800d2bc:	2301      	movs	r3, #1
 800d2be:	2101      	movs	r1, #1
 800d2c0:	f000 f8c2 	bl	800d448 <ssd1315_write_reg>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]
  data = SSD1315_CONTRAST_CONTROL_2;
 800d2cc:	23ff      	movs	r3, #255	@ 0xff
 800d2ce:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f103 0014 	add.w	r0, r3, #20
 800d2d6:	f107 0213 	add.w	r2, r7, #19
 800d2da:	2301      	movs	r3, #1
 800d2dc:	2101      	movs	r1, #1
 800d2de:	f000 f8b3 	bl	800d448 <ssd1315_write_reg>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	617b      	str	r3, [r7, #20]

  if (ret != SSD1315_OK)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <SSD1315_ScrollingSetup+0x104>
  {
    ret = SSD1315_ERROR;
 800d2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800d2f6:	697b      	ldr	r3, [r7, #20]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3718      	adds	r7, #24
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <SSD1315_ScrollingStart>:
  * @brief  Start Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStart(SSD1315_Object_t *pObj)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Start scrolling sequence */
  data = SSD1315_ACTIVATE_SCROLL;
 800d30c:	232f      	movs	r3, #47	@ 0x2f
 800d30e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f103 0014 	add.w	r0, r3, #20
 800d316:	f107 020b 	add.w	r2, r7, #11
 800d31a:	2301      	movs	r3, #1
 800d31c:	2101      	movs	r1, #1
 800d31e:	f000 f893 	bl	800d448 <ssd1315_write_reg>
 800d322:	4602      	mov	r2, r0
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	4413      	add	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <SSD1315_ScrollingStart+0x36>
  {
    ret = SSD1315_ERROR;
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800d336:	68fb      	ldr	r3, [r7, #12]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <SSD1315_ScrollingStop>:
  * @brief  Stop Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStop(SSD1315_Object_t *pObj)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800d348:	2300      	movs	r3, #0
 800d34a:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Stop scrolling  sequence */
  data = SSD1315_DESACTIVATE_SCROLL;
 800d34c:	232e      	movs	r3, #46	@ 0x2e
 800d34e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f103 0014 	add.w	r0, r3, #20
 800d356:	f107 020b 	add.w	r2, r7, #11
 800d35a:	2301      	movs	r3, #1
 800d35c:	2101      	movs	r1, #1
 800d35e:	f000 f873 	bl	800d448 <ssd1315_write_reg>
 800d362:	4602      	mov	r2, r0
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d002      	beq.n	800d376 <SSD1315_ScrollingStop+0x36>
  {
    ret = SSD1315_ERROR;
 800d370:	f04f 33ff 	mov.w	r3, #4294967295
 800d374:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800d376:	68fb      	ldr	r3, [r7, #12]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <SSD1315_ReadRegWrap>:
  * @param  pData The target register value to be red.
  * @param  Length Buffer size to be red.
  * @retval error status.
  */
static int32_t SSD1315_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	607a      	str	r2, [r7, #4]
 800d38a:	461a      	mov	r2, r3
 800d38c:	460b      	mov	r3, r1
 800d38e:	817b      	strh	r3, [r7, #10]
 800d390:	4613      	mov	r3, r2
 800d392:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData, Length);
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	893a      	ldrh	r2, [r7, #8]
 800d39e:	8978      	ldrh	r0, [r7, #10]
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	4798      	blx	r3
 800d3a4:	4603      	mov	r3, r0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3718      	adds	r7, #24
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <SSD1315_WriteRegWrap>:
  * @param  pData The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t SSD1315_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b086      	sub	sp, #24
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	60f8      	str	r0, [r7, #12]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	817b      	strh	r3, [r7, #10]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	893a      	ldrh	r2, [r7, #8]
 800d3cc:	8978      	ldrh	r0, [r7, #10]
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4798      	blx	r3
 800d3d2:	4603      	mov	r3, r0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK).
  * @retval None
  */
static void ssd1315_Clear(uint16_t ColorCode)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 800d3e6:	88fb      	ldrh	r3, [r7, #6]
 800d3e8:	2bff      	cmp	r3, #255	@ 0xff
 800d3ea:	d106      	bne.n	800d3fa <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_WHITE, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800d3ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d3f0:	21ff      	movs	r1, #255	@ 0xff
 800d3f2:	4807      	ldr	r0, [pc, #28]	@ (800d410 <ssd1315_Clear+0x34>)
 800d3f4:	f00f faf8 	bl	801c9e8 <memset>
  }
  else
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 800d3f8:	e005      	b.n	800d406 <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800d3fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d3fe:	2100      	movs	r1, #0
 800d400:	4803      	ldr	r0, [pc, #12]	@ (800d410 <ssd1315_Clear+0x34>)
 800d402:	f00f faf1 	bl	801c9e8 <memset>
}
 800d406:	bf00      	nop
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20000c30 	.word	0x20000c30

0800d414 <SSD1315_IO_Delay>:
  * @brief  SSD1315 delay.
  * @param  Delay Delay in ms.
  * @retval Component error status.
  */
static int32_t SSD1315_IO_Delay(SSD1315_Object_t *pObj, uint32_t Delay)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	4798      	blx	r3
 800d424:	4603      	mov	r3, r0
 800d426:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800d428:	bf00      	nop
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	4798      	blx	r3
 800d430:	4603      	mov	r3, r0
 800d432:	461a      	mov	r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d8f5      	bhi.n	800d42a <SSD1315_IO_Delay+0x16>
  {
  }
  return SSD1315_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <ssd1315_write_reg>:
  * @param  uint8_t reg: register to write
  * @param  uint8_t* data: pointer to data to write in register reg
  *
*/
int32_t ssd1315_write_reg(ssd1315_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800d448:	b590      	push	{r4, r7, lr}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	607a      	str	r2, [r7, #4]
 800d452:	461a      	mov	r2, r3
 800d454:	460b      	mov	r3, r1
 800d456:	817b      	strh	r3, [r7, #10]
 800d458:	4613      	mov	r3, r2
 800d45a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681c      	ldr	r4, [r3, #0]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6898      	ldr	r0, [r3, #8]
 800d464:	893b      	ldrh	r3, [r7, #8]
 800d466:	8979      	ldrh	r1, [r7, #10]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	47a0      	blx	r4
 800d46c:	4603      	mov	r3, r0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	bd90      	pop	{r4, r7, pc}
	...

0800d478 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d103      	bne.n	800d490 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800d488:	f04f 33ff 	mov.w	r3, #4294967295
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	e030      	b.n	800d4f2 <STTS22H_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	689a      	ldr	r2, [r3, #8]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	7b1a      	ldrb	r2, [r3, #12]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	691a      	ldr	r2, [r3, #16]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	695a      	ldr	r2, [r3, #20]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	699a      	ldr	r2, [r3, #24]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a0c      	ldr	r2, [pc, #48]	@ (800d4fc <STTS22H_RegisterBusIO+0x84>)
 800d4cc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4a0b      	ldr	r2, [pc, #44]	@ (800d500 <STTS22H_RegisterBusIO+0x88>)
 800d4d2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d004      	beq.n	800d4ec <STTS22H_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4798      	blx	r3
 800d4e8:	60f8      	str	r0, [r7, #12]
 800d4ea:	e002      	b.n	800d4f2 <STTS22H_RegisterBusIO+0x7a>
    }
    else
    {
      ret = STTS22H_ERROR;
 800d4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	0800d901 	.word	0x0800d901
 800d500:	0800d96f 	.word	0x0800d96f

0800d504 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d512:	2b00      	cmp	r3, #0
 800d514:	d127      	bne.n	800d566 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d51c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	331c      	adds	r3, #28
 800d522:	2101      	movs	r1, #1
 800d524:	4618      	mov	r0, r3
 800d526:	f000 fc1f 	bl	800dd68 <stts22h_block_data_update_set>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800d530:	f04f 33ff 	mov.w	r3, #4294967295
 800d534:	e01c      	b.n	800d570 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	331c      	adds	r3, #28
 800d53a:	2101      	movs	r1, #1
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fc6c 	bl	800de1a <stts22h_auto_increment_set>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800d548:	f04f 33ff 	mov.w	r3, #4294967295
 800d54c:	e010      	b.n	800d570 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	331c      	adds	r3, #28
 800d552:	2100      	movs	r1, #0
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fa8b 	bl	800da70 <stts22h_temp_data_rate_set>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800d560:	f04f 33ff 	mov.w	r3, #4294967295
 800d564:	e004      	b.n	800d570 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return STTS22H_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d586:	2b01      	cmp	r3, #1
 800d588:	d108      	bne.n	800d59c <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 f872 	bl	800d674 <STTS22H_TEMP_Disable>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800d596:	f04f 33ff 	mov.w	r3, #4294967295
 800d59a:	e004      	b.n	800d5a6 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return STTS22H_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	331c      	adds	r3, #28
 800d5bc:	f107 020f 	add.w	r2, r7, #15
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 fc18 	bl	800ddf8 <stts22h_dev_id_get>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800d5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d2:	e003      	b.n	800d5dc <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800d5d4:	7bfa      	ldrb	r2, [r7, #15]
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800d5da:	2300      	movs	r3, #0
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2200      	movs	r2, #0
 800d604:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	f04f 0200 	mov.w	r2, #0
 800d60c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	4a06      	ldr	r2, [pc, #24]	@ (800d62c <STTS22H_GetCapabilities+0x48>)
 800d612:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	60da      	str	r2, [r3, #12]
  return STTS22H_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	43480000 	.word	0x43480000

0800d630 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d101      	bne.n	800d646 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	e012      	b.n	800d66c <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800d64c:	eeb0 0a67 	vmov.f32	s0, s15
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f8e9 	bl	800d828 <STTS22H_TEMP_SetOutputDataRate>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800d65c:	f04f 33ff 	mov.w	r3, #4294967295
 800d660:	e004      	b.n	800d66c <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return STTS22H_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800d686:	2300      	movs	r3, #0
 800d688:	e01c      	b.n	800d6c4 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	332c      	adds	r3, #44	@ 0x2c
 800d68e:	4619      	mov	r1, r3
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 f81b 	bl	800d6cc <STTS22H_TEMP_GetOutputDataRate>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a0:	e010      	b.n	800d6c4 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	331c      	adds	r3, #28
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 f9e1 	bl	800da70 <stts22h_temp_data_rate_set>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800d6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b8:	e004      	b.n	800d6c4 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return STTS22H_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	331c      	adds	r3, #28
 800d6de:	f107 020b 	add.w	r2, r7, #11
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f000 fa89 	bl	800dbfc <stts22h_temp_data_rate_get>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800d6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f4:	e08b      	b.n	800d80e <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800d6f6:	7afb      	ldrb	r3, [r7, #11]
 800d6f8:	2b32      	cmp	r3, #50	@ 0x32
 800d6fa:	f200 8083 	bhi.w	800d804 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800d6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d704 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800d700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d704:	0800d7d1 	.word	0x0800d7d1
 800d708:	0800d7d1 	.word	0x0800d7d1
 800d70c:	0800d7e5 	.word	0x0800d7e5
 800d710:	0800d805 	.word	0x0800d805
 800d714:	0800d7db 	.word	0x0800d7db
 800d718:	0800d805 	.word	0x0800d805
 800d71c:	0800d805 	.word	0x0800d805
 800d720:	0800d805 	.word	0x0800d805
 800d724:	0800d805 	.word	0x0800d805
 800d728:	0800d805 	.word	0x0800d805
 800d72c:	0800d805 	.word	0x0800d805
 800d730:	0800d805 	.word	0x0800d805
 800d734:	0800d805 	.word	0x0800d805
 800d738:	0800d805 	.word	0x0800d805
 800d73c:	0800d805 	.word	0x0800d805
 800d740:	0800d805 	.word	0x0800d805
 800d744:	0800d805 	.word	0x0800d805
 800d748:	0800d805 	.word	0x0800d805
 800d74c:	0800d7ed 	.word	0x0800d7ed
 800d750:	0800d805 	.word	0x0800d805
 800d754:	0800d805 	.word	0x0800d805
 800d758:	0800d805 	.word	0x0800d805
 800d75c:	0800d805 	.word	0x0800d805
 800d760:	0800d805 	.word	0x0800d805
 800d764:	0800d805 	.word	0x0800d805
 800d768:	0800d805 	.word	0x0800d805
 800d76c:	0800d805 	.word	0x0800d805
 800d770:	0800d805 	.word	0x0800d805
 800d774:	0800d805 	.word	0x0800d805
 800d778:	0800d805 	.word	0x0800d805
 800d77c:	0800d805 	.word	0x0800d805
 800d780:	0800d805 	.word	0x0800d805
 800d784:	0800d805 	.word	0x0800d805
 800d788:	0800d805 	.word	0x0800d805
 800d78c:	0800d7f5 	.word	0x0800d7f5
 800d790:	0800d805 	.word	0x0800d805
 800d794:	0800d805 	.word	0x0800d805
 800d798:	0800d805 	.word	0x0800d805
 800d79c:	0800d805 	.word	0x0800d805
 800d7a0:	0800d805 	.word	0x0800d805
 800d7a4:	0800d805 	.word	0x0800d805
 800d7a8:	0800d805 	.word	0x0800d805
 800d7ac:	0800d805 	.word	0x0800d805
 800d7b0:	0800d805 	.word	0x0800d805
 800d7b4:	0800d805 	.word	0x0800d805
 800d7b8:	0800d805 	.word	0x0800d805
 800d7bc:	0800d805 	.word	0x0800d805
 800d7c0:	0800d805 	.word	0x0800d805
 800d7c4:	0800d805 	.word	0x0800d805
 800d7c8:	0800d805 	.word	0x0800d805
 800d7cc:	0800d7fd 	.word	0x0800d7fd
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	f04f 0200 	mov.w	r2, #0
 800d7d6:	601a      	str	r2, [r3, #0]
      break;
 800d7d8:	e018      	b.n	800d80c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d7e0:	601a      	str	r2, [r3, #0]
      break;
 800d7e2:	e013      	b.n	800d80c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	4a0c      	ldr	r2, [pc, #48]	@ (800d818 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800d7e8:	601a      	str	r2, [r3, #0]
      break;
 800d7ea:	e00f      	b.n	800d80c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	4a0b      	ldr	r2, [pc, #44]	@ (800d81c <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800d7f0:	601a      	str	r2, [r3, #0]
      break;
 800d7f2:	e00b      	b.n	800d80c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	4a0a      	ldr	r2, [pc, #40]	@ (800d820 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800d7f8:	601a      	str	r2, [r3, #0]
      break;
 800d7fa:	e007      	b.n	800d80c <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	4a09      	ldr	r2, [pc, #36]	@ (800d824 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800d800:	601a      	str	r2, [r3, #0]
      break;
 800d802:	e003      	b.n	800d80c <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800d804:	f04f 33ff 	mov.w	r3, #4294967295
 800d808:	60fb      	str	r3, [r7, #12]
      break;
 800d80a:	bf00      	nop
  }

  return ret;
 800d80c:	68fb      	ldr	r3, [r7, #12]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	41c80000 	.word	0x41c80000
 800d81c:	42480000 	.word	0x42480000
 800d820:	42c80000 	.word	0x42c80000
 800d824:	43480000 	.word	0x43480000

0800d828 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800d834:	edd7 7a00 	vldr	s15, [r7]
 800d838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d83c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d844:	d801      	bhi.n	800d84a <STTS22H_TEMP_SetOutputDataRate+0x22>
 800d846:	2304      	movs	r3, #4
 800d848:	e021      	b.n	800d88e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d84a:	edd7 7a00 	vldr	s15, [r7]
 800d84e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800d852:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85a:	d801      	bhi.n	800d860 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800d85c:	2302      	movs	r3, #2
 800d85e:	e016      	b.n	800d88e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d860:	edd7 7a00 	vldr	s15, [r7]
 800d864:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800d8b4 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800d868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d870:	d801      	bhi.n	800d876 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800d872:	2312      	movs	r3, #18
 800d874:	e00b      	b.n	800d88e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d876:	edd7 7a00 	vldr	s15, [r7]
 800d87a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d8b8 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800d87e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	d801      	bhi.n	800d88c <STTS22H_TEMP_SetOutputDataRate+0x64>
 800d888:	2322      	movs	r3, #34	@ 0x22
 800d88a:	e000      	b.n	800d88e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800d88c:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800d88e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	331c      	adds	r3, #28
 800d894:	7bfa      	ldrb	r2, [r7, #15]
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f8e9 	bl	800da70 <stts22h_temp_data_rate_set>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800d8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a8:	e000      	b.n	800d8ac <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	42480000 	.word	0x42480000
 800d8b8:	42c80000 	.word	0x42c80000

0800d8bc <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	331c      	adds	r3, #28
 800d8ca:	f107 020e 	add.w	r2, r7, #14
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 fa6f 	bl	800ddb4 <stts22h_temperature_raw_get>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e0:	e00a      	b.n	800d8f8 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800d8e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f000 f8a8 	bl	800da3c <stts22h_from_lsb_to_celsius>
 800d8ec:	eef0 7a40 	vmov.f32	s15, s0
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800d900:	b590      	push	{r4, r7, lr}
 800d902:	b089      	sub	sp, #36	@ 0x24
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	607a      	str	r2, [r7, #4]
 800d90a:	461a      	mov	r2, r3
 800d90c:	460b      	mov	r3, r1
 800d90e:	72fb      	strb	r3, [r7, #11]
 800d910:	4613      	mov	r3, r2
 800d912:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d11f      	bne.n	800d964 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800d924:	2300      	movs	r3, #0
 800d926:	83fb      	strh	r3, [r7, #30]
 800d928:	e018      	b.n	800d95c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	695c      	ldr	r4, [r3, #20]
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	7b1b      	ldrb	r3, [r3, #12]
 800d932:	4618      	mov	r0, r3
 800d934:	7afb      	ldrb	r3, [r7, #11]
 800d936:	b29a      	uxth	r2, r3
 800d938:	8bfb      	ldrh	r3, [r7, #30]
 800d93a:	4413      	add	r3, r2
 800d93c:	b299      	uxth	r1, r3
 800d93e:	8bfb      	ldrh	r3, [r7, #30]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	441a      	add	r2, r3
 800d944:	2301      	movs	r3, #1
 800d946:	47a0      	blx	r4
 800d948:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800d950:	f04f 33ff 	mov.w	r3, #4294967295
 800d954:	e007      	b.n	800d966 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800d956:	8bfb      	ldrh	r3, [r7, #30]
 800d958:	3301      	adds	r3, #1
 800d95a:	83fb      	strh	r3, [r7, #30]
 800d95c:	8bfa      	ldrh	r2, [r7, #30]
 800d95e:	893b      	ldrh	r3, [r7, #8]
 800d960:	429a      	cmp	r2, r3
 800d962:	d3e2      	bcc.n	800d92a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800d964:	69bb      	ldr	r3, [r7, #24]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3724      	adds	r7, #36	@ 0x24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd90      	pop	{r4, r7, pc}

0800d96e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800d96e:	b590      	push	{r4, r7, lr}
 800d970:	b089      	sub	sp, #36	@ 0x24
 800d972:	af00      	add	r7, sp, #0
 800d974:	60f8      	str	r0, [r7, #12]
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	461a      	mov	r2, r3
 800d97a:	460b      	mov	r3, r1
 800d97c:	72fb      	strb	r3, [r7, #11]
 800d97e:	4613      	mov	r3, r2
 800d980:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d11f      	bne.n	800d9d2 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800d992:	2300      	movs	r3, #0
 800d994:	83fb      	strh	r3, [r7, #30]
 800d996:	e018      	b.n	800d9ca <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	691c      	ldr	r4, [r3, #16]
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	7b1b      	ldrb	r3, [r3, #12]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	7afb      	ldrb	r3, [r7, #11]
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	8bfb      	ldrh	r3, [r7, #30]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	b299      	uxth	r1, r3
 800d9ac:	8bfb      	ldrh	r3, [r7, #30]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	441a      	add	r2, r3
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	47a0      	blx	r4
 800d9b6:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d002      	beq.n	800d9c4 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800d9be:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c2:	e007      	b.n	800d9d4 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800d9c4:	8bfb      	ldrh	r3, [r7, #30]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	83fb      	strh	r3, [r7, #30]
 800d9ca:	8bfa      	ldrh	r2, [r7, #30]
 800d9cc:	893b      	ldrh	r3, [r7, #8]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d3e2      	bcc.n	800d998 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800d9d2:	69bb      	ldr	r3, [r7, #24]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3724      	adds	r7, #36	@ 0x24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd90      	pop	{r4, r7, pc}

0800d9dc <stts22h_read_reg>:
  *
  */
int32_t stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b087      	sub	sp, #28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	607a      	str	r2, [r7, #4]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	72fb      	strb	r3, [r7, #11]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	685c      	ldr	r4, [r3, #4]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6898      	ldr	r0, [r3, #8]
 800d9f8:	893b      	ldrh	r3, [r7, #8]
 800d9fa:	7af9      	ldrb	r1, [r7, #11]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	47a0      	blx	r4
 800da00:	6178      	str	r0, [r7, #20]

  return ret;
 800da02:	697b      	ldr	r3, [r7, #20]
}
 800da04:	4618      	mov	r0, r3
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd90      	pop	{r4, r7, pc}

0800da0c <stts22h_write_reg>:
  *
  */
int32_t stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800da0c:	b590      	push	{r4, r7, lr}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	607a      	str	r2, [r7, #4]
 800da16:	461a      	mov	r2, r3
 800da18:	460b      	mov	r3, r1
 800da1a:	72fb      	strb	r3, [r7, #11]
 800da1c:	4613      	mov	r3, r2
 800da1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681c      	ldr	r4, [r3, #0]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6898      	ldr	r0, [r3, #8]
 800da28:	893b      	ldrh	r3, [r7, #8]
 800da2a:	7af9      	ldrb	r1, [r7, #11]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	47a0      	blx	r4
 800da30:	6178      	str	r0, [r7, #20]

  return ret;
 800da32:	697b      	ldr	r3, [r7, #20]
}
 800da34:	4618      	mov	r0, r3
 800da36:	371c      	adds	r7, #28
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd90      	pop	{r4, r7, pc}

0800da3c <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	4603      	mov	r3, r0
 800da44:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800da46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da4a:	ee07 3a90 	vmov	s15, r3
 800da4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da52:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800da6c <stts22h_from_lsb_to_celsius+0x30>
 800da56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da5a:	eef0 7a66 	vmov.f32	s15, s13
}
 800da5e:	eeb0 0a67 	vmov.f32	s0, s15
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	42c80000 	.word	0x42c80000

0800da70 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	460b      	mov	r3, r1
 800da7a:	70fb      	strb	r3, [r7, #3]
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800da7c:	f107 020c 	add.w	r2, r7, #12
 800da80:	2301      	movs	r3, #1
 800da82:	2104      	movs	r1, #4
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7ff ffa9 	bl	800d9dc <stts22h_read_reg>
 800da8a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d107      	bne.n	800daa2 <stts22h_temp_data_rate_set+0x32>
  {
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
 800da92:	f107 0210 	add.w	r2, r7, #16
 800da96:	2301      	movs	r3, #1
 800da98:	210c      	movs	r1, #12
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff ff9e 	bl	800d9dc <stts22h_read_reg>
 800daa0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 800daa2:	78fb      	ldrb	r3, [r7, #3]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d11d      	bne.n	800dae4 <stts22h_temp_data_rate_set+0x74>
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d11a      	bne.n	800dae4 <stts22h_temp_data_rate_set+0x74>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800daae:	7c3b      	ldrb	r3, [r7, #16]
 800dab0:	f043 0302 	orr.w	r3, r3, #2
 800dab4:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800dab6:	f107 0210 	add.w	r2, r7, #16
 800daba:	2301      	movs	r3, #1
 800dabc:	210c      	movs	r1, #12
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff ffa4 	bl	800da0c <stts22h_write_reg>
 800dac4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10b      	bne.n	800dae4 <stts22h_temp_data_rate_set+0x74>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800dacc:	7c3b      	ldrb	r3, [r7, #16]
 800dace:	f36f 0341 	bfc	r3, #1, #1
 800dad2:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800dad4:	f107 0210 	add.w	r2, r7, #16
 800dad8:	2301      	movs	r3, #1
 800dada:	210c      	movs	r1, #12
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff ff95 	bl	800da0c <stts22h_write_reg>
 800dae2:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d008      	beq.n	800dafc <stts22h_temp_data_rate_set+0x8c>
 800daea:	78fb      	ldrb	r3, [r7, #3]
 800daec:	2b12      	cmp	r3, #18
 800daee:	d005      	beq.n	800dafc <stts22h_temp_data_rate_set+0x8c>
 800daf0:	78fb      	ldrb	r3, [r7, #3]
 800daf2:	2b22      	cmp	r3, #34	@ 0x22
 800daf4:	d002      	beq.n	800dafc <stts22h_temp_data_rate_set+0x8c>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800daf6:	78fb      	ldrb	r3, [r7, #3]
 800daf8:	2b32      	cmp	r3, #50	@ 0x32
 800dafa:	d123      	bne.n	800db44 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 800dafc:	7b3b      	ldrb	r3, [r7, #12]
 800dafe:	f003 0304 	and.w	r3, r3, #4
 800db02:	b2db      	uxtb	r3, r3
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 800db04:	2b00      	cmp	r3, #0
 800db06:	d11d      	bne.n	800db44 <stts22h_temp_data_rate_set+0xd4>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d11a      	bne.n	800db44 <stts22h_temp_data_rate_set+0xd4>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800db0e:	7c3b      	ldrb	r3, [r7, #16]
 800db10:	f043 0302 	orr.w	r3, r3, #2
 800db14:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800db16:	f107 0210 	add.w	r2, r7, #16
 800db1a:	2301      	movs	r3, #1
 800db1c:	210c      	movs	r1, #12
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7ff ff74 	bl	800da0c <stts22h_write_reg>
 800db24:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10b      	bne.n	800db44 <stts22h_temp_data_rate_set+0xd4>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800db2c:	7c3b      	ldrb	r3, [r7, #16]
 800db2e:	f36f 0341 	bfc	r3, #1, #1
 800db32:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800db34:	f107 0210 	add.w	r2, r7, #16
 800db38:	2301      	movs	r3, #1
 800db3a:	210c      	movs	r1, #12
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff ff65 	bl	800da0c <stts22h_write_reg>
 800db42:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 800db44:	78fb      	ldrb	r3, [r7, #3]
 800db46:	2b04      	cmp	r3, #4
 800db48:	d125      	bne.n	800db96 <stts22h_temp_data_rate_set+0x126>
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d122      	bne.n	800db96 <stts22h_temp_data_rate_set+0x126>
  {
    software_reset.sw_reset = PROPERTY_ENABLE;
 800db50:	7c3b      	ldrb	r3, [r7, #16]
 800db52:	f043 0302 	orr.w	r3, r3, #2
 800db56:	743b      	strb	r3, [r7, #16]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 800db58:	7c3b      	ldrb	r3, [r7, #16]
 800db5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db5e:	743b      	strb	r3, [r7, #16]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800db60:	f107 0210 	add.w	r2, r7, #16
 800db64:	2301      	movs	r3, #1
 800db66:	210c      	movs	r1, #12
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ff4f 	bl	800da0c <stts22h_write_reg>
 800db6e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&software_reset, 1);

    if (ret == 0)
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10f      	bne.n	800db96 <stts22h_temp_data_rate_set+0x126>
    {
      software_reset.sw_reset = PROPERTY_DISABLE;
 800db76:	7c3b      	ldrb	r3, [r7, #16]
 800db78:	f36f 0341 	bfc	r3, #1, #1
 800db7c:	743b      	strb	r3, [r7, #16]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 800db7e:	7c3b      	ldrb	r3, [r7, #16]
 800db80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db84:	743b      	strb	r3, [r7, #16]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800db86:	f107 0210 	add.w	r2, r7, #16
 800db8a:	2301      	movs	r3, #1
 800db8c:	210c      	movs	r1, #12
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff ff3c 	bl	800da0c <stts22h_write_reg>
 800db94:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d12a      	bne.n	800dbf2 <stts22h_temp_data_rate_set+0x182>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800db9c:	78fb      	ldrb	r3, [r7, #3]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	7b3b      	ldrb	r3, [r7, #12]
 800dba6:	f362 0300 	bfi	r3, r2, #0, #1
 800dbaa:	733b      	strb	r3, [r7, #12]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800dbac:	78fb      	ldrb	r3, [r7, #3]
 800dbae:	085b      	lsrs	r3, r3, #1
 800dbb0:	f003 0301 	and.w	r3, r3, #1
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	7b3b      	ldrb	r3, [r7, #12]
 800dbb8:	f362 0382 	bfi	r3, r2, #2, #1
 800dbbc:	733b      	strb	r3, [r7, #12]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800dbbe:	78fb      	ldrb	r3, [r7, #3]
 800dbc0:	089b      	lsrs	r3, r3, #2
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	7b3b      	ldrb	r3, [r7, #12]
 800dbca:	f362 13c7 	bfi	r3, r2, #7, #1
 800dbce:	733b      	strb	r3, [r7, #12]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800dbd0:	78fb      	ldrb	r3, [r7, #3]
 800dbd2:	091b      	lsrs	r3, r3, #4
 800dbd4:	f003 0303 	and.w	r3, r3, #3
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	7b3b      	ldrb	r3, [r7, #12]
 800dbdc:	f362 1305 	bfi	r3, r2, #4, #2
 800dbe0:	733b      	strb	r3, [r7, #12]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800dbe2:	f107 020c 	add.w	r2, r7, #12
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	2104      	movs	r1, #4
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff ff0e 	bl	800da0c <stts22h_write_reg>
 800dbf0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800dbf2:	697b      	ldr	r3, [r7, #20]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3718      	adds	r7, #24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800dc06:	f107 0208 	add.w	r2, r7, #8
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	2104      	movs	r1, #4
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff fee4 	bl	800d9dc <stts22h_read_reg>
 800dc14:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800dc16:	7a3b      	ldrb	r3, [r7, #8]
 800dc18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	461a      	mov	r2, r3
 800dc20:	7a3b      	ldrb	r3, [r7, #8]
 800dc22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	431a      	orrs	r2, r3
 800dc2c:	7a3b      	ldrb	r3, [r7, #8]
 800dc2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800dc38:	7a3b      	ldrb	r3, [r7, #8]
 800dc3a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	011b      	lsls	r3, r3, #4
                                                 2) |
 800dc42:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800dc44:	2b32      	cmp	r3, #50	@ 0x32
 800dc46:	f200 8085 	bhi.w	800dd54 <stts22h_temp_data_rate_get+0x158>
 800dc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc50 <stts22h_temp_data_rate_get+0x54>)
 800dc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc50:	0800dd1d 	.word	0x0800dd1d
 800dc54:	0800dd25 	.word	0x0800dd25
 800dc58:	0800dd35 	.word	0x0800dd35
 800dc5c:	0800dd55 	.word	0x0800dd55
 800dc60:	0800dd2d 	.word	0x0800dd2d
 800dc64:	0800dd55 	.word	0x0800dd55
 800dc68:	0800dd55 	.word	0x0800dd55
 800dc6c:	0800dd55 	.word	0x0800dd55
 800dc70:	0800dd55 	.word	0x0800dd55
 800dc74:	0800dd55 	.word	0x0800dd55
 800dc78:	0800dd55 	.word	0x0800dd55
 800dc7c:	0800dd55 	.word	0x0800dd55
 800dc80:	0800dd55 	.word	0x0800dd55
 800dc84:	0800dd55 	.word	0x0800dd55
 800dc88:	0800dd55 	.word	0x0800dd55
 800dc8c:	0800dd55 	.word	0x0800dd55
 800dc90:	0800dd55 	.word	0x0800dd55
 800dc94:	0800dd55 	.word	0x0800dd55
 800dc98:	0800dd3d 	.word	0x0800dd3d
 800dc9c:	0800dd55 	.word	0x0800dd55
 800dca0:	0800dd55 	.word	0x0800dd55
 800dca4:	0800dd55 	.word	0x0800dd55
 800dca8:	0800dd55 	.word	0x0800dd55
 800dcac:	0800dd55 	.word	0x0800dd55
 800dcb0:	0800dd55 	.word	0x0800dd55
 800dcb4:	0800dd55 	.word	0x0800dd55
 800dcb8:	0800dd55 	.word	0x0800dd55
 800dcbc:	0800dd55 	.word	0x0800dd55
 800dcc0:	0800dd55 	.word	0x0800dd55
 800dcc4:	0800dd55 	.word	0x0800dd55
 800dcc8:	0800dd55 	.word	0x0800dd55
 800dccc:	0800dd55 	.word	0x0800dd55
 800dcd0:	0800dd55 	.word	0x0800dd55
 800dcd4:	0800dd55 	.word	0x0800dd55
 800dcd8:	0800dd45 	.word	0x0800dd45
 800dcdc:	0800dd55 	.word	0x0800dd55
 800dce0:	0800dd55 	.word	0x0800dd55
 800dce4:	0800dd55 	.word	0x0800dd55
 800dce8:	0800dd55 	.word	0x0800dd55
 800dcec:	0800dd55 	.word	0x0800dd55
 800dcf0:	0800dd55 	.word	0x0800dd55
 800dcf4:	0800dd55 	.word	0x0800dd55
 800dcf8:	0800dd55 	.word	0x0800dd55
 800dcfc:	0800dd55 	.word	0x0800dd55
 800dd00:	0800dd55 	.word	0x0800dd55
 800dd04:	0800dd55 	.word	0x0800dd55
 800dd08:	0800dd55 	.word	0x0800dd55
 800dd0c:	0800dd55 	.word	0x0800dd55
 800dd10:	0800dd55 	.word	0x0800dd55
 800dd14:	0800dd55 	.word	0x0800dd55
 800dd18:	0800dd4d 	.word	0x0800dd4d
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	701a      	strb	r2, [r3, #0]
      break;
 800dd22:	e01b      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2201      	movs	r2, #1
 800dd28:	701a      	strb	r2, [r3, #0]
      break;
 800dd2a:	e017      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2204      	movs	r2, #4
 800dd30:	701a      	strb	r2, [r3, #0]
      break;
 800dd32:	e013      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	2202      	movs	r2, #2
 800dd38:	701a      	strb	r2, [r3, #0]
      break;
 800dd3a:	e00f      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	2212      	movs	r2, #18
 800dd40:	701a      	strb	r2, [r3, #0]
      break;
 800dd42:	e00b      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2222      	movs	r2, #34	@ 0x22
 800dd48:	701a      	strb	r2, [r3, #0]
      break;
 800dd4a:	e007      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2232      	movs	r2, #50	@ 0x32
 800dd50:	701a      	strb	r2, [r3, #0]
      break;
 800dd52:	e003      	b.n	800dd5c <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2200      	movs	r2, #0
 800dd58:	701a      	strb	r2, [r3, #0]
      break;
 800dd5a:	bf00      	nop
  }

  return ret;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop

0800dd68 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800dd74:	f107 0208 	add.w	r2, r7, #8
 800dd78:	2301      	movs	r3, #1
 800dd7a:	2104      	movs	r1, #4
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7ff fe2d 	bl	800d9dc <stts22h_read_reg>
 800dd82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10f      	bne.n	800ddaa <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800dd8a:	78fb      	ldrb	r3, [r7, #3]
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	7a3b      	ldrb	r3, [r7, #8]
 800dd94:	f362 1386 	bfi	r3, r2, #6, #1
 800dd98:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800dd9a:	f107 0208 	add.w	r2, r7, #8
 800dd9e:	2301      	movs	r3, #1
 800dda0:	2104      	movs	r1, #4
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff fe32 	bl	800da0c <stts22h_write_reg>
 800dda8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800ddbe:	f107 0208 	add.w	r2, r7, #8
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	2106      	movs	r1, #6
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fe08 	bl	800d9dc <stts22h_read_reg>
 800ddcc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ddce:	7a7b      	ldrb	r3, [r7, #9]
 800ddd0:	b21a      	sxth	r2, r3
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	021b      	lsls	r3, r3, #8
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	7a3a      	ldrb	r2, [r7, #8]
 800dde4:	4413      	add	r3, r2
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	b21a      	sxth	r2, r3
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	801a      	strh	r2, [r3, #0]

  return ret;
 800ddee:	68fb      	ldr	r3, [r7, #12]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800de02:	2301      	movs	r3, #1
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	2101      	movs	r1, #1
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff fde7 	bl	800d9dc <stts22h_read_reg>
 800de0e:	60f8      	str	r0, [r7, #12]

  return ret;
 800de10:	68fb      	ldr	r3, [r7, #12]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800de26:	f107 0208 	add.w	r2, r7, #8
 800de2a:	2301      	movs	r3, #1
 800de2c:	2104      	movs	r1, #4
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff fdd4 	bl	800d9dc <stts22h_read_reg>
 800de34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10f      	bne.n	800de5c <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800de3c:	78fb      	ldrb	r3, [r7, #3]
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	b2da      	uxtb	r2, r3
 800de44:	7a3b      	ldrb	r3, [r7, #8]
 800de46:	f362 03c3 	bfi	r3, r2, #3, #1
 800de4a:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800de4c:	f107 0208 	add.w	r2, r7, #8
 800de50:	2301      	movs	r3, #1
 800de52:	2104      	movs	r1, #4
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7ff fdd9 	bl	800da0c <stts22h_write_reg>
 800de5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800de5c:	68fb      	ldr	r3, [r7, #12]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <LL_AHB2_GRP1_EnableClock>:
{
 800de66:	b480      	push	{r7}
 800de68:	b085      	sub	sp, #20
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800de6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800de7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4013      	ands	r3, r2
 800de88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800de8a:	68fb      	ldr	r3, [r7, #12]
}
 800de8c:	bf00      	nop
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <LL_APB2_GRP1_EnableClock>:
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800dea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800dea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4313      	orrs	r3, r2
 800deae:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800deb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4013      	ands	r3, r2
 800deba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800debc:	68fb      	ldr	r3, [r7, #12]
}
 800debe:	bf00      	nop
 800dec0:	3714      	adds	r7, #20
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <LL_APB2_GRP1_DisableClock>:
{
 800deca:	b480      	push	{r7}
 800decc:	b083      	sub	sp, #12
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800ded2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ded6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	43db      	mvns	r3, r3
 800dedc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dee0:	4013      	ands	r3, r2
 800dee2:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800dee4:	bf00      	nop
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <BSP_PWM_LED_Init>:
/**
  * @brief  Configure PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Init(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800def6:	2300      	movs	r3, #0
 800def8:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef  gpio_config = {0};
 800defa:	463b      	mov	r3, r7
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	605a      	str	r2, [r3, #4]
 800df02:	609a      	str	r2, [r3, #8]
 800df04:	60da      	str	r2, [r3, #12]
 800df06:	611a      	str	r2, [r3, #16]
  
  PWM_LED_SDI_GPIO_CLK_ENABLE();
 800df08:	2001      	movs	r0, #1
 800df0a:	f7ff ffac 	bl	800de66 <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SDI_GPIO_PIN;
 800df0e:	2380      	movs	r3, #128	@ 0x80
 800df10:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 800df12:	2301      	movs	r3, #1
 800df14:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 800df16:	2302      	movs	r3, #2
 800df18:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SDI_GPIO_PORT, &gpio_config);
 800df1a:	463b      	mov	r3, r7
 800df1c:	4619      	mov	r1, r3
 800df1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800df22:	f002 fe3b 	bl	8010b9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800df26:	2200      	movs	r2, #0
 800df28:	2180      	movs	r1, #128	@ 0x80
 800df2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800df2e:	f003 f883 	bl	8011038 <HAL_GPIO_WritePin>
  
  PWM_LED_SELECT_GPIO_CLK_ENABLE();
 800df32:	2080      	movs	r0, #128	@ 0x80
 800df34:	f7ff ff97 	bl	800de66 <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SELECT_GPIO_PIN;
 800df38:	2302      	movs	r3, #2
 800df3a:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 800df3c:	2301      	movs	r3, #1
 800df3e:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 800df40:	2302      	movs	r3, #2
 800df42:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SELECT_GPIO_PORT, &gpio_config);
 800df44:	463b      	mov	r3, r7
 800df46:	4619      	mov	r1, r3
 800df48:	4814      	ldr	r0, [pc, #80]	@ (800df9c <BSP_PWM_LED_Init+0xac>)
 800df4a:	f002 fe27 	bl	8010b9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800df4e:	2200      	movs	r2, #0
 800df50:	2102      	movs	r1, #2
 800df52:	4812      	ldr	r0, [pc, #72]	@ (800df9c <BSP_PWM_LED_Init+0xac>)
 800df54:	f003 f870 	bl	8011038 <HAL_GPIO_WritePin>

  PwmLed_TimerHandle.Instance = PWM_LED_TIM;
 800df58:	4b11      	ldr	r3, [pc, #68]	@ (800dfa0 <BSP_PWM_LED_Init+0xb0>)
 800df5a:	4a12      	ldr	r2, [pc, #72]	@ (800dfa4 <BSP_PWM_LED_Init+0xb4>)
 800df5c:	601a      	str	r2, [r3, #0]
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* TIM17 MSP initialization */
    TIM17_MspInit(&PwmLed_TimerHandle);
 800df5e:	4810      	ldr	r0, [pc, #64]	@ (800dfa0 <BSP_PWM_LED_Init+0xb0>)
 800df60:	f000 fa2e 	bl	800e3c0 <TIM17_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
      
  PwmLed_TimerHandle.Init.Prescaler = (PWM_LED_TIM_GET_COUNTER_CLK_FREQ()/1000000) -1;
 800df64:	f005 fb3a 	bl	80135dc <HAL_RCC_GetPCLK2Freq>
 800df68:	4603      	mov	r3, r0
 800df6a:	4a0f      	ldr	r2, [pc, #60]	@ (800dfa8 <BSP_PWM_LED_Init+0xb8>)
 800df6c:	fba2 2303 	umull	r2, r3, r2, r3
 800df70:	0c9b      	lsrs	r3, r3, #18
 800df72:	3b01      	subs	r3, #1
 800df74:	4a0a      	ldr	r2, [pc, #40]	@ (800dfa0 <BSP_PWM_LED_Init+0xb0>)
 800df76:	6053      	str	r3, [r2, #4]
  PwmLed_TimerHandle.Init.Period = (PWM_LED_TIM_COUNTER_FREQ/PWM_LED_TIM_FREQ) - 1;
 800df78:	4b09      	ldr	r3, [pc, #36]	@ (800dfa0 <BSP_PWM_LED_Init+0xb0>)
 800df7a:	2204      	movs	r2, #4
 800df7c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&PwmLed_TimerHandle) != HAL_OK) 
 800df7e:	4808      	ldr	r0, [pc, #32]	@ (800dfa0 <BSP_PWM_LED_Init+0xb0>)
 800df80:	f007 fe80 	bl	8015c84 <HAL_TIM_Base_Init>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <BSP_PWM_LED_Init+0xa0>
  {
    ret = BSP_ERROR_NO_INIT;
 800df8a:	f04f 33ff 	mov.w	r3, #4294967295
 800df8e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800df90:	697b      	ldr	r3, [r7, #20]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3718      	adds	r7, #24
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	48001c00 	.word	0x48001c00
 800dfa0:	20001040 	.word	0x20001040
 800dfa4:	40014800 	.word	0x40014800
 800dfa8:	431bde83 	.word	0x431bde83

0800dfac <BSP_PWM_LED_DeInit>:
/**
  * @brief  DeInitialize PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_DeInit(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	607b      	str	r3, [r7, #4]

  HAL_GPIO_DeInit(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN);
 800dfb6:	2102      	movs	r1, #2
 800dfb8:	4810      	ldr	r0, [pc, #64]	@ (800dffc <BSP_PWM_LED_DeInit+0x50>)
 800dfba:	f002 ff5f 	bl	8010e7c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN);
 800dfbe:	2180      	movs	r1, #128	@ 0x80
 800dfc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dfc4:	f002 ff5a 	bl	8010e7c <HAL_GPIO_DeInit>
  __HAL_TIM_DISABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800dfc8:	4b0d      	ldr	r3, [pc, #52]	@ (800e000 <BSP_PWM_LED_DeInit+0x54>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	4b0c      	ldr	r3, [pc, #48]	@ (800e000 <BSP_PWM_LED_DeInit+0x54>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0201 	bic.w	r2, r2, #1
 800dfd6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_DeInit(&PwmLed_TimerHandle) != HAL_OK)
 800dfd8:	4809      	ldr	r0, [pc, #36]	@ (800e000 <BSP_PWM_LED_DeInit+0x54>)
 800dfda:	f007 ff22 	bl	8015e22 <HAL_TIM_PWM_DeInit>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <BSP_PWM_LED_DeInit+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800dfe4:	f06f 0305 	mvn.w	r3, #5
 800dfe8:	607b      	str	r3, [r7, #4]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
#else
    /* TIM17 MSP de-initialization */
    TIM17_MspDeInit(&PwmLed_TimerHandle);
 800dfea:	4805      	ldr	r0, [pc, #20]	@ (800e000 <BSP_PWM_LED_DeInit+0x54>)
 800dfec:	f000 fa04 	bl	800e3f8 <TIM17_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
#if (PA7_AUTO_MANAGEMENT == 1)
    BSP_PWM_LED_Pin_AutoManagement();
#endif /* PA7_AUTO_MANAGEMENT == 1*/
  
  return ret;
 800dff0:	687b      	ldr	r3, [r7, #4]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	48001c00 	.word	0x48001c00
 800e000:	20001040 	.word	0x20001040

0800e004 <BSP_PWM_LED_On>:
  * @brief  Set the GS data (PWM Control) for each output.
  * @param  aPwmLedGsData GS Data array (one element per output)
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_On(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  return PWM_LED_WriteData(aPwmLedGsData);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 f8cb 	bl	800e1a8 <PWM_LED_WriteData>
 800e012:	4603      	mov	r3, r0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <BSP_PWM_LED_Off>:
/**
  * @brief  Turn each output Off.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Off(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
  aPwmLedGsData_TypeDef aPwmLedGsData = {PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF};
 800e022:	4a08      	ldr	r2, [pc, #32]	@ (800e044 <BSP_PWM_LED_Off+0x28>)
 800e024:	1d3b      	adds	r3, r7, #4
 800e026:	6812      	ldr	r2, [r2, #0]
 800e028:	4611      	mov	r1, r2
 800e02a:	8019      	strh	r1, [r3, #0]
 800e02c:	3302      	adds	r3, #2
 800e02e:	0c12      	lsrs	r2, r2, #16
 800e030:	701a      	strb	r2, [r3, #0]
  return PWM_LED_WriteData(aPwmLedGsData);
 800e032:	1d3b      	adds	r3, r7, #4
 800e034:	4618      	mov	r0, r3
 800e036:	f000 f8b7 	bl	800e1a8 <PWM_LED_WriteData>
 800e03a:	4603      	mov	r3, r0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	0802045c 	.word	0x0802045c

0800e048 <BSP_PWM_LED_IRQHandler>:
/**
  * @brief  BSP PWM LED interrupt handler.
  * @retval None
  */
void BSP_PWM_LED_IRQHandler(void)
{
 800e048:	b480      	push	{r7}
 800e04a:	af00      	add	r7, sp, #0
  __HAL_TIM_CLEAR_FLAG(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800e04c:	4b07      	ldr	r3, [pc, #28]	@ (800e06c <BSP_PWM_LED_IRQHandler+0x24>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f06f 0201 	mvn.w	r2, #1
 800e054:	611a      	str	r2, [r3, #16]
  CycleCount++;
 800e056:	4b06      	ldr	r3, [pc, #24]	@ (800e070 <BSP_PWM_LED_IRQHandler+0x28>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	3301      	adds	r3, #1
 800e05c:	4a04      	ldr	r2, [pc, #16]	@ (800e070 <BSP_PWM_LED_IRQHandler+0x28>)
 800e05e:	6013      	str	r3, [r2, #0]
}
 800e060:	bf00      	nop
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	20001040 	.word	0x20001040
 800e070:	2000108c 	.word	0x2000108c

0800e074 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	460a      	mov	r2, r1
 800e07e:	71fb      	strb	r3, [r7, #7]
 800e080:	4613      	mov	r3, r2
 800e082:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 800e084:	f107 030c 	add.w	r3, r7, #12
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]
 800e08c:	605a      	str	r2, [r3, #4]
 800e08e:	609a      	str	r2, [r3, #8]
 800e090:	60da      	str	r2, [r3, #12]
 800e092:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_USER1_EXTI_Callback, BUTTON_USER2_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USERx_IT_PRIORITY, BSP_BUTTON_USERx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_USER1_EXTI_LINE, BUTTON_USER2_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTON_USERx_GPIO_CLK_ENABLE(Button);
 800e094:	79fb      	ldrb	r3, [r7, #7]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d103      	bne.n	800e0a2 <BSP_PB_Init+0x2e>
 800e09a:	2004      	movs	r0, #4
 800e09c:	f7ff fee3 	bl	800de66 <LL_AHB2_GRP1_EnableClock>
 800e0a0:	e005      	b.n	800e0ae <BSP_PB_Init+0x3a>
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d102      	bne.n	800e0ae <BSP_PB_Init+0x3a>
 800e0a8:	2004      	movs	r0, #4
 800e0aa:	f7ff fedc 	bl	800de66 <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	4a29      	ldr	r2, [pc, #164]	@ (800e158 <BSP_PB_Init+0xe4>)
 800e0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800e0bc:	2302      	movs	r3, #2
 800e0be:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800e0c0:	79bb      	ldrb	r3, [r7, #6]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d10c      	bne.n	800e0e0 <BSP_PB_Init+0x6c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e0ca:	79fb      	ldrb	r3, [r7, #7]
 800e0cc:	4a23      	ldr	r2, [pc, #140]	@ (800e15c <BSP_PB_Init+0xe8>)
 800e0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0d2:	f107 020c 	add.w	r2, r7, #12
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f002 fd5f 	bl	8010b9c <HAL_GPIO_Init>
 800e0de:	e035      	b.n	800e14c <BSP_PB_Init+0xd8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800e0e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800e0e4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	4a1c      	ldr	r2, [pc, #112]	@ (800e15c <BSP_PB_Init+0xe8>)
 800e0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ee:	f107 020c 	add.w	r2, r7, #12
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f002 fd51 	bl	8010b9c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
 800e0fc:	00db      	lsls	r3, r3, #3
 800e0fe:	4a18      	ldr	r2, [pc, #96]	@ (800e160 <BSP_PB_Init+0xec>)
 800e100:	441a      	add	r2, r3
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	4917      	ldr	r1, [pc, #92]	@ (800e164 <BSP_PB_Init+0xf0>)
 800e106:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e10a:	4619      	mov	r1, r3
 800e10c:	4610      	mov	r0, r2
 800e10e:	f002 fd0f 	bl	8010b30 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	00db      	lsls	r3, r3, #3
 800e116:	4a12      	ldr	r2, [pc, #72]	@ (800e160 <BSP_PB_Init+0xec>)
 800e118:	1898      	adds	r0, r3, r2
 800e11a:	79fb      	ldrb	r3, [r7, #7]
 800e11c:	4a12      	ldr	r2, [pc, #72]	@ (800e168 <BSP_PB_Init+0xf4>)
 800e11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e122:	461a      	mov	r2, r3
 800e124:	2100      	movs	r1, #0
 800e126:	f002 fce9 	bl	8010afc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	4a0f      	ldr	r2, [pc, #60]	@ (800e16c <BSP_PB_Init+0xf8>)
 800e12e:	56d0      	ldrsb	r0, [r2, r3]
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	4a0f      	ldr	r2, [pc, #60]	@ (800e170 <BSP_PB_Init+0xfc>)
 800e134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e138:	2200      	movs	r2, #0
 800e13a:	4619      	mov	r1, r3
 800e13c:	f002 f94d 	bl	80103da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800e140:	79fb      	ldrb	r3, [r7, #7]
 800e142:	4a0a      	ldr	r2, [pc, #40]	@ (800e16c <BSP_PB_Init+0xf8>)
 800e144:	56d3      	ldrsb	r3, [r2, r3]
 800e146:	4618      	mov	r0, r3
 800e148:	f002 f961 	bl	801040e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	080205ec 	.word	0x080205ec
 800e15c:	20000540 	.word	0x20000540
 800e160:	20001030 	.word	0x20001030
 800e164:	080205f4 	.word	0x080205f4
 800e168:	20000548 	.word	0x20000548
 800e16c:	080205f0 	.word	0x080205f0
 800e170:	20000550 	.word	0x20000550

0800e174 <BSP_PB_Callback>:
  *           @arg BUTTON_SW1
  *           @arg BUTTON_SW2
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	4603      	mov	r3, r0
 800e17c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800e17e:	bf00      	nop
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <BUTTON_USER1_EXTI_Callback>:
/**
  * @brief  BUTTON1 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER1_EXTI_Callback(void)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER1);
 800e18e:	2000      	movs	r0, #0
 800e190:	f7ff fff0 	bl	800e174 <BSP_PB_Callback>
}
 800e194:	bf00      	nop
 800e196:	bd80      	pop	{r7, pc}

0800e198 <BUTTON_USER2_EXTI_Callback>:
/**
  * @brief  BUTTON2 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER2_EXTI_Callback(void)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER2);
 800e19c:	2001      	movs	r0, #1
 800e19e:	f7ff ffe9 	bl	800e174 <BSP_PB_Callback>
}
 800e1a2:	bf00      	nop
 800e1a4:	bd80      	pop	{r7, pc}
	...

0800e1a8 <PWM_LED_WriteData>:
  * @brief  Write GS data into the PWM LED driver through a single-wire interface
  * @param  aPwmLedGsData GS (Gray Scale) data
  * @retval BSP status
  */
static int32_t PWM_LED_WriteData(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  if (aPwmLedGsData == NULL)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d102      	bne.n	800e1bc <PWM_LED_WriteData+0x14>
  {
    return BSP_ERROR_WRONG_PARAM;
 800e1b6:	f06f 0301 	mvn.w	r3, #1
 800e1ba:	e069      	b.n	800e290 <PWM_LED_WriteData+0xe8>
  }
  
  __HAL_TIM_ENABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800e1bc:	4b36      	ldr	r3, [pc, #216]	@ (800e298 <PWM_LED_WriteData+0xf0>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	4b35      	ldr	r3, [pc, #212]	@ (800e298 <PWM_LED_WriteData+0xf0>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f042 0201 	orr.w	r2, r2, #1
 800e1ca:	60da      	str	r2, [r3, #12]
  
  /* Start time base */
  if (HAL_TIM_Base_Start(&PwmLed_TimerHandle) != HAL_OK)
 800e1cc:	4832      	ldr	r0, [pc, #200]	@ (800e298 <PWM_LED_WriteData+0xf0>)
 800e1ce:	f007 fdbb 	bl	8015d48 <HAL_TIM_Base_Start>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <PWM_LED_WriteData+0x36>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 800e1d8:	f06f 0305 	mvn.w	r3, #5
 800e1dc:	e058      	b.n	800e290 <PWM_LED_WriteData+0xe8>
  }
  
  /* Enable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800e1de:	2200      	movs	r2, #0
 800e1e0:	2102      	movs	r1, #2
 800e1e2:	482e      	ldr	r0, [pc, #184]	@ (800e29c <PWM_LED_WriteData+0xf4>)
 800e1e4:	f002 ff28 	bl	8011038 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800e1e8:	200a      	movs	r0, #10
 800e1ea:	f7f3 fb05 	bl	80017f8 <HAL_Delay>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_SET);
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	2102      	movs	r1, #2
 800e1f2:	482a      	ldr	r0, [pc, #168]	@ (800e29c <PWM_LED_WriteData+0xf4>)
 800e1f4:	f002 ff20 	bl	8011038 <HAL_GPIO_WritePin>
  
  /* TCycle measurement sequence */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	2180      	movs	r1, #128	@ 0x80
 800e1fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e200:	f002 ff1a 	bl	8011038 <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800e204:	2001      	movs	r0, #1
 800e206:	f000 f8c3 	bl	800e390 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800e20a:	2201      	movs	r2, #1
 800e20c:	2180      	movs	r1, #128	@ 0x80
 800e20e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e212:	f002 ff11 	bl	8011038 <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 800e216:	2004      	movs	r0, #4
 800e218:	f000 f8ba 	bl	800e390 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800e21c:	2200      	movs	r2, #0
 800e21e:	2180      	movs	r1, #128	@ 0x80
 800e220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e224:	f002 ff08 	bl	8011038 <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800e228:	2001      	movs	r0, #1
 800e22a:	f000 f8b1 	bl	800e390 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800e22e:	2201      	movs	r2, #1
 800e230:	2180      	movs	r1, #128	@ 0x80
 800e232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e236:	f002 feff 	bl	8011038 <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 800e23a:	2004      	movs	r0, #4
 800e23c:	f000 f8a8 	bl	800e390 <PWM_LED_Wait>
  
  /* Write command */
  PWM_LED_SenByte(WRITE_COMMAND);
 800e240:	203a      	movs	r0, #58	@ 0x3a
 800e242:	f000 f863 	bl	800e30c <PWM_LED_SenByte>
  
  /* Write the GS data */
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 800e246:	2300      	movs	r3, #0
 800e248:	73fb      	strb	r3, [r7, #15]
 800e24a:	e00f      	b.n	800e26c <PWM_LED_WriteData+0xc4>
  {
    PWM_LED_GSDATA[gsdata] = aPwmLedGsData[gsdata];
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	441a      	add	r2, r3
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	7811      	ldrb	r1, [r2, #0]
 800e256:	4a12      	ldr	r2, [pc, #72]	@ (800e2a0 <PWM_LED_WriteData+0xf8>)
 800e258:	54d1      	strb	r1, [r2, r3]
    PWM_LED_SenByte(PWM_LED_GSDATA[gsdata]);
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
 800e25c:	4a10      	ldr	r2, [pc, #64]	@ (800e2a0 <PWM_LED_WriteData+0xf8>)
 800e25e:	5cd3      	ldrb	r3, [r2, r3]
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f853 	bl	800e30c <PWM_LED_SenByte>
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	3301      	adds	r3, #1
 800e26a:	73fb      	strb	r3, [r7, #15]
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d9ec      	bls.n	800e24c <PWM_LED_WriteData+0xa4>
  }
  
  /* Disable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800e272:	2200      	movs	r2, #0
 800e274:	2102      	movs	r1, #2
 800e276:	4809      	ldr	r0, [pc, #36]	@ (800e29c <PWM_LED_WriteData+0xf4>)
 800e278:	f002 fede 	bl	8011038 <HAL_GPIO_WritePin>
  
  /* Stop time base */
  if (HAL_TIM_Base_Stop(&PwmLed_TimerHandle) != HAL_OK)
 800e27c:	4806      	ldr	r0, [pc, #24]	@ (800e298 <PWM_LED_WriteData+0xf0>)
 800e27e:	f007 fda9 	bl	8015dd4 <HAL_TIM_Base_Stop>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <PWM_LED_WriteData+0xe6>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 800e288:	f06f 0305 	mvn.w	r3, #5
 800e28c:	e000      	b.n	800e290 <PWM_LED_WriteData+0xe8>
  }

  return BSP_ERROR_NONE;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20001040 	.word	0x20001040
 800e29c:	48001c00 	.word	0x48001c00
 800e2a0:	20001090 	.word	0x20001090

0800e2a4 <PWM_LED_SendBit>:
  * @brief  Data 0/1 write sequence
  * @param  bit
  * @retval None
  */
static void PWM_LED_SendBit(uint8_t bit)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	71fb      	strb	r3, [r7, #7]
  /* Start next cycle */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	2180      	movs	r1, #128	@ 0x80
 800e2b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e2b6:	f002 febf 	bl	8011038 <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY); 
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	f000 f868 	bl	800e390 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2180      	movs	r1, #128	@ 0x80
 800e2c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e2c8:	f002 feb6 	bl	8011038 <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800e2cc:	2001      	movs	r0, #1
 800e2ce:	f000 f85f 	bl	800e390 <PWM_LED_Wait>
  
  if (bit)
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d012      	beq.n	800e2fe <PWM_LED_SendBit+0x5a>
  {
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800e2d8:	2201      	movs	r2, #1
 800e2da:	2180      	movs	r1, #128	@ 0x80
 800e2dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e2e0:	f002 feaa 	bl	8011038 <HAL_GPIO_WritePin>
    PWM_LED_Wait(DELAY);
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	f000 f853 	bl	800e390 <PWM_LED_Wait>
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	2180      	movs	r1, #128	@ 0x80
 800e2ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e2f2:	f002 fea1 	bl	8011038 <HAL_GPIO_WritePin>
    PWM_LED_Wait(T_CYCLE_1);
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	f000 f84a 	bl	800e390 <PWM_LED_Wait>
  }
  else
  {
    PWM_LED_Wait(T_CYCLE_0);
  }
}
 800e2fc:	e002      	b.n	800e304 <PWM_LED_SendBit+0x60>
    PWM_LED_Wait(T_CYCLE_0);
 800e2fe:	2004      	movs	r0, #4
 800e300:	f000 f846 	bl	800e390 <PWM_LED_Wait>
}
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <PWM_LED_SenByte>:
  * @brief  Byte write Sequence
  * @param  byte
  * @retval None
  */
static void PWM_LED_SenByte(uint8_t byte)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	71fb      	strb	r3, [r7, #7]
    PWM_LED_SendBit(byte & (1<<7));
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff ffc0 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<6));
 800e324:	79fb      	ldrb	r3, [r7, #7]
 800e326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7ff ffb9 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<5));
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	f003 0320 	and.w	r3, r3, #32
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff ffb2 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<4));
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	f003 0310 	and.w	r3, r3, #16
 800e346:	b2db      	uxtb	r3, r3
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff ffab 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<3));
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	f003 0308 	and.w	r3, r3, #8
 800e354:	b2db      	uxtb	r3, r3
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff ffa4 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<2));
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	f003 0304 	and.w	r3, r3, #4
 800e362:	b2db      	uxtb	r3, r3
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff ff9d 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<1));
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	f003 0302 	and.w	r3, r3, #2
 800e370:	b2db      	uxtb	r3, r3
 800e372:	4618      	mov	r0, r3
 800e374:	f7ff ff96 	bl	800e2a4 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<0));
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	f003 0301 	and.w	r3, r3, #1
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff ff8f 	bl	800e2a4 <PWM_LED_SendBit>
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <PWM_LED_Wait>:
  * @brief  Byte write Sequence
  * @param  NbCycles Number of cycles to wait for
  * @retval None
  */
static void PWM_LED_Wait(uint32_t NbCycles)
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  uint32_t start = CycleCount;
 800e398:	4b08      	ldr	r3, [pc, #32]	@ (800e3bc <PWM_LED_Wait+0x2c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	60fb      	str	r3, [r7, #12]
  
  while ((CycleCount - start) < NbCycles)
 800e39e:	bf00      	nop
 800e3a0:	4b06      	ldr	r3, [pc, #24]	@ (800e3bc <PWM_LED_Wait+0x2c>)
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d8f8      	bhi.n	800e3a0 <PWM_LED_Wait+0x10>
  {
  }
}
 800e3ae:	bf00      	nop
 800e3b0:	bf00      	nop
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	2000108c 	.word	0x2000108c

0800e3c0 <TIM17_MspInit>:
  * @brief  Timer MSP initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspInit(TIM_HandleTypeDef *htim)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a09      	ldr	r2, [pc, #36]	@ (800e3f4 <TIM17_MspInit+0x34>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d10b      	bne.n	800e3ea <TIM17_MspInit+0x2a>
  {
    PWM_LED_TIM_CLOCK_ENABLE();
 800e3d2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e3d6:	f7ff fd5f 	bl	800de98 <LL_APB2_GRP1_EnableClock>
    
    HAL_NVIC_SetPriority(PWM_LED_TIM_UP_IRQN, PWM_LED_CLOCK_IT_PRIORITY, 0);
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2103      	movs	r1, #3
 800e3de:	201a      	movs	r0, #26
 800e3e0:	f001 fffb 	bl	80103da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PWM_LED_TIM_UP_IRQN);
 800e3e4:	201a      	movs	r0, #26
 800e3e6:	f002 f812 	bl	801040e <HAL_NVIC_EnableIRQ>
  }
}
 800e3ea:	bf00      	nop
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	40014800 	.word	0x40014800

0800e3f8 <TIM17_MspDeInit>:
  * @brief  Timer MSP de-initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspDeInit(TIM_HandleTypeDef *htim)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a06      	ldr	r2, [pc, #24]	@ (800e420 <TIM17_MspDeInit+0x28>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d106      	bne.n	800e418 <TIM17_MspDeInit+0x20>
  {
    HAL_NVIC_DisableIRQ(PWM_LED_TIM_UP_IRQN);
 800e40a:	201a      	movs	r0, #26
 800e40c:	f002 f80d 	bl	801042a <HAL_NVIC_DisableIRQ>
    PWM_LED_TIM_CLOCK_DISABLE();
 800e410:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800e414:	f7ff fd59 	bl	800deca <LL_APB2_GRP1_DisableClock>
  }
}
 800e418:	bf00      	nop
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	40014800 	.word	0x40014800

0800e424 <LL_AHB2_GRP1_EnableClock>:
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e42c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e430:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4313      	orrs	r3, r2
 800e43a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e43c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e440:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4013      	ands	r3, r2
 800e446:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e448:	68fb      	ldr	r3, [r7, #12]
}
 800e44a:	bf00      	nop
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <LL_APB1_GRP1_EnableClock>:
{
 800e456:	b480      	push	{r7}
 800e458:	b085      	sub	sp, #20
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e45e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e462:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e46e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e472:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4013      	ands	r3, r2
 800e478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e47a:	68fb      	ldr	r3, [r7, #12]
}
 800e47c:	bf00      	nop
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <LL_APB1_GRP1_DisableClock>:
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800e490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e494:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	43db      	mvns	r3, r3
 800e49a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e49e:	4013      	ands	r3, r2
 800e4a0:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800e4a2:	bf00      	nop
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <LL_APB1_GRP1_ForceReset>:
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800e4b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800e4c6:	bf00      	nop
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <LL_APB1_GRP1_ReleaseReset>:
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b083      	sub	sp, #12
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800e4da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	43db      	mvns	r3, r3
 800e4e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <LL_APB2_GRP1_EnableClock>:
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800e500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e504:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4313      	orrs	r3, r2
 800e50e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800e510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e514:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4013      	ands	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e51c:	68fb      	ldr	r3, [r7, #12]
}
 800e51e:	bf00      	nop
 800e520:	3714      	adds	r7, #20
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
	...

0800e52c <BSP_I2C3_Init>:
/**
  * @brief  Initialize BSP I2C3.
  * @retval BSP status.
  */
int32_t BSP_I2C3_Init(void)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800e532:	2300      	movs	r3, #0
 800e534:	607b      	str	r3, [r7, #4]

  hbus_i2c3.Instance = BUS_I2C3;
 800e536:	4b19      	ldr	r3, [pc, #100]	@ (800e59c <BSP_I2C3_Init+0x70>)
 800e538:	4a19      	ldr	r2, [pc, #100]	@ (800e5a0 <BSP_I2C3_Init+0x74>)
 800e53a:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 800e53c:	4b19      	ldr	r3, [pc, #100]	@ (800e5a4 <BSP_I2C3_Init+0x78>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d11b      	bne.n	800e57c <BSP_I2C3_Init+0x50>
  {
    if (HAL_I2C_GetState(&hbus_i2c3) == HAL_I2C_STATE_RESET)
 800e544:	4815      	ldr	r0, [pc, #84]	@ (800e59c <BSP_I2C3_Init+0x70>)
 800e546:	f003 fae5 	bl	8011b14 <HAL_I2C_GetState>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d115      	bne.n	800e57c <BSP_I2C3_Init+0x50>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C1 Msp */
      I2C3_MspInit(&hbus_i2c3);
 800e550:	4812      	ldr	r0, [pc, #72]	@ (800e59c <BSP_I2C3_Init+0x70>)
 800e552:	f000 f9a1 	bl	800e898 <I2C3_MspInit>

      if (MX_I2C3_Init(&hbus_i2c3, I2C_GetTiming(HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2C3), BUS_I2C3_FREQUENCY)) != HAL_OK)
 800e556:	2008      	movs	r0, #8
 800e558:	f005 fe0c 	bl	8014174 <HAL_RCCEx_GetPeriphCLKFreq>
 800e55c:	4603      	mov	r3, r0
 800e55e:	4912      	ldr	r1, [pc, #72]	@ (800e5a8 <BSP_I2C3_Init+0x7c>)
 800e560:	4618      	mov	r0, r3
 800e562:	f000 fa91 	bl	800ea88 <I2C_GetTiming>
 800e566:	4603      	mov	r3, r0
 800e568:	4619      	mov	r1, r3
 800e56a:	480c      	ldr	r0, [pc, #48]	@ (800e59c <BSP_I2C3_Init+0x70>)
 800e56c:	f000 f921 	bl	800e7b2 <MX_I2C3_Init>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <BSP_I2C3_Init+0x50>
      {
        status = BSP_ERROR_BUS_FAILURE;
 800e576:	f06f 0307 	mvn.w	r3, #7
 800e57a:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c2InitCounter < 0xFFFFFFFFU)
 800e57c:	4b09      	ldr	r3, [pc, #36]	@ (800e5a4 <BSP_I2C3_Init+0x78>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e584:	d004      	beq.n	800e590 <BSP_I2C3_Init+0x64>
  {
    I2c2InitCounter++;
 800e586:	4b07      	ldr	r3, [pc, #28]	@ (800e5a4 <BSP_I2C3_Init+0x78>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	4a05      	ldr	r2, [pc, #20]	@ (800e5a4 <BSP_I2C3_Init+0x78>)
 800e58e:	6013      	str	r3, [r2, #0]
  }
  return status;
 800e590:	687b      	ldr	r3, [r7, #4]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20001a9c 	.word	0x20001a9c
 800e5a0:	40005c00 	.word	0x40005c00
 800e5a4:	20001094 	.word	0x20001094
 800e5a8:	000186a0 	.word	0x000186a0

0800e5ac <BSP_I2C3_DeInit>:
/**
  * @brief  DeInitialize BSP I2C3.
  * @retval BSP status.
  */
int32_t BSP_I2C3_DeInit(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	607b      	str	r3, [r7, #4]

  if (I2c2InitCounter > 0U)
 800e5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e5f4 <BSP_I2C3_DeInit+0x48>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d014      	beq.n	800e5e8 <BSP_I2C3_DeInit+0x3c>
  {
    I2c2InitCounter--;
 800e5be:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f4 <BSP_I2C3_DeInit+0x48>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	4a0b      	ldr	r2, [pc, #44]	@ (800e5f4 <BSP_I2C3_DeInit+0x48>)
 800e5c6:	6013      	str	r3, [r2, #0]
    if (I2c2InitCounter == 0U)
 800e5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f4 <BSP_I2C3_DeInit+0x48>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10b      	bne.n	800e5e8 <BSP_I2C3_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C3_MspDeInit(&hbus_i2c3);
 800e5d0:	4809      	ldr	r0, [pc, #36]	@ (800e5f8 <BSP_I2C3_DeInit+0x4c>)
 800e5d2:	f000 f999 	bl	800e908 <I2C3_MspDeInit>
#endif

      /* De-Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c3) != HAL_OK)
 800e5d6:	4808      	ldr	r0, [pc, #32]	@ (800e5f8 <BSP_I2C3_DeInit+0x4c>)
 800e5d8:	f002 fe1d 	bl	8011216 <HAL_I2C_DeInit>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <BSP_I2C3_DeInit+0x3c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800e5e2:	f06f 0303 	mvn.w	r3, #3
 800e5e6:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return status;
 800e5e8:	687b      	ldr	r3, [r7, #4]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20001094 	.word	0x20001094
 800e5f8:	20001a9c 	.word	0x20001a9c

0800e5fc <BSP_I2C3_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b086      	sub	sp, #24
 800e600:	af02      	add	r7, sp, #8
 800e602:	60ba      	str	r2, [r7, #8]
 800e604:	461a      	mov	r2, r3
 800e606:	4603      	mov	r3, r0
 800e608:	81fb      	strh	r3, [r7, #14]
 800e60a:	460b      	mov	r3, r1
 800e60c:	81bb      	strh	r3, [r7, #12]
 800e60e:	4613      	mov	r3, r2
 800e610:	80fb      	strh	r3, [r7, #6]
  return I2C3_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 800e612:	89b9      	ldrh	r1, [r7, #12]
 800e614:	89f8      	ldrh	r0, [r7, #14]
 800e616:	88fb      	ldrh	r3, [r7, #6]
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f000 f98b 	bl	800e938 <I2C3_WriteReg>
 800e622:	4603      	mov	r3, r0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <BSP_I2C3_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af02      	add	r7, sp, #8
 800e632:	60ba      	str	r2, [r7, #8]
 800e634:	461a      	mov	r2, r3
 800e636:	4603      	mov	r3, r0
 800e638:	81fb      	strh	r3, [r7, #14]
 800e63a:	460b      	mov	r3, r1
 800e63c:	81bb      	strh	r3, [r7, #12]
 800e63e:	4613      	mov	r3, r2
 800e640:	80fb      	strh	r3, [r7, #6]
  return I2C3_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 800e642:	89b9      	ldrh	r1, [r7, #12]
 800e644:	89f8      	ldrh	r0, [r7, #14]
 800e646:	88fb      	ldrh	r3, [r7, #6]
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2201      	movs	r2, #1
 800e64e:	f000 f9c7 	bl	800e9e0 <I2C3_ReadReg>
 800e652:	4603      	mov	r3, r0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800e662:	2300      	movs	r3, #0
 800e664:	607b      	str	r3, [r7, #4]

  hbus_spi1.Instance  = BUS_SPI1_INSTANCE;
 800e666:	4b11      	ldr	r3, [pc, #68]	@ (800e6ac <BSP_SPI1_Init+0x50>)
 800e668:	4a11      	ldr	r2, [pc, #68]	@ (800e6b0 <BSP_SPI1_Init+0x54>)
 800e66a:	601a      	str	r2, [r3, #0]

  if (HAL_SPI_GetState(&hbus_spi1) == HAL_SPI_STATE_RESET)
 800e66c:	480f      	ldr	r0, [pc, #60]	@ (800e6ac <BSP_SPI1_Init+0x50>)
 800e66e:	f007 f997 	bl	80159a0 <HAL_SPI_GetState>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d114      	bne.n	800e6a2 <BSP_SPI1_Init+0x46>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbus_spi1);
 800e678:	480c      	ldr	r0, [pc, #48]	@ (800e6ac <BSP_SPI1_Init+0x50>)
 800e67a:	f000 f8dc 	bl	800e836 <SPI1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    /* Init the SPI */
    if (MX_SPI1_Init(&hbus_spi1, SPI_GetPrescaler( HAL_RCC_GetPCLK1Freq(), BUS_SPI1_BAUDRATE)) != HAL_OK)
 800e67e:	f004 ff97 	bl	80135b0 <HAL_RCC_GetPCLK1Freq>
 800e682:	4603      	mov	r3, r0
 800e684:	490b      	ldr	r1, [pc, #44]	@ (800e6b4 <BSP_SPI1_Init+0x58>)
 800e686:	4618      	mov	r0, r3
 800e688:	f000 fc74 	bl	800ef74 <SPI_GetPrescaler>
 800e68c:	4603      	mov	r3, r0
 800e68e:	4619      	mov	r1, r3
 800e690:	4806      	ldr	r0, [pc, #24]	@ (800e6ac <BSP_SPI1_Init+0x50>)
 800e692:	f000 f811 	bl	800e6b8 <MX_SPI1_Init>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <BSP_SPI1_Init+0x46>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800e69c:	f06f 0307 	mvn.w	r3, #7
 800e6a0:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800e6a2:	687b      	ldr	r3, [r7, #4]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20001af0 	.word	0x20001af0
 800e6b0:	40013000 	.word	0x40013000
 800e6b4:	00bebc20 	.word	0x00bebc20

0800e6b8 <MX_SPI1_Init>:
  * @param  phspi             SPI handler
  * @param  BaudratePrescaler prsecaler to set for SPI baudrate
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* phspi, uint32_t BaudratePrescaler)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73fb      	strb	r3, [r7, #15]

  phspi->Init.Mode              = SPI_MODE_MASTER;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e6cc:	605a      	str	r2, [r3, #4]
  phspi->Init.Direction         = SPI_DIRECTION_2LINES;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	609a      	str	r2, [r3, #8]
  phspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800e6da:	60da      	str	r2, [r3, #12]
  phspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2202      	movs	r2, #2
 800e6e0:	611a      	str	r2, [r3, #16]
  phspi->Init.CLKPhase          = SPI_PHASE_1EDGE;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	615a      	str	r2, [r3, #20]
  phspi->Init.NSS               = SPI_NSS_SOFT;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6ee:	619a      	str	r2, [r3, #24]
  phspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2210      	movs	r2, #16
 800e6f4:	61da      	str	r2, [r3, #28]
  phspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	621a      	str	r2, [r3, #32]
  phspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	625a      	str	r2, [r3, #36]	@ 0x24
  phspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	629a      	str	r2, [r3, #40]	@ 0x28
  phspi->Init.CRCPolynomial     = 7;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2207      	movs	r2, #7
 800e70c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(HAL_SPI_Init(phspi) != HAL_OK)
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f006 fd04 	bl	801511c <HAL_SPI_Init>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <MX_SPI1_Init+0x66>
  {
    ret = HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <BSP_SPI1_Send>:
  * @param  pData  Pointer to data buffer to send
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{  
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	460b      	mov	r3, r1
 800e732:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800e734:	2300      	movs	r3, #0
 800e736:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbus_spi1, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 800e738:	887a      	ldrh	r2, [r7, #2]
 800e73a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	4806      	ldr	r0, [pc, #24]	@ (800e75c <BSP_SPI1_Send+0x34>)
 800e742:	f006 fd98 	bl	8015276 <HAL_SPI_Transmit>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d101      	bne.n	800e750 <BSP_SPI1_Send+0x28>
  {
    ret = BSP_ERROR_NONE;
 800e74c:	2300      	movs	r3, #0
 800e74e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800e750:	68fb      	ldr	r3, [r7, #12]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	20001af0 	.word	0x20001af0

0800e760 <BSP_SPI1_Recv>:
  * @param  pData  Pointer to data buffer to receive
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af02      	add	r7, sp, #8
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	460b      	mov	r3, r1
 800e76a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800e76c:	f06f 0305 	mvn.w	r3, #5
 800e770:	60fb      	str	r3, [r7, #12]
  uint32_t tx_data = 0xFFFFFFFFU;
 800e772:	f04f 33ff 	mov.w	r3, #4294967295
 800e776:	60bb      	str	r3, [r7, #8]

  if(HAL_SPI_TransmitReceive(&hbus_spi1, (uint8_t*)&tx_data, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 800e778:	887b      	ldrh	r3, [r7, #2]
 800e77a:	f107 0108 	add.w	r1, r7, #8
 800e77e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e782:	9200      	str	r2, [sp, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	4806      	ldr	r0, [pc, #24]	@ (800e7a0 <BSP_SPI1_Recv+0x40>)
 800e788:	f006 feeb 	bl	8015562 <HAL_SPI_TransmitReceive>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <BSP_SPI1_Recv+0x36>
  {
    ret = BSP_ERROR_NONE;
 800e792:	2300      	movs	r3, #0
 800e794:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800e796:	68fb      	ldr	r3, [r7, #12]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3710      	adds	r7, #16
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20001af0 	.word	0x20001af0

0800e7a4 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e7a8:	f001 fcac 	bl	8010104 <HAL_GetTick>
 800e7ac:	4603      	mov	r3, r0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <MX_I2C3_Init>:
  * @param  hI2c I2C handle.
  * @param  timing I2C timing.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_I2C3_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f002 fc75 	bl	80110e0 <HAL_I2C_Init>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <MX_I2C3_Init+0x50>
  {
    status = HAL_ERROR;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	73fb      	strb	r3, [r7, #15]
 800e800:	e014      	b.n	800e82c <MX_I2C3_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;
    
    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 800e802:	2300      	movs	r3, #0
 800e804:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800e806:	68b9      	ldr	r1, [r7, #8]
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f003 fceb 	bl	80121e4 <HAL_I2CEx_ConfigAnalogFilter>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <MX_I2C3_Init+0x68>
    {
      status = HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	73fb      	strb	r3, [r7, #15]
 800e818:	e008      	b.n	800e82c <MX_I2C3_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800e81a:	2100      	movs	r1, #0
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f003 fd2c 	bl	801227a <HAL_I2CEx_ConfigDigitalFilter>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d001      	beq.n	800e82c <MX_I2C3_Init+0x7a>
      {
        status = HAL_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <SPI1_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void SPI1_MspInit(SPI_HandleTypeDef* hspi)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b088      	sub	sp, #32
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  BUS_SPI1_CLOCK_ENABLE();
 800e83e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800e842:	f7ff fe59 	bl	800e4f8 <LL_APB2_GRP1_EnableClock>

  /* enable SPIx gpio clock */
  BUS_SPI1_GPIO_CLKA_ENABLE();
 800e846:	2001      	movs	r0, #1
 800e848:	f7ff fdec 	bl	800e424 <LL_AHB2_GRP1_EnableClock>

  /* configure SPIx SCK, MOSI */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 800e84c:	2380      	movs	r3, #128	@ 0x80
 800e84e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800e850:	2302      	movs	r3, #2
 800e852:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800e854:	2302      	movs	r3, #2
 800e856:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 800e858:	2300      	movs	r3, #0
 800e85a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 800e85c:	2305      	movs	r3, #5
 800e85e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800e860:	f107 030c 	add.w	r3, r7, #12
 800e864:	4619      	mov	r1, r3
 800e866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e86a:	f002 f997 	bl	8010b9c <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin       = BUS_SPI1_SCK_PIN;
 800e86e:	2302      	movs	r3, #2
 800e870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800e872:	2302      	movs	r3, #2
 800e874:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800e876:	2302      	movs	r3, #2
 800e878:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 800e87a:	2300      	movs	r3, #0
 800e87c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 800e87e:	2305      	movs	r3, #5
 800e880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800e882:	f107 030c 	add.w	r3, r7, #12
 800e886:	4619      	mov	r1, r3
 800e888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e88c:	f002 f986 	bl	8010b9c <HAL_GPIO_Init>

}
 800e890:	bf00      	nop
 800e892:	3720      	adds	r7, #32
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <I2C3_MspInit>:
  * @brief  Initialize I2C3 MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C3_MspInit(I2C_HandleTypeDef *hI2c)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b088      	sub	sp, #32
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  BUS_I2C3_SDA_GPIO_CLK_ENABLE();
 800e8a0:	2002      	movs	r0, #2
 800e8a2:	f7ff fdbf 	bl	800e424 <LL_AHB2_GRP1_EnableClock>
  BUS_I2C3_SCL_GPIO_CLK_ENABLE();
 800e8a6:	2002      	movs	r0, #2
 800e8a8:	f7ff fdbc 	bl	800e424 <LL_AHB2_GRP1_EnableClock>

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C3_SCL_GPIO_PIN;
 800e8ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e8b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800e8b2:	2312      	movs	r3, #18
 800e8b4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = BUS_I2C3_SCL_GPIO_AF;
 800e8be:	2304      	movs	r3, #4
 800e8c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C3_SCL_GPIO_PORT, &gpio_init_structure);
 800e8c2:	f107 030c 	add.w	r3, r7, #12
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	480e      	ldr	r0, [pc, #56]	@ (800e904 <I2C3_MspInit+0x6c>)
 800e8ca:	f002 f967 	bl	8010b9c <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C3_SDA_GPIO_PIN;
 800e8ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e8d2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Alternate = BUS_I2C3_SDA_GPIO_AF;
 800e8d4:	2304      	movs	r3, #4
 800e8d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_I2C3_SDA_GPIO_PORT, &gpio_init_structure);
 800e8d8:	f107 030c 	add.w	r3, r7, #12
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4809      	ldr	r0, [pc, #36]	@ (800e904 <I2C3_MspInit+0x6c>)
 800e8e0:	f002 f95c 	bl	8010b9c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C3_CLK_ENABLE();
 800e8e4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e8e8:	f7ff fdb5 	bl	800e456 <LL_APB1_GRP1_EnableClock>

  /* Force the I2C peripheral clock reset */
  BUS_I2C3_FORCE_RESET();
 800e8ec:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e8f0:	f7ff fddd 	bl	800e4ae <LL_APB1_GRP1_ForceReset>

  /* Release the I2C peripheral clock reset */
  BUS_I2C3_RELEASE_RESET();
 800e8f4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e8f8:	f7ff fdeb 	bl	800e4d2 <LL_APB1_GRP1_ReleaseReset>
}
 800e8fc:	bf00      	nop
 800e8fe:	3720      	adds	r7, #32
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	48000400 	.word	0x48000400

0800e908 <I2C3_MspDeInit>:
  * @brief  DeInitialize I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C3_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  HAL_GPIO_DeInit(BUS_I2C3_SCL_GPIO_PORT, BUS_I2C3_SCL_GPIO_PIN);
 800e910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e914:	4807      	ldr	r0, [pc, #28]	@ (800e934 <I2C3_MspDeInit+0x2c>)
 800e916:	f002 fab1 	bl	8010e7c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C3_SDA_GPIO_PORT, BUS_I2C3_SDA_GPIO_PIN);
 800e91a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800e91e:	4805      	ldr	r0, [pc, #20]	@ (800e934 <I2C3_MspDeInit+0x2c>)
 800e920:	f002 faac 	bl	8010e7c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C3_CLK_DISABLE();
 800e924:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800e928:	f7ff fdae 	bl	800e488 <LL_APB1_GRP1_DisableClock>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	48000400 	.word	0x48000400

0800e938 <I2C3_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C3_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08a      	sub	sp, #40	@ 0x28
 800e93c:	af04      	add	r7, sp, #16
 800e93e:	607b      	str	r3, [r7, #4]
 800e940:	4603      	mov	r3, r0
 800e942:	81fb      	strh	r3, [r7, #14]
 800e944:	460b      	mov	r3, r1
 800e946:	81bb      	strh	r3, [r7, #12]
 800e948:	4613      	mov	r3, r2
 800e94a:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 800e94c:	2300      	movs	r3, #0
 800e94e:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c3, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C3_TIMEOUT) != HAL_OK)
 800e950:	8978      	ldrh	r0, [r7, #10]
 800e952:	89ba      	ldrh	r2, [r7, #12]
 800e954:	89f9      	ldrh	r1, [r7, #14]
 800e956:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e95a:	9302      	str	r3, [sp, #8]
 800e95c:	8c3b      	ldrh	r3, [r7, #32]
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	4603      	mov	r3, r0
 800e966:	481d      	ldr	r0, [pc, #116]	@ (800e9dc <I2C3_WriteReg+0xa4>)
 800e968:	f002 fea6 	bl	80116b8 <HAL_I2C_Mem_Write>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d02f      	beq.n	800e9d2 <I2C3_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c3);
 800e972:	481a      	ldr	r0, [pc, #104]	@ (800e9dc <I2C3_WriteReg+0xa4>)
 800e974:	f003 f8dc 	bl	8011b30 <HAL_I2C_GetError>
 800e978:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	f003 0301 	and.w	r3, r3, #1
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <I2C3_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 800e984:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	e022      	b.n	800e9d2 <I2C3_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f003 0302 	and.w	r3, r3, #2
 800e992:	2b00      	cmp	r3, #0
 800e994:	d003      	beq.n	800e99e <I2C3_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 800e996:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 800e99a:	617b      	str	r3, [r7, #20]
 800e99c:	e019      	b.n	800e9d2 <I2C3_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d003      	beq.n	800e9b0 <I2C3_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800e9a8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800e9ac:	617b      	str	r3, [r7, #20]
 800e9ae:	e010      	b.n	800e9d2 <I2C3_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	f003 0320 	and.w	r3, r3, #32
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d104      	bne.n	800e9c4 <I2C3_WriteReg+0x8c>
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d003      	beq.n	800e9cc <I2C3_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 800e9c4:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800e9c8:	617b      	str	r3, [r7, #20]
 800e9ca:	e002      	b.n	800e9d2 <I2C3_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 800e9cc:	f06f 0303 	mvn.w	r3, #3
 800e9d0:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 800e9d2:	697b      	ldr	r3, [r7, #20]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3718      	adds	r7, #24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	20001a9c 	.word	0x20001a9c

0800e9e0 <I2C3_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C3_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08a      	sub	sp, #40	@ 0x28
 800e9e4:	af04      	add	r7, sp, #16
 800e9e6:	607b      	str	r3, [r7, #4]
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	81fb      	strh	r3, [r7, #14]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	81bb      	strh	r3, [r7, #12]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c3, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C3_TIMEOUT) != HAL_OK)
 800e9f8:	8978      	ldrh	r0, [r7, #10]
 800e9fa:	89ba      	ldrh	r2, [r7, #12]
 800e9fc:	89f9      	ldrh	r1, [r7, #14]
 800e9fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ea02:	9302      	str	r3, [sp, #8]
 800ea04:	8c3b      	ldrh	r3, [r7, #32]
 800ea06:	9301      	str	r3, [sp, #4]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	481d      	ldr	r0, [pc, #116]	@ (800ea84 <I2C3_ReadReg+0xa4>)
 800ea10:	f002 ff66 	bl	80118e0 <HAL_I2C_Mem_Read>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d02f      	beq.n	800ea7a <I2C3_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c3);
 800ea1a:	481a      	ldr	r0, [pc, #104]	@ (800ea84 <I2C3_ReadReg+0xa4>)
 800ea1c:	f003 f888 	bl	8011b30 <HAL_I2C_GetError>
 800ea20:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f003 0301 	and.w	r3, r3, #1
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d003      	beq.n	800ea34 <I2C3_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 800ea2c:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 800ea30:	617b      	str	r3, [r7, #20]
 800ea32:	e022      	b.n	800ea7a <I2C3_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	f003 0302 	and.w	r3, r3, #2
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d003      	beq.n	800ea46 <I2C3_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 800ea3e:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	e019      	b.n	800ea7a <I2C3_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d003      	beq.n	800ea58 <I2C3_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800ea50:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800ea54:	617b      	str	r3, [r7, #20]
 800ea56:	e010      	b.n	800ea7a <I2C3_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f003 0320 	and.w	r3, r3, #32
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d104      	bne.n	800ea6c <I2C3_ReadReg+0x8c>
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <I2C3_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 800ea6c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800ea70:	617b      	str	r3, [r7, #20]
 800ea72:	e002      	b.n	800ea7a <I2C3_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 800ea74:	f06f 0303 	mvn.w	r3, #3
 800ea78:	617b      	str	r3, [r7, #20]
    }    
  }

  return status;
 800ea7a:	697b      	ldr	r3, [r7, #20]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3718      	adds	r7, #24
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	20001a9c 	.word	0x20001a9c

0800ea88 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d06b      	beq.n	800eb74 <I2C_GetTiming+0xec>
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d068      	beq.n	800eb74 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	613b      	str	r3, [r7, #16]
 800eaa6:	e060      	b.n	800eb6a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800eaa8:	4a35      	ldr	r2, [pc, #212]	@ (800eb80 <I2C_GetTiming+0xf8>)
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	212c      	movs	r1, #44	@ 0x2c
 800eaae:	fb01 f303 	mul.w	r3, r1, r3
 800eab2:	4413      	add	r3, r2
 800eab4:	3304      	adds	r3, #4
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d352      	bcc.n	800eb64 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800eabe:	4a30      	ldr	r2, [pc, #192]	@ (800eb80 <I2C_GetTiming+0xf8>)
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	212c      	movs	r1, #44	@ 0x2c
 800eac4:	fb01 f303 	mul.w	r3, r1, r3
 800eac8:	4413      	add	r3, r2
 800eaca:	3308      	adds	r3, #8
 800eacc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d847      	bhi.n	800eb64 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800ead4:	6939      	ldr	r1, [r7, #16]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f856 	bl	800eb88 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800eadc:	6939      	ldr	r1, [r7, #16]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f940 	bl	800ed64 <I2C_Compute_SCLL_SCLH>
 800eae4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2b7f      	cmp	r3, #127	@ 0x7f
 800eaea:	d842      	bhi.n	800eb72 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800eaec:	4925      	ldr	r1, [pc, #148]	@ (800eb84 <I2C_GetTiming+0xfc>)
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	440b      	add	r3, r1
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800eafe:	4821      	ldr	r0, [pc, #132]	@ (800eb84 <I2C_GetTiming+0xfc>)
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4403      	add	r3, r0
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	051b      	lsls	r3, r3, #20
 800eb12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800eb16:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800eb18:	481a      	ldr	r0, [pc, #104]	@ (800eb84 <I2C_GetTiming+0xfc>)
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4403      	add	r3, r0
 800eb26:	3308      	adds	r3, #8
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	041b      	lsls	r3, r3, #16
 800eb2c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800eb30:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800eb32:	4814      	ldr	r0, [pc, #80]	@ (800eb84 <I2C_GetTiming+0xfc>)
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	4613      	mov	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4403      	add	r3, r0
 800eb40:	330c      	adds	r3, #12
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800eb48:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800eb4a:	480e      	ldr	r0, [pc, #56]	@ (800eb84 <I2C_GetTiming+0xfc>)
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4403      	add	r3, r0
 800eb58:	3310      	adds	r3, #16
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800eb5e:	430b      	orrs	r3, r1
 800eb60:	617b      	str	r3, [r7, #20]
        }
        break;
 800eb62:	e006      	b.n	800eb72 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3301      	adds	r3, #1
 800eb68:	613b      	str	r3, [r7, #16]
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d99b      	bls.n	800eaa8 <I2C_GetTiming+0x20>
 800eb70:	e000      	b.n	800eb74 <I2C_GetTiming+0xec>
        break;
 800eb72:	bf00      	nop
      }
    }
  }

  return ret;
 800eb74:	697b      	ldr	r3, [r7, #20]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3718      	adds	r7, #24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	080205fc 	.word	0x080205fc
 800eb84:	20001098 	.word	0x20001098

0800eb88 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b08f      	sub	sp, #60	@ 0x3c
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800eb92:	2310      	movs	r3, #16
 800eb94:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	085a      	lsrs	r2, r3, #1
 800eb9a:	4b6e      	ldr	r3, [pc, #440]	@ (800ed54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800eb9c:	4413      	add	r3, r2
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eba4:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 800eba6:	2332      	movs	r3, #50	@ 0x32
 800eba8:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 800ebaa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800ebae:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ebb0:	4a69      	ldr	r2, [pc, #420]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	212c      	movs	r1, #44	@ 0x2c
 800ebb6:	fb01 f303 	mul.w	r3, r1, r3
 800ebba:	4413      	add	r3, r2
 800ebbc:	3324      	adds	r3, #36	@ 0x24
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	4a65      	ldr	r2, [pc, #404]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	212c      	movs	r1, #44	@ 0x2c
 800ebc8:	fb01 f303 	mul.w	r3, r1, r3
 800ebcc:	4413      	add	r3, r2
 800ebce:	330c      	adds	r3, #12
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800ebd4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ebd6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800ebd8:	495f      	ldr	r1, [pc, #380]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	202c      	movs	r0, #44	@ 0x2c
 800ebde:	fb00 f303 	mul.w	r3, r0, r3
 800ebe2:	440b      	add	r3, r1
 800ebe4:	3328      	adds	r3, #40	@ 0x28
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3303      	adds	r3, #3
 800ebea:	69f9      	ldr	r1, [r7, #28]
 800ebec:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ebf4:	4a58      	ldr	r2, [pc, #352]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	212c      	movs	r1, #44	@ 0x2c
 800ebfa:	fb01 f303 	mul.w	r3, r1, r3
 800ebfe:	4413      	add	r3, r2
 800ec00:	3310      	adds	r3, #16
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4618      	mov	r0, r3
 800ec06:	4a54      	ldr	r2, [pc, #336]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	212c      	movs	r1, #44	@ 0x2c
 800ec0c:	fb01 f303 	mul.w	r3, r1, r3
 800ec10:	4413      	add	r3, r2
 800ec12:	3320      	adds	r3, #32
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800ec18:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ec1a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800ec1c:	494e      	ldr	r1, [pc, #312]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	202c      	movs	r0, #44	@ 0x2c
 800ec22:	fb00 f303 	mul.w	r3, r0, r3
 800ec26:	440b      	add	r3, r1
 800ec28:	3328      	adds	r3, #40	@ 0x28
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3304      	adds	r3, #4
 800ec2e:	69f9      	ldr	r1, [r7, #28]
 800ec30:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800ec38:	4a47      	ldr	r2, [pc, #284]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	212c      	movs	r1, #44	@ 0x2c
 800ec3e:	fb01 f303 	mul.w	r3, r1, r3
 800ec42:	4413      	add	r3, r2
 800ec44:	3320      	adds	r3, #32
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	4a43      	ldr	r2, [pc, #268]	@ (800ed58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	212c      	movs	r1, #44	@ 0x2c
 800ec50:	fb01 f303 	mul.w	r3, r1, r3
 800ec54:	4413      	add	r3, r2
 800ec56:	3314      	adds	r3, #20
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4403      	add	r3, r0
 800ec5c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	dc01      	bgt.n	800ec68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800ec68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	dc01      	bgt.n	800ec72 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800ec72:	2300      	movs	r3, #0
 800ec74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec76:	e062      	b.n	800ed3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800ec78:	2300      	movs	r3, #0
 800ec7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec7c:	e059      	b.n	800ed32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec80:	3301      	adds	r3, #1
 800ec82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec84:	3201      	adds	r2, #1
 800ec86:	fb03 f202 	mul.w	r2, r3, r2
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	fb02 f303 	mul.w	r3, r2, r3
 800ec90:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d348      	bcc.n	800ed2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	623b      	str	r3, [r7, #32]
 800ec9e:	e042      	b.n	800ed26 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800eca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca2:	3301      	adds	r3, #1
 800eca4:	6a3a      	ldr	r2, [r7, #32]
 800eca6:	fb03 f202 	mul.w	r2, r3, r2
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	fb02 f303 	mul.w	r3, r2, r3
 800ecb0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d332      	bcc.n	800ed20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800ecba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d82e      	bhi.n	800ed20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800ecc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d02a      	beq.n	800ed20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800ecca:	4b24      	ldr	r3, [pc, #144]	@ (800ed5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	4924      	ldr	r1, [pc, #144]	@ (800ed60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	4413      	add	r3, r2
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	440b      	add	r3, r1
 800ecda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecdc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800ecde:	4b1f      	ldr	r3, [pc, #124]	@ (800ed5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	491f      	ldr	r1, [pc, #124]	@ (800ed60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800ece4:	4613      	mov	r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	440b      	add	r3, r1
 800ecee:	3304      	adds	r3, #4
 800ecf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecf2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800ecf4:	4b19      	ldr	r3, [pc, #100]	@ (800ed5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ecf6:	681a      	ldr	r2, [r3, #0]
 800ecf8:	4919      	ldr	r1, [pc, #100]	@ (800ed60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	4413      	add	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	440b      	add	r3, r1
 800ed04:	3308      	adds	r3, #8
 800ed06:	6a3a      	ldr	r2, [r7, #32]
 800ed08:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800ed0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed0c:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800ed0e:	4b13      	ldr	r3, [pc, #76]	@ (800ed5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	3301      	adds	r3, #1
 800ed14:	4a11      	ldr	r2, [pc, #68]	@ (800ed5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ed16:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800ed18:	4b10      	ldr	r3, [pc, #64]	@ (800ed5c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed1e:	d812      	bhi.n	800ed46 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800ed20:	6a3b      	ldr	r3, [r7, #32]
 800ed22:	3301      	adds	r3, #1
 800ed24:	623b      	str	r3, [r7, #32]
 800ed26:	6a3b      	ldr	r3, [r7, #32]
 800ed28:	2b0f      	cmp	r3, #15
 800ed2a:	d9b9      	bls.n	800eca0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2e:	3301      	adds	r3, #1
 800ed30:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed34:	2b0f      	cmp	r3, #15
 800ed36:	d9a2      	bls.n	800ec7e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800ed38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed40:	2b0f      	cmp	r3, #15
 800ed42:	d999      	bls.n	800ec78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800ed44:	e000      	b.n	800ed48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800ed46:	bf00      	nop
          }
        }
      }
    }
  }
}
 800ed48:	373c      	adds	r7, #60	@ 0x3c
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	3b9aca00 	.word	0x3b9aca00
 800ed58:	080205fc 	.word	0x080205fc
 800ed5c:	20001a98 	.word	0x20001a98
 800ed60:	20001098 	.word	0x20001098

0800ed64 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b093      	sub	sp, #76	@ 0x4c
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 800ed6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	085a      	lsrs	r2, r3, #1
 800ed78:	4b7a      	ldr	r3, [pc, #488]	@ (800ef64 <I2C_Compute_SCLL_SCLH+0x200>)
 800ed7a:	4413      	add	r3, r2
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800ed84:	4a78      	ldr	r2, [pc, #480]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	212c      	movs	r1, #44	@ 0x2c
 800ed8a:	fb01 f303 	mul.w	r3, r1, r3
 800ed8e:	4413      	add	r3, r2
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	085a      	lsrs	r2, r3, #1
 800ed94:	4b73      	ldr	r3, [pc, #460]	@ (800ef64 <I2C_Compute_SCLL_SCLH+0x200>)
 800ed96:	4413      	add	r3, r2
 800ed98:	4973      	ldr	r1, [pc, #460]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800ed9a:	683a      	ldr	r2, [r7, #0]
 800ed9c:	202c      	movs	r0, #44	@ 0x2c
 800ed9e:	fb00 f202 	mul.w	r2, r0, r2
 800eda2:	440a      	add	r2, r1
 800eda4:	6812      	ldr	r2, [r2, #0]
 800eda6:	fbb3 f3f2 	udiv	r3, r3, r2
 800edaa:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 800edac:	2332      	movs	r3, #50	@ 0x32
 800edae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800edb0:	4a6d      	ldr	r2, [pc, #436]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	212c      	movs	r1, #44	@ 0x2c
 800edb6:	fb01 f303 	mul.w	r3, r1, r3
 800edba:	4413      	add	r3, r2
 800edbc:	3328      	adds	r3, #40	@ 0x28
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc2:	fb02 f303 	mul.w	r3, r2, r3
 800edc6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800edc8:	4a67      	ldr	r2, [pc, #412]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	212c      	movs	r1, #44	@ 0x2c
 800edce:	fb01 f303 	mul.w	r3, r1, r3
 800edd2:	4413      	add	r3, r2
 800edd4:	3304      	adds	r3, #4
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a62      	ldr	r2, [pc, #392]	@ (800ef64 <I2C_Compute_SCLL_SCLH+0x200>)
 800edda:	fbb2 f3f3 	udiv	r3, r2, r3
 800edde:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800ede0:	4a61      	ldr	r2, [pc, #388]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	212c      	movs	r1, #44	@ 0x2c
 800ede6:	fb01 f303 	mul.w	r3, r1, r3
 800edea:	4413      	add	r3, r2
 800edec:	3308      	adds	r3, #8
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a5c      	ldr	r2, [pc, #368]	@ (800ef64 <I2C_Compute_SCLL_SCLH+0x200>)
 800edf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800edf6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800edf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfa:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800edfc:	2300      	movs	r3, #0
 800edfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee00:	e0a3      	b.n	800ef4a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800ee02:	495a      	ldr	r1, [pc, #360]	@ (800ef6c <I2C_Compute_SCLL_SCLH+0x208>)
 800ee04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee06:	4613      	mov	r3, r2
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	4413      	add	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	440b      	add	r3, r1
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	1c5a      	adds	r2, r3, #1
 800ee14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee16:	fb02 f303 	mul.w	r3, r2, r3
 800ee1a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee20:	e08c      	b.n	800ef3c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ee22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee24:	6a3b      	ldr	r3, [r7, #32]
 800ee26:	441a      	add	r2, r3
 800ee28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	6979      	ldr	r1, [r7, #20]
 800ee2e:	fb03 f101 	mul.w	r1, r3, r1
 800ee32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	440b      	add	r3, r1
 800ee38:	4413      	add	r3, r2
 800ee3a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800ee3c:	4a4a      	ldr	r2, [pc, #296]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	212c      	movs	r1, #44	@ 0x2c
 800ee42:	fb01 f303 	mul.w	r3, r1, r3
 800ee46:	4413      	add	r3, r2
 800ee48:	3318      	adds	r3, #24
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	693a      	ldr	r2, [r7, #16]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d971      	bls.n	800ef36 <I2C_Compute_SCLL_SCLH+0x1d2>
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee56:	1ad2      	subs	r2, r2, r3
 800ee58:	6a3b      	ldr	r3, [r7, #32]
 800ee5a:	1ad3      	subs	r3, r2, r3
 800ee5c:	089b      	lsrs	r3, r3, #2
 800ee5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d268      	bcs.n	800ef36 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ee64:	2300      	movs	r3, #0
 800ee66:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee68:	e062      	b.n	800ef30 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800ee6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	441a      	add	r2, r3
 800ee70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee72:	3301      	adds	r3, #1
 800ee74:	6979      	ldr	r1, [r7, #20]
 800ee76:	fb03 f101 	mul.w	r1, r3, r1
 800ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	440b      	add	r3, r1
 800ee80:	4413      	add	r3, r2
 800ee82:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	441a      	add	r2, r3
 800ee8a:	4937      	ldr	r1, [pc, #220]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	202c      	movs	r0, #44	@ 0x2c
 800ee90:	fb00 f303 	mul.w	r3, r0, r3
 800ee94:	440b      	add	r3, r1
 800ee96:	3320      	adds	r3, #32
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	441a      	add	r2, r3
 800ee9c:	4932      	ldr	r1, [pc, #200]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	202c      	movs	r0, #44	@ 0x2c
 800eea2:	fb00 f303 	mul.w	r3, r0, r3
 800eea6:	440b      	add	r3, r1
 800eea8:	3324      	adds	r3, #36	@ 0x24
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4413      	add	r3, r2
 800eeae:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d338      	bcc.n	800ef2a <I2C_Compute_SCLL_SCLH+0x1c6>
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d834      	bhi.n	800ef2a <I2C_Compute_SCLL_SCLH+0x1c6>
 800eec0:	4a29      	ldr	r2, [pc, #164]	@ (800ef68 <I2C_Compute_SCLL_SCLH+0x204>)
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	212c      	movs	r1, #44	@ 0x2c
 800eec6:	fb01 f303 	mul.w	r3, r1, r3
 800eeca:	4413      	add	r3, r2
 800eecc:	331c      	adds	r3, #28
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d329      	bcc.n	800ef2a <I2C_Compute_SCLL_SCLH+0x1c6>
 800eed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d225      	bcs.n	800ef2a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	da02      	bge.n	800eef2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800eeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeee:	425b      	negs	r3, r3
 800eef0:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800eef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d917      	bls.n	800ef2a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800eefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eefc:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800eefe:	491b      	ldr	r1, [pc, #108]	@ (800ef6c <I2C_Compute_SCLL_SCLH+0x208>)
 800ef00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef02:	4613      	mov	r3, r2
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	4413      	add	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	440b      	add	r3, r1
 800ef0c:	3310      	adds	r3, #16
 800ef0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ef10:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800ef12:	4916      	ldr	r1, [pc, #88]	@ (800ef6c <I2C_Compute_SCLL_SCLH+0x208>)
 800ef14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef16:	4613      	mov	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	4413      	add	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	440b      	add	r3, r1
 800ef20:	330c      	adds	r3, #12
 800ef22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef24:	601a      	str	r2, [r3, #0]
              ret = count;
 800ef26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef28:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef32:	2bff      	cmp	r3, #255	@ 0xff
 800ef34:	d999      	bls.n	800ee6a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ef36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef38:	3301      	adds	r3, #1
 800ef3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef3e:	2bff      	cmp	r3, #255	@ 0xff
 800ef40:	f67f af6f 	bls.w	800ee22 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ef44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef46:	3301      	adds	r3, #1
 800ef48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef4a:	4b09      	ldr	r3, [pc, #36]	@ (800ef70 <I2C_Compute_SCLL_SCLH+0x20c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef50:	429a      	cmp	r2, r3
 800ef52:	f4ff af56 	bcc.w	800ee02 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800ef56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	374c      	adds	r7, #76	@ 0x4c
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	3b9aca00 	.word	0x3b9aca00
 800ef68:	080205fc 	.word	0x080205fc
 800ef6c:	20001098 	.word	0x20001098
 800ef70:	20001a98 	.word	0x20001a98

0800ef74 <SPI_GetPrescaler>:
  * @param  clock_src_freq : SPI source clock in HZ.
  * @param  baudfreq_mbps : SPI baud freq in mbps.
  * @retval Prescaler divisor
  */
static uint32_t SPI_GetPrescaler( uint32_t clock_src_freq, uint32_t baudfreq_mbps )
{
 800ef74:	b480      	push	{r7}
 800ef76:	b087      	sub	sp, #28
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_freq;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while( spi_clk > baudfreq_mbps)
 800ef8a:	e00d      	b.n	800efa8 <SPI_GetPrescaler+0x34>
  {
    presc = baudfreq[divisor];
 800ef8c:	4a0d      	ldr	r2, [pc, #52]	@ (800efc4 <SPI_GetPrescaler+0x50>)
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef94:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7U)
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	617b      	str	r3, [r7, #20]
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	2b07      	cmp	r3, #7
 800efa0:	d807      	bhi.n	800efb2 <SPI_GetPrescaler+0x3e>
      break;

    spi_clk= ( spi_clk >> 1);
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	085b      	lsrs	r3, r3, #1
 800efa6:	613b      	str	r3, [r7, #16]
  while( spi_clk > baudfreq_mbps)
 800efa8:	693a      	ldr	r2, [r7, #16]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	429a      	cmp	r2, r3
 800efae:	d8ed      	bhi.n	800ef8c <SPI_GetPrescaler+0x18>
 800efb0:	e000      	b.n	800efb4 <SPI_GetPrescaler+0x40>
      break;
 800efb2:	bf00      	nop
  }

  return presc;
 800efb4:	68fb      	ldr	r3, [r7, #12]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	371c      	adds	r7, #28
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	08020680 	.word	0x08020680

0800efc8 <BSP_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08a      	sub	sp, #40	@ 0x28
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800efd2:	2300      	movs	r3, #0
 800efd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t function = ENV_TEMPERATURE;
 800efd6:	2301      	movs	r3, #1
 800efd8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	61bb      	str	r3, [r7, #24]
  ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d131      	bne.n	800f048 <BSP_ENV_SENSOR_Init+0x80>
  {
#if (USE_ENV_SENSOR_STTS22H_0 == 1)
    case ENV_SENSOR_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800efe4:	6838      	ldr	r0, [r7, #0]
 800efe6:	f000 f8fd 	bl	800f1e4 <STTS22H_0_Probe>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d002      	beq.n	800eff6 <BSP_ENV_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800eff0:	f04f 33ff 	mov.w	r3, #4294967295
 800eff4:	e064      	b.n	800f0c0 <BSP_ENV_SENSOR_Init+0xf8>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800eff6:	4a34      	ldr	r2, [pc, #208]	@ (800f0c8 <BSP_ENV_SENSOR_Init+0x100>)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	4932      	ldr	r1, [pc, #200]	@ (800f0cc <BSP_ENV_SENSOR_Init+0x104>)
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f008:	f107 0108 	add.w	r1, r7, #8
 800f00c:	4610      	mov	r0, r2
 800f00e:	4798      	blx	r3
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d002      	beq.n	800f01c <BSP_ENV_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800f016:	f06f 0306 	mvn.w	r3, #6
 800f01a:	e051      	b.n	800f0c0 <BSP_ENV_SENSOR_Init+0xf8>
      }
      if (cap.Temperature == 1U)
 800f01c:	7a3b      	ldrb	r3, [r7, #8]
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d103      	bne.n	800f02a <BSP_ENV_SENSOR_Init+0x62>
      {
        component_functions |= ENV_TEMPERATURE;
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	f043 0301 	orr.w	r3, r3, #1
 800f028:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800f02a:	7abb      	ldrb	r3, [r7, #10]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d103      	bne.n	800f038 <BSP_ENV_SENSOR_Init+0x70>
      {
        component_functions |= ENV_HUMIDITY;
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	f043 0304 	orr.w	r3, r3, #4
 800f036:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800f038:	7a7b      	ldrb	r3, [r7, #9]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d108      	bne.n	800f050 <BSP_ENV_SENSOR_Init+0x88>
      {
        component_functions |= ENV_PRESSURE;
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	f043 0302 	orr.w	r3, r3, #2
 800f044:	61bb      	str	r3, [r7, #24]
      }
      break;
 800f046:	e003      	b.n	800f050 <BSP_ENV_SENSOR_Init+0x88>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800f048:	f06f 0301 	mvn.w	r3, #1
 800f04c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800f04e:	e000      	b.n	800f052 <BSP_ENV_SENSOR_Init+0x8a>
      break;
 800f050:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800f052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <BSP_ENV_SENSOR_Init+0x94>
  {
    return ret;
 800f058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05a:	e031      	b.n	800f0c0 <BSP_ENV_SENSOR_Init+0xf8>
  }

  for (i = 0; i < ENV_SENSOR_FUNCTIONS_NBR; i++)
 800f05c:	2300      	movs	r3, #0
 800f05e:	61fb      	str	r3, [r7, #28]
 800f060:	e02a      	b.n	800f0b8 <BSP_ENV_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	6a3b      	ldr	r3, [r7, #32]
 800f066:	4013      	ands	r3, r2
 800f068:	6a3a      	ldr	r2, [r7, #32]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d11e      	bne.n	800f0ac <BSP_ENV_SENSOR_Init+0xe4>
 800f06e:	69ba      	ldr	r2, [r7, #24]
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	4013      	ands	r3, r2
 800f074:	6a3a      	ldr	r2, [r7, #32]
 800f076:	429a      	cmp	r2, r3
 800f078:	d118      	bne.n	800f0ac <BSP_ENV_SENSOR_Init+0xe4>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800f07a:	4a15      	ldr	r2, [pc, #84]	@ (800f0d0 <BSP_ENV_SENSOR_Init+0x108>)
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f082:	4814      	ldr	r0, [pc, #80]	@ (800f0d4 <BSP_ENV_SENSOR_Init+0x10c>)
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	4613      	mov	r3, r2
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	4413      	add	r3, r2
 800f08c:	440b      	add	r3, r1
 800f08e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	490d      	ldr	r1, [pc, #52]	@ (800f0cc <BSP_ENV_SENSOR_Init+0x104>)
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f09c:	4610      	mov	r0, r2
 800f09e:	4798      	blx	r3
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <BSP_ENV_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800f0a6:	f06f 0304 	mvn.w	r3, #4
 800f0aa:	e009      	b.n	800f0c0 <BSP_ENV_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800f0ac:	6a3b      	ldr	r3, [r7, #32]
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	623b      	str	r3, [r7, #32]
  for (i = 0; i < ENV_SENSOR_FUNCTIONS_NBR; i++)
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	61fb      	str	r3, [r7, #28]
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	2b02      	cmp	r3, #2
 800f0bc:	d9d1      	bls.n	800f062 <BSP_ENV_SENSOR_Init+0x9a>
  }

  return ret;
 800f0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3728      	adds	r7, #40	@ 0x28
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20001b64 	.word	0x20001b64
 800f0cc:	20001b54 	.word	0x20001b54
 800f0d0:	20000558 	.word	0x20000558
 800f0d4:	20001b58 	.word	0x20001b58

0800f0d8 <BSP_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d003      	beq.n	800f0f0 <BSP_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f0e8:	f06f 0301 	mvn.w	r3, #1
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	e028      	b.n	800f142 <BSP_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800f0f0:	4a16      	ldr	r2, [pc, #88]	@ (800f14c <BSP_ENV_SENSOR_Enable+0x74>)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	4013      	ands	r3, r2
 800f0fc:	683a      	ldr	r2, [r7, #0]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d11c      	bne.n	800f13c <BSP_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800f102:	4a13      	ldr	r2, [pc, #76]	@ (800f150 <BSP_ENV_SENSOR_Enable+0x78>)
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f10a:	4812      	ldr	r0, [pc, #72]	@ (800f154 <BSP_ENV_SENSOR_Enable+0x7c>)
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	4613      	mov	r3, r2
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	4413      	add	r3, r2
 800f114:	440b      	add	r3, r1
 800f116:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	490e      	ldr	r1, [pc, #56]	@ (800f158 <BSP_ENV_SENSOR_Enable+0x80>)
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f124:	4610      	mov	r0, r2
 800f126:	4798      	blx	r3
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d003      	beq.n	800f136 <BSP_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f12e:	f06f 0304 	mvn.w	r3, #4
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	e005      	b.n	800f142 <BSP_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f136:	2300      	movs	r3, #0
 800f138:	60fb      	str	r3, [r7, #12]
 800f13a:	e002      	b.n	800f142 <BSP_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800f13c:	f06f 0301 	mvn.w	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f142:	68fb      	ldr	r3, [r7, #12]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	20001b68 	.word	0x20001b68
 800f150:	20000558 	.word	0x20000558
 800f154:	20001b58 	.word	0x20001b58
 800f158:	20001b54 	.word	0x20001b54

0800f15c <BSP_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t BSP_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d003      	beq.n	800f176 <BSP_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f16e:	f06f 0301 	mvn.w	r3, #1
 800f172:	617b      	str	r3, [r7, #20]
 800f174:	e029      	b.n	800f1ca <BSP_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800f176:	4a17      	ldr	r2, [pc, #92]	@ (800f1d4 <BSP_ENV_SENSOR_GetValue+0x78>)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	4013      	ands	r3, r2
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	429a      	cmp	r2, r3
 800f186:	d11d      	bne.n	800f1c4 <BSP_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800f188:	4a13      	ldr	r2, [pc, #76]	@ (800f1d8 <BSP_ENV_SENSOR_GetValue+0x7c>)
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f190:	4812      	ldr	r0, [pc, #72]	@ (800f1dc <BSP_ENV_SENSOR_GetValue+0x80>)
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	4613      	mov	r3, r2
 800f196:	005b      	lsls	r3, r3, #1
 800f198:	4413      	add	r3, r2
 800f19a:	440b      	add	r3, r1
 800f19c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f1a0:	691b      	ldr	r3, [r3, #16]
 800f1a2:	490f      	ldr	r1, [pc, #60]	@ (800f1e0 <BSP_ENV_SENSOR_GetValue+0x84>)
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f1aa:	6879      	ldr	r1, [r7, #4]
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	4798      	blx	r3
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d003      	beq.n	800f1be <BSP_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f1b6:	f06f 0304 	mvn.w	r3, #4
 800f1ba:	617b      	str	r3, [r7, #20]
 800f1bc:	e005      	b.n	800f1ca <BSP_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	617b      	str	r3, [r7, #20]
 800f1c2:	e002      	b.n	800f1ca <BSP_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800f1c4:	f06f 0301 	mvn.w	r3, #1
 800f1c8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800f1ca:	697b      	ldr	r3, [r7, #20]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3718      	adds	r7, #24
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20001b68 	.word	0x20001b68
 800f1d8:	20000558 	.word	0x20000558
 800f1dc:	20001b58 	.word	0x20001b58
 800f1e0:	20001b54 	.word	0x20001b54

0800f1e4 <STTS22H_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b090      	sub	sp, #64	@ 0x40
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800f1f4:	2371      	movs	r3, #113	@ 0x71
 800f1f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  io_ctx.Init        = STM32WB5MM_DK_I2C_Init;
 800f1fa:	4b40      	ldr	r3, [pc, #256]	@ (800f2fc <STTS22H_0_Probe+0x118>)
 800f1fc:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = STM32WB5MM_DK_I2C_DeInit;
 800f1fe:	4b40      	ldr	r3, [pc, #256]	@ (800f300 <STTS22H_0_Probe+0x11c>)
 800f200:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.ReadReg     = STM32WB5MM_DK_I2C_ReadReg;
 800f202:	4b40      	ldr	r3, [pc, #256]	@ (800f304 <STTS22H_0_Probe+0x120>)
 800f204:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.WriteReg    = STM32WB5MM_DK_I2C_WriteReg;
 800f206:	4b40      	ldr	r3, [pc, #256]	@ (800f308 <STTS22H_0_Probe+0x124>)
 800f208:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.GetTick     = STM32WB5MM_DK_GetTick;
 800f20a:	4b40      	ldr	r3, [pc, #256]	@ (800f30c <STTS22H_0_Probe+0x128>)
 800f20c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800f20e:	f107 0320 	add.w	r3, r7, #32
 800f212:	4619      	mov	r1, r3
 800f214:	483e      	ldr	r0, [pc, #248]	@ (800f310 <STTS22H_0_Probe+0x12c>)
 800f216:	f7fe f92f 	bl	800d478 <STTS22H_RegisterBusIO>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d003      	beq.n	800f228 <STTS22H_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f220:	f06f 0306 	mvn.w	r3, #6
 800f224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f226:	e063      	b.n	800f2f0 <STTS22H_0_Probe+0x10c>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800f228:	f107 031f 	add.w	r3, r7, #31
 800f22c:	4619      	mov	r1, r3
 800f22e:	4838      	ldr	r0, [pc, #224]	@ (800f310 <STTS22H_0_Probe+0x12c>)
 800f230:	f7fe f9bd 	bl	800d5ae <STTS22H_ReadID>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d003      	beq.n	800f242 <STTS22H_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f23a:	f06f 0306 	mvn.w	r3, #6
 800f23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f240:	e056      	b.n	800f2f0 <STTS22H_0_Probe+0x10c>
  }
  else if (id != STTS22H_ID)
 800f242:	7ffb      	ldrb	r3, [r7, #31]
 800f244:	2ba0      	cmp	r3, #160	@ 0xa0
 800f246:	d003      	beq.n	800f250 <STTS22H_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f248:	f06f 0306 	mvn.w	r3, #6
 800f24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f24e:	e04f      	b.n	800f2f0 <STTS22H_0_Probe+0x10c>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800f250:	f107 030c 	add.w	r3, r7, #12
 800f254:	4619      	mov	r1, r3
 800f256:	482e      	ldr	r0, [pc, #184]	@ (800f310 <STTS22H_0_Probe+0x12c>)
 800f258:	f7fe f9c4 	bl	800d5e4 <STTS22H_GetCapabilities>
    EnvCtx[ENV_SENSOR_STTS22H_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800f25c:	7b3b      	ldrb	r3, [r7, #12]
 800f25e:	461a      	mov	r2, r3
 800f260:	7b7b      	ldrb	r3, [r7, #13]
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800f266:	7bbb      	ldrb	r3, [r7, #14]
 800f268:	009b      	lsls	r3, r3, #2
    EnvCtx[ENV_SENSOR_STTS22H_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800f26a:	4313      	orrs	r3, r2
 800f26c:	4a29      	ldr	r2, [pc, #164]	@ (800f314 <STTS22H_0_Probe+0x130>)
 800f26e:	6013      	str	r3, [r2, #0]

    EnvCompObj[ENV_SENSOR_STTS22H_0] = &stts22h_obj_0;
 800f270:	4b29      	ldr	r3, [pc, #164]	@ (800f318 <STTS22H_0_Probe+0x134>)
 800f272:	4a27      	ldr	r2, [pc, #156]	@ (800f310 <STTS22H_0_Probe+0x12c>)
 800f274:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[ENV_SENSOR_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800f276:	4b29      	ldr	r3, [pc, #164]	@ (800f31c <STTS22H_0_Probe+0x138>)
 800f278:	4a29      	ldr	r2, [pc, #164]	@ (800f320 <STTS22H_0_Probe+0x13c>)
 800f27a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800f27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d11d      	bne.n	800f2be <STTS22H_0_Probe+0xda>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f003 0301 	and.w	r3, r3, #1
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d018      	beq.n	800f2be <STTS22H_0_Probe+0xda>
 800f28c:	7b3b      	ldrb	r3, [r7, #12]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d115      	bne.n	800f2be <STTS22H_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[ENV_SENSOR_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800f292:	4b24      	ldr	r3, [pc, #144]	@ (800f324 <STTS22H_0_Probe+0x140>)
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	4a24      	ldr	r2, [pc, #144]	@ (800f328 <STTS22H_0_Probe+0x144>)
 800f298:	4924      	ldr	r1, [pc, #144]	@ (800f32c <STTS22H_0_Probe+0x148>)
 800f29a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[ENV_SENSOR_STTS22H_0]->Init(EnvCompObj[ENV_SENSOR_STTS22H_0]) != STTS22H_OK)
 800f29e:	4b1f      	ldr	r3, [pc, #124]	@ (800f31c <STTS22H_0_Probe+0x138>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f318 <STTS22H_0_Probe+0x134>)
 800f2a6:	6812      	ldr	r2, [r2, #0]
 800f2a8:	4610      	mov	r0, r2
 800f2aa:	4798      	blx	r3
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d003      	beq.n	800f2ba <STTS22H_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f2b2:	f06f 0304 	mvn.w	r3, #4
 800f2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2b8:	e001      	b.n	800f2be <STTS22H_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800f2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10a      	bne.n	800f2da <STTS22H_0_Probe+0xf6>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f003 0304 	and.w	r3, r3, #4
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d005      	beq.n	800f2da <STTS22H_0_Probe+0xf6>
 800f2ce:	7bbb      	ldrb	r3, [r7, #14]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d102      	bne.n	800f2da <STTS22H_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f2d4:	f06f 0304 	mvn.w	r3, #4
 800f2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800f2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d107      	bne.n	800f2f0 <STTS22H_0_Probe+0x10c>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f003 0302 	and.w	r3, r3, #2
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <STTS22H_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f2ea:	f06f 0304 	mvn.w	r3, #4
 800f2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }

  return ret;
 800f2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3740      	adds	r7, #64	@ 0x40
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	0800e52d 	.word	0x0800e52d
 800f300:	0800e5ad 	.word	0x0800e5ad
 800f304:	0800e62d 	.word	0x0800e62d
 800f308:	0800e5fd 	.word	0x0800e5fd
 800f30c:	0800e7a5 	.word	0x0800e7a5
 800f310:	20001b6c 	.word	0x20001b6c
 800f314:	20001b68 	.word	0x20001b68
 800f318:	20001b54 	.word	0x20001b54
 800f31c:	20001b64 	.word	0x20001b64
 800f320:	2000051c 	.word	0x2000051c
 800f324:	20000558 	.word	0x20000558
 800f328:	20001b58 	.word	0x20001b58
 800f32c:	2000052c 	.word	0x2000052c

0800f330 <LL_AHB2_GRP1_EnableClock>:
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800f338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f33c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f33e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4313      	orrs	r3, r2
 800f346:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800f348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f34c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4013      	ands	r3, r2
 800f352:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f354:	68fb      	ldr	r3, [r7, #12]
}
 800f356:	bf00      	nop
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
	...

0800f364 <BSP_LCD_Init>:
  * @param  Instance LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR )
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d003      	beq.n	800f380 <BSP_LCD_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f378:	f06f 0301 	mvn.w	r3, #1
 800f37c:	60fb      	str	r3, [r7, #12]
 800f37e:	e032      	b.n	800f3e6 <BSP_LCD_Init+0x82>
  }
  else
  {
    if(Orientation == LCD_ORIENTATION_LANDSCAPE)
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d113      	bne.n	800f3ae <BSP_LCD_Init+0x4a>
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_WIDTH;
 800f386:	491a      	ldr	r1, [pc, #104]	@ (800f3f0 <BSP_LCD_Init+0x8c>)
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	4613      	mov	r3, r2
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	4413      	add	r3, r2
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	440b      	add	r3, r1
 800f394:	2280      	movs	r2, #128	@ 0x80
 800f396:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_HEIGHT;
 800f398:	4915      	ldr	r1, [pc, #84]	@ (800f3f0 <BSP_LCD_Init+0x8c>)
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	4613      	mov	r3, r2
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	4413      	add	r3, r2
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	440b      	add	r3, r1
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	2240      	movs	r2, #64	@ 0x40
 800f3aa:	601a      	str	r2, [r3, #0]
 800f3ac:	e012      	b.n	800f3d4 <BSP_LCD_Init+0x70>
    }
    else
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_HEIGHT;
 800f3ae:	4910      	ldr	r1, [pc, #64]	@ (800f3f0 <BSP_LCD_Init+0x8c>)
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	440b      	add	r3, r1
 800f3bc:	2240      	movs	r2, #64	@ 0x40
 800f3be:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_WIDTH;
 800f3c0:	490b      	ldr	r1, [pc, #44]	@ (800f3f0 <BSP_LCD_Init+0x8c>)
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	005b      	lsls	r3, r3, #1
 800f3c8:	4413      	add	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	440b      	add	r3, r1
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	2280      	movs	r2, #128	@ 0x80
 800f3d2:	601a      	str	r2, [r3, #0]
    }
    
    /* registers the function and initialize the controller */
    if(SSD1315_Probe(Orientation) != BSP_ERROR_NONE)
 800f3d4:	6838      	ldr	r0, [r7, #0]
 800f3d6:	f000 fb27 	bl	800fa28 <SSD1315_Probe>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d002      	beq.n	800f3e6 <BSP_LCD_Init+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f3e0:	f06f 0306 	mvn.w	r3, #6
 800f3e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	20001ba0 	.word	0x20001ba0

0800f3f4 <BSP_LCD_GetPixelFormat>:
  * @param  Instance LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b085      	sub	sp, #20
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f3fe:	2300      	movs	r3, #0
 800f400:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d003      	beq.n	800f410 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f408:	f06f 0301 	mvn.w	r3, #1
 800f40c:	60fb      	str	r3, [r7, #12]
 800f40e:	e002      	b.n	800f416 <BSP_LCD_GetPixelFormat+0x22>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f410:	f06f 030a 	mvn.w	r3, #10
 800f414:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f416:	68fb      	ldr	r3, [r7, #12]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3714      	adds	r7, #20
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <BSP_LCD_GetXSize>:
  * @param  Instance LCD Instance
  * @param  pXSize pointer to Used LCD X size
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *pXSize)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f42e:	2300      	movs	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f438:	f06f 0301 	mvn.w	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	e01d      	b.n	800f47c <BSP_LCD_GetXSize+0x58>
  }
  else if(LcdDrv->GetXSize != NULL)
 800f440:	4b11      	ldr	r3, [pc, #68]	@ (800f488 <BSP_LCD_GetXSize+0x64>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00e      	beq.n	800f468 <BSP_LCD_GetXSize+0x44>
  {
    if(LcdDrv->GetXSize(LcdCompObj, pXSize) < 0)
 800f44a:	4b0f      	ldr	r3, [pc, #60]	@ (800f488 <BSP_LCD_GetXSize+0x64>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f450:	4a0e      	ldr	r2, [pc, #56]	@ (800f48c <BSP_LCD_GetXSize+0x68>)
 800f452:	6812      	ldr	r2, [r2, #0]
 800f454:	6839      	ldr	r1, [r7, #0]
 800f456:	4610      	mov	r0, r2
 800f458:	4798      	blx	r3
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	da0d      	bge.n	800f47c <BSP_LCD_GetXSize+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f460:	f06f 0304 	mvn.w	r3, #4
 800f464:	60fb      	str	r3, [r7, #12]
 800f466:	e009      	b.n	800f47c <BSP_LCD_GetXSize+0x58>
    }
  }
  else
  {
    *pXSize = LcdCtx[Instance].Width;
 800f468:	4909      	ldr	r1, [pc, #36]	@ (800f490 <BSP_LCD_GetXSize+0x6c>)
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	4613      	mov	r3, r2
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	4413      	add	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	440b      	add	r3, r1
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 800f47c:	68fb      	ldr	r3, [r7, #12]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	20001bac 	.word	0x20001bac
 800f48c:	20001b9c 	.word	0x20001b9c
 800f490:	20001ba0 	.word	0x20001ba0

0800f494 <BSP_LCD_GetYSize>:
  * @param  Instance LCD Instance
  * @param  pYSize pointer to Used LCD Y size
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *pYSize)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d003      	beq.n	800f4b0 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f4a8:	f06f 0301 	mvn.w	r3, #1
 800f4ac:	60fb      	str	r3, [r7, #12]
 800f4ae:	e01e      	b.n	800f4ee <BSP_LCD_GetYSize+0x5a>
  }
  else if(LcdDrv->GetYSize != NULL)
 800f4b0:	4b11      	ldr	r3, [pc, #68]	@ (800f4f8 <BSP_LCD_GetYSize+0x64>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00e      	beq.n	800f4d8 <BSP_LCD_GetYSize+0x44>
  {
    if(LcdDrv->GetYSize(LcdCompObj, pYSize) < 0)
 800f4ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f8 <BSP_LCD_GetYSize+0x64>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4c0:	4a0e      	ldr	r2, [pc, #56]	@ (800f4fc <BSP_LCD_GetYSize+0x68>)
 800f4c2:	6812      	ldr	r2, [r2, #0]
 800f4c4:	6839      	ldr	r1, [r7, #0]
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	4798      	blx	r3
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	da0e      	bge.n	800f4ee <BSP_LCD_GetYSize+0x5a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f4d0:	f06f 0304 	mvn.w	r3, #4
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	e00a      	b.n	800f4ee <BSP_LCD_GetYSize+0x5a>
    }
  }
  else
  {
    *pYSize = LcdCtx[Instance].Height;
 800f4d8:	4909      	ldr	r1, [pc, #36]	@ (800f500 <BSP_LCD_GetYSize+0x6c>)
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	4613      	mov	r3, r2
 800f4de:	005b      	lsls	r3, r3, #1
 800f4e0:	4413      	add	r3, r2
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	440b      	add	r3, r1
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3710      	adds	r7, #16
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20001bac 	.word	0x20001bac
 800f4fc:	20001b9c 	.word	0x20001b9c
 800f500:	20001ba0 	.word	0x20001ba0

0800f504 <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800f50c:	2300      	movs	r3, #0
 800f50e:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d003      	beq.n	800f51e <BSP_LCD_DisplayOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f516:	f06f 0301 	mvn.w	r3, #1
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	e015      	b.n	800f54a <BSP_LCD_DisplayOn+0x46>
  }
  else if(LcdDrv->DisplayOn != NULL)
 800f51e:	4b0d      	ldr	r3, [pc, #52]	@ (800f554 <BSP_LCD_DisplayOn+0x50>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00d      	beq.n	800f544 <BSP_LCD_DisplayOn+0x40>
  {
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 800f528:	4b0a      	ldr	r3, [pc, #40]	@ (800f554 <BSP_LCD_DisplayOn+0x50>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	4a0a      	ldr	r2, [pc, #40]	@ (800f558 <BSP_LCD_DisplayOn+0x54>)
 800f530:	6812      	ldr	r2, [r2, #0]
 800f532:	4610      	mov	r0, r2
 800f534:	4798      	blx	r3
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	da06      	bge.n	800f54a <BSP_LCD_DisplayOn+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f53c:	f06f 0304 	mvn.w	r3, #4
 800f540:	60fb      	str	r3, [r7, #12]
 800f542:	e002      	b.n	800f54a <BSP_LCD_DisplayOn+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f544:	f06f 030a 	mvn.w	r3, #10
 800f548:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f54a:	68fb      	ldr	r3, [r7, #12]
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	20001bac 	.word	0x20001bac
 800f558:	20001b9c 	.word	0x20001b9c

0800f55c <BSP_LCD_Refresh>:
  * @brief  Refresh the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_Refresh(uint32_t Instance)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800f564:	2300      	movs	r3, #0
 800f566:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d003      	beq.n	800f576 <BSP_LCD_Refresh+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f56e:	f06f 0301 	mvn.w	r3, #1
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	e015      	b.n	800f5a2 <BSP_LCD_Refresh+0x46>
  }
  else if(LcdDrv->Refresh != NULL)
 800f576:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ac <BSP_LCD_Refresh+0x50>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00d      	beq.n	800f59c <BSP_LCD_Refresh+0x40>
  {
    if(LcdDrv->Refresh(LcdCompObj) < 0)
 800f580:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ac <BSP_LCD_Refresh+0x50>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f586:	4a0a      	ldr	r2, [pc, #40]	@ (800f5b0 <BSP_LCD_Refresh+0x54>)
 800f588:	6812      	ldr	r2, [r2, #0]
 800f58a:	4610      	mov	r0, r2
 800f58c:	4798      	blx	r3
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	da06      	bge.n	800f5a2 <BSP_LCD_Refresh+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f594:	f06f 0304 	mvn.w	r3, #4
 800f598:	60fb      	str	r3, [r7, #12]
 800f59a:	e002      	b.n	800f5a2 <BSP_LCD_Refresh+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f59c:	f06f 030a 	mvn.w	r3, #10
 800f5a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3710      	adds	r7, #16
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	20001bac 	.word	0x20001bac
 800f5b0:	20001b9c 	.word	0x20001b9c

0800f5b4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800f5b4:	b590      	push	{r4, r7, lr}
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
 800f5c0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <BSP_LCD_DrawBitmap+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f5cc:	f06f 0301 	mvn.w	r3, #1
 800f5d0:	617b      	str	r3, [r7, #20]
 800f5d2:	e017      	b.n	800f604 <BSP_LCD_DrawBitmap+0x50>
  }
  else if(LcdDrv->DrawBitmap != NULL)
 800f5d4:	4b0e      	ldr	r3, [pc, #56]	@ (800f610 <BSP_LCD_DrawBitmap+0x5c>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00f      	beq.n	800f5fe <BSP_LCD_DrawBitmap+0x4a>
  {
    /* Draw the bitmap on LCD */
    if (LcdDrv->DrawBitmap(LcdCompObj, Xpos, Ypos, pBmp) < 0)
 800f5de:	4b0c      	ldr	r3, [pc, #48]	@ (800f610 <BSP_LCD_DrawBitmap+0x5c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800f5e4:	4b0b      	ldr	r3, [pc, #44]	@ (800f614 <BSP_LCD_DrawBitmap+0x60>)
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	68b9      	ldr	r1, [r7, #8]
 800f5ee:	47a0      	blx	r4
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	da06      	bge.n	800f604 <BSP_LCD_DrawBitmap+0x50>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f5f6:	f06f 0304 	mvn.w	r3, #4
 800f5fa:	617b      	str	r3, [r7, #20]
 800f5fc:	e002      	b.n	800f604 <BSP_LCD_DrawBitmap+0x50>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f5fe:	f06f 030a 	mvn.w	r3, #10
 800f602:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800f604:	697b      	ldr	r3, [r7, #20]
}
 800f606:	4618      	mov	r0, r3
 800f608:	371c      	adds	r7, #28
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd90      	pop	{r4, r7, pc}
 800f60e:	bf00      	nop
 800f610:	20001bac 	.word	0x20001bac
 800f614:	20001b9c 	.word	0x20001b9c

0800f618 <BSP_LCD_FillRGBRect>:
  * @param  Width width of the rectangle to fill.
  * @param  Height height of the rectangle to fill.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800f618:	b590      	push	{r4, r7, lr}
 800f61a:	b089      	sub	sp, #36	@ 0x24
 800f61c:	af02      	add	r7, sp, #8
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
   int32_t ret = BSP_ERROR_NONE;
 800f626:	2300      	movs	r3, #0
 800f628:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d003      	beq.n	800f638 <BSP_LCD_FillRGBRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f630:	f06f 0301 	mvn.w	r3, #1
 800f634:	617b      	str	r3, [r7, #20]
 800f636:	e01b      	b.n	800f670 <BSP_LCD_FillRGBRect+0x58>
  }
  else if(LcdDrv->FillRGBRect != NULL)
 800f638:	4b10      	ldr	r3, [pc, #64]	@ (800f67c <BSP_LCD_FillRGBRect+0x64>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d013      	beq.n	800f66a <BSP_LCD_FillRGBRect+0x52>
  {
    /* shift bitmap on LCD */
    if (LcdDrv->FillRGBRect(LcdCompObj, Xpos, Ypos, pData, Width, Height) < 0)
 800f642:	4b0e      	ldr	r3, [pc, #56]	@ (800f67c <BSP_LCD_FillRGBRect+0x64>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800f648:	4b0d      	ldr	r3, [pc, #52]	@ (800f680 <BSP_LCD_FillRGBRect+0x68>)
 800f64a:	6818      	ldr	r0, [r3, #0]
 800f64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f64e:	9301      	str	r3, [sp, #4]
 800f650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	68b9      	ldr	r1, [r7, #8]
 800f65a:	47a0      	blx	r4
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	da06      	bge.n	800f670 <BSP_LCD_FillRGBRect+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f662:	f06f 0304 	mvn.w	r3, #4
 800f666:	617b      	str	r3, [r7, #20]
 800f668:	e002      	b.n	800f670 <BSP_LCD_FillRGBRect+0x58>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f66a:	f06f 030a 	mvn.w	r3, #10
 800f66e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800f670:	697b      	ldr	r3, [r7, #20]
}
 800f672:	4618      	mov	r0, r3
 800f674:	371c      	adds	r7, #28
 800f676:	46bd      	mov	sp, r7
 800f678:	bd90      	pop	{r4, r7, pc}
 800f67a:	bf00      	nop
 800f67c:	20001bac 	.word	0x20001bac
 800f680:	20001b9c 	.word	0x20001b9c

0800f684 <BSP_LCD_DrawHLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800f684:	b590      	push	{r4, r7, lr}
 800f686:	b089      	sub	sp, #36	@ 0x24
 800f688:	af02      	add	r7, sp, #8
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f692:	2300      	movs	r3, #0
 800f694:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d003      	beq.n	800f6a4 <BSP_LCD_DrawHLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f69c:	f06f 0301 	mvn.w	r3, #1
 800f6a0:	617b      	str	r3, [r7, #20]
 800f6a2:	e019      	b.n	800f6d8 <BSP_LCD_DrawHLine+0x54>
  }

  else if(LcdDrv->DrawHLine != NULL)
 800f6a4:	4b0f      	ldr	r3, [pc, #60]	@ (800f6e4 <BSP_LCD_DrawHLine+0x60>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d011      	beq.n	800f6d2 <BSP_LCD_DrawHLine+0x4e>
  {
    /* Draw the horizontal line on LCD */
    if (LcdDrv->DrawHLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 800f6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f6e4 <BSP_LCD_DrawHLine+0x60>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f6e8 <BSP_LCD_DrawHLine+0x64>)
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	68b9      	ldr	r1, [r7, #8]
 800f6c2:	47a0      	blx	r4
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	da06      	bge.n	800f6d8 <BSP_LCD_DrawHLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f6ca:	f06f 0304 	mvn.w	r3, #4
 800f6ce:	617b      	str	r3, [r7, #20]
 800f6d0:	e002      	b.n	800f6d8 <BSP_LCD_DrawHLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f6d2:	f06f 030a 	mvn.w	r3, #10
 800f6d6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800f6d8:	697b      	ldr	r3, [r7, #20]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	371c      	adds	r7, #28
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd90      	pop	{r4, r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	20001bac 	.word	0x20001bac
 800f6e8:	20001b9c 	.word	0x20001b9c

0800f6ec <BSP_LCD_DrawVLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800f6ec:	b590      	push	{r4, r7, lr}
 800f6ee:	b089      	sub	sp, #36	@ 0x24
 800f6f0:	af02      	add	r7, sp, #8
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d003      	beq.n	800f70c <BSP_LCD_DrawVLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f704:	f06f 0301 	mvn.w	r3, #1
 800f708:	617b      	str	r3, [r7, #20]
 800f70a:	e019      	b.n	800f740 <BSP_LCD_DrawVLine+0x54>
  }
  else if(LcdDrv->DrawVLine != NULL)
 800f70c:	4b0f      	ldr	r3, [pc, #60]	@ (800f74c <BSP_LCD_DrawVLine+0x60>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f712:	2b00      	cmp	r3, #0
 800f714:	d011      	beq.n	800f73a <BSP_LCD_DrawVLine+0x4e>
  {
    /* Draw the vertical line on LCD */
    if (LcdDrv->DrawVLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 800f716:	4b0d      	ldr	r3, [pc, #52]	@ (800f74c <BSP_LCD_DrawVLine+0x60>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 800f71c:	4b0c      	ldr	r3, [pc, #48]	@ (800f750 <BSP_LCD_DrawVLine+0x64>)
 800f71e:	6818      	ldr	r0, [r3, #0]
 800f720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	68b9      	ldr	r1, [r7, #8]
 800f72a:	47a0      	blx	r4
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	da06      	bge.n	800f740 <BSP_LCD_DrawVLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f732:	f06f 0304 	mvn.w	r3, #4
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e002      	b.n	800f740 <BSP_LCD_DrawVLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800f73a:	f06f 030a 	mvn.w	r3, #10
 800f73e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800f740:	697b      	ldr	r3, [r7, #20]
}
 800f742:	4618      	mov	r0, r3
 800f744:	371c      	adds	r7, #28
 800f746:	46bd      	mov	sp, r7
 800f748:	bd90      	pop	{r4, r7, pc}
 800f74a:	bf00      	nop
 800f74c:	20001bac 	.word	0x20001bac
 800f750:	20001b9c 	.word	0x20001b9c

0800f754 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Color of rectangle
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b089      	sub	sp, #36	@ 0x24
 800f758:	af02      	add	r7, sp, #8
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f762:	2300      	movs	r3, #0
 800f764:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d003      	beq.n	800f774 <BSP_LCD_FillRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f76c:	f06f 0301 	mvn.w	r3, #1
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e012      	b.n	800f79a <BSP_LCD_FillRect+0x46>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, Xpos, Ypos, Width, Height, Color) < 0)
 800f774:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a4 <BSP_LCD_FillRect+0x50>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800f77a:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a8 <BSP_LCD_FillRect+0x54>)
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f780:	9301      	str	r3, [sp, #4]
 800f782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	68b9      	ldr	r1, [r7, #8]
 800f78c:	47a0      	blx	r4
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	da02      	bge.n	800f79a <BSP_LCD_FillRect+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f794:	f06f 0304 	mvn.w	r3, #4
 800f798:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800f79a:	697b      	ldr	r3, [r7, #20]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	371c      	adds	r7, #28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd90      	pop	{r4, r7, pc}
 800f7a4:	20001bac 	.word	0x20001bac
 800f7a8:	20001b9c 	.word	0x20001b9c

0800f7ac <BSP_LCD_Clear>:
  * @param  Instance LCD Instance
  * @param  Color to set
  * @retval BSP status
  */
int32_t BSP_LCD_Clear(uint32_t Instance, uint32_t Color)
{
 800f7ac:	b5b0      	push	{r4, r5, r7, lr}
 800f7ae:	b086      	sub	sp, #24
 800f7b0:	af02      	add	r7, sp, #8
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <BSP_LCD_Clear+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f7c0:	f06f 0301 	mvn.w	r3, #1
 800f7c4:	60fb      	str	r3, [r7, #12]
 800f7c6:	e022      	b.n	800f80e <BSP_LCD_Clear+0x62>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, 0, 0, LcdCtx[Instance].Width, LcdCtx[Instance].Height, Color) < 0)
 800f7c8:	4b13      	ldr	r3, [pc, #76]	@ (800f818 <BSP_LCD_Clear+0x6c>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800f7ce:	4b13      	ldr	r3, [pc, #76]	@ (800f81c <BSP_LCD_Clear+0x70>)
 800f7d0:	6818      	ldr	r0, [r3, #0]
 800f7d2:	4913      	ldr	r1, [pc, #76]	@ (800f820 <BSP_LCD_Clear+0x74>)
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	4413      	add	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	440b      	add	r3, r1
 800f7e0:	6819      	ldr	r1, [r3, #0]
 800f7e2:	4d0f      	ldr	r5, [pc, #60]	@ (800f820 <BSP_LCD_Clear+0x74>)
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	4413      	add	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	442b      	add	r3, r5
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	683a      	ldr	r2, [r7, #0]
 800f7f6:	9201      	str	r2, [sp, #4]
 800f7f8:	9300      	str	r3, [sp, #0]
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	2100      	movs	r1, #0
 800f800:	47a0      	blx	r4
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	da02      	bge.n	800f80e <BSP_LCD_Clear+0x62>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f808:	f06f 0304 	mvn.w	r3, #4
 800f80c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f80e:	68fb      	ldr	r3, [r7, #12]
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bdb0      	pop	{r4, r5, r7, pc}
 800f818:	20001bac 	.word	0x20001bac
 800f81c:	20001b9c 	.word	0x20001b9c
 800f820:	20001ba0 	.word	0x20001ba0

0800f824 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color pointer to RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800f824:	b590      	push	{r4, r7, lr}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
 800f830:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f832:	2300      	movs	r3, #0
 800f834:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d003      	beq.n	800f844 <BSP_LCD_ReadPixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f83c:	f06f 0301 	mvn.w	r3, #1
 800f840:	617b      	str	r3, [r7, #20]
 800f842:	e00e      	b.n	800f862 <BSP_LCD_ReadPixel+0x3e>
  }
  else
  {
    if(LcdDrv->GetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 800f844:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <BSP_LCD_ReadPixel+0x48>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800f84a:	4b09      	ldr	r3, [pc, #36]	@ (800f870 <BSP_LCD_ReadPixel+0x4c>)
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	68b9      	ldr	r1, [r7, #8]
 800f854:	47a0      	blx	r4
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	da02      	bge.n	800f862 <BSP_LCD_ReadPixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f85c:	f06f 0304 	mvn.w	r3, #4
 800f860:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800f862:	697b      	ldr	r3, [r7, #20]
}
 800f864:	4618      	mov	r0, r3
 800f866:	371c      	adds	r7, #28
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd90      	pop	{r4, r7, pc}
 800f86c:	20001bac 	.word	0x20001bac
 800f870:	20001b9c 	.word	0x20001b9c

0800f874 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800f874:	b590      	push	{r4, r7, lr}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
 800f880:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f882:	2300      	movs	r3, #0
 800f884:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d003      	beq.n	800f894 <BSP_LCD_WritePixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f88c:	f06f 0301 	mvn.w	r3, #1
 800f890:	617b      	str	r3, [r7, #20]
 800f892:	e00e      	b.n	800f8b2 <BSP_LCD_WritePixel+0x3e>
  }
  else
  {
    if(LcdDrv->SetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 800f894:	4b09      	ldr	r3, [pc, #36]	@ (800f8bc <BSP_LCD_WritePixel+0x48>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 800f89a:	4b09      	ldr	r3, [pc, #36]	@ (800f8c0 <BSP_LCD_WritePixel+0x4c>)
 800f89c:	6818      	ldr	r0, [r3, #0]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	47a0      	blx	r4
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	da02      	bge.n	800f8b2 <BSP_LCD_WritePixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f8ac:	f06f 0304 	mvn.w	r3, #4
 800f8b0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800f8b2:	697b      	ldr	r3, [r7, #20]
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	371c      	adds	r7, #28
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd90      	pop	{r4, r7, pc}
 800f8bc:	20001bac 	.word	0x20001bac
 800f8c0:	20001b9c 	.word	0x20001b9c

0800f8c4 <BSP_LCD_WriteReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_WriteReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	6039      	str	r1, [r7, #0]
 800f8ce:	80fb      	strh	r3, [r7, #6]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	60fb      	str	r3, [r7, #12]

  /* Send Data */
  if((ret == BSP_ERROR_NONE) && (Length > 0U))
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10d      	bne.n	800f8fa <BSP_LCD_WriteReg+0x36>
 800f8de:	88bb      	ldrh	r3, [r7, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00a      	beq.n	800f8fa <BSP_LCD_WriteReg+0x36>
  {
    if(BSP_LCD_SendData(pData, Length) != BSP_ERROR_NONE)
 800f8e4:	88bb      	ldrh	r3, [r7, #4]
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6838      	ldr	r0, [r7, #0]
 800f8ea:	f000 f80b 	bl	800f904 <BSP_LCD_SendData>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d002      	beq.n	800f8fa <BSP_LCD_WriteReg+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f8f4:	f06f 0307 	mvn.w	r3, #7
 800f8f8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <BSP_LCD_SendData>:
  * @param  pData pointer to data to write to LCD SRAM.
  * @param  Length length of data to write to LCD SRAM
  * @retval Error status
  */
int32_t BSP_LCD_SendData(uint8_t *pData, uint16_t Length)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	460b      	mov	r3, r1
 800f90e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800f910:	2300      	movs	r3, #0
 800f912:	60fb      	str	r3, [r7, #12]
  if(Length==1)
 800f914:	887b      	ldrh	r3, [r7, #2]
 800f916:	2b01      	cmp	r3, #1
 800f918:	d11b      	bne.n	800f952 <BSP_LCD_SendData+0x4e>
  {
    /* Reset LCD control line CS */
    LCD_CS_LOW();
 800f91a:	2200      	movs	r2, #0
 800f91c:	2101      	movs	r1, #1
 800f91e:	4820      	ldr	r0, [pc, #128]	@ (800f9a0 <BSP_LCD_SendData+0x9c>)
 800f920:	f001 fb8a 	bl	8011038 <HAL_GPIO_WritePin>
    LCD_DC_LOW();
 800f924:	2200      	movs	r2, #0
 800f926:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f92a:	481e      	ldr	r0, [pc, #120]	@ (800f9a4 <BSP_LCD_SendData+0xa0>)
 800f92c:	f001 fb84 	bl	8011038 <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 800f930:	887b      	ldrh	r3, [r7, #2]
 800f932:	4619      	mov	r1, r3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7fe fef7 	bl	800e728 <BSP_SPI1_Send>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <BSP_LCD_SendData+0x42>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 800f940:	f06f 0307 	mvn.w	r3, #7
 800f944:	60fb      	str	r3, [r7, #12]
    }
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 800f946:	2201      	movs	r2, #1
 800f948:	2101      	movs	r1, #1
 800f94a:	4815      	ldr	r0, [pc, #84]	@ (800f9a0 <BSP_LCD_SendData+0x9c>)
 800f94c:	f001 fb74 	bl	8011038 <HAL_GPIO_WritePin>
 800f950:	e020      	b.n	800f994 <BSP_LCD_SendData+0x90>
  }
  else
  { 
    LCD_CS_LOW();
 800f952:	2200      	movs	r2, #0
 800f954:	2101      	movs	r1, #1
 800f956:	4812      	ldr	r0, [pc, #72]	@ (800f9a0 <BSP_LCD_SendData+0x9c>)
 800f958:	f001 fb6e 	bl	8011038 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 800f95c:	2201      	movs	r2, #1
 800f95e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f962:	4810      	ldr	r0, [pc, #64]	@ (800f9a4 <BSP_LCD_SendData+0xa0>)
 800f964:	f001 fb68 	bl	8011038 <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 800f968:	887b      	ldrh	r3, [r7, #2]
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7fe fedb 	bl	800e728 <BSP_SPI1_Send>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <BSP_LCD_SendData+0x7a>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 800f978:	f06f 0307 	mvn.w	r3, #7
 800f97c:	60fb      	str	r3, [r7, #12]
    }
    LCD_DC_LOW() ;
 800f97e:	2200      	movs	r2, #0
 800f980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f984:	4807      	ldr	r0, [pc, #28]	@ (800f9a4 <BSP_LCD_SendData+0xa0>)
 800f986:	f001 fb57 	bl	8011038 <HAL_GPIO_WritePin>
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 800f98a:	2201      	movs	r2, #1
 800f98c:	2101      	movs	r1, #1
 800f98e:	4804      	ldr	r0, [pc, #16]	@ (800f9a0 <BSP_LCD_SendData+0x9c>)
 800f990:	f001 fb52 	bl	8011038 <HAL_GPIO_WritePin>
  }
  
  return ret;
 800f994:	68fb      	ldr	r3, [r7, #12]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	48001c00 	.word	0x48001c00
 800f9a4:	48000800 	.word	0x48000800

0800f9a8 <BSP_LCD_ReadReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_ReadReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	6039      	str	r1, [r7, #0]
 800f9b2:	80fb      	strh	r3, [r7, #6]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60fb      	str	r3, [r7, #12]
  UNUSED(Length);
  
  /* Send Reg value to Read */
  if(BSP_LCD_WriteReg(Reg, pData, 0) != BSP_ERROR_NONE)
 800f9bc:	88fb      	ldrh	r3, [r7, #6]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	6839      	ldr	r1, [r7, #0]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7ff ff7e 	bl	800f8c4 <BSP_LCD_WriteReg>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <BSP_LCD_ReadReg+0x2c>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800f9ce:	f06f 0307 	mvn.w	r3, #7
 800f9d2:	60fb      	str	r3, [r7, #12]
  }
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	2101      	movs	r1, #1
 800f9d8:	480c      	ldr	r0, [pc, #48]	@ (800fa0c <BSP_LCD_ReadReg+0x64>)
 800f9da:	f001 fb2d 	bl	8011038 <HAL_GPIO_WritePin>
  
  if (ret == BSP_ERROR_NONE)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d109      	bne.n	800f9f8 <BSP_LCD_ReadReg+0x50>
  { 
    if(BSP_SPI1_Recv(pData, 2) != BSP_ERROR_NONE)
 800f9e4:	2102      	movs	r1, #2
 800f9e6:	6838      	ldr	r0, [r7, #0]
 800f9e8:	f7fe feba 	bl	800e760 <BSP_SPI1_Recv>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d002      	beq.n	800f9f8 <BSP_LCD_ReadReg+0x50>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f9f2:	f06f 0307 	mvn.w	r3, #7
 800f9f6:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	2101      	movs	r1, #1
 800f9fc:	4803      	ldr	r0, [pc, #12]	@ (800fa0c <BSP_LCD_ReadReg+0x64>)
 800f9fe:	f001 fb1b 	bl	8011038 <HAL_GPIO_WritePin>
  
  return ret;
 800fa02:	68fb      	ldr	r3, [r7, #12]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3710      	adds	r7, #16
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	48001c00 	.word	0x48001c00

0800fa10 <LCD_MspInit>:
/**
  * @brief  Initialize the BSP LTDC Msp.
  * @retval None
  */
static void LCD_MspInit(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0
  /* turn LCD on = drive pin low (active low) */
  LCD_CS_LOW();
 800fa14:	2200      	movs	r2, #0
 800fa16:	2101      	movs	r1, #1
 800fa18:	4802      	ldr	r0, [pc, #8]	@ (800fa24 <LCD_MspInit+0x14>)
 800fa1a:	f001 fb0d 	bl	8011038 <HAL_GPIO_WritePin>
}
 800fa1e:	bf00      	nop
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	48001c00 	.word	0x48001c00

0800fa28 <SSD1315_Probe>:
  * @brief  Register Bus IOs for instance 0 if SSD1315 ID is OK
  * @param  Orientation
  * @retval BSP status
  */
static int32_t SSD1315_Probe(uint32_t Orientation)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  int32_t                 ret = BSP_ERROR_NONE;
 800fa30:	2300      	movs	r3, #0
 800fa32:	61fb      	str	r3, [r7, #28]
  SSD1315_IO_t            IOCtx;
  static SSD1315_Object_t SSD1315Obj;
  
  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 800fa34:	4b18      	ldr	r3, [pc, #96]	@ (800fa98 <SSD1315_Probe+0x70>)
 800fa36:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit           = LCD_IO_DeInit;
 800fa38:	4b18      	ldr	r3, [pc, #96]	@ (800fa9c <SSD1315_Probe+0x74>)
 800fa3a:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg          = BSP_LCD_ReadReg;
 800fa3c:	4b18      	ldr	r3, [pc, #96]	@ (800faa0 <SSD1315_Probe+0x78>)
 800fa3e:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg         = BSP_LCD_WriteReg;
 800fa40:	4b18      	ldr	r3, [pc, #96]	@ (800faa4 <SSD1315_Probe+0x7c>)
 800fa42:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick          = BSP_GetTick;
 800fa44:	4b18      	ldr	r3, [pc, #96]	@ (800faa8 <SSD1315_Probe+0x80>)
 800fa46:	61bb      	str	r3, [r7, #24]
  
  if(SSD1315_RegisterBusIO(&SSD1315Obj, &IOCtx) != SSD1315_OK)
 800fa48:	f107 0308 	add.w	r3, r7, #8
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4817      	ldr	r0, [pc, #92]	@ (800faac <SSD1315_Probe+0x84>)
 800fa50:	f7fc fd14 	bl	800c47c <SSD1315_RegisterBusIO>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <SSD1315_Probe+0x3a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fa5a:	f06f 0306 	mvn.w	r3, #6
 800fa5e:	61fb      	str	r3, [r7, #28]
 800fa60:	e015      	b.n	800fa8e <SSD1315_Probe+0x66>
  }
  else
  {
    LcdCompObj = &SSD1315Obj;
 800fa62:	4b13      	ldr	r3, [pc, #76]	@ (800fab0 <SSD1315_Probe+0x88>)
 800fa64:	4a11      	ldr	r2, [pc, #68]	@ (800faac <SSD1315_Probe+0x84>)
 800fa66:	601a      	str	r2, [r3, #0]
    
    LCD_MspInit();
 800fa68:	f7ff ffd2 	bl	800fa10 <LCD_MspInit>
    
    /* LCD Initialization */
    LcdDrv = (SSD1315_Drv_t *)&SSD1315_Driver;
 800fa6c:	4b11      	ldr	r3, [pc, #68]	@ (800fab4 <SSD1315_Probe+0x8c>)
 800fa6e:	4a12      	ldr	r2, [pc, #72]	@ (800fab8 <SSD1315_Probe+0x90>)
 800fa70:	601a      	str	r2, [r3, #0]
    if(LcdDrv->Init(LcdCompObj, SSD1315_FORMAT_DEFAULT, Orientation) != SSD1315_OK)
 800fa72:	4b10      	ldr	r3, [pc, #64]	@ (800fab4 <SSD1315_Probe+0x8c>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a0d      	ldr	r2, [pc, #52]	@ (800fab0 <SSD1315_Probe+0x88>)
 800fa7a:	6810      	ldr	r0, [r2, #0]
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	2100      	movs	r1, #0
 800fa80:	4798      	blx	r3
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <SSD1315_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa88:	f06f 0304 	mvn.w	r3, #4
 800fa8c:	61fb      	str	r3, [r7, #28]
    }
  }
  
  return ret;
 800fa8e:	69fb      	ldr	r3, [r7, #28]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3720      	adds	r7, #32
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fb81 	.word	0x0800fb81
 800faa0:	0800f9a9 	.word	0x0800f9a9
 800faa4:	0800f8c5 	.word	0x0800f8c5
 800faa8:	0800e7a5 	.word	0x0800e7a5
 800faac:	20001bb0 	.word	0x20001bb0
 800fab0:	20001b9c 	.word	0x20001b9c
 800fab4:	20001bac 	.word	0x20001bac
 800fab8:	200004b4 	.word	0x200004b4

0800fabc <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Configure the LCD Chip Select pin --------------------------------------*/
  LCD_CS_GPIO_CLK_ENABLE();
 800fac6:	2080      	movs	r0, #128	@ 0x80
 800fac8:	f7ff fc32 	bl	800f330 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_CS_PIN;
 800facc:	2301      	movs	r3, #1
 800face:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800fad0:	2301      	movs	r3, #1
 800fad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800fad4:	2300      	movs	r3, #0
 800fad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800fad8:	2300      	movs	r3, #0
 800fada:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &GPIO_InitStruct);
 800fadc:	463b      	mov	r3, r7
 800fade:	4619      	mov	r1, r3
 800fae0:	4825      	ldr	r0, [pc, #148]	@ (800fb78 <LCD_IO_Init+0xbc>)
 800fae2:	f001 f85b 	bl	8010b9c <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_CS_LOW();
 800fae6:	2200      	movs	r2, #0
 800fae8:	2101      	movs	r1, #1
 800faea:	4823      	ldr	r0, [pc, #140]	@ (800fb78 <LCD_IO_Init+0xbc>)
 800faec:	f001 faa4 	bl	8011038 <HAL_GPIO_WritePin>
  
  /* Configure the LCD Data/Control pin -------------------------------------*/
  LCD_DC_GPIO_CLK_ENABLE();
 800faf0:	2004      	movs	r0, #4
 800faf2:	f7ff fc1d 	bl	800f330 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_DC_PIN;
 800faf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fafa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800fafc:	2301      	movs	r3, #1
 800fafe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800fb00:	2300      	movs	r3, #0
 800fb02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800fb04:	2300      	movs	r3, #0
 800fb06:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_PORT, &GPIO_InitStruct);
 800fb08:	463b      	mov	r3, r7
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	481b      	ldr	r0, [pc, #108]	@ (800fb7c <LCD_IO_Init+0xc0>)
 800fb0e:	f001 f845 	bl	8010b9c <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_DC_LOW();
 800fb12:	2200      	movs	r2, #0
 800fb14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fb18:	4818      	ldr	r0, [pc, #96]	@ (800fb7c <LCD_IO_Init+0xc0>)
 800fb1a:	f001 fa8d 	bl	8011038 <HAL_GPIO_WritePin>
  
  /* Configure the LCD Reset pin --------------------------------------------*/
  LCD_RST_GPIO_CLK_ENABLE();
 800fb1e:	2004      	movs	r0, #4
 800fb20:	f7ff fc06 	bl	800f330 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_RST_PIN;
 800fb24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800fb32:	2300      	movs	r3, #0
 800fb34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_RST_GPIO_PORT, &GPIO_InitStruct);
 800fb36:	463b      	mov	r3, r7
 800fb38:	4619      	mov	r1, r3
 800fb3a:	4810      	ldr	r0, [pc, #64]	@ (800fb7c <LCD_IO_Init+0xc0>)
 800fb3c:	f001 f82e 	bl	8010b9c <HAL_GPIO_Init>
  
  if (BSP_SPI1_Init() != BSP_ERROR_NONE)
 800fb40:	f7fe fd8c 	bl	800e65c <BSP_SPI1_Init>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d002      	beq.n	800fb50 <LCD_IO_Init+0x94>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800fb4a:	f06f 0307 	mvn.w	r3, #7
 800fb4e:	617b      	str	r3, [r7, #20]
  }
  LCD_RST_LOW();
 800fb50:	2200      	movs	r2, #0
 800fb52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fb56:	4809      	ldr	r0, [pc, #36]	@ (800fb7c <LCD_IO_Init+0xc0>)
 800fb58:	f001 fa6e 	bl	8011038 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	f7f1 fe4b 	bl	80017f8 <HAL_Delay>
  LCD_RST_HIGH();
 800fb62:	2201      	movs	r2, #1
 800fb64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fb68:	4804      	ldr	r0, [pc, #16]	@ (800fb7c <LCD_IO_Init+0xc0>)
 800fb6a:	f001 fa65 	bl	8011038 <HAL_GPIO_WritePin>
  return ret;
 800fb6e:	697b      	ldr	r3, [r7, #20]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3718      	adds	r7, #24
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	48001c00 	.word	0x48001c00
 800fb7c:	48000800 	.word	0x48000800

0800fb80 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(LCD_CS_GPIO_PORT, LCD_CS_PIN);
 800fb84:	2101      	movs	r1, #1
 800fb86:	4808      	ldr	r0, [pc, #32]	@ (800fba8 <LCD_IO_DeInit+0x28>)
 800fb88:	f001 f978 	bl	8010e7c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(LCD_DC_GPIO_PORT, LCD_DC_PIN);
 800fb8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fb90:	4806      	ldr	r0, [pc, #24]	@ (800fbac <LCD_IO_DeInit+0x2c>)
 800fb92:	f001 f973 	bl	8010e7c <HAL_GPIO_DeInit>
  /* Uninitialize LCD Reset Pin */  
  HAL_GPIO_DeInit(LCD_RST_GPIO_PORT, LCD_RST_PIN);
 800fb96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fb9a:	4804      	ldr	r0, [pc, #16]	@ (800fbac <LCD_IO_DeInit+0x2c>)
 800fb9c:	f001 f96e 	bl	8010e7c <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	48001c00 	.word	0x48001c00
 800fbac:	48000800 	.word	0x48000800

0800fbb0 <BSP_MOTION_SENSOR_Init>:
 *         - MOTION_GYRO and/or MOTION_ACCELERO for MOTION_SENSOR_ISM330DHCX_0
 *         - MOTION_MAGNETO for MOTION_SENSOR_IIS2MDC_0
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b08e      	sub	sp, #56	@ 0x38
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d131      	bne.n	800fc30 <BSP_MOTION_SENSOR_Init+0x80>
  {
#if (USE_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case MOTION_SENSOR_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 800fbcc:	6838      	ldr	r0, [r7, #0]
 800fbce:	f000 f8fd 	bl	800fdcc <ISM330DHCX_0_Probe>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d002      	beq.n	800fbde <BSP_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800fbd8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbdc:	e064      	b.n	800fca8 <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800fbde:	4a34      	ldr	r2, [pc, #208]	@ (800fcb0 <BSP_MOTION_SENSOR_Init+0x100>)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	4932      	ldr	r1, [pc, #200]	@ (800fcb4 <BSP_MOTION_SENSOR_Init+0x104>)
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fbf0:	f107 010c 	add.w	r1, r7, #12
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	4798      	blx	r3
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d002      	beq.n	800fc04 <BSP_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800fbfe:	f06f 0306 	mvn.w	r3, #6
 800fc02:	e051      	b.n	800fca8 <BSP_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800fc04:	7b3b      	ldrb	r3, [r7, #12]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d103      	bne.n	800fc12 <BSP_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800fc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0c:	f043 0302 	orr.w	r3, r3, #2
 800fc10:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800fc12:	7b7b      	ldrb	r3, [r7, #13]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d103      	bne.n	800fc20 <BSP_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800fc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1a:	f043 0301 	orr.w	r3, r3, #1
 800fc1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800fc20:	7bbb      	ldrb	r3, [r7, #14]
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d108      	bne.n	800fc38 <BSP_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800fc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc28:	f043 0304 	orr.w	r3, r3, #4
 800fc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800fc2e:	e003      	b.n	800fc38 <BSP_MOTION_SENSOR_Init+0x88>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800fc30:	f06f 0301 	mvn.w	r3, #1
 800fc34:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800fc36:	e000      	b.n	800fc3a <BSP_MOTION_SENSOR_Init+0x8a>
      break;
 800fc38:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800fc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d001      	beq.n	800fc44 <BSP_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800fc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc42:	e031      	b.n	800fca8 <BSP_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < MOTION_SENSOR_FUNCTIONS_NBR; i++)
 800fc44:	2300      	movs	r3, #0
 800fc46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc48:	e02a      	b.n	800fca0 <BSP_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc4e:	4013      	ands	r3, r2
 800fc50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d11e      	bne.n	800fc94 <BSP_MOTION_SENSOR_Init+0xe4>
 800fc56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d118      	bne.n	800fc94 <BSP_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800fc62:	4a15      	ldr	r2, [pc, #84]	@ (800fcb8 <BSP_MOTION_SENSOR_Init+0x108>)
 800fc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fc6a:	4814      	ldr	r0, [pc, #80]	@ (800fcbc <BSP_MOTION_SENSOR_Init+0x10c>)
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	4413      	add	r3, r2
 800fc74:	440b      	add	r3, r1
 800fc76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	490d      	ldr	r1, [pc, #52]	@ (800fcb4 <BSP_MOTION_SENSOR_Init+0x104>)
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fc84:	4610      	mov	r0, r2
 800fc86:	4798      	blx	r3
 800fc88:	4603      	mov	r3, r0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d002      	beq.n	800fc94 <BSP_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800fc8e:	f06f 0304 	mvn.w	r3, #4
 800fc92:	e009      	b.n	800fca8 <BSP_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800fc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < MOTION_SENSOR_FUNCTIONS_NBR; i++)
 800fc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d9d1      	bls.n	800fc4a <BSP_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800fca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3738      	adds	r7, #56	@ 0x38
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	20001be8 	.word	0x20001be8
 800fcb4:	20001bd8 	.word	0x20001bd8
 800fcb8:	2000056c 	.word	0x2000056c
 800fcbc:	20001bdc 	.word	0x20001bdc

0800fcc0 <BSP_MOTION_SENSOR_Enable>:
 *         - MOTION_MAGNETO for instance 0
 *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 1
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d003      	beq.n	800fcd8 <BSP_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fcd0:	f06f 0301 	mvn.w	r3, #1
 800fcd4:	60fb      	str	r3, [r7, #12]
 800fcd6:	e028      	b.n	800fd2a <BSP_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fcd8:	4a16      	ldr	r2, [pc, #88]	@ (800fd34 <BSP_MOTION_SENSOR_Enable+0x74>)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	4013      	ands	r3, r2
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d11c      	bne.n	800fd24 <BSP_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800fcea:	4a13      	ldr	r2, [pc, #76]	@ (800fd38 <BSP_MOTION_SENSOR_Enable+0x78>)
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fcf2:	4812      	ldr	r0, [pc, #72]	@ (800fd3c <BSP_MOTION_SENSOR_Enable+0x7c>)
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	4413      	add	r3, r2
 800fcfc:	440b      	add	r3, r1
 800fcfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	490e      	ldr	r1, [pc, #56]	@ (800fd40 <BSP_MOTION_SENSOR_Enable+0x80>)
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fd0c:	4610      	mov	r0, r2
 800fd0e:	4798      	blx	r3
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d003      	beq.n	800fd1e <BSP_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd16:	f06f 0304 	mvn.w	r3, #4
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	e005      	b.n	800fd2a <BSP_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	60fb      	str	r3, [r7, #12]
 800fd22:	e002      	b.n	800fd2a <BSP_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fd24:	f06f 0301 	mvn.w	r3, #1
 800fd28:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3710      	adds	r7, #16
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	20001bec 	.word	0x20001bec
 800fd38:	2000056c 	.word	0x2000056c
 800fd3c:	20001bdc 	.word	0x20001bdc
 800fd40:	20001bd8 	.word	0x20001bd8

0800fd44 <BSP_MOTION_SENSOR_GetAxes>:
 *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 1
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, MOTION_SENSOR_Axes_t *Axes)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d003      	beq.n	800fd5e <BSP_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fd56:	f06f 0301 	mvn.w	r3, #1
 800fd5a:	617b      	str	r3, [r7, #20]
 800fd5c:	e029      	b.n	800fdb2 <BSP_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fd5e:	4a17      	ldr	r2, [pc, #92]	@ (800fdbc <BSP_MOTION_SENSOR_GetAxes+0x78>)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	4013      	ands	r3, r2
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d11d      	bne.n	800fdac <BSP_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800fd70:	4a13      	ldr	r2, [pc, #76]	@ (800fdc0 <BSP_MOTION_SENSOR_GetAxes+0x7c>)
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fd78:	4812      	ldr	r0, [pc, #72]	@ (800fdc4 <BSP_MOTION_SENSOR_GetAxes+0x80>)
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	005b      	lsls	r3, r3, #1
 800fd80:	4413      	add	r3, r2
 800fd82:	440b      	add	r3, r1
 800fd84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fd88:	69db      	ldr	r3, [r3, #28]
 800fd8a:	490f      	ldr	r1, [pc, #60]	@ (800fdc8 <BSP_MOTION_SENSOR_GetAxes+0x84>)
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	4610      	mov	r0, r2
 800fd96:	4798      	blx	r3
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d003      	beq.n	800fda6 <BSP_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd9e:	f06f 0304 	mvn.w	r3, #4
 800fda2:	617b      	str	r3, [r7, #20]
 800fda4:	e005      	b.n	800fdb2 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	617b      	str	r3, [r7, #20]
 800fdaa:	e002      	b.n	800fdb2 <BSP_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fdac:	f06f 0301 	mvn.w	r3, #1
 800fdb0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fdb2:	697b      	ldr	r3, [r7, #20]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20001bec 	.word	0x20001bec
 800fdc0:	2000056c 	.word	0x2000056c
 800fdc4:	20001bdc 	.word	0x20001bdc
 800fdc8:	20001bd8 	.word	0x20001bd8

0800fdcc <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b092      	sub	sp, #72	@ 0x48
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                   id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 800fdd8:	2300      	movs	r3, #0
 800fdda:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 800fddc:	23d7      	movs	r3, #215	@ 0xd7
 800fdde:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  io_ctx.Init        = STM32WB5MM_DK_I2C_Init;
 800fde2:	4b4a      	ldr	r3, [pc, #296]	@ (800ff0c <ISM330DHCX_0_Probe+0x140>)
 800fde4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.DeInit      = STM32WB5MM_DK_I2C_DeInit;
 800fde6:	4b4a      	ldr	r3, [pc, #296]	@ (800ff10 <ISM330DHCX_0_Probe+0x144>)
 800fde8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.ReadReg     = STM32WB5MM_DK_I2C_ReadReg;
 800fdea:	4b4a      	ldr	r3, [pc, #296]	@ (800ff14 <ISM330DHCX_0_Probe+0x148>)
 800fdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.WriteReg    = STM32WB5MM_DK_I2C_WriteReg;
 800fdee:	4b4a      	ldr	r3, [pc, #296]	@ (800ff18 <ISM330DHCX_0_Probe+0x14c>)
 800fdf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.GetTick     = STM32WB5MM_DK_GetTick;
 800fdf2:	4b4a      	ldr	r3, [pc, #296]	@ (800ff1c <ISM330DHCX_0_Probe+0x150>)
 800fdf4:	643b      	str	r3, [r7, #64]	@ 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 800fdf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4848      	ldr	r0, [pc, #288]	@ (800ff20 <ISM330DHCX_0_Probe+0x154>)
 800fdfe:	f7fa fc05 	bl	800a60c <ISM330DHCX_RegisterBusIO>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d003      	beq.n	800fe10 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe08:	f06f 0306 	mvn.w	r3, #6
 800fe0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe0e:	e077      	b.n	800ff00 <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 800fe10:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800fe14:	4619      	mov	r1, r3
 800fe16:	4842      	ldr	r0, [pc, #264]	@ (800ff20 <ISM330DHCX_0_Probe+0x154>)
 800fe18:	f7fa fd12 	bl	800a840 <ISM330DHCX_ReadID>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d003      	beq.n	800fe2a <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe22:	f06f 0306 	mvn.w	r3, #6
 800fe26:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe28:	e06a      	b.n	800ff00 <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 800fe2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe2e:	2b6b      	cmp	r3, #107	@ 0x6b
 800fe30:	d003      	beq.n	800fe3a <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe32:	f06f 0306 	mvn.w	r3, #6
 800fe36:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe38:	e062      	b.n	800ff00 <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 800fe3a:	f107 0308 	add.w	r3, r7, #8
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4837      	ldr	r0, [pc, #220]	@ (800ff20 <ISM330DHCX_0_Probe+0x154>)
 800fe42:	f7fa fd13 	bl	800a86c <ISM330DHCX_GetCapabilities>
    MotionCtx[MOTION_SENSOR_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800fe46:	7a7b      	ldrb	r3, [r7, #9]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	7a3b      	ldrb	r3, [r7, #8]
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	431a      	orrs	r2, r3
 800fe50:	7abb      	ldrb	r3, [r7, #10]
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4313      	orrs	r3, r2
 800fe56:	4a33      	ldr	r2, [pc, #204]	@ (800ff24 <ISM330DHCX_0_Probe+0x158>)
 800fe58:	6013      	str	r3, [r2, #0]

    MotionCompObj[MOTION_SENSOR_ISM330DHCX_0] = &ism330dhcx_obj_0;
 800fe5a:	4b33      	ldr	r3, [pc, #204]	@ (800ff28 <ISM330DHCX_0_Probe+0x15c>)
 800fe5c:	4a30      	ldr	r2, [pc, #192]	@ (800ff20 <ISM330DHCX_0_Probe+0x154>)
 800fe5e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[MOTION_SENSOR_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 800fe60:	4b32      	ldr	r3, [pc, #200]	@ (800ff2c <ISM330DHCX_0_Probe+0x160>)
 800fe62:	4a33      	ldr	r2, [pc, #204]	@ (800ff30 <ISM330DHCX_0_Probe+0x164>)
 800fe64:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800fe66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d11d      	bne.n	800fea8 <ISM330DHCX_0_Probe+0xdc>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f003 0301 	and.w	r3, r3, #1
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d018      	beq.n	800fea8 <ISM330DHCX_0_Probe+0xdc>
 800fe76:	7a7b      	ldrb	r3, [r7, #9]
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d115      	bne.n	800fea8 <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[MOTION_SENSOR_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 800fe7c:	4b2d      	ldr	r3, [pc, #180]	@ (800ff34 <ISM330DHCX_0_Probe+0x168>)
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	4a2d      	ldr	r2, [pc, #180]	@ (800ff38 <ISM330DHCX_0_Probe+0x16c>)
 800fe82:	492e      	ldr	r1, [pc, #184]	@ (800ff3c <ISM330DHCX_0_Probe+0x170>)
 800fe84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[MOTION_SENSOR_ISM330DHCX_0]->Init(MotionCompObj[MOTION_SENSOR_ISM330DHCX_0]) != ISM330DHCX_OK)
 800fe88:	4b28      	ldr	r3, [pc, #160]	@ (800ff2c <ISM330DHCX_0_Probe+0x160>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a26      	ldr	r2, [pc, #152]	@ (800ff28 <ISM330DHCX_0_Probe+0x15c>)
 800fe90:	6812      	ldr	r2, [r2, #0]
 800fe92:	4610      	mov	r0, r2
 800fe94:	4798      	blx	r3
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d003      	beq.n	800fea4 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe9c:	f06f 0304 	mvn.w	r3, #4
 800fea0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fea2:	e001      	b.n	800fea8 <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fea4:	2300      	movs	r3, #0
 800fea6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800fea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d11d      	bne.n	800feea <ISM330DHCX_0_Probe+0x11e>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f003 0302 	and.w	r3, r3, #2
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d018      	beq.n	800feea <ISM330DHCX_0_Probe+0x11e>
 800feb8:	7a3b      	ldrb	r3, [r7, #8]
 800feba:	2b01      	cmp	r3, #1
 800febc:	d115      	bne.n	800feea <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[MOTION_SENSOR_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800febe:	4b1d      	ldr	r3, [pc, #116]	@ (800ff34 <ISM330DHCX_0_Probe+0x168>)
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	4a1d      	ldr	r2, [pc, #116]	@ (800ff38 <ISM330DHCX_0_Probe+0x16c>)
 800fec4:	491e      	ldr	r1, [pc, #120]	@ (800ff40 <ISM330DHCX_0_Probe+0x174>)
 800fec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[MOTION_SENSOR_ISM330DHCX_0]->Init(MotionCompObj[MOTION_SENSOR_ISM330DHCX_0]) != ISM330DHCX_OK)
 800feca:	4b18      	ldr	r3, [pc, #96]	@ (800ff2c <ISM330DHCX_0_Probe+0x160>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a15      	ldr	r2, [pc, #84]	@ (800ff28 <ISM330DHCX_0_Probe+0x15c>)
 800fed2:	6812      	ldr	r2, [r2, #0]
 800fed4:	4610      	mov	r0, r2
 800fed6:	4798      	blx	r3
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fede:	f06f 0304 	mvn.w	r3, #4
 800fee2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fee4:	e001      	b.n	800feea <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fee6:	2300      	movs	r3, #0
 800fee8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800feea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feec:	2b00      	cmp	r3, #0
 800feee:	d107      	bne.n	800ff00 <ISM330DHCX_0_Probe+0x134>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f003 0304 	and.w	r3, r3, #4
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d002      	beq.n	800ff00 <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800fefa:	f06f 0304 	mvn.w	r3, #4
 800fefe:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800ff00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3748      	adds	r7, #72	@ 0x48
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	0800e52d 	.word	0x0800e52d
 800ff10:	0800e5ad 	.word	0x0800e5ad
 800ff14:	0800e62d 	.word	0x0800e62d
 800ff18:	0800e5fd 	.word	0x0800e5fd
 800ff1c:	0800e7a5 	.word	0x0800e7a5
 800ff20:	20001bf0 	.word	0x20001bf0
 800ff24:	20001bec 	.word	0x20001bec
 800ff28:	20001bd8 	.word	0x20001bd8
 800ff2c:	20001be8 	.word	0x20001be8
 800ff30:	2000045c 	.word	0x2000045c
 800ff34:	2000056c 	.word	0x2000056c
 800ff38:	20001bdc 	.word	0x20001bdc
 800ff3c:	20000490 	.word	0x20000490
 800ff40:	2000046c 	.word	0x2000046c

0800ff44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ff44:	b480      	push	{r7}
 800ff46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800ff48:	4b24      	ldr	r3, [pc, #144]	@ (800ffdc <SystemInit+0x98>)
 800ff4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff4e:	4a23      	ldr	r2, [pc, #140]	@ (800ffdc <SystemInit+0x98>)
 800ff50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ff54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800ff58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ff62:	f043 0301 	orr.w	r3, r3, #1
 800ff66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800ff68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff6c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800ff70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800ff72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ff7c:	4b18      	ldr	r3, [pc, #96]	@ (800ffe0 <SystemInit+0x9c>)
 800ff7e:	4013      	ands	r3, r2
 800ff80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800ff82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ff8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ff8e:	f023 0305 	bic.w	r3, r3, #5
 800ff92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ff96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ff9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ff9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ffa2:	f023 0301 	bic.w	r3, r3, #1
 800ffa6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800ffaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ffae:	4a0d      	ldr	r2, [pc, #52]	@ (800ffe4 <SystemInit+0xa0>)
 800ffb0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800ffb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ffb6:	4a0b      	ldr	r2, [pc, #44]	@ (800ffe4 <SystemInit+0xa0>)
 800ffb8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ffba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ffc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ffc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ffca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ffce:	2200      	movs	r2, #0
 800ffd0:	619a      	str	r2, [r3, #24]
}
 800ffd2:	bf00      	nop
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	e000ed00 	.word	0xe000ed00
 800ffe0:	faf6fefb 	.word	0xfaf6fefb
 800ffe4:	22041000 	.word	0x22041000

0800ffe8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800ffec:	4b05      	ldr	r3, [pc, #20]	@ (8010004 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	4a04      	ldr	r2, [pc, #16]	@ (8010004 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800fff2:	f043 0301 	orr.w	r3, r3, #1
 800fff6:	6053      	str	r3, [r2, #4]
}
 800fff8:	bf00      	nop
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	e0042000 	.word	0xe0042000

08010008 <LL_DBGMCU_EnableDBGStopMode>:
{
 8010008:	b480      	push	{r7}
 801000a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 801000c:	4b05      	ldr	r3, [pc, #20]	@ (8010024 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	4a04      	ldr	r2, [pc, #16]	@ (8010024 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8010012:	f043 0302 	orr.w	r3, r3, #2
 8010016:	6053      	str	r3, [r2, #4]
}
 8010018:	bf00      	nop
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	e0042000 	.word	0xe0042000

08010028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010032:	4b0c      	ldr	r3, [pc, #48]	@ (8010064 <HAL_Init+0x3c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a0b      	ldr	r2, [pc, #44]	@ (8010064 <HAL_Init+0x3c>)
 8010038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801003c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801003e:	2003      	movs	r0, #3
 8010040:	f000 f9c0 	bl	80103c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010044:	2000      	movs	r0, #0
 8010046:	f000 f80f 	bl	8010068 <HAL_InitTick>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8010050:	2301      	movs	r3, #1
 8010052:	71fb      	strb	r3, [r7, #7]
 8010054:	e001      	b.n	801005a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010056:	f7f3 f8ac 	bl	80031b2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801005a:	79fb      	ldrb	r3, [r7, #7]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	58004000 	.word	0x58004000

08010068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8010074:	4b17      	ldr	r3, [pc, #92]	@ (80100d4 <HAL_InitTick+0x6c>)
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d024      	beq.n	80100c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801007c:	f003 fa84 	bl	8013588 <HAL_RCC_GetHCLKFreq>
 8010080:	4602      	mov	r2, r0
 8010082:	4b14      	ldr	r3, [pc, #80]	@ (80100d4 <HAL_InitTick+0x6c>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	4619      	mov	r1, r3
 8010088:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801008c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010090:	fbb2 f3f3 	udiv	r3, r2, r3
 8010094:	4618      	mov	r0, r3
 8010096:	f000 f9d6 	bl	8010446 <HAL_SYSTICK_Config>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10f      	bne.n	80100c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b0f      	cmp	r3, #15
 80100a4:	d809      	bhi.n	80100ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80100a6:	2200      	movs	r2, #0
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	f04f 30ff 	mov.w	r0, #4294967295
 80100ae:	f000 f994 	bl	80103da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80100b2:	4a09      	ldr	r2, [pc, #36]	@ (80100d8 <HAL_InitTick+0x70>)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	e007      	b.n	80100ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80100ba:	2301      	movs	r3, #1
 80100bc:	73fb      	strb	r3, [r7, #15]
 80100be:	e004      	b.n	80100ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80100c0:	2301      	movs	r3, #1
 80100c2:	73fb      	strb	r3, [r7, #15]
 80100c4:	e001      	b.n	80100ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80100c6:	2301      	movs	r3, #1
 80100c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80100ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3710      	adds	r7, #16
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	20000588 	.word	0x20000588
 80100d8:	20000584 	.word	0x20000584

080100dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80100dc:	b480      	push	{r7}
 80100de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80100e0:	4b06      	ldr	r3, [pc, #24]	@ (80100fc <HAL_IncTick+0x20>)
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	461a      	mov	r2, r3
 80100e6:	4b06      	ldr	r3, [pc, #24]	@ (8010100 <HAL_IncTick+0x24>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4413      	add	r3, r2
 80100ec:	4a04      	ldr	r2, [pc, #16]	@ (8010100 <HAL_IncTick+0x24>)
 80100ee:	6013      	str	r3, [r2, #0]
}
 80100f0:	bf00      	nop
 80100f2:	46bd      	mov	sp, r7
 80100f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f8:	4770      	bx	lr
 80100fa:	bf00      	nop
 80100fc:	20000588 	.word	0x20000588
 8010100:	20001c20 	.word	0x20001c20

08010104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010104:	b480      	push	{r7}
 8010106:	af00      	add	r7, sp, #0
  return uwTick;
 8010108:	4b03      	ldr	r3, [pc, #12]	@ (8010118 <HAL_GetTick+0x14>)
 801010a:	681b      	ldr	r3, [r3, #0]
}
 801010c:	4618      	mov	r0, r3
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	20001c20 	.word	0x20001c20

0801011c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 801011c:	b480      	push	{r7}
 801011e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8010120:	4b03      	ldr	r3, [pc, #12]	@ (8010130 <HAL_GetTickPrio+0x14>)
 8010122:	681b      	ldr	r3, [r3, #0]
}
 8010124:	4618      	mov	r0, r3
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	20000584 	.word	0x20000584

08010134 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8010134:	b480      	push	{r7}
 8010136:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8010138:	4b03      	ldr	r3, [pc, #12]	@ (8010148 <HAL_GetTickFreq+0x14>)
 801013a:	781b      	ldrb	r3, [r3, #0]
}
 801013c:	4618      	mov	r0, r3
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr
 8010146:	bf00      	nop
 8010148:	20000588 	.word	0x20000588

0801014c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8010150:	f7ff ff4a 	bl	800ffe8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8010154:	bf00      	nop
 8010156:	bd80      	pop	{r7, pc}

08010158 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 801015c:	f7ff ff54 	bl	8010008 <LL_DBGMCU_EnableDBGStopMode>
}
 8010160:	bf00      	nop
 8010162:	bd80      	pop	{r7, pc}

08010164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f003 0307 	and.w	r3, r3, #7
 8010172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010174:	4b0c      	ldr	r3, [pc, #48]	@ (80101a8 <__NVIC_SetPriorityGrouping+0x44>)
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010180:	4013      	ands	r3, r2
 8010182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801018c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010196:	4a04      	ldr	r2, [pc, #16]	@ (80101a8 <__NVIC_SetPriorityGrouping+0x44>)
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	60d3      	str	r3, [r2, #12]
}
 801019c:	bf00      	nop
 801019e:	3714      	adds	r7, #20
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr
 80101a8:	e000ed00 	.word	0xe000ed00

080101ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80101ac:	b480      	push	{r7}
 80101ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80101b0:	4b04      	ldr	r3, [pc, #16]	@ (80101c4 <__NVIC_GetPriorityGrouping+0x18>)
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	0a1b      	lsrs	r3, r3, #8
 80101b6:	f003 0307 	and.w	r3, r3, #7
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	e000ed00 	.word	0xe000ed00

080101c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80101d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	db0b      	blt.n	80101f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80101da:	79fb      	ldrb	r3, [r7, #7]
 80101dc:	f003 021f 	and.w	r2, r3, #31
 80101e0:	4907      	ldr	r1, [pc, #28]	@ (8010200 <__NVIC_EnableIRQ+0x38>)
 80101e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101e6:	095b      	lsrs	r3, r3, #5
 80101e8:	2001      	movs	r0, #1
 80101ea:	fa00 f202 	lsl.w	r2, r0, r2
 80101ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80101f2:	bf00      	nop
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop
 8010200:	e000e100 	.word	0xe000e100

08010204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	4603      	mov	r3, r0
 801020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010212:	2b00      	cmp	r3, #0
 8010214:	db12      	blt.n	801023c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010216:	79fb      	ldrb	r3, [r7, #7]
 8010218:	f003 021f 	and.w	r2, r3, #31
 801021c:	490a      	ldr	r1, [pc, #40]	@ (8010248 <__NVIC_DisableIRQ+0x44>)
 801021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010222:	095b      	lsrs	r3, r3, #5
 8010224:	2001      	movs	r0, #1
 8010226:	fa00 f202 	lsl.w	r2, r0, r2
 801022a:	3320      	adds	r3, #32
 801022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010230:	f3bf 8f4f 	dsb	sy
}
 8010234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010236:	f3bf 8f6f 	isb	sy
}
 801023a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	e000e100 	.word	0xe000e100

0801024c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801025a:	2b00      	cmp	r3, #0
 801025c:	db0c      	blt.n	8010278 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801025e:	79fb      	ldrb	r3, [r7, #7]
 8010260:	f003 021f 	and.w	r2, r3, #31
 8010264:	4907      	ldr	r1, [pc, #28]	@ (8010284 <__NVIC_SetPendingIRQ+0x38>)
 8010266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801026a:	095b      	lsrs	r3, r3, #5
 801026c:	2001      	movs	r0, #1
 801026e:	fa00 f202 	lsl.w	r2, r0, r2
 8010272:	3340      	adds	r3, #64	@ 0x40
 8010274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	e000e100 	.word	0xe000e100

08010288 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010296:	2b00      	cmp	r3, #0
 8010298:	db0c      	blt.n	80102b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	f003 021f 	and.w	r2, r3, #31
 80102a0:	4907      	ldr	r1, [pc, #28]	@ (80102c0 <__NVIC_ClearPendingIRQ+0x38>)
 80102a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102a6:	095b      	lsrs	r3, r3, #5
 80102a8:	2001      	movs	r0, #1
 80102aa:	fa00 f202 	lsl.w	r2, r0, r2
 80102ae:	3360      	adds	r3, #96	@ 0x60
 80102b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80102b4:	bf00      	nop
 80102b6:	370c      	adds	r7, #12
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr
 80102c0:	e000e100 	.word	0xe000e100

080102c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	4603      	mov	r3, r0
 80102cc:	6039      	str	r1, [r7, #0]
 80102ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80102d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	db0a      	blt.n	80102ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	490c      	ldr	r1, [pc, #48]	@ (8010310 <__NVIC_SetPriority+0x4c>)
 80102de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102e2:	0112      	lsls	r2, r2, #4
 80102e4:	b2d2      	uxtb	r2, r2
 80102e6:	440b      	add	r3, r1
 80102e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80102ec:	e00a      	b.n	8010304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	4908      	ldr	r1, [pc, #32]	@ (8010314 <__NVIC_SetPriority+0x50>)
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	f003 030f 	and.w	r3, r3, #15
 80102fa:	3b04      	subs	r3, #4
 80102fc:	0112      	lsls	r2, r2, #4
 80102fe:	b2d2      	uxtb	r2, r2
 8010300:	440b      	add	r3, r1
 8010302:	761a      	strb	r2, [r3, #24]
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	e000e100 	.word	0xe000e100
 8010314:	e000ed00 	.word	0xe000ed00

08010318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010318:	b480      	push	{r7}
 801031a:	b089      	sub	sp, #36	@ 0x24
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f003 0307 	and.w	r3, r3, #7
 801032a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	f1c3 0307 	rsb	r3, r3, #7
 8010332:	2b04      	cmp	r3, #4
 8010334:	bf28      	it	cs
 8010336:	2304      	movcs	r3, #4
 8010338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	3304      	adds	r3, #4
 801033e:	2b06      	cmp	r3, #6
 8010340:	d902      	bls.n	8010348 <NVIC_EncodePriority+0x30>
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	3b03      	subs	r3, #3
 8010346:	e000      	b.n	801034a <NVIC_EncodePriority+0x32>
 8010348:	2300      	movs	r3, #0
 801034a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801034c:	f04f 32ff 	mov.w	r2, #4294967295
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	fa02 f303 	lsl.w	r3, r2, r3
 8010356:	43da      	mvns	r2, r3
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	401a      	ands	r2, r3
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010360:	f04f 31ff 	mov.w	r1, #4294967295
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	fa01 f303 	lsl.w	r3, r1, r3
 801036a:	43d9      	mvns	r1, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010370:	4313      	orrs	r3, r2
         );
}
 8010372:	4618      	mov	r0, r3
 8010374:	3724      	adds	r7, #36	@ 0x24
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr
	...

08010380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	3b01      	subs	r3, #1
 801038c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010390:	d301      	bcc.n	8010396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010392:	2301      	movs	r3, #1
 8010394:	e00f      	b.n	80103b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010396:	4a0a      	ldr	r2, [pc, #40]	@ (80103c0 <SysTick_Config+0x40>)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	3b01      	subs	r3, #1
 801039c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801039e:	210f      	movs	r1, #15
 80103a0:	f04f 30ff 	mov.w	r0, #4294967295
 80103a4:	f7ff ff8e 	bl	80102c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80103a8:	4b05      	ldr	r3, [pc, #20]	@ (80103c0 <SysTick_Config+0x40>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80103ae:	4b04      	ldr	r3, [pc, #16]	@ (80103c0 <SysTick_Config+0x40>)
 80103b0:	2207      	movs	r2, #7
 80103b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80103b4:	2300      	movs	r3, #0
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	e000e010 	.word	0xe000e010

080103c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f7ff fec9 	bl	8010164 <__NVIC_SetPriorityGrouping>
}
 80103d2:	bf00      	nop
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b086      	sub	sp, #24
 80103de:	af00      	add	r7, sp, #0
 80103e0:	4603      	mov	r3, r0
 80103e2:	60b9      	str	r1, [r7, #8]
 80103e4:	607a      	str	r2, [r7, #4]
 80103e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80103e8:	f7ff fee0 	bl	80101ac <__NVIC_GetPriorityGrouping>
 80103ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	68b9      	ldr	r1, [r7, #8]
 80103f2:	6978      	ldr	r0, [r7, #20]
 80103f4:	f7ff ff90 	bl	8010318 <NVIC_EncodePriority>
 80103f8:	4602      	mov	r2, r0
 80103fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103fe:	4611      	mov	r1, r2
 8010400:	4618      	mov	r0, r3
 8010402:	f7ff ff5f 	bl	80102c4 <__NVIC_SetPriority>
}
 8010406:	bf00      	nop
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b082      	sub	sp, #8
 8010412:	af00      	add	r7, sp, #0
 8010414:	4603      	mov	r3, r0
 8010416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff fed3 	bl	80101c8 <__NVIC_EnableIRQ>
}
 8010422:	bf00      	nop
 8010424:	3708      	adds	r7, #8
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b082      	sub	sp, #8
 801042e:	af00      	add	r7, sp, #0
 8010430:	4603      	mov	r3, r0
 8010432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff fee3 	bl	8010204 <__NVIC_DisableIRQ>
}
 801043e:	bf00      	nop
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b082      	sub	sp, #8
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7ff ff96 	bl	8010380 <SysTick_Config>
 8010454:	4603      	mov	r3, r0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b082      	sub	sp, #8
 8010462:	af00      	add	r7, sp, #0
 8010464:	4603      	mov	r3, r0
 8010466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8010468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff feed 	bl	801024c <__NVIC_SetPendingIRQ>
}
 8010472:	bf00      	nop
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b082      	sub	sp, #8
 801047e:	af00      	add	r7, sp, #0
 8010480:	4603      	mov	r3, r0
 8010482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8010484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fefd 	bl	8010288 <__NVIC_ClearPendingIRQ>
}
 801048e:	bf00      	nop
 8010490:	3708      	adds	r7, #8
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
	...

08010498 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d101      	bne.n	80104aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80104a6:	2301      	movs	r3, #1
 80104a8:	e08e      	b.n	80105c8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	461a      	mov	r2, r3
 80104b0:	4b47      	ldr	r3, [pc, #284]	@ (80105d0 <HAL_DMA_Init+0x138>)
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d80f      	bhi.n	80104d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	4b45      	ldr	r3, [pc, #276]	@ (80105d4 <HAL_DMA_Init+0x13c>)
 80104be:	4413      	add	r3, r2
 80104c0:	4a45      	ldr	r2, [pc, #276]	@ (80105d8 <HAL_DMA_Init+0x140>)
 80104c2:	fba2 2303 	umull	r2, r3, r2, r3
 80104c6:	091b      	lsrs	r3, r3, #4
 80104c8:	009a      	lsls	r2, r3, #2
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4a42      	ldr	r2, [pc, #264]	@ (80105dc <HAL_DMA_Init+0x144>)
 80104d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80104d4:	e00e      	b.n	80104f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	461a      	mov	r2, r3
 80104dc:	4b40      	ldr	r3, [pc, #256]	@ (80105e0 <HAL_DMA_Init+0x148>)
 80104de:	4413      	add	r3, r2
 80104e0:	4a3d      	ldr	r2, [pc, #244]	@ (80105d8 <HAL_DMA_Init+0x140>)
 80104e2:	fba2 2303 	umull	r2, r3, r2, r3
 80104e6:	091b      	lsrs	r3, r3, #4
 80104e8:	009a      	lsls	r2, r3, #2
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a3c      	ldr	r2, [pc, #240]	@ (80105e4 <HAL_DMA_Init+0x14c>)
 80104f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2202      	movs	r2, #2
 80104f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 801050a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801050e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8010518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	699b      	ldr	r3, [r3, #24]
 801052a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6a1b      	ldr	r3, [r3, #32]
 8010536:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	4313      	orrs	r3, r2
 801053c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	68fa      	ldr	r2, [r7, #12]
 8010544:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fa74 	bl	8010a34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	689b      	ldr	r3, [r3, #8]
 8010550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010554:	d102      	bne.n	801055c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2200      	movs	r2, #0
 801055a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	685a      	ldr	r2, [r3, #4]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010564:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010568:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010572:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d010      	beq.n	801059e <HAL_DMA_Init+0x106>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	2b04      	cmp	r3, #4
 8010582:	d80c      	bhi.n	801059e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f000 fa93 	bl	8010ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801058e:	2200      	movs	r2, #0
 8010590:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801059a:	605a      	str	r2, [r3, #4]
 801059c:	e008      	b.n	80105b0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2200      	movs	r2, #0
 80105ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2201      	movs	r2, #1
 80105ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	40020407 	.word	0x40020407
 80105d4:	bffdfff8 	.word	0xbffdfff8
 80105d8:	cccccccd 	.word	0xcccccccd
 80105dc:	40020000 	.word	0x40020000
 80105e0:	bffdfbf8 	.word	0xbffdfbf8
 80105e4:	40020400 	.word	0x40020400

080105e8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b086      	sub	sp, #24
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
 80105f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010600:	2b01      	cmp	r3, #1
 8010602:	d101      	bne.n	8010608 <HAL_DMA_Start_IT+0x20>
 8010604:	2302      	movs	r3, #2
 8010606:	e066      	b.n	80106d6 <HAL_DMA_Start_IT+0xee>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2201      	movs	r2, #1
 801060c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b01      	cmp	r3, #1
 801061a:	d155      	bne.n	80106c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2202      	movs	r2, #2
 8010620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2200      	movs	r2, #0
 8010628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f022 0201 	bic.w	r2, r2, #1
 8010638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	68b9      	ldr	r1, [r7, #8]
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f000 f9b9 	bl	80109b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801064a:	2b00      	cmp	r3, #0
 801064c:	d008      	beq.n	8010660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f042 020e 	orr.w	r2, r2, #14
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	e00f      	b.n	8010680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f022 0204 	bic.w	r2, r2, #4
 801066e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f042 020a 	orr.w	r2, r2, #10
 801067e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801069c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d007      	beq.n	80106b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80106b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f042 0201 	orr.w	r2, r2, #1
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	e005      	b.n	80106d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80106d0:	2302      	movs	r3, #2
 80106d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80106d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80106de:	b480      	push	{r7}
 80106e0:	b083      	sub	sp, #12
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80106ec:	2301      	movs	r3, #1
 80106ee:	e04f      	b.n	8010790 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	d008      	beq.n	801070e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2204      	movs	r2, #4
 8010700:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 801070a:	2301      	movs	r3, #1
 801070c:	e040      	b.n	8010790 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f022 020e 	bic.w	r2, r2, #14
 801071c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801072c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	681a      	ldr	r2, [r3, #0]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f022 0201 	bic.w	r2, r2, #1
 801073c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010742:	f003 021c 	and.w	r2, r3, #28
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801074a:	2101      	movs	r1, #1
 801074c:	fa01 f202 	lsl.w	r2, r1, r2
 8010750:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801075a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00c      	beq.n	801077e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801076e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010772:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801077c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80107a4:	2300      	movs	r3, #0
 80107a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d005      	beq.n	80107c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2204      	movs	r2, #4
 80107b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80107ba:	2301      	movs	r3, #1
 80107bc:	73fb      	strb	r3, [r7, #15]
 80107be:	e047      	b.n	8010850 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f022 020e 	bic.w	r2, r2, #14
 80107ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f022 0201 	bic.w	r2, r2, #1
 80107de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80107ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107f4:	f003 021c 	and.w	r2, r3, #28
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107fc:	2101      	movs	r1, #1
 80107fe:	fa01 f202 	lsl.w	r2, r1, r2
 8010802:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801080c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00c      	beq.n	8010830 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010824:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801082e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2201      	movs	r2, #1
 8010834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010844:	2b00      	cmp	r3, #0
 8010846:	d003      	beq.n	8010850 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	4798      	blx	r3
    }
  }
  return status;
 8010850:	7bfb      	ldrb	r3, [r7, #15]
}
 8010852:	4618      	mov	r0, r3
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b084      	sub	sp, #16
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010876:	f003 031c 	and.w	r3, r3, #28
 801087a:	2204      	movs	r2, #4
 801087c:	409a      	lsls	r2, r3
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	4013      	ands	r3, r2
 8010882:	2b00      	cmp	r3, #0
 8010884:	d026      	beq.n	80108d4 <HAL_DMA_IRQHandler+0x7a>
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	f003 0304 	and.w	r3, r3, #4
 801088c:	2b00      	cmp	r3, #0
 801088e:	d021      	beq.n	80108d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f003 0320 	and.w	r3, r3, #32
 801089a:	2b00      	cmp	r3, #0
 801089c:	d107      	bne.n	80108ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f022 0204 	bic.w	r2, r2, #4
 80108ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108b2:	f003 021c 	and.w	r2, r3, #28
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108ba:	2104      	movs	r1, #4
 80108bc:	fa01 f202 	lsl.w	r2, r1, r2
 80108c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d071      	beq.n	80109ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80108d2:	e06c      	b.n	80109ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108d8:	f003 031c 	and.w	r3, r3, #28
 80108dc:	2202      	movs	r2, #2
 80108de:	409a      	lsls	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	4013      	ands	r3, r2
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d02e      	beq.n	8010946 <HAL_DMA_IRQHandler+0xec>
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	f003 0302 	and.w	r3, r3, #2
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d029      	beq.n	8010946 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f003 0320 	and.w	r3, r3, #32
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10b      	bne.n	8010918 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f022 020a 	bic.w	r2, r2, #10
 801090e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2201      	movs	r2, #1
 8010914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801091c:	f003 021c 	and.w	r2, r3, #28
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010924:	2102      	movs	r1, #2
 8010926:	fa01 f202 	lsl.w	r2, r1, r2
 801092a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010938:	2b00      	cmp	r3, #0
 801093a:	d038      	beq.n	80109ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8010944:	e033      	b.n	80109ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801094a:	f003 031c 	and.w	r3, r3, #28
 801094e:	2208      	movs	r2, #8
 8010950:	409a      	lsls	r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	4013      	ands	r3, r2
 8010956:	2b00      	cmp	r3, #0
 8010958:	d02a      	beq.n	80109b0 <HAL_DMA_IRQHandler+0x156>
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	f003 0308 	and.w	r3, r3, #8
 8010960:	2b00      	cmp	r3, #0
 8010962:	d025      	beq.n	80109b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f022 020e 	bic.w	r2, r2, #14
 8010972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010978:	f003 021c 	and.w	r2, r3, #28
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010980:	2101      	movs	r1, #1
 8010982:	fa01 f202 	lsl.w	r2, r1, r2
 8010986:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2201      	movs	r2, #1
 8010992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d004      	beq.n	80109b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80109ae:	bf00      	nop
 80109b0:	bf00      	nop
}
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109ca:	68fa      	ldr	r2, [r7, #12]
 80109cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80109ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d004      	beq.n	80109e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80109e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109e6:	f003 021c 	and.w	r2, r3, #28
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109ee:	2101      	movs	r1, #1
 80109f0:	fa01 f202 	lsl.w	r2, r1, r2
 80109f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	2b10      	cmp	r3, #16
 8010a04:	d108      	bne.n	8010a18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8010a16:	e007      	b.n	8010a28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	60da      	str	r2, [r3, #12]
}
 8010a28:	bf00      	nop
 8010a2a:	3714      	adds	r7, #20
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	4b17      	ldr	r3, [pc, #92]	@ (8010aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d80a      	bhi.n	8010a5e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a4c:	089b      	lsrs	r3, r3, #2
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010a54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	6493      	str	r3, [r2, #72]	@ 0x48
 8010a5c:	e007      	b.n	8010a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a62:	089b      	lsrs	r3, r3, #2
 8010a64:	009a      	lsls	r2, r3, #2
 8010a66:	4b0f      	ldr	r3, [pc, #60]	@ (8010aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8010a68:	4413      	add	r3, r2
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	3b08      	subs	r3, #8
 8010a76:	4a0c      	ldr	r2, [pc, #48]	@ (8010aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8010a78:	fba2 2303 	umull	r2, r3, r2, r3
 8010a7c:	091b      	lsrs	r3, r3, #4
 8010a7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4a0a      	ldr	r2, [pc, #40]	@ (8010aac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8010a84:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f003 031f 	and.w	r3, r3, #31
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	409a      	lsls	r2, r3
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8010a94:	bf00      	nop
 8010a96:	3714      	adds	r7, #20
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr
 8010aa0:	40020407 	.word	0x40020407
 8010aa4:	4002081c 	.word	0x4002081c
 8010aa8:	cccccccd 	.word	0xcccccccd
 8010aac:	40020880 	.word	0x40020880

08010ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ac0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8010af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8010ac6:	4413      	add	r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	461a      	mov	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	4a09      	ldr	r2, [pc, #36]	@ (8010af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8010ad4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	f003 0303 	and.w	r3, r3, #3
 8010ade:	2201      	movs	r2, #1
 8010ae0:	409a      	lsls	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8010ae6:	bf00      	nop
 8010ae8:	3714      	adds	r7, #20
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
 8010af2:	bf00      	nop
 8010af4:	1000823f 	.word	0x1000823f
 8010af8:	40020940 	.word	0x40020940

08010afc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8010afc:	b480      	push	{r7}
 8010afe:	b087      	sub	sp, #28
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	460b      	mov	r3, r1
 8010b06:	607a      	str	r2, [r7, #4]
 8010b08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8010b0e:	7afb      	ldrb	r3, [r7, #11]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d103      	bne.n	8010b1c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	605a      	str	r2, [r3, #4]
      break;
 8010b1a:	e002      	b.n	8010b22 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b20:	bf00      	nop
  }

  return status;
 8010b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	371c      	adds	r7, #28
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d101      	bne.n	8010b44 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8010b40:	2301      	movs	r3, #1
 8010b42:	e003      	b.n	8010b4c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8010b4a:	2300      	movs	r3, #0
  }
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b087      	sub	sp, #28
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	0c1b      	lsrs	r3, r3, #16
 8010b66:	f003 0301 	and.w	r3, r3, #1
 8010b6a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f003 031f 	and.w	r3, r3, #31
 8010b74:	2201      	movs	r2, #1
 8010b76:	fa02 f303 	lsl.w	r3, r2, r3
 8010b7a:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	015b      	lsls	r3, r3, #5
 8010b80:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8010b84:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8010b88:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	693a      	ldr	r2, [r7, #16]
 8010b8e:	601a      	str	r2, [r3, #0]
}
 8010b90:	bf00      	nop
 8010b92:	371c      	adds	r7, #28
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b087      	sub	sp, #28
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010baa:	e14c      	b.n	8010e46 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8010bb8:	4013      	ands	r3, r2
 8010bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 813e 	beq.w	8010e40 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	f003 0303 	and.w	r3, r3, #3
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d005      	beq.n	8010bdc <HAL_GPIO_Init+0x40>
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	f003 0303 	and.w	r3, r3, #3
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	d130      	bne.n	8010c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	005b      	lsls	r3, r3, #1
 8010be6:	2203      	movs	r2, #3
 8010be8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bec:	43db      	mvns	r3, r3
 8010bee:	693a      	ldr	r2, [r7, #16]
 8010bf0:	4013      	ands	r3, r2
 8010bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	68da      	ldr	r2, [r3, #12]
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	005b      	lsls	r3, r3, #1
 8010bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8010c00:	693a      	ldr	r2, [r7, #16]
 8010c02:	4313      	orrs	r3, r2
 8010c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	693a      	ldr	r2, [r7, #16]
 8010c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010c12:	2201      	movs	r2, #1
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	fa02 f303 	lsl.w	r3, r2, r3
 8010c1a:	43db      	mvns	r3, r3
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	4013      	ands	r3, r2
 8010c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	091b      	lsrs	r3, r3, #4
 8010c28:	f003 0201 	and.w	r2, r3, #1
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c32:	693a      	ldr	r2, [r7, #16]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	693a      	ldr	r2, [r7, #16]
 8010c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	f003 0303 	and.w	r3, r3, #3
 8010c46:	2b03      	cmp	r3, #3
 8010c48:	d017      	beq.n	8010c7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	2203      	movs	r2, #3
 8010c56:	fa02 f303 	lsl.w	r3, r2, r3
 8010c5a:	43db      	mvns	r3, r3
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	4013      	ands	r3, r2
 8010c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	689a      	ldr	r2, [r3, #8]
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	005b      	lsls	r3, r3, #1
 8010c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	693a      	ldr	r2, [r7, #16]
 8010c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	f003 0303 	and.w	r3, r3, #3
 8010c82:	2b02      	cmp	r3, #2
 8010c84:	d123      	bne.n	8010cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	08da      	lsrs	r2, r3, #3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	3208      	adds	r2, #8
 8010c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	f003 0307 	and.w	r3, r3, #7
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	220f      	movs	r2, #15
 8010c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010ca2:	43db      	mvns	r3, r3
 8010ca4:	693a      	ldr	r2, [r7, #16]
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	691a      	ldr	r2, [r3, #16]
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	f003 0307 	and.w	r3, r3, #7
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8010cba:	693a      	ldr	r2, [r7, #16]
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	08da      	lsrs	r2, r3, #3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	3208      	adds	r2, #8
 8010cc8:	6939      	ldr	r1, [r7, #16]
 8010cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	2203      	movs	r2, #3
 8010cda:	fa02 f303 	lsl.w	r3, r2, r3
 8010cde:	43db      	mvns	r3, r3
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	4013      	ands	r3, r2
 8010ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	f003 0203 	and.w	r2, r3, #3
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	005b      	lsls	r3, r3, #1
 8010cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf6:	693a      	ldr	r2, [r7, #16]
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	693a      	ldr	r2, [r7, #16]
 8010d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	f000 8098 	beq.w	8010e40 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8010d10:	4a54      	ldr	r2, [pc, #336]	@ (8010e64 <HAL_GPIO_Init+0x2c8>)
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	089b      	lsrs	r3, r3, #2
 8010d16:	3302      	adds	r3, #2
 8010d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f003 0303 	and.w	r3, r3, #3
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	220f      	movs	r2, #15
 8010d28:	fa02 f303 	lsl.w	r3, r2, r3
 8010d2c:	43db      	mvns	r3, r3
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	4013      	ands	r3, r2
 8010d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8010d3a:	d019      	beq.n	8010d70 <HAL_GPIO_Init+0x1d4>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8010e68 <HAL_GPIO_Init+0x2cc>)
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d013      	beq.n	8010d6c <HAL_GPIO_Init+0x1d0>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4a49      	ldr	r2, [pc, #292]	@ (8010e6c <HAL_GPIO_Init+0x2d0>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d00d      	beq.n	8010d68 <HAL_GPIO_Init+0x1cc>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	4a48      	ldr	r2, [pc, #288]	@ (8010e70 <HAL_GPIO_Init+0x2d4>)
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d007      	beq.n	8010d64 <HAL_GPIO_Init+0x1c8>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4a47      	ldr	r2, [pc, #284]	@ (8010e74 <HAL_GPIO_Init+0x2d8>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d101      	bne.n	8010d60 <HAL_GPIO_Init+0x1c4>
 8010d5c:	2304      	movs	r3, #4
 8010d5e:	e008      	b.n	8010d72 <HAL_GPIO_Init+0x1d6>
 8010d60:	2307      	movs	r3, #7
 8010d62:	e006      	b.n	8010d72 <HAL_GPIO_Init+0x1d6>
 8010d64:	2303      	movs	r3, #3
 8010d66:	e004      	b.n	8010d72 <HAL_GPIO_Init+0x1d6>
 8010d68:	2302      	movs	r3, #2
 8010d6a:	e002      	b.n	8010d72 <HAL_GPIO_Init+0x1d6>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	e000      	b.n	8010d72 <HAL_GPIO_Init+0x1d6>
 8010d70:	2300      	movs	r3, #0
 8010d72:	697a      	ldr	r2, [r7, #20]
 8010d74:	f002 0203 	and.w	r2, r2, #3
 8010d78:	0092      	lsls	r2, r2, #2
 8010d7a:	4093      	lsls	r3, r2
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8010d82:	4938      	ldr	r1, [pc, #224]	@ (8010e64 <HAL_GPIO_Init+0x2c8>)
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	089b      	lsrs	r3, r3, #2
 8010d88:	3302      	adds	r3, #2
 8010d8a:	693a      	ldr	r2, [r7, #16]
 8010d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010d90:	4b39      	ldr	r3, [pc, #228]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	43db      	mvns	r3, r3
 8010d9a:	693a      	ldr	r2, [r7, #16]
 8010d9c:	4013      	ands	r3, r2
 8010d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d003      	beq.n	8010db4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	4313      	orrs	r3, r2
 8010db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010db4:	4a30      	ldr	r2, [pc, #192]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8010dba:	4b2f      	ldr	r3, [pc, #188]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	43db      	mvns	r3, r3
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d003      	beq.n	8010dde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8010dd6:	693a      	ldr	r2, [r7, #16]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010dde:	4a26      	ldr	r2, [pc, #152]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8010de4:	4b24      	ldr	r3, [pc, #144]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	43db      	mvns	r3, r3
 8010df0:	693a      	ldr	r2, [r7, #16]
 8010df2:	4013      	ands	r3, r2
 8010df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d003      	beq.n	8010e0a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8010e02:	693a      	ldr	r2, [r7, #16]
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	4313      	orrs	r3, r2
 8010e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8010e12:	4b19      	ldr	r3, [pc, #100]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	43db      	mvns	r3, r3
 8010e1e:	693a      	ldr	r2, [r7, #16]
 8010e20:	4013      	ands	r3, r2
 8010e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d003      	beq.n	8010e38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8010e30:	693a      	ldr	r2, [r7, #16]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	4313      	orrs	r3, r2
 8010e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8010e38:	4a0f      	ldr	r2, [pc, #60]	@ (8010e78 <HAL_GPIO_Init+0x2dc>)
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	3301      	adds	r3, #1
 8010e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f47f aeab 	bne.w	8010bac <HAL_GPIO_Init+0x10>
  }
}
 8010e56:	bf00      	nop
 8010e58:	bf00      	nop
 8010e5a:	371c      	adds	r7, #28
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	40010000 	.word	0x40010000
 8010e68:	48000400 	.word	0x48000400
 8010e6c:	48000800 	.word	0x48000800
 8010e70:	48000c00 	.word	0x48000c00
 8010e74:	48001000 	.word	0x48001000
 8010e78:	58000800 	.word	0x58000800

08010e7c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b087      	sub	sp, #28
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010e86:	2300      	movs	r3, #0
 8010e88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8010e8a:	e0bb      	b.n	8011004 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	fa02 f303 	lsl.w	r3, r2, r3
 8010e94:	683a      	ldr	r2, [r7, #0]
 8010e96:	4013      	ands	r3, r2
 8010e98:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 80ae 	beq.w	8010ffe <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8010ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8011020 <HAL_GPIO_DeInit+0x1a4>)
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	089b      	lsrs	r3, r3, #2
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	f003 0303 	and.w	r3, r3, #3
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	220f      	movs	r2, #15
 8010eba:	fa02 f303 	lsl.w	r3, r2, r3
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	4013      	ands	r3, r2
 8010ec2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8010eca:	d019      	beq.n	8010f00 <HAL_GPIO_DeInit+0x84>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a55      	ldr	r2, [pc, #340]	@ (8011024 <HAL_GPIO_DeInit+0x1a8>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d013      	beq.n	8010efc <HAL_GPIO_DeInit+0x80>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a54      	ldr	r2, [pc, #336]	@ (8011028 <HAL_GPIO_DeInit+0x1ac>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d00d      	beq.n	8010ef8 <HAL_GPIO_DeInit+0x7c>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a53      	ldr	r2, [pc, #332]	@ (801102c <HAL_GPIO_DeInit+0x1b0>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d007      	beq.n	8010ef4 <HAL_GPIO_DeInit+0x78>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a52      	ldr	r2, [pc, #328]	@ (8011030 <HAL_GPIO_DeInit+0x1b4>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d101      	bne.n	8010ef0 <HAL_GPIO_DeInit+0x74>
 8010eec:	2304      	movs	r3, #4
 8010eee:	e008      	b.n	8010f02 <HAL_GPIO_DeInit+0x86>
 8010ef0:	2307      	movs	r3, #7
 8010ef2:	e006      	b.n	8010f02 <HAL_GPIO_DeInit+0x86>
 8010ef4:	2303      	movs	r3, #3
 8010ef6:	e004      	b.n	8010f02 <HAL_GPIO_DeInit+0x86>
 8010ef8:	2302      	movs	r3, #2
 8010efa:	e002      	b.n	8010f02 <HAL_GPIO_DeInit+0x86>
 8010efc:	2301      	movs	r3, #1
 8010efe:	e000      	b.n	8010f02 <HAL_GPIO_DeInit+0x86>
 8010f00:	2300      	movs	r3, #0
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	f002 0203 	and.w	r2, r2, #3
 8010f08:	0092      	lsls	r2, r2, #2
 8010f0a:	4093      	lsls	r3, r2
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d136      	bne.n	8010f80 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8010f12:	4b48      	ldr	r3, [pc, #288]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f14:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	43db      	mvns	r3, r3
 8010f1c:	4945      	ldr	r1, [pc, #276]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f1e:	4013      	ands	r3, r2
 8010f20:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8010f24:	4b43      	ldr	r3, [pc, #268]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	43db      	mvns	r3, r3
 8010f2e:	4941      	ldr	r1, [pc, #260]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f30:	4013      	ands	r3, r2
 8010f32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8010f36:	4b3f      	ldr	r3, [pc, #252]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	43db      	mvns	r3, r3
 8010f3e:	493d      	ldr	r1, [pc, #244]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f40:	4013      	ands	r3, r2
 8010f42:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8010f44:	4b3b      	ldr	r3, [pc, #236]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f46:	685a      	ldr	r2, [r3, #4]
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	43db      	mvns	r3, r3
 8010f4c:	4939      	ldr	r1, [pc, #228]	@ (8011034 <HAL_GPIO_DeInit+0x1b8>)
 8010f4e:	4013      	ands	r3, r2
 8010f50:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	f003 0303 	and.w	r3, r3, #3
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	220f      	movs	r2, #15
 8010f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f60:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8010f62:	4a2f      	ldr	r2, [pc, #188]	@ (8011020 <HAL_GPIO_DeInit+0x1a4>)
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	089b      	lsrs	r3, r3, #2
 8010f68:	3302      	adds	r3, #2
 8010f6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	43da      	mvns	r2, r3
 8010f72:	482b      	ldr	r0, [pc, #172]	@ (8011020 <HAL_GPIO_DeInit+0x1a4>)
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	089b      	lsrs	r3, r3, #2
 8010f78:	400a      	ands	r2, r1
 8010f7a:	3302      	adds	r3, #2
 8010f7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	005b      	lsls	r3, r3, #1
 8010f88:	2103      	movs	r1, #3
 8010f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8010f8e:	431a      	orrs	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	08da      	lsrs	r2, r3, #3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	3208      	adds	r2, #8
 8010f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	f003 0307 	and.w	r3, r3, #7
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	220f      	movs	r2, #15
 8010faa:	fa02 f303 	lsl.w	r3, r2, r3
 8010fae:	43db      	mvns	r3, r3
 8010fb0:	697a      	ldr	r2, [r7, #20]
 8010fb2:	08d2      	lsrs	r2, r2, #3
 8010fb4:	4019      	ands	r1, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	3208      	adds	r2, #8
 8010fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	68da      	ldr	r2, [r3, #12]
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	005b      	lsls	r3, r3, #1
 8010fc6:	2103      	movs	r1, #3
 8010fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8010fcc:	43db      	mvns	r3, r3
 8010fce:	401a      	ands	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	685a      	ldr	r2, [r3, #4]
 8010fd8:	2101      	movs	r1, #1
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8010fe0:	43db      	mvns	r3, r3
 8010fe2:	401a      	ands	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	689a      	ldr	r2, [r3, #8]
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	005b      	lsls	r3, r3, #1
 8010ff0:	2103      	movs	r1, #3
 8010ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff6:	43db      	mvns	r3, r3
 8010ff8:	401a      	ands	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	3301      	adds	r3, #1
 8011002:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8011004:	683a      	ldr	r2, [r7, #0]
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	fa22 f303 	lsr.w	r3, r2, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	f47f af3d 	bne.w	8010e8c <HAL_GPIO_DeInit+0x10>
  }
}
 8011012:	bf00      	nop
 8011014:	bf00      	nop
 8011016:	371c      	adds	r7, #28
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr
 8011020:	40010000 	.word	0x40010000
 8011024:	48000400 	.word	0x48000400
 8011028:	48000800 	.word	0x48000800
 801102c:	48000c00 	.word	0x48000c00
 8011030:	48001000 	.word	0x48001000
 8011034:	58000800 	.word	0x58000800

08011038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	807b      	strh	r3, [r7, #2]
 8011044:	4613      	mov	r3, r2
 8011046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011048:	787b      	ldrb	r3, [r7, #1]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d003      	beq.n	8011056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801104e:	887a      	ldrh	r2, [r7, #2]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011054:	e002      	b.n	801105c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011056:	887a      	ldrh	r2, [r7, #2]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801105c:	bf00      	nop
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8011072:	4b08      	ldr	r3, [pc, #32]	@ (8011094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011074:	68da      	ldr	r2, [r3, #12]
 8011076:	88fb      	ldrh	r3, [r7, #6]
 8011078:	4013      	ands	r3, r2
 801107a:	2b00      	cmp	r3, #0
 801107c:	d006      	beq.n	801108c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801107e:	4a05      	ldr	r2, [pc, #20]	@ (8011094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011080:	88fb      	ldrh	r3, [r7, #6]
 8011082:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011084:	88fb      	ldrh	r3, [r7, #6]
 8011086:	4618      	mov	r0, r3
 8011088:	f7f0 fc19 	bl	80018be <HAL_GPIO_EXTI_Callback>
  }
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	58000800 	.word	0x58000800

08011098 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 801109e:	4b0a      	ldr	r3, [pc, #40]	@ (80110c8 <HAL_HSEM_IRQHandler+0x30>)
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80110a4:	4b08      	ldr	r3, [pc, #32]	@ (80110c8 <HAL_HSEM_IRQHandler+0x30>)
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	43db      	mvns	r3, r3
 80110ac:	4906      	ldr	r1, [pc, #24]	@ (80110c8 <HAL_HSEM_IRQHandler+0x30>)
 80110ae:	4013      	ands	r3, r2
 80110b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80110b2:	4a05      	ldr	r2, [pc, #20]	@ (80110c8 <HAL_HSEM_IRQHandler+0x30>)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f807 	bl	80110cc <HAL_HSEM_FreeCallback>
}
 80110be:	bf00      	nop
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	58001500 	.word	0x58001500

080110cc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80110d4:	bf00      	nop
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d101      	bne.n	80110f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80110ee:	2301      	movs	r3, #1
 80110f0:	e08d      	b.n	801120e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 f8b4 	bl	8011274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2224      	movs	r2, #36	@ 0x24
 8011110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f022 0201 	bic.w	r2, r2, #1
 8011122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	685a      	ldr	r2, [r3, #4]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	689a      	ldr	r2, [r3, #8]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	2b01      	cmp	r3, #1
 8011148:	d107      	bne.n	801115a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	689a      	ldr	r2, [r3, #8]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011156:	609a      	str	r2, [r3, #8]
 8011158:	e006      	b.n	8011168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	689a      	ldr	r2, [r3, #8]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8011166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	2b02      	cmp	r3, #2
 801116e:	d108      	bne.n	8011182 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	685a      	ldr	r2, [r3, #4]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801117e:	605a      	str	r2, [r3, #4]
 8011180:	e007      	b.n	8011192 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	685a      	ldr	r2, [r3, #4]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	6812      	ldr	r2, [r2, #0]
 801119c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80111a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80111a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80111b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	691a      	ldr	r2, [r3, #16]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	695b      	ldr	r3, [r3, #20]
 80111be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	699b      	ldr	r3, [r3, #24]
 80111c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	430a      	orrs	r2, r1
 80111ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	69d9      	ldr	r1, [r3, #28]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6a1a      	ldr	r2, [r3, #32]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	430a      	orrs	r2, r1
 80111de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	f042 0201 	orr.w	r2, r2, #1
 80111ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2220      	movs	r2, #32
 80111fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b082      	sub	sp, #8
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	e021      	b.n	801126c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2224      	movs	r2, #36	@ 0x24
 801122c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f022 0201 	bic.w	r2, r2, #1
 801123e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 f821 	bl	8011288 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2200      	movs	r2, #0
 801125e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2200      	movs	r2, #0
 8011266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801126a:	2300      	movs	r3, #0
}
 801126c:	4618      	mov	r0, r3
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011290:	bf00      	nop
 8011292:	370c      	adds	r7, #12
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr

0801129c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af02      	add	r7, sp, #8
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	607a      	str	r2, [r7, #4]
 80112a6:	461a      	mov	r2, r3
 80112a8:	460b      	mov	r3, r1
 80112aa:	817b      	strh	r3, [r7, #10]
 80112ac:	4613      	mov	r3, r2
 80112ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	2b20      	cmp	r3, #32
 80112ba:	f040 80fd 	bne.w	80114b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d101      	bne.n	80112cc <HAL_I2C_Master_Transmit+0x30>
 80112c8:	2302      	movs	r3, #2
 80112ca:	e0f6      	b.n	80114ba <HAL_I2C_Master_Transmit+0x21e>
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80112d4:	f7fe ff16 	bl	8010104 <HAL_GetTick>
 80112d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	2319      	movs	r3, #25
 80112e0:	2201      	movs	r2, #1
 80112e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f000 fcfa 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d001      	beq.n	80112f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	e0e1      	b.n	80114ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2221      	movs	r2, #33	@ 0x21
 80112fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2210      	movs	r2, #16
 8011302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	893a      	ldrh	r2, [r7, #8]
 8011316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2200      	movs	r2, #0
 801131c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011322:	b29b      	uxth	r3, r3
 8011324:	2bff      	cmp	r3, #255	@ 0xff
 8011326:	d906      	bls.n	8011336 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	22ff      	movs	r2, #255	@ 0xff
 801132c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801132e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011332:	617b      	str	r3, [r7, #20]
 8011334:	e007      	b.n	8011346 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801133a:	b29a      	uxth	r2, r3
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8011340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011344:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801134a:	2b00      	cmp	r3, #0
 801134c:	d024      	beq.n	8011398 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011352:	781a      	ldrb	r2, [r3, #0]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801135e:	1c5a      	adds	r2, r3, #1
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011368:	b29b      	uxth	r3, r3
 801136a:	3b01      	subs	r3, #1
 801136c:	b29a      	uxth	r2, r3
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011376:	3b01      	subs	r3, #1
 8011378:	b29a      	uxth	r2, r3
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011382:	b2db      	uxtb	r3, r3
 8011384:	3301      	adds	r3, #1
 8011386:	b2da      	uxtb	r2, r3
 8011388:	8979      	ldrh	r1, [r7, #10]
 801138a:	4b4e      	ldr	r3, [pc, #312]	@ (80114c4 <HAL_I2C_Master_Transmit+0x228>)
 801138c:	9300      	str	r3, [sp, #0]
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f000 fef5 	bl	8012180 <I2C_TransferConfig>
 8011396:	e066      	b.n	8011466 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801139c:	b2da      	uxtb	r2, r3
 801139e:	8979      	ldrh	r1, [r7, #10]
 80113a0:	4b48      	ldr	r3, [pc, #288]	@ (80114c4 <HAL_I2C_Master_Transmit+0x228>)
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	68f8      	ldr	r0, [r7, #12]
 80113a8:	f000 feea 	bl	8012180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80113ac:	e05b      	b.n	8011466 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80113ae:	693a      	ldr	r2, [r7, #16]
 80113b0:	6a39      	ldr	r1, [r7, #32]
 80113b2:	68f8      	ldr	r0, [r7, #12]
 80113b4:	f000 fced 	bl	8011d92 <I2C_WaitOnTXISFlagUntilTimeout>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80113be:	2301      	movs	r3, #1
 80113c0:	e07b      	b.n	80114ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113c6:	781a      	ldrb	r2, [r3, #0]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d2:	1c5a      	adds	r2, r3, #1
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113dc:	b29b      	uxth	r3, r3
 80113de:	3b01      	subs	r3, #1
 80113e0:	b29a      	uxth	r2, r3
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113ea:	3b01      	subs	r3, #1
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d034      	beq.n	8011466 <HAL_I2C_Master_Transmit+0x1ca>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011400:	2b00      	cmp	r3, #0
 8011402:	d130      	bne.n	8011466 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	9300      	str	r3, [sp, #0]
 8011408:	6a3b      	ldr	r3, [r7, #32]
 801140a:	2200      	movs	r2, #0
 801140c:	2180      	movs	r1, #128	@ 0x80
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f000 fc66 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	e04d      	b.n	80114ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011422:	b29b      	uxth	r3, r3
 8011424:	2bff      	cmp	r3, #255	@ 0xff
 8011426:	d90e      	bls.n	8011446 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	22ff      	movs	r2, #255	@ 0xff
 801142c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011432:	b2da      	uxtb	r2, r3
 8011434:	8979      	ldrh	r1, [r7, #10]
 8011436:	2300      	movs	r3, #0
 8011438:	9300      	str	r3, [sp, #0]
 801143a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801143e:	68f8      	ldr	r0, [r7, #12]
 8011440:	f000 fe9e 	bl	8012180 <I2C_TransferConfig>
 8011444:	e00f      	b.n	8011466 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801144a:	b29a      	uxth	r2, r3
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011454:	b2da      	uxtb	r2, r3
 8011456:	8979      	ldrh	r1, [r7, #10]
 8011458:	2300      	movs	r3, #0
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f000 fe8d 	bl	8012180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801146a:	b29b      	uxth	r3, r3
 801146c:	2b00      	cmp	r3, #0
 801146e:	d19e      	bne.n	80113ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011470:	693a      	ldr	r2, [r7, #16]
 8011472:	6a39      	ldr	r1, [r7, #32]
 8011474:	68f8      	ldr	r0, [r7, #12]
 8011476:	f000 fcd3 	bl	8011e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d001      	beq.n	8011484 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8011480:	2301      	movs	r3, #1
 8011482:	e01a      	b.n	80114ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2220      	movs	r2, #32
 801148a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	6859      	ldr	r1, [r3, #4]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	4b0c      	ldr	r3, [pc, #48]	@ (80114c8 <HAL_I2C_Master_Transmit+0x22c>)
 8011498:	400b      	ands	r3, r1
 801149a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2220      	movs	r2, #32
 80114a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80114b4:	2300      	movs	r3, #0
 80114b6:	e000      	b.n	80114ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80114b8:	2302      	movs	r3, #2
  }
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3718      	adds	r7, #24
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	80002000 	.word	0x80002000
 80114c8:	fe00e800 	.word	0xfe00e800

080114cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b088      	sub	sp, #32
 80114d0:	af02      	add	r7, sp, #8
 80114d2:	60f8      	str	r0, [r7, #12]
 80114d4:	607a      	str	r2, [r7, #4]
 80114d6:	461a      	mov	r2, r3
 80114d8:	460b      	mov	r3, r1
 80114da:	817b      	strh	r3, [r7, #10]
 80114dc:	4613      	mov	r3, r2
 80114de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	2b20      	cmp	r3, #32
 80114ea:	f040 80db 	bne.w	80116a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d101      	bne.n	80114fc <HAL_I2C_Master_Receive+0x30>
 80114f8:	2302      	movs	r3, #2
 80114fa:	e0d4      	b.n	80116a6 <HAL_I2C_Master_Receive+0x1da>
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2201      	movs	r2, #1
 8011500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011504:	f7fe fdfe 	bl	8010104 <HAL_GetTick>
 8011508:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	2319      	movs	r3, #25
 8011510:	2201      	movs	r2, #1
 8011512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f000 fbe2 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8011522:	2301      	movs	r3, #1
 8011524:	e0bf      	b.n	80116a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2222      	movs	r2, #34	@ 0x22
 801152a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2210      	movs	r2, #16
 8011532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2200      	movs	r2, #0
 801153a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	893a      	ldrh	r2, [r7, #8]
 8011546:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011552:	b29b      	uxth	r3, r3
 8011554:	2bff      	cmp	r3, #255	@ 0xff
 8011556:	d90e      	bls.n	8011576 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	22ff      	movs	r2, #255	@ 0xff
 801155c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011562:	b2da      	uxtb	r2, r3
 8011564:	8979      	ldrh	r1, [r7, #10]
 8011566:	4b52      	ldr	r3, [pc, #328]	@ (80116b0 <HAL_I2C_Master_Receive+0x1e4>)
 8011568:	9300      	str	r3, [sp, #0]
 801156a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f000 fe06 	bl	8012180 <I2C_TransferConfig>
 8011574:	e06d      	b.n	8011652 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801157a:	b29a      	uxth	r2, r3
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011584:	b2da      	uxtb	r2, r3
 8011586:	8979      	ldrh	r1, [r7, #10]
 8011588:	4b49      	ldr	r3, [pc, #292]	@ (80116b0 <HAL_I2C_Master_Receive+0x1e4>)
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f000 fdf5 	bl	8012180 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8011596:	e05c      	b.n	8011652 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011598:	697a      	ldr	r2, [r7, #20]
 801159a:	6a39      	ldr	r1, [r7, #32]
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f000 fc83 	bl	8011ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d001      	beq.n	80115ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80115a8:	2301      	movs	r3, #1
 80115aa:	e07c      	b.n	80116a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115b6:	b2d2      	uxtb	r2, r2
 80115b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115be:	1c5a      	adds	r2, r3, #1
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115c8:	3b01      	subs	r3, #1
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	3b01      	subs	r3, #1
 80115d8:	b29a      	uxth	r2, r3
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d034      	beq.n	8011652 <HAL_I2C_Master_Receive+0x186>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d130      	bne.n	8011652 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	6a3b      	ldr	r3, [r7, #32]
 80115f6:	2200      	movs	r2, #0
 80115f8:	2180      	movs	r1, #128	@ 0x80
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f000 fb70 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d001      	beq.n	801160a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8011606:	2301      	movs	r3, #1
 8011608:	e04d      	b.n	80116a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801160e:	b29b      	uxth	r3, r3
 8011610:	2bff      	cmp	r3, #255	@ 0xff
 8011612:	d90e      	bls.n	8011632 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	22ff      	movs	r2, #255	@ 0xff
 8011618:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801161e:	b2da      	uxtb	r2, r3
 8011620:	8979      	ldrh	r1, [r7, #10]
 8011622:	2300      	movs	r3, #0
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f000 fda8 	bl	8012180 <I2C_TransferConfig>
 8011630:	e00f      	b.n	8011652 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011636:	b29a      	uxth	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011640:	b2da      	uxtb	r2, r3
 8011642:	8979      	ldrh	r1, [r7, #10]
 8011644:	2300      	movs	r3, #0
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f000 fd97 	bl	8012180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011656:	b29b      	uxth	r3, r3
 8011658:	2b00      	cmp	r3, #0
 801165a:	d19d      	bne.n	8011598 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801165c:	697a      	ldr	r2, [r7, #20]
 801165e:	6a39      	ldr	r1, [r7, #32]
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f000 fbdd 	bl	8011e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d001      	beq.n	8011670 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 801166c:	2301      	movs	r3, #1
 801166e:	e01a      	b.n	80116a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2220      	movs	r2, #32
 8011676:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	6859      	ldr	r1, [r3, #4]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	4b0c      	ldr	r3, [pc, #48]	@ (80116b4 <HAL_I2C_Master_Receive+0x1e8>)
 8011684:	400b      	ands	r3, r1
 8011686:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2220      	movs	r2, #32
 801168c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2200      	movs	r2, #0
 8011694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2200      	movs	r2, #0
 801169c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	e000      	b.n	80116a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80116a4:	2302      	movs	r3, #2
  }
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3718      	adds	r7, #24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	80002400 	.word	0x80002400
 80116b4:	fe00e800 	.word	0xfe00e800

080116b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b088      	sub	sp, #32
 80116bc:	af02      	add	r7, sp, #8
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	4608      	mov	r0, r1
 80116c2:	4611      	mov	r1, r2
 80116c4:	461a      	mov	r2, r3
 80116c6:	4603      	mov	r3, r0
 80116c8:	817b      	strh	r3, [r7, #10]
 80116ca:	460b      	mov	r3, r1
 80116cc:	813b      	strh	r3, [r7, #8]
 80116ce:	4613      	mov	r3, r2
 80116d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	2b20      	cmp	r3, #32
 80116dc:	f040 80f9 	bne.w	80118d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80116e0:	6a3b      	ldr	r3, [r7, #32]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <HAL_I2C_Mem_Write+0x34>
 80116e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d105      	bne.n	80116f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80116f4:	2301      	movs	r3, #1
 80116f6:	e0ed      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d101      	bne.n	8011706 <HAL_I2C_Mem_Write+0x4e>
 8011702:	2302      	movs	r3, #2
 8011704:	e0e6      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2201      	movs	r2, #1
 801170a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801170e:	f7fe fcf9 	bl	8010104 <HAL_GetTick>
 8011712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	2319      	movs	r3, #25
 801171a:	2201      	movs	r2, #1
 801171c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f000 fadd 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d001      	beq.n	8011730 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801172c:	2301      	movs	r3, #1
 801172e:	e0d1      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2221      	movs	r2, #33	@ 0x21
 8011734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2240      	movs	r2, #64	@ 0x40
 801173c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2200      	movs	r2, #0
 8011744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6a3a      	ldr	r2, [r7, #32]
 801174a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2200      	movs	r2, #0
 8011756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011758:	88f8      	ldrh	r0, [r7, #6]
 801175a:	893a      	ldrh	r2, [r7, #8]
 801175c:	8979      	ldrh	r1, [r7, #10]
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	4603      	mov	r3, r0
 8011768:	68f8      	ldr	r0, [r7, #12]
 801176a:	f000 f9ed 	bl	8011b48 <I2C_RequestMemoryWrite>
 801176e:	4603      	mov	r3, r0
 8011770:	2b00      	cmp	r3, #0
 8011772:	d005      	beq.n	8011780 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 801177c:	2301      	movs	r3, #1
 801177e:	e0a9      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011784:	b29b      	uxth	r3, r3
 8011786:	2bff      	cmp	r3, #255	@ 0xff
 8011788:	d90e      	bls.n	80117a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	22ff      	movs	r2, #255	@ 0xff
 801178e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011794:	b2da      	uxtb	r2, r3
 8011796:	8979      	ldrh	r1, [r7, #10]
 8011798:	2300      	movs	r3, #0
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f000 fced 	bl	8012180 <I2C_TransferConfig>
 80117a6:	e00f      	b.n	80117c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80117b6:	b2da      	uxtb	r2, r3
 80117b8:	8979      	ldrh	r1, [r7, #10]
 80117ba:	2300      	movs	r3, #0
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f000 fcdc 	bl	8012180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f000 fae0 	bl	8011d92 <I2C_WaitOnTXISFlagUntilTimeout>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d001      	beq.n	80117dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80117d8:	2301      	movs	r3, #1
 80117da:	e07b      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e0:	781a      	ldrb	r2, [r3, #0]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ec:	1c5a      	adds	r2, r3, #1
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	3b01      	subs	r3, #1
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011804:	3b01      	subs	r3, #1
 8011806:	b29a      	uxth	r2, r3
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011810:	b29b      	uxth	r3, r3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d034      	beq.n	8011880 <HAL_I2C_Mem_Write+0x1c8>
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801181a:	2b00      	cmp	r3, #0
 801181c:	d130      	bne.n	8011880 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011824:	2200      	movs	r2, #0
 8011826:	2180      	movs	r1, #128	@ 0x80
 8011828:	68f8      	ldr	r0, [r7, #12]
 801182a:	f000 fa59 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 801182e:	4603      	mov	r3, r0
 8011830:	2b00      	cmp	r3, #0
 8011832:	d001      	beq.n	8011838 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8011834:	2301      	movs	r3, #1
 8011836:	e04d      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801183c:	b29b      	uxth	r3, r3
 801183e:	2bff      	cmp	r3, #255	@ 0xff
 8011840:	d90e      	bls.n	8011860 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	22ff      	movs	r2, #255	@ 0xff
 8011846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801184c:	b2da      	uxtb	r2, r3
 801184e:	8979      	ldrh	r1, [r7, #10]
 8011850:	2300      	movs	r3, #0
 8011852:	9300      	str	r3, [sp, #0]
 8011854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f000 fc91 	bl	8012180 <I2C_TransferConfig>
 801185e:	e00f      	b.n	8011880 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011864:	b29a      	uxth	r2, r3
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801186e:	b2da      	uxtb	r2, r3
 8011870:	8979      	ldrh	r1, [r7, #10]
 8011872:	2300      	movs	r3, #0
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f000 fc80 	bl	8012180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011884:	b29b      	uxth	r3, r3
 8011886:	2b00      	cmp	r3, #0
 8011888:	d19e      	bne.n	80117c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801188a:	697a      	ldr	r2, [r7, #20]
 801188c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f000 fac6 	bl	8011e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d001      	beq.n	801189e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801189a:	2301      	movs	r3, #1
 801189c:	e01a      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2220      	movs	r2, #32
 80118a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	6859      	ldr	r1, [r3, #4]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	4b0a      	ldr	r3, [pc, #40]	@ (80118dc <HAL_I2C_Mem_Write+0x224>)
 80118b2:	400b      	ands	r3, r1
 80118b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2220      	movs	r2, #32
 80118ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	2200      	movs	r2, #0
 80118c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2200      	movs	r2, #0
 80118ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80118ce:	2300      	movs	r3, #0
 80118d0:	e000      	b.n	80118d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80118d2:	2302      	movs	r3, #2
  }
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3718      	adds	r7, #24
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	fe00e800 	.word	0xfe00e800

080118e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b088      	sub	sp, #32
 80118e4:	af02      	add	r7, sp, #8
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	4608      	mov	r0, r1
 80118ea:	4611      	mov	r1, r2
 80118ec:	461a      	mov	r2, r3
 80118ee:	4603      	mov	r3, r0
 80118f0:	817b      	strh	r3, [r7, #10]
 80118f2:	460b      	mov	r3, r1
 80118f4:	813b      	strh	r3, [r7, #8]
 80118f6:	4613      	mov	r3, r2
 80118f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011900:	b2db      	uxtb	r3, r3
 8011902:	2b20      	cmp	r3, #32
 8011904:	f040 80fd 	bne.w	8011b02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d002      	beq.n	8011914 <HAL_I2C_Mem_Read+0x34>
 801190e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011910:	2b00      	cmp	r3, #0
 8011912:	d105      	bne.n	8011920 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801191a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801191c:	2301      	movs	r3, #1
 801191e:	e0f1      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011926:	2b01      	cmp	r3, #1
 8011928:	d101      	bne.n	801192e <HAL_I2C_Mem_Read+0x4e>
 801192a:	2302      	movs	r3, #2
 801192c:	e0ea      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2201      	movs	r2, #1
 8011932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011936:	f7fe fbe5 	bl	8010104 <HAL_GetTick>
 801193a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	2319      	movs	r3, #25
 8011942:	2201      	movs	r2, #1
 8011944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f000 f9c9 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d001      	beq.n	8011958 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8011954:	2301      	movs	r3, #1
 8011956:	e0d5      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2222      	movs	r2, #34	@ 0x22
 801195c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2240      	movs	r2, #64	@ 0x40
 8011964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2200      	movs	r2, #0
 801196c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	6a3a      	ldr	r2, [r7, #32]
 8011972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011980:	88f8      	ldrh	r0, [r7, #6]
 8011982:	893a      	ldrh	r2, [r7, #8]
 8011984:	8979      	ldrh	r1, [r7, #10]
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	9301      	str	r3, [sp, #4]
 801198a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	4603      	mov	r3, r0
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f000 f92d 	bl	8011bf0 <I2C_RequestMemoryRead>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d005      	beq.n	80119a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	e0ad      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	2bff      	cmp	r3, #255	@ 0xff
 80119b0:	d90e      	bls.n	80119d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	22ff      	movs	r2, #255	@ 0xff
 80119b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	8979      	ldrh	r1, [r7, #10]
 80119c0:	4b52      	ldr	r3, [pc, #328]	@ (8011b0c <HAL_I2C_Mem_Read+0x22c>)
 80119c2:	9300      	str	r3, [sp, #0]
 80119c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80119c8:	68f8      	ldr	r0, [r7, #12]
 80119ca:	f000 fbd9 	bl	8012180 <I2C_TransferConfig>
 80119ce:	e00f      	b.n	80119f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119d4:	b29a      	uxth	r2, r3
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119de:	b2da      	uxtb	r2, r3
 80119e0:	8979      	ldrh	r1, [r7, #10]
 80119e2:	4b4a      	ldr	r3, [pc, #296]	@ (8011b0c <HAL_I2C_Mem_Read+0x22c>)
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f000 fbc8 	bl	8012180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	9300      	str	r3, [sp, #0]
 80119f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f6:	2200      	movs	r2, #0
 80119f8:	2104      	movs	r1, #4
 80119fa:	68f8      	ldr	r0, [r7, #12]
 80119fc:	f000 f970 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d001      	beq.n	8011a0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8011a06:	2301      	movs	r3, #1
 8011a08:	e07c      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a14:	b2d2      	uxtb	r2, r2
 8011a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a1c:	1c5a      	adds	r2, r3, #1
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a26:	3b01      	subs	r3, #1
 8011a28:	b29a      	uxth	r2, r3
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	3b01      	subs	r3, #1
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d034      	beq.n	8011ab0 <HAL_I2C_Mem_Read+0x1d0>
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d130      	bne.n	8011ab0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	9300      	str	r3, [sp, #0]
 8011a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a54:	2200      	movs	r2, #0
 8011a56:	2180      	movs	r1, #128	@ 0x80
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f000 f941 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8011a64:	2301      	movs	r3, #1
 8011a66:	e04d      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	2bff      	cmp	r3, #255	@ 0xff
 8011a70:	d90e      	bls.n	8011a90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	22ff      	movs	r2, #255	@ 0xff
 8011a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a7c:	b2da      	uxtb	r2, r3
 8011a7e:	8979      	ldrh	r1, [r7, #10]
 8011a80:	2300      	movs	r3, #0
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011a88:	68f8      	ldr	r0, [r7, #12]
 8011a8a:	f000 fb79 	bl	8012180 <I2C_TransferConfig>
 8011a8e:	e00f      	b.n	8011ab0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a9e:	b2da      	uxtb	r2, r3
 8011aa0:	8979      	ldrh	r1, [r7, #10]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011aaa:	68f8      	ldr	r0, [r7, #12]
 8011aac:	f000 fb68 	bl	8012180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d19a      	bne.n	80119f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011aba:	697a      	ldr	r2, [r7, #20]
 8011abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f000 f9ae 	bl	8011e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	e01a      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	6859      	ldr	r1, [r3, #4]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8011b10 <HAL_I2C_Mem_Read+0x230>)
 8011ae2:	400b      	ands	r3, r1
 8011ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2220      	movs	r2, #32
 8011aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2200      	movs	r2, #0
 8011af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011afe:	2300      	movs	r3, #0
 8011b00:	e000      	b.n	8011b04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8011b02:	2302      	movs	r3, #2
  }
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	80002400 	.word	0x80002400
 8011b10:	fe00e800 	.word	0xfe00e800

08011b14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b22:	b2db      	uxtb	r3, r3
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b086      	sub	sp, #24
 8011b4c:	af02      	add	r7, sp, #8
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	4608      	mov	r0, r1
 8011b52:	4611      	mov	r1, r2
 8011b54:	461a      	mov	r2, r3
 8011b56:	4603      	mov	r3, r0
 8011b58:	817b      	strh	r3, [r7, #10]
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	813b      	strh	r3, [r7, #8]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011b62:	88fb      	ldrh	r3, [r7, #6]
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	8979      	ldrh	r1, [r7, #10]
 8011b68:	4b20      	ldr	r3, [pc, #128]	@ (8011bec <I2C_RequestMemoryWrite+0xa4>)
 8011b6a:	9300      	str	r3, [sp, #0]
 8011b6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f000 fb05 	bl	8012180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011b76:	69fa      	ldr	r2, [r7, #28]
 8011b78:	69b9      	ldr	r1, [r7, #24]
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f000 f909 	bl	8011d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d001      	beq.n	8011b8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8011b86:	2301      	movs	r3, #1
 8011b88:	e02c      	b.n	8011be4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011b8a:	88fb      	ldrh	r3, [r7, #6]
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d105      	bne.n	8011b9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011b90:	893b      	ldrh	r3, [r7, #8]
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	629a      	str	r2, [r3, #40]	@ 0x28
 8011b9a:	e015      	b.n	8011bc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011b9c:	893b      	ldrh	r3, [r7, #8]
 8011b9e:	0a1b      	lsrs	r3, r3, #8
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011baa:	69fa      	ldr	r2, [r7, #28]
 8011bac:	69b9      	ldr	r1, [r7, #24]
 8011bae:	68f8      	ldr	r0, [r7, #12]
 8011bb0:	f000 f8ef 	bl	8011d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d001      	beq.n	8011bbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e012      	b.n	8011be4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011bbe:	893b      	ldrh	r3, [r7, #8]
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	2180      	movs	r1, #128	@ 0x80
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f000 f884 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d001      	beq.n	8011be2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	e000      	b.n	8011be4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	80002000 	.word	0x80002000

08011bf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b086      	sub	sp, #24
 8011bf4:	af02      	add	r7, sp, #8
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	4603      	mov	r3, r0
 8011c00:	817b      	strh	r3, [r7, #10]
 8011c02:	460b      	mov	r3, r1
 8011c04:	813b      	strh	r3, [r7, #8]
 8011c06:	4613      	mov	r3, r2
 8011c08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011c0a:	88fb      	ldrh	r3, [r7, #6]
 8011c0c:	b2da      	uxtb	r2, r3
 8011c0e:	8979      	ldrh	r1, [r7, #10]
 8011c10:	4b20      	ldr	r3, [pc, #128]	@ (8011c94 <I2C_RequestMemoryRead+0xa4>)
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	2300      	movs	r3, #0
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	f000 fab2 	bl	8012180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c1c:	69fa      	ldr	r2, [r7, #28]
 8011c1e:	69b9      	ldr	r1, [r7, #24]
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f000 f8b6 	bl	8011d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e02c      	b.n	8011c8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011c30:	88fb      	ldrh	r3, [r7, #6]
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d105      	bne.n	8011c42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011c36:	893b      	ldrh	r3, [r7, #8]
 8011c38:	b2da      	uxtb	r2, r3
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8011c40:	e015      	b.n	8011c6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011c42:	893b      	ldrh	r3, [r7, #8]
 8011c44:	0a1b      	lsrs	r3, r3, #8
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c50:	69fa      	ldr	r2, [r7, #28]
 8011c52:	69b9      	ldr	r1, [r7, #24]
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f000 f89c 	bl	8011d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8011c60:	2301      	movs	r3, #1
 8011c62:	e012      	b.n	8011c8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011c64:	893b      	ldrh	r3, [r7, #8]
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	2200      	movs	r2, #0
 8011c76:	2140      	movs	r1, #64	@ 0x40
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f000 f831 	bl	8011ce0 <I2C_WaitOnFlagUntilTimeout>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8011c84:	2301      	movs	r3, #1
 8011c86:	e000      	b.n	8011c8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8011c88:	2300      	movs	r3, #0
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	80002000 	.word	0x80002000

08011c98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	699b      	ldr	r3, [r3, #24]
 8011ca6:	f003 0302 	and.w	r3, r3, #2
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	d103      	bne.n	8011cb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	699b      	ldr	r3, [r3, #24]
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d007      	beq.n	8011cd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	699a      	ldr	r2, [r3, #24]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f042 0201 	orr.w	r2, r2, #1
 8011cd2:	619a      	str	r2, [r3, #24]
  }
}
 8011cd4:	bf00      	nop
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	603b      	str	r3, [r7, #0]
 8011cec:	4613      	mov	r3, r2
 8011cee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011cf0:	e03b      	b.n	8011d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011cf2:	69ba      	ldr	r2, [r7, #24]
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	68f8      	ldr	r0, [r7, #12]
 8011cf8:	f000 f962 	bl	8011fc0 <I2C_IsErrorOccurred>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e041      	b.n	8011d8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d0c:	d02d      	beq.n	8011d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d0e:	f7fe f9f9 	bl	8010104 <HAL_GetTick>
 8011d12:	4602      	mov	r2, r0
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	1ad3      	subs	r3, r2, r3
 8011d18:	683a      	ldr	r2, [r7, #0]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d302      	bcc.n	8011d24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d122      	bne.n	8011d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	699a      	ldr	r2, [r3, #24]
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	4013      	ands	r3, r2
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	bf0c      	ite	eq
 8011d34:	2301      	moveq	r3, #1
 8011d36:	2300      	movne	r3, #0
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	79fb      	ldrb	r3, [r7, #7]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d113      	bne.n	8011d6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d46:	f043 0220 	orr.w	r2, r3, #32
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2220      	movs	r2, #32
 8011d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8011d66:	2301      	movs	r3, #1
 8011d68:	e00f      	b.n	8011d8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	699a      	ldr	r2, [r3, #24]
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	4013      	ands	r3, r2
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	bf0c      	ite	eq
 8011d7a:	2301      	moveq	r3, #1
 8011d7c:	2300      	movne	r3, #0
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	461a      	mov	r2, r3
 8011d82:	79fb      	ldrb	r3, [r7, #7]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d0b4      	beq.n	8011cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b084      	sub	sp, #16
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011d9e:	e033      	b.n	8011e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	68b9      	ldr	r1, [r7, #8]
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f000 f90b 	bl	8011fc0 <I2C_IsErrorOccurred>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d001      	beq.n	8011db4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011db0:	2301      	movs	r3, #1
 8011db2:	e031      	b.n	8011e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dba:	d025      	beq.n	8011e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011dbc:	f7fe f9a2 	bl	8010104 <HAL_GetTick>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	1ad3      	subs	r3, r2, r3
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d302      	bcc.n	8011dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d11a      	bne.n	8011e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	699b      	ldr	r3, [r3, #24]
 8011dd8:	f003 0302 	and.w	r3, r3, #2
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d013      	beq.n	8011e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011de4:	f043 0220 	orr.w	r2, r3, #32
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2220      	movs	r2, #32
 8011df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8011e04:	2301      	movs	r3, #1
 8011e06:	e007      	b.n	8011e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	699b      	ldr	r3, [r3, #24]
 8011e0e:	f003 0302 	and.w	r3, r3, #2
 8011e12:	2b02      	cmp	r3, #2
 8011e14:	d1c4      	bne.n	8011da0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e2c:	e02f      	b.n	8011e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	68b9      	ldr	r1, [r7, #8]
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f000 f8c4 	bl	8011fc0 <I2C_IsErrorOccurred>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d001      	beq.n	8011e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	e02d      	b.n	8011e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e42:	f7fe f95f 	bl	8010104 <HAL_GetTick>
 8011e46:	4602      	mov	r2, r0
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d302      	bcc.n	8011e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d11a      	bne.n	8011e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	699b      	ldr	r3, [r3, #24]
 8011e5e:	f003 0320 	and.w	r3, r3, #32
 8011e62:	2b20      	cmp	r3, #32
 8011e64:	d013      	beq.n	8011e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e6a:	f043 0220 	orr.w	r2, r3, #32
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2220      	movs	r2, #32
 8011e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2200      	movs	r2, #0
 8011e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e007      	b.n	8011e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	699b      	ldr	r3, [r3, #24]
 8011e94:	f003 0320 	and.w	r3, r3, #32
 8011e98:	2b20      	cmp	r3, #32
 8011e9a:	d1c8      	bne.n	8011e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011e9c:	2300      	movs	r3, #0
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
	...

08011ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b086      	sub	sp, #24
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8011eb8:	e071      	b.n	8011f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	68b9      	ldr	r1, [r7, #8]
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f000 f87e 	bl	8011fc0 <I2C_IsErrorOccurred>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8011eca:	2301      	movs	r3, #1
 8011ecc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	699b      	ldr	r3, [r3, #24]
 8011ed4:	f003 0320 	and.w	r3, r3, #32
 8011ed8:	2b20      	cmp	r3, #32
 8011eda:	d13b      	bne.n	8011f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8011edc:	7dfb      	ldrb	r3, [r7, #23]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d138      	bne.n	8011f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	699b      	ldr	r3, [r3, #24]
 8011ee8:	f003 0304 	and.w	r3, r3, #4
 8011eec:	2b04      	cmp	r3, #4
 8011eee:	d105      	bne.n	8011efc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	699b      	ldr	r3, [r3, #24]
 8011f02:	f003 0310 	and.w	r3, r3, #16
 8011f06:	2b10      	cmp	r3, #16
 8011f08:	d121      	bne.n	8011f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2210      	movs	r2, #16
 8011f10:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2204      	movs	r2, #4
 8011f16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2220      	movs	r2, #32
 8011f1e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	6859      	ldr	r1, [r3, #4]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	4b24      	ldr	r3, [pc, #144]	@ (8011fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8011f2c:	400b      	ands	r3, r1
 8011f2e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2220      	movs	r2, #32
 8011f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2200      	movs	r2, #0
 8011f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8011f48:	2301      	movs	r3, #1
 8011f4a:	75fb      	strb	r3, [r7, #23]
 8011f4c:	e002      	b.n	8011f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2200      	movs	r2, #0
 8011f52:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8011f54:	f7fe f8d6 	bl	8010104 <HAL_GetTick>
 8011f58:	4602      	mov	r2, r0
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	68ba      	ldr	r2, [r7, #8]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d302      	bcc.n	8011f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d119      	bne.n	8011f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8011f6a:	7dfb      	ldrb	r3, [r7, #23]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d116      	bne.n	8011f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	699b      	ldr	r3, [r3, #24]
 8011f76:	f003 0304 	and.w	r3, r3, #4
 8011f7a:	2b04      	cmp	r3, #4
 8011f7c:	d00f      	beq.n	8011f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f82:	f043 0220 	orr.w	r2, r3, #32
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2220      	movs	r2, #32
 8011f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	699b      	ldr	r3, [r3, #24]
 8011fa4:	f003 0304 	and.w	r3, r3, #4
 8011fa8:	2b04      	cmp	r3, #4
 8011faa:	d002      	beq.n	8011fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8011fac:	7dfb      	ldrb	r3, [r7, #23]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d083      	beq.n	8011eba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8011fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3718      	adds	r7, #24
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	fe00e800 	.word	0xfe00e800

08011fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b08a      	sub	sp, #40	@ 0x28
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	f003 0310 	and.w	r3, r3, #16
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d068      	beq.n	80120be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2210      	movs	r2, #16
 8011ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011ff4:	e049      	b.n	801208a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ffc:	d045      	beq.n	801208a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011ffe:	f7fe f881 	bl	8010104 <HAL_GetTick>
 8012002:	4602      	mov	r2, r0
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	68ba      	ldr	r2, [r7, #8]
 801200a:	429a      	cmp	r2, r3
 801200c:	d302      	bcc.n	8012014 <I2C_IsErrorOccurred+0x54>
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d13a      	bne.n	801208a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801201e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012036:	d121      	bne.n	801207c <I2C_IsErrorOccurred+0xbc>
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801203e:	d01d      	beq.n	801207c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8012040:	7cfb      	ldrb	r3, [r7, #19]
 8012042:	2b20      	cmp	r3, #32
 8012044:	d01a      	beq.n	801207c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	685a      	ldr	r2, [r3, #4]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012056:	f7fe f855 	bl	8010104 <HAL_GetTick>
 801205a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801205c:	e00e      	b.n	801207c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801205e:	f7fe f851 	bl	8010104 <HAL_GetTick>
 8012062:	4602      	mov	r2, r0
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	2b19      	cmp	r3, #25
 801206a:	d907      	bls.n	801207c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	f043 0320 	orr.w	r3, r3, #32
 8012072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012074:	2301      	movs	r3, #1
 8012076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801207a:	e006      	b.n	801208a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	699b      	ldr	r3, [r3, #24]
 8012082:	f003 0320 	and.w	r3, r3, #32
 8012086:	2b20      	cmp	r3, #32
 8012088:	d1e9      	bne.n	801205e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	699b      	ldr	r3, [r3, #24]
 8012090:	f003 0320 	and.w	r3, r3, #32
 8012094:	2b20      	cmp	r3, #32
 8012096:	d003      	beq.n	80120a0 <I2C_IsErrorOccurred+0xe0>
 8012098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801209c:	2b00      	cmp	r3, #0
 801209e:	d0aa      	beq.n	8011ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80120a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d103      	bne.n	80120b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2220      	movs	r2, #32
 80120ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	f043 0304 	orr.w	r3, r3, #4
 80120b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80120b8:	2301      	movs	r3, #1
 80120ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	699b      	ldr	r3, [r3, #24]
 80120c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00b      	beq.n	80120e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80120d0:	6a3b      	ldr	r3, [r7, #32]
 80120d2:	f043 0301 	orr.w	r3, r3, #1
 80120d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80120e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80120e2:	2301      	movs	r3, #1
 80120e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00b      	beq.n	801210a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	f043 0308 	orr.w	r3, r3, #8
 80120f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012104:	2301      	movs	r3, #1
 8012106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012110:	2b00      	cmp	r3, #0
 8012112:	d00b      	beq.n	801212c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012114:	6a3b      	ldr	r3, [r7, #32]
 8012116:	f043 0302 	orr.w	r3, r3, #2
 801211a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012126:	2301      	movs	r3, #1
 8012128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 801212c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012130:	2b00      	cmp	r3, #0
 8012132:	d01c      	beq.n	801216e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f7ff fdaf 	bl	8011c98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	6859      	ldr	r1, [r3, #4]
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	681a      	ldr	r2, [r3, #0]
 8012144:	4b0d      	ldr	r3, [pc, #52]	@ (801217c <I2C_IsErrorOccurred+0x1bc>)
 8012146:	400b      	ands	r3, r1
 8012148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801214e:	6a3b      	ldr	r3, [r7, #32]
 8012150:	431a      	orrs	r2, r3
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2220      	movs	r2, #32
 801215a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2200      	movs	r2, #0
 8012162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2200      	movs	r2, #0
 801216a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 801216e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012172:	4618      	mov	r0, r3
 8012174:	3728      	adds	r7, #40	@ 0x28
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	fe00e800 	.word	0xfe00e800

08012180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012180:	b480      	push	{r7}
 8012182:	b087      	sub	sp, #28
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	607b      	str	r3, [r7, #4]
 801218a:	460b      	mov	r3, r1
 801218c:	817b      	strh	r3, [r7, #10]
 801218e:	4613      	mov	r3, r2
 8012190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012192:	897b      	ldrh	r3, [r7, #10]
 8012194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012198:	7a7b      	ldrb	r3, [r7, #9]
 801219a:	041b      	lsls	r3, r3, #16
 801219c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80121a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	4313      	orrs	r3, r2
 80121aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80121ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	0d5b      	lsrs	r3, r3, #21
 80121ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80121be:	4b08      	ldr	r3, [pc, #32]	@ (80121e0 <I2C_TransferConfig+0x60>)
 80121c0:	430b      	orrs	r3, r1
 80121c2:	43db      	mvns	r3, r3
 80121c4:	ea02 0103 	and.w	r1, r2, r3
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	697a      	ldr	r2, [r7, #20]
 80121ce:	430a      	orrs	r2, r1
 80121d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80121d2:	bf00      	nop
 80121d4:	371c      	adds	r7, #28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	03ff63ff 	.word	0x03ff63ff

080121e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b20      	cmp	r3, #32
 80121f8:	d138      	bne.n	801226c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012200:	2b01      	cmp	r3, #1
 8012202:	d101      	bne.n	8012208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012204:	2302      	movs	r3, #2
 8012206:	e032      	b.n	801226e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2201      	movs	r2, #1
 801220c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2224      	movs	r2, #36	@ 0x24
 8012214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	f022 0201 	bic.w	r2, r2, #1
 8012226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	6819      	ldr	r1, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	683a      	ldr	r2, [r7, #0]
 8012244:	430a      	orrs	r2, r1
 8012246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f042 0201 	orr.w	r2, r2, #1
 8012256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2220      	movs	r2, #32
 801225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012268:	2300      	movs	r3, #0
 801226a:	e000      	b.n	801226e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801226c:	2302      	movs	r3, #2
  }
}
 801226e:	4618      	mov	r0, r3
 8012270:	370c      	adds	r7, #12
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr

0801227a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801227a:	b480      	push	{r7}
 801227c:	b085      	sub	sp, #20
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b20      	cmp	r3, #32
 801228e:	d139      	bne.n	8012304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012296:	2b01      	cmp	r3, #1
 8012298:	d101      	bne.n	801229e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801229a:	2302      	movs	r3, #2
 801229c:	e033      	b.n	8012306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2201      	movs	r2, #1
 80122a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2224      	movs	r2, #36	@ 0x24
 80122aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f022 0201 	bic.w	r2, r2, #1
 80122bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80122cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	021b      	lsls	r3, r3, #8
 80122d2:	68fa      	ldr	r2, [r7, #12]
 80122d4:	4313      	orrs	r3, r2
 80122d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f042 0201 	orr.w	r2, r2, #1
 80122ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2220      	movs	r2, #32
 80122f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2200      	movs	r2, #0
 80122fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012300:	2300      	movs	r3, #0
 8012302:	e000      	b.n	8012306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012304:	2302      	movs	r3, #2
  }
}
 8012306:	4618      	mov	r0, r3
 8012308:	3714      	adds	r7, #20
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr
	...

08012314 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 801231c:	2300      	movs	r3, #0
 801231e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d01e      	beq.n	8012364 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8012326:	4b13      	ldr	r3, [pc, #76]	@ (8012374 <HAL_IPCC_Init+0x60>)
 8012328:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012330:	b2db      	uxtb	r3, r3
 8012332:	2b00      	cmp	r3, #0
 8012334:	d102      	bne.n	801233c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7f0 ff4c 	bl	80031d4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 801233c:	68b8      	ldr	r0, [r7, #8]
 801233e:	f000 f85b 	bl	80123f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f000 f82c 	bl	80123ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2201      	movs	r2, #1
 801235e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8012362:	e001      	b.n	8012368 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8012364:	2301      	movs	r3, #1
 8012366:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8012368:	7bfb      	ldrb	r3, [r7, #15]
}
 801236a:	4618      	mov	r0, r3
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	58000c00 	.word	0x58000c00

08012378 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8012378:	b480      	push	{r7}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	4613      	mov	r3, r2
 8012384:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8012386:	bf00      	nop
 8012388:	3714      	adds	r7, #20
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8012392:	b480      	push	{r7}
 8012394:	b085      	sub	sp, #20
 8012396:	af00      	add	r7, sp, #0
 8012398:	60f8      	str	r0, [r7, #12]
 801239a:	60b9      	str	r1, [r7, #8]
 801239c:	4613      	mov	r3, r2
 801239e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80123a0:	bf00      	nop
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr

080123ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80123ac:	b480      	push	{r7}
 80123ae:	b085      	sub	sp, #20
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80123b4:	2300      	movs	r3, #0
 80123b6:	60fb      	str	r3, [r7, #12]
 80123b8:	e00f      	b.n	80123da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	009b      	lsls	r3, r3, #2
 80123c0:	4413      	add	r3, r2
 80123c2:	4a0b      	ldr	r2, [pc, #44]	@ (80123f0 <IPCC_SetDefaultCallbacks+0x44>)
 80123c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	3306      	adds	r3, #6
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	4413      	add	r3, r2
 80123d0:	4a08      	ldr	r2, [pc, #32]	@ (80123f4 <IPCC_SetDefaultCallbacks+0x48>)
 80123d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	3301      	adds	r3, #1
 80123d8:	60fb      	str	r3, [r7, #12]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	2b05      	cmp	r3, #5
 80123de:	d9ec      	bls.n	80123ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80123e0:	bf00      	nop
 80123e2:	bf00      	nop
 80123e4:	3714      	adds	r7, #20
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop
 80123f0:	08012379 	.word	0x08012379
 80123f4:	08012393 	.word	0x08012393

080123f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 801240c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	223f      	movs	r2, #63	@ 0x3f
 8012412:	609a      	str	r2, [r3, #8]
}
 8012414:	bf00      	nop
 8012416:	370c      	adds	r7, #12
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8012420:	b480      	push	{r7}
 8012422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012424:	4b05      	ldr	r3, [pc, #20]	@ (801243c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4a04      	ldr	r2, [pc, #16]	@ (801243c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801242a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801242e:	6013      	str	r3, [r2, #0]
}
 8012430:	bf00      	nop
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	58000400 	.word	0x58000400

08012440 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8012440:	b480      	push	{r7}
 8012442:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8012444:	4b04      	ldr	r3, [pc, #16]	@ (8012458 <HAL_PWREx_GetVoltageRange+0x18>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 801244c:	4618      	mov	r0, r3
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop
 8012458:	58000400 	.word	0x58000400

0801245c <LL_RCC_HSE_IsEnabledDiv2>:
{
 801245c:	b480      	push	{r7}
 801245e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8012460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801246a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801246e:	d101      	bne.n	8012474 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8012470:	2301      	movs	r3, #1
 8012472:	e000      	b.n	8012476 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <LL_RCC_HSE_Enable>:
{
 8012480:	b480      	push	{r7}
 8012482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8012484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801248e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012492:	6013      	str	r3, [r2, #0]
}
 8012494:	bf00      	nop
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr

0801249e <LL_RCC_HSE_Disable>:
{
 801249e:	b480      	push	{r7}
 80124a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80124a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80124ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80124b0:	6013      	str	r3, [r2, #0]
}
 80124b2:	bf00      	nop
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <LL_RCC_HSE_IsReady>:
{
 80124bc:	b480      	push	{r7}
 80124be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80124c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80124ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124ce:	d101      	bne.n	80124d4 <LL_RCC_HSE_IsReady+0x18>
 80124d0:	2301      	movs	r3, #1
 80124d2:	e000      	b.n	80124d6 <LL_RCC_HSE_IsReady+0x1a>
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <LL_RCC_HSI_Enable>:
{
 80124e0:	b480      	push	{r7}
 80124e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80124e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80124ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80124f2:	6013      	str	r3, [r2, #0]
}
 80124f4:	bf00      	nop
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <LL_RCC_HSI_Disable>:
{
 80124fe:	b480      	push	{r7}
 8012500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8012502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801250c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012510:	6013      	str	r3, [r2, #0]
}
 8012512:	bf00      	nop
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <LL_RCC_HSI_IsReady>:
{
 801251c:	b480      	push	{r7}
 801251e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8012520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801252a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801252e:	d101      	bne.n	8012534 <LL_RCC_HSI_IsReady+0x18>
 8012530:	2301      	movs	r3, #1
 8012532:	e000      	b.n	8012536 <LL_RCC_HSI_IsReady+0x1a>
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <LL_RCC_HSI_SetCalibTrimming>:
{
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8012548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	061b      	lsls	r3, r3, #24
 8012556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801255a:	4313      	orrs	r3, r2
 801255c:	604b      	str	r3, [r1, #4]
}
 801255e:	bf00      	nop
 8012560:	370c      	adds	r7, #12
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr

0801256a <LL_RCC_HSI48_Enable>:
{
 801256a:	b480      	push	{r7}
 801256c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 801256e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801257a:	f043 0301 	orr.w	r3, r3, #1
 801257e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8012582:	bf00      	nop
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <LL_RCC_HSI48_Disable>:
{
 801258c:	b480      	push	{r7}
 801258e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8012590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012598:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801259c:	f023 0301 	bic.w	r3, r3, #1
 80125a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80125a4:	bf00      	nop
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr

080125ae <LL_RCC_HSI48_IsReady>:
{
 80125ae:	b480      	push	{r7}
 80125b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80125b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80125b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80125ba:	f003 0302 	and.w	r3, r3, #2
 80125be:	2b02      	cmp	r3, #2
 80125c0:	d101      	bne.n	80125c6 <LL_RCC_HSI48_IsReady+0x18>
 80125c2:	2301      	movs	r3, #1
 80125c4:	e000      	b.n	80125c8 <LL_RCC_HSI48_IsReady+0x1a>
 80125c6:	2300      	movs	r3, #0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr

080125d2 <LL_RCC_LSE_Enable>:
{
 80125d2:	b480      	push	{r7}
 80125d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80125d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80125da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80125de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80125e2:	f043 0301 	orr.w	r3, r3, #1
 80125e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80125ea:	bf00      	nop
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <LL_RCC_LSE_Disable>:
{
 80125f4:	b480      	push	{r7}
 80125f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80125f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80125fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012604:	f023 0301 	bic.w	r3, r3, #1
 8012608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801260c:	bf00      	nop
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr

08012616 <LL_RCC_LSE_EnableBypass>:
{
 8012616:	b480      	push	{r7}
 8012618:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012626:	f043 0304 	orr.w	r3, r3, #4
 801262a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 801262e:	bf00      	nop
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <LL_RCC_LSE_DisableBypass>:
{
 8012638:	b480      	push	{r7}
 801263a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801263c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012648:	f023 0304 	bic.w	r3, r3, #4
 801264c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8012650:	bf00      	nop
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr

0801265a <LL_RCC_LSE_IsReady>:
{
 801265a:	b480      	push	{r7}
 801265c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801265e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012666:	f003 0302 	and.w	r3, r3, #2
 801266a:	2b02      	cmp	r3, #2
 801266c:	d101      	bne.n	8012672 <LL_RCC_LSE_IsReady+0x18>
 801266e:	2301      	movs	r3, #1
 8012670:	e000      	b.n	8012674 <LL_RCC_LSE_IsReady+0x1a>
 8012672:	2300      	movs	r3, #0
}
 8012674:	4618      	mov	r0, r3
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr

0801267e <LL_RCC_LSI1_Enable>:
{
 801267e:	b480      	push	{r7}
 8012680:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8012682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801268a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801268e:	f043 0301 	orr.w	r3, r3, #1
 8012692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8012696:	bf00      	nop
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <LL_RCC_LSI1_Disable>:
{
 80126a0:	b480      	push	{r7}
 80126a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80126a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80126a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80126ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80126b0:	f023 0301 	bic.w	r3, r3, #1
 80126b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80126b8:	bf00      	nop
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <LL_RCC_LSI1_IsReady>:
{
 80126c2:	b480      	push	{r7}
 80126c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80126c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80126ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80126ce:	f003 0302 	and.w	r3, r3, #2
 80126d2:	2b02      	cmp	r3, #2
 80126d4:	d101      	bne.n	80126da <LL_RCC_LSI1_IsReady+0x18>
 80126d6:	2301      	movs	r3, #1
 80126d8:	e000      	b.n	80126dc <LL_RCC_LSI1_IsReady+0x1a>
 80126da:	2300      	movs	r3, #0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr

080126e6 <LL_RCC_LSI2_Enable>:
{
 80126e6:	b480      	push	{r7}
 80126e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80126ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80126ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80126f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80126f6:	f043 0304 	orr.w	r3, r3, #4
 80126fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80126fe:	bf00      	nop
 8012700:	46bd      	mov	sp, r7
 8012702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012706:	4770      	bx	lr

08012708 <LL_RCC_LSI2_Disable>:
{
 8012708:	b480      	push	{r7}
 801270a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 801270c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8012718:	f023 0304 	bic.w	r3, r3, #4
 801271c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8012720:	bf00      	nop
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr

0801272a <LL_RCC_LSI2_IsReady>:
{
 801272a:	b480      	push	{r7}
 801272c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 801272e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012736:	f003 0308 	and.w	r3, r3, #8
 801273a:	2b08      	cmp	r3, #8
 801273c:	d101      	bne.n	8012742 <LL_RCC_LSI2_IsReady+0x18>
 801273e:	2301      	movs	r3, #1
 8012740:	e000      	b.n	8012744 <LL_RCC_LSI2_IsReady+0x1a>
 8012742:	2300      	movs	r3, #0
}
 8012744:	4618      	mov	r0, r3
 8012746:	46bd      	mov	sp, r7
 8012748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274c:	4770      	bx	lr

0801274e <LL_RCC_LSI2_SetTrimming>:
{
 801274e:	b480      	push	{r7}
 8012750:	b083      	sub	sp, #12
 8012752:	af00      	add	r7, sp, #0
 8012754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8012756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801275e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	021b      	lsls	r3, r3, #8
 8012766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801276a:	4313      	orrs	r3, r2
 801276c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8012770:	bf00      	nop
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <LL_RCC_MSI_Enable>:
{
 801277c:	b480      	push	{r7}
 801277e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8012780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801278a:	f043 0301 	orr.w	r3, r3, #1
 801278e:	6013      	str	r3, [r2, #0]
}
 8012790:	bf00      	nop
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr

0801279a <LL_RCC_MSI_Disable>:
{
 801279a:	b480      	push	{r7}
 801279c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 801279e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80127a8:	f023 0301 	bic.w	r3, r3, #1
 80127ac:	6013      	str	r3, [r2, #0]
}
 80127ae:	bf00      	nop
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <LL_RCC_MSI_IsReady>:
{
 80127b8:	b480      	push	{r7}
 80127ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80127bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f003 0302 	and.w	r3, r3, #2
 80127c6:	2b02      	cmp	r3, #2
 80127c8:	d101      	bne.n	80127ce <LL_RCC_MSI_IsReady+0x16>
 80127ca:	2301      	movs	r3, #1
 80127cc:	e000      	b.n	80127d0 <LL_RCC_MSI_IsReady+0x18>
 80127ce:	2300      	movs	r3, #0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <LL_RCC_MSI_SetRange>:
{
 80127da:	b480      	push	{r7}
 80127dc:	b083      	sub	sp, #12
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80127e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80127ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	4313      	orrs	r3, r2
 80127f4:	600b      	str	r3, [r1, #0]
}
 80127f6:	bf00      	nop
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr

08012802 <LL_RCC_MSI_GetRange>:
{
 8012802:	b480      	push	{r7}
 8012804:	b083      	sub	sp, #12
 8012806:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8012808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012812:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2bb0      	cmp	r3, #176	@ 0xb0
 8012818:	d901      	bls.n	801281e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 801281a:	23b0      	movs	r3, #176	@ 0xb0
 801281c:	607b      	str	r3, [r7, #4]
  return msiRange;
 801281e:	687b      	ldr	r3, [r7, #4]
}
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <LL_RCC_MSI_SetCalibTrimming>:
{
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8012834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	021b      	lsls	r3, r3, #8
 8012842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012846:	4313      	orrs	r3, r2
 8012848:	604b      	str	r3, [r1, #4]
}
 801284a:	bf00      	nop
 801284c:	370c      	adds	r7, #12
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr

08012856 <LL_RCC_SetSysClkSource>:
{
 8012856:	b480      	push	{r7}
 8012858:	b083      	sub	sp, #12
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801285e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	f023 0203 	bic.w	r2, r3, #3
 8012868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4313      	orrs	r3, r2
 8012870:	608b      	str	r3, [r1, #8]
}
 8012872:	bf00      	nop
 8012874:	370c      	adds	r7, #12
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr

0801287e <LL_RCC_GetSysClkSource>:
{
 801287e:	b480      	push	{r7}
 8012880:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8012882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012886:	689b      	ldr	r3, [r3, #8]
 8012888:	f003 030c 	and.w	r3, r3, #12
}
 801288c:	4618      	mov	r0, r3
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <LL_RCC_SetAHBPrescaler>:
{
 8012896:	b480      	push	{r7}
 8012898:	b083      	sub	sp, #12
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80128a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4313      	orrs	r3, r2
 80128b0:	608b      	str	r3, [r1, #8]
}
 80128b2:	bf00      	nop
 80128b4:	370c      	adds	r7, #12
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <LL_C2_RCC_SetAHBPrescaler>:
{
 80128be:	b480      	push	{r7}
 80128c0:	b083      	sub	sp, #12
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80128c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80128ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80128ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80128d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	4313      	orrs	r3, r2
 80128da:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80128de:	bf00      	nop
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <LL_RCC_SetAHB4Prescaler>:
{
 80128ea:	b480      	push	{r7}
 80128ec:	b083      	sub	sp, #12
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80128f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80128f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80128fa:	f023 020f 	bic.w	r2, r3, #15
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	091b      	lsrs	r3, r3, #4
 8012902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012906:	4313      	orrs	r3, r2
 8012908:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 801290c:	bf00      	nop
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <LL_RCC_SetAPB1Prescaler>:
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8012920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012924:	689b      	ldr	r3, [r3, #8]
 8012926:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801292a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4313      	orrs	r3, r2
 8012932:	608b      	str	r3, [r1, #8]
}
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <LL_RCC_SetAPB2Prescaler>:
{
 8012940:	b480      	push	{r7}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8012948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801294c:	689b      	ldr	r3, [r3, #8]
 801294e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8012952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4313      	orrs	r3, r2
 801295a:	608b      	str	r3, [r1, #8]
}
 801295c:	bf00      	nop
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <LL_RCC_GetAHBPrescaler>:
{
 8012968:	b480      	push	{r7}
 801296a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 801296c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8012976:	4618      	mov	r0, r3
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <LL_RCC_GetAHB4Prescaler>:
{
 8012980:	b480      	push	{r7}
 8012982:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8012984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012988:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801298c:	011b      	lsls	r3, r3, #4
 801298e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8012992:	4618      	mov	r0, r3
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <LL_RCC_GetAPB1Prescaler>:
{
 801299c:	b480      	push	{r7}
 801299e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80129a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <LL_RCC_GetAPB2Prescaler>:
{
 80129b4:	b480      	push	{r7}
 80129b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80129b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80129cc:	b480      	push	{r7}
 80129ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80129d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80129da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80129de:	6013      	str	r3, [r2, #0]
}
 80129e0:	bf00      	nop
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80129ea:	b480      	push	{r7}
 80129ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80129ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80129f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80129fc:	6013      	str	r3, [r2, #0]
}
 80129fe:	bf00      	nop
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8012a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012a1a:	d101      	bne.n	8012a20 <LL_RCC_PLL_IsReady+0x18>
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	e000      	b.n	8012a22 <LL_RCC_PLL_IsReady+0x1a>
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	46bd      	mov	sp, r7
 8012a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2a:	4770      	bx	lr

08012a2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8012a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a34:	68db      	ldr	r3, [r3, #12]
 8012a36:	0a1b      	lsrs	r3, r3, #8
 8012a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr

08012a46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8012a46:	b480      	push	{r7}
 8012a48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8012a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr

08012a5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8012a5e:	b480      	push	{r7}
 8012a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8012a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr

08012a76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8012a76:	b480      	push	{r7}
 8012a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8012a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	f003 0303 	and.w	r3, r3, #3
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr

08012a8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8012a8e:	b480      	push	{r7}
 8012a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8012a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012aa0:	d101      	bne.n	8012aa6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e000      	b.n	8012aa8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr

08012ab2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8012ab2:	b480      	push	{r7}
 8012ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8012ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8012abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012ac6:	d101      	bne.n	8012acc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e000      	b.n	8012ace <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8012adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012ae0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8012ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012aec:	d101      	bne.n	8012af2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8012aee:	2301      	movs	r3, #1
 8012af0:	e000      	b.n	8012af4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8012af2:	2300      	movs	r3, #0
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8012afe:	b480      	push	{r7}
 8012b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8012b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012b10:	d101      	bne.n	8012b16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8012b12:	2301      	movs	r3, #1
 8012b14:	e000      	b.n	8012b18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8012b16:	2300      	movs	r3, #0
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr

08012b22 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8012b22:	b480      	push	{r7}
 8012b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8012b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012b34:	d101      	bne.n	8012b3a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8012b36:	2301      	movs	r3, #1
 8012b38:	e000      	b.n	8012b3c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr
	...

08012b48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b08d      	sub	sp, #52	@ 0x34
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	e363      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	f003 0320 	and.w	r3, r3, #32
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 808d 	beq.w	8012c82 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012b68:	f7ff fe89 	bl	801287e <LL_RCC_GetSysClkSource>
 8012b6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012b6e:	f7ff ff82 	bl	8012a76 <LL_RCC_PLL_GetMainSource>
 8012b72:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8012b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d005      	beq.n	8012b86 <HAL_RCC_OscConfig+0x3e>
 8012b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7c:	2b0c      	cmp	r3, #12
 8012b7e:	d147      	bne.n	8012c10 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8012b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d144      	bne.n	8012c10 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	69db      	ldr	r3, [r3, #28]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d101      	bne.n	8012b92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8012b8e:	2301      	movs	r3, #1
 8012b90:	e347      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012b96:	f7ff fe34 	bl	8012802 <LL_RCC_MSI_GetRange>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	429c      	cmp	r4, r3
 8012b9e:	d914      	bls.n	8012bca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f000 fd2f 	bl	8013608 <RCC_SetFlashLatencyFromMSIRange>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d001      	beq.n	8012bb4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e336      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7ff fe0e 	bl	80127da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6a1b      	ldr	r3, [r3, #32]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7ff fe32 	bl	801282c <LL_RCC_MSI_SetCalibTrimming>
 8012bc8:	e013      	b.n	8012bf2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff fe03 	bl	80127da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6a1b      	ldr	r3, [r3, #32]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7ff fe27 	bl	801282c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012be2:	4618      	mov	r0, r3
 8012be4:	f000 fd10 	bl	8013608 <RCC_SetFlashLatencyFromMSIRange>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d001      	beq.n	8012bf2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	e317      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8012bf2:	f000 fcc9 	bl	8013588 <HAL_RCC_GetHCLKFreq>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	4aa4      	ldr	r2, [pc, #656]	@ (8012e8c <HAL_RCC_OscConfig+0x344>)
 8012bfa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8012bfc:	4ba4      	ldr	r3, [pc, #656]	@ (8012e90 <HAL_RCC_OscConfig+0x348>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fd fa31 	bl	8010068 <HAL_InitTick>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d039      	beq.n	8012c80 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	e308      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	69db      	ldr	r3, [r3, #28]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d01e      	beq.n	8012c56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8012c18:	f7ff fdb0 	bl	801277c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012c1c:	f7fd fa72 	bl	8010104 <HAL_GetTick>
 8012c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8012c22:	e008      	b.n	8012c36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8012c24:	f7fd fa6e 	bl	8010104 <HAL_GetTick>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	2b02      	cmp	r3, #2
 8012c30:	d901      	bls.n	8012c36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8012c32:	2303      	movs	r3, #3
 8012c34:	e2f5      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8012c36:	f7ff fdbf 	bl	80127b8 <LL_RCC_MSI_IsReady>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d0f1      	beq.n	8012c24 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff fdc8 	bl	80127da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6a1b      	ldr	r3, [r3, #32]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ff fdec 	bl	801282c <LL_RCC_MSI_SetCalibTrimming>
 8012c54:	e015      	b.n	8012c82 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8012c56:	f7ff fda0 	bl	801279a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012c5a:	f7fd fa53 	bl	8010104 <HAL_GetTick>
 8012c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8012c60:	e008      	b.n	8012c74 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8012c62:	f7fd fa4f 	bl	8010104 <HAL_GetTick>
 8012c66:	4602      	mov	r2, r0
 8012c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	2b02      	cmp	r3, #2
 8012c6e:	d901      	bls.n	8012c74 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8012c70:	2303      	movs	r3, #3
 8012c72:	e2d6      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8012c74:	f7ff fda0 	bl	80127b8 <LL_RCC_MSI_IsReady>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d1f1      	bne.n	8012c62 <HAL_RCC_OscConfig+0x11a>
 8012c7e:	e000      	b.n	8012c82 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8012c80:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f003 0301 	and.w	r3, r3, #1
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d047      	beq.n	8012d1e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012c8e:	f7ff fdf6 	bl	801287e <LL_RCC_GetSysClkSource>
 8012c92:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012c94:	f7ff feef 	bl	8012a76 <LL_RCC_PLL_GetMainSource>
 8012c98:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012c9a:	6a3b      	ldr	r3, [r7, #32]
 8012c9c:	2b08      	cmp	r3, #8
 8012c9e:	d005      	beq.n	8012cac <HAL_RCC_OscConfig+0x164>
 8012ca0:	6a3b      	ldr	r3, [r7, #32]
 8012ca2:	2b0c      	cmp	r3, #12
 8012ca4:	d108      	bne.n	8012cb8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	2b03      	cmp	r3, #3
 8012caa:	d105      	bne.n	8012cb8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d134      	bne.n	8012d1e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	e2b4      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012cc0:	d102      	bne.n	8012cc8 <HAL_RCC_OscConfig+0x180>
 8012cc2:	f7ff fbdd 	bl	8012480 <LL_RCC_HSE_Enable>
 8012cc6:	e001      	b.n	8012ccc <HAL_RCC_OscConfig+0x184>
 8012cc8:	f7ff fbe9 	bl	801249e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d012      	beq.n	8012cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cd4:	f7fd fa16 	bl	8010104 <HAL_GetTick>
 8012cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8012cda:	e008      	b.n	8012cee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012cdc:	f7fd fa12 	bl	8010104 <HAL_GetTick>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	2b64      	cmp	r3, #100	@ 0x64
 8012ce8:	d901      	bls.n	8012cee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8012cea:	2303      	movs	r3, #3
 8012cec:	e299      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8012cee:	f7ff fbe5 	bl	80124bc <LL_RCC_HSE_IsReady>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d0f1      	beq.n	8012cdc <HAL_RCC_OscConfig+0x194>
 8012cf8:	e011      	b.n	8012d1e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cfa:	f7fd fa03 	bl	8010104 <HAL_GetTick>
 8012cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8012d00:	e008      	b.n	8012d14 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012d02:	f7fd f9ff 	bl	8010104 <HAL_GetTick>
 8012d06:	4602      	mov	r2, r0
 8012d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d0a:	1ad3      	subs	r3, r2, r3
 8012d0c:	2b64      	cmp	r3, #100	@ 0x64
 8012d0e:	d901      	bls.n	8012d14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8012d10:	2303      	movs	r3, #3
 8012d12:	e286      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8012d14:	f7ff fbd2 	bl	80124bc <LL_RCC_HSE_IsReady>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1f1      	bne.n	8012d02 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f003 0302 	and.w	r3, r3, #2
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d04c      	beq.n	8012dc4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012d2a:	f7ff fda8 	bl	801287e <LL_RCC_GetSysClkSource>
 8012d2e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012d30:	f7ff fea1 	bl	8012a76 <LL_RCC_PLL_GetMainSource>
 8012d34:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	2b04      	cmp	r3, #4
 8012d3a:	d005      	beq.n	8012d48 <HAL_RCC_OscConfig+0x200>
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	2b0c      	cmp	r3, #12
 8012d40:	d10e      	bne.n	8012d60 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	2b02      	cmp	r3, #2
 8012d46:	d10b      	bne.n	8012d60 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d101      	bne.n	8012d54 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e266      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	691b      	ldr	r3, [r3, #16]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7ff fbf1 	bl	8012540 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8012d5e:	e031      	b.n	8012dc4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d019      	beq.n	8012d9c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012d68:	f7ff fbba 	bl	80124e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012d6c:	f7fd f9ca 	bl	8010104 <HAL_GetTick>
 8012d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8012d72:	e008      	b.n	8012d86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012d74:	f7fd f9c6 	bl	8010104 <HAL_GetTick>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d7c:	1ad3      	subs	r3, r2, r3
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	d901      	bls.n	8012d86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8012d82:	2303      	movs	r3, #3
 8012d84:	e24d      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8012d86:	f7ff fbc9 	bl	801251c <LL_RCC_HSI_IsReady>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d0f1      	beq.n	8012d74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff fbd3 	bl	8012540 <LL_RCC_HSI_SetCalibTrimming>
 8012d9a:	e013      	b.n	8012dc4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012d9c:	f7ff fbaf 	bl	80124fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012da0:	f7fd f9b0 	bl	8010104 <HAL_GetTick>
 8012da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8012da6:	e008      	b.n	8012dba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012da8:	f7fd f9ac 	bl	8010104 <HAL_GetTick>
 8012dac:	4602      	mov	r2, r0
 8012dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	2b02      	cmp	r3, #2
 8012db4:	d901      	bls.n	8012dba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8012db6:	2303      	movs	r3, #3
 8012db8:	e233      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8012dba:	f7ff fbaf 	bl	801251c <LL_RCC_HSI_IsReady>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d1f1      	bne.n	8012da8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f003 0308 	and.w	r3, r3, #8
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d106      	bne.n	8012dde <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 80a3 	beq.w	8012f24 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	695b      	ldr	r3, [r3, #20]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d076      	beq.n	8012ed4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f003 0310 	and.w	r3, r3, #16
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d046      	beq.n	8012e80 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8012df2:	f7ff fc66 	bl	80126c2 <LL_RCC_LSI1_IsReady>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d113      	bne.n	8012e24 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8012dfc:	f7ff fc3f 	bl	801267e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8012e00:	f7fd f980 	bl	8010104 <HAL_GetTick>
 8012e04:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8012e06:	e008      	b.n	8012e1a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012e08:	f7fd f97c 	bl	8010104 <HAL_GetTick>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e10:	1ad3      	subs	r3, r2, r3
 8012e12:	2b02      	cmp	r3, #2
 8012e14:	d901      	bls.n	8012e1a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8012e16:	2303      	movs	r3, #3
 8012e18:	e203      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8012e1a:	f7ff fc52 	bl	80126c2 <LL_RCC_LSI1_IsReady>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d0f1      	beq.n	8012e08 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8012e24:	f7ff fc5f 	bl	80126e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e28:	f7fd f96c 	bl	8010104 <HAL_GetTick>
 8012e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8012e2e:	e008      	b.n	8012e42 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8012e30:	f7fd f968 	bl	8010104 <HAL_GetTick>
 8012e34:	4602      	mov	r2, r0
 8012e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e38:	1ad3      	subs	r3, r2, r3
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	d901      	bls.n	8012e42 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8012e3e:	2303      	movs	r3, #3
 8012e40:	e1ef      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8012e42:	f7ff fc72 	bl	801272a <LL_RCC_LSI2_IsReady>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d0f1      	beq.n	8012e30 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	699b      	ldr	r3, [r3, #24]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7ff fc7c 	bl	801274e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8012e56:	f7ff fc23 	bl	80126a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e5a:	f7fd f953 	bl	8010104 <HAL_GetTick>
 8012e5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8012e60:	e008      	b.n	8012e74 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012e62:	f7fd f94f 	bl	8010104 <HAL_GetTick>
 8012e66:	4602      	mov	r2, r0
 8012e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e6a:	1ad3      	subs	r3, r2, r3
 8012e6c:	2b02      	cmp	r3, #2
 8012e6e:	d901      	bls.n	8012e74 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8012e70:	2303      	movs	r3, #3
 8012e72:	e1d6      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8012e74:	f7ff fc25 	bl	80126c2 <LL_RCC_LSI1_IsReady>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d1f1      	bne.n	8012e62 <HAL_RCC_OscConfig+0x31a>
 8012e7e:	e051      	b.n	8012f24 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8012e80:	f7ff fbfd 	bl	801267e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e84:	f7fd f93e 	bl	8010104 <HAL_GetTick>
 8012e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8012e8a:	e00c      	b.n	8012ea6 <HAL_RCC_OscConfig+0x35e>
 8012e8c:	20000580 	.word	0x20000580
 8012e90:	20000584 	.word	0x20000584
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012e94:	f7fd f936 	bl	8010104 <HAL_GetTick>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9c:	1ad3      	subs	r3, r2, r3
 8012e9e:	2b02      	cmp	r3, #2
 8012ea0:	d901      	bls.n	8012ea6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	e1bd      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8012ea6:	f7ff fc0c 	bl	80126c2 <LL_RCC_LSI1_IsReady>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d0f1      	beq.n	8012e94 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8012eb0:	f7ff fc2a 	bl	8012708 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8012eb4:	e008      	b.n	8012ec8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8012eb6:	f7fd f925 	bl	8010104 <HAL_GetTick>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ebe:	1ad3      	subs	r3, r2, r3
 8012ec0:	2b03      	cmp	r3, #3
 8012ec2:	d901      	bls.n	8012ec8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8012ec4:	2303      	movs	r3, #3
 8012ec6:	e1ac      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8012ec8:	f7ff fc2f 	bl	801272a <LL_RCC_LSI2_IsReady>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d1f1      	bne.n	8012eb6 <HAL_RCC_OscConfig+0x36e>
 8012ed2:	e027      	b.n	8012f24 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8012ed4:	f7ff fc18 	bl	8012708 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012ed8:	f7fd f914 	bl	8010104 <HAL_GetTick>
 8012edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8012ede:	e008      	b.n	8012ef2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8012ee0:	f7fd f910 	bl	8010104 <HAL_GetTick>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	2b03      	cmp	r3, #3
 8012eec:	d901      	bls.n	8012ef2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8012eee:	2303      	movs	r3, #3
 8012ef0:	e197      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8012ef2:	f7ff fc1a 	bl	801272a <LL_RCC_LSI2_IsReady>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1f1      	bne.n	8012ee0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8012efc:	f7ff fbd0 	bl	80126a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f00:	f7fd f900 	bl	8010104 <HAL_GetTick>
 8012f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8012f06:	e008      	b.n	8012f1a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8012f08:	f7fd f8fc 	bl	8010104 <HAL_GetTick>
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	2b02      	cmp	r3, #2
 8012f14:	d901      	bls.n	8012f1a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8012f16:	2303      	movs	r3, #3
 8012f18:	e183      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8012f1a:	f7ff fbd2 	bl	80126c2 <LL_RCC_LSI1_IsReady>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1f1      	bne.n	8012f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f003 0304 	and.w	r3, r3, #4
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d05b      	beq.n	8012fe8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012f30:	4ba7      	ldr	r3, [pc, #668]	@ (80131d0 <HAL_RCC_OscConfig+0x688>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d114      	bne.n	8012f66 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8012f3c:	f7ff fa70 	bl	8012420 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012f40:	f7fd f8e0 	bl	8010104 <HAL_GetTick>
 8012f44:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012f46:	e008      	b.n	8012f5a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012f48:	f7fd f8dc 	bl	8010104 <HAL_GetTick>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f50:	1ad3      	subs	r3, r2, r3
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d901      	bls.n	8012f5a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8012f56:	2303      	movs	r3, #3
 8012f58:	e163      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012f5a:	4b9d      	ldr	r3, [pc, #628]	@ (80131d0 <HAL_RCC_OscConfig+0x688>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d0f0      	beq.n	8012f48 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d102      	bne.n	8012f74 <HAL_RCC_OscConfig+0x42c>
 8012f6e:	f7ff fb30 	bl	80125d2 <LL_RCC_LSE_Enable>
 8012f72:	e00c      	b.n	8012f8e <HAL_RCC_OscConfig+0x446>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	689b      	ldr	r3, [r3, #8]
 8012f78:	2b05      	cmp	r3, #5
 8012f7a:	d104      	bne.n	8012f86 <HAL_RCC_OscConfig+0x43e>
 8012f7c:	f7ff fb4b 	bl	8012616 <LL_RCC_LSE_EnableBypass>
 8012f80:	f7ff fb27 	bl	80125d2 <LL_RCC_LSE_Enable>
 8012f84:	e003      	b.n	8012f8e <HAL_RCC_OscConfig+0x446>
 8012f86:	f7ff fb35 	bl	80125f4 <LL_RCC_LSE_Disable>
 8012f8a:	f7ff fb55 	bl	8012638 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	689b      	ldr	r3, [r3, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d014      	beq.n	8012fc0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012f96:	f7fd f8b5 	bl	8010104 <HAL_GetTick>
 8012f9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8012f9c:	e00a      	b.n	8012fb4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012f9e:	f7fd f8b1 	bl	8010104 <HAL_GetTick>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d901      	bls.n	8012fb4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8012fb0:	2303      	movs	r3, #3
 8012fb2:	e136      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8012fb4:	f7ff fb51 	bl	801265a <LL_RCC_LSE_IsReady>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d0ef      	beq.n	8012f9e <HAL_RCC_OscConfig+0x456>
 8012fbe:	e013      	b.n	8012fe8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012fc0:	f7fd f8a0 	bl	8010104 <HAL_GetTick>
 8012fc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8012fc6:	e00a      	b.n	8012fde <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012fc8:	f7fd f89c 	bl	8010104 <HAL_GetTick>
 8012fcc:	4602      	mov	r2, r0
 8012fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d901      	bls.n	8012fde <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8012fda:	2303      	movs	r3, #3
 8012fdc:	e121      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8012fde:	f7ff fb3c 	bl	801265a <LL_RCC_LSE_IsReady>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d1ef      	bne.n	8012fc8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d02c      	beq.n	801304e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d014      	beq.n	8013026 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8012ffc:	f7ff fab5 	bl	801256a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013000:	f7fd f880 	bl	8010104 <HAL_GetTick>
 8013004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8013006:	e008      	b.n	801301a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013008:	f7fd f87c 	bl	8010104 <HAL_GetTick>
 801300c:	4602      	mov	r2, r0
 801300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	2b02      	cmp	r3, #2
 8013014:	d901      	bls.n	801301a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8013016:	2303      	movs	r3, #3
 8013018:	e103      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801301a:	f7ff fac8 	bl	80125ae <LL_RCC_HSI48_IsReady>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d0f1      	beq.n	8013008 <HAL_RCC_OscConfig+0x4c0>
 8013024:	e013      	b.n	801304e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013026:	f7ff fab1 	bl	801258c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801302a:	f7fd f86b 	bl	8010104 <HAL_GetTick>
 801302e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8013030:	e008      	b.n	8013044 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013032:	f7fd f867 	bl	8010104 <HAL_GetTick>
 8013036:	4602      	mov	r2, r0
 8013038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	2b02      	cmp	r3, #2
 801303e:	d901      	bls.n	8013044 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8013040:	2303      	movs	r3, #3
 8013042:	e0ee      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8013044:	f7ff fab3 	bl	80125ae <LL_RCC_HSI48_IsReady>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1f1      	bne.n	8013032 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 80e4 	beq.w	8013220 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013058:	f7ff fc11 	bl	801287e <LL_RCC_GetSysClkSource>
 801305c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801305e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801306a:	2b02      	cmp	r3, #2
 801306c:	f040 80b4 	bne.w	80131d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f003 0203 	and.w	r2, r3, #3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801307a:	429a      	cmp	r2, r3
 801307c:	d123      	bne.n	80130c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013088:	429a      	cmp	r2, r3
 801308a:	d11c      	bne.n	80130c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	0a1b      	lsrs	r3, r3, #8
 8013090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013098:	429a      	cmp	r2, r3
 801309a:	d114      	bne.n	80130c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d10d      	bne.n	80130c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d106      	bne.n	80130c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d05d      	beq.n	8013182 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	2b0c      	cmp	r3, #12
 80130ca:	d058      	beq.n	801317e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80130cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d001      	beq.n	80130de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80130da:	2301      	movs	r3, #1
 80130dc:	e0a1      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80130de:	f7ff fc84 	bl	80129ea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80130e2:	f7fd f80f 	bl	8010104 <HAL_GetTick>
 80130e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80130e8:	e008      	b.n	80130fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80130ea:	f7fd f80b 	bl	8010104 <HAL_GetTick>
 80130ee:	4602      	mov	r2, r0
 80130f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f2:	1ad3      	subs	r3, r2, r3
 80130f4:	2b02      	cmp	r3, #2
 80130f6:	d901      	bls.n	80130fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80130f8:	2303      	movs	r3, #3
 80130fa:	e092      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80130fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1ef      	bne.n	80130ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801310a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801310e:	68da      	ldr	r2, [r3, #12]
 8013110:	4b30      	ldr	r3, [pc, #192]	@ (80131d4 <HAL_RCC_OscConfig+0x68c>)
 8013112:	4013      	ands	r3, r2
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801311c:	4311      	orrs	r1, r2
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8013122:	0212      	lsls	r2, r2, #8
 8013124:	4311      	orrs	r1, r2
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801312a:	4311      	orrs	r1, r2
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8013130:	4311      	orrs	r1, r2
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8013136:	430a      	orrs	r2, r1
 8013138:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801313c:	4313      	orrs	r3, r2
 801313e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8013140:	f7ff fc44 	bl	80129cc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801314e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8013154:	f7fc ffd6 	bl	8010104 <HAL_GetTick>
 8013158:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801315a:	e008      	b.n	801316e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801315c:	f7fc ffd2 	bl	8010104 <HAL_GetTick>
 8013160:	4602      	mov	r2, r0
 8013162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013164:	1ad3      	subs	r3, r2, r3
 8013166:	2b02      	cmp	r3, #2
 8013168:	d901      	bls.n	801316e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 801316a:	2303      	movs	r3, #3
 801316c:	e059      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801316e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013178:	2b00      	cmp	r3, #0
 801317a:	d0ef      	beq.n	801315c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801317c:	e050      	b.n	8013220 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801317e:	2301      	movs	r3, #1
 8013180:	e04f      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8013182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801318c:	2b00      	cmp	r3, #0
 801318e:	d147      	bne.n	8013220 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8013190:	f7ff fc1c 	bl	80129cc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8013194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801319e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80131a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80131a4:	f7fc ffae 	bl	8010104 <HAL_GetTick>
 80131a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80131aa:	e008      	b.n	80131be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80131ac:	f7fc ffaa 	bl	8010104 <HAL_GetTick>
 80131b0:	4602      	mov	r2, r0
 80131b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	2b02      	cmp	r3, #2
 80131b8:	d901      	bls.n	80131be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80131ba:	2303      	movs	r3, #3
 80131bc:	e031      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80131be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d0ef      	beq.n	80131ac <HAL_RCC_OscConfig+0x664>
 80131cc:	e028      	b.n	8013220 <HAL_RCC_OscConfig+0x6d8>
 80131ce:	bf00      	nop
 80131d0:	58000400 	.word	0x58000400
 80131d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	2b0c      	cmp	r3, #12
 80131dc:	d01e      	beq.n	801321c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80131de:	f7ff fc04 	bl	80129ea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80131e2:	f7fc ff8f 	bl	8010104 <HAL_GetTick>
 80131e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80131e8:	e008      	b.n	80131fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80131ea:	f7fc ff8b 	bl	8010104 <HAL_GetTick>
 80131ee:	4602      	mov	r2, r0
 80131f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f2:	1ad3      	subs	r3, r2, r3
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d901      	bls.n	80131fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80131f8:	2303      	movs	r3, #3
 80131fa:	e012      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80131fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013206:	2b00      	cmp	r3, #0
 8013208:	d1ef      	bne.n	80131ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801320a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801320e:	68da      	ldr	r2, [r3, #12]
 8013210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013214:	4b05      	ldr	r3, [pc, #20]	@ (801322c <HAL_RCC_OscConfig+0x6e4>)
 8013216:	4013      	ands	r3, r2
 8013218:	60cb      	str	r3, [r1, #12]
 801321a:	e001      	b.n	8013220 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801321c:	2301      	movs	r3, #1
 801321e:	e000      	b.n	8013222 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	3734      	adds	r7, #52	@ 0x34
 8013226:	46bd      	mov	sp, r7
 8013228:	bd90      	pop	{r4, r7, pc}
 801322a:	bf00      	nop
 801322c:	eefefffc 	.word	0xeefefffc

08013230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d101      	bne.n	8013244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013240:	2301      	movs	r3, #1
 8013242:	e12d      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013244:	4b98      	ldr	r3, [pc, #608]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f003 0307 	and.w	r3, r3, #7
 801324c:	683a      	ldr	r2, [r7, #0]
 801324e:	429a      	cmp	r2, r3
 8013250:	d91b      	bls.n	801328a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013252:	4b95      	ldr	r3, [pc, #596]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f023 0207 	bic.w	r2, r3, #7
 801325a:	4993      	ldr	r1, [pc, #588]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	4313      	orrs	r3, r2
 8013260:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013262:	f7fc ff4f 	bl	8010104 <HAL_GetTick>
 8013266:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013268:	e008      	b.n	801327c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801326a:	f7fc ff4b 	bl	8010104 <HAL_GetTick>
 801326e:	4602      	mov	r2, r0
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	2b02      	cmp	r3, #2
 8013276:	d901      	bls.n	801327c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8013278:	2303      	movs	r3, #3
 801327a:	e111      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801327c:	4b8a      	ldr	r3, [pc, #552]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f003 0307 	and.w	r3, r3, #7
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	429a      	cmp	r2, r3
 8013288:	d1ef      	bne.n	801326a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f003 0302 	and.w	r3, r3, #2
 8013292:	2b00      	cmp	r3, #0
 8013294:	d016      	beq.n	80132c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	689b      	ldr	r3, [r3, #8]
 801329a:	4618      	mov	r0, r3
 801329c:	f7ff fafb 	bl	8012896 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80132a0:	f7fc ff30 	bl	8010104 <HAL_GetTick>
 80132a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80132a6:	e008      	b.n	80132ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80132a8:	f7fc ff2c 	bl	8010104 <HAL_GetTick>
 80132ac:	4602      	mov	r2, r0
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	1ad3      	subs	r3, r2, r3
 80132b2:	2b02      	cmp	r3, #2
 80132b4:	d901      	bls.n	80132ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80132b6:	2303      	movs	r3, #3
 80132b8:	e0f2      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80132ba:	f7ff fbe8 	bl	8012a8e <LL_RCC_IsActiveFlag_HPRE>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d0f1      	beq.n	80132a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f003 0320 	and.w	r3, r3, #32
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d016      	beq.n	80132fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	695b      	ldr	r3, [r3, #20]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7ff faf2 	bl	80128be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80132da:	f7fc ff13 	bl	8010104 <HAL_GetTick>
 80132de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80132e0:	e008      	b.n	80132f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80132e2:	f7fc ff0f 	bl	8010104 <HAL_GetTick>
 80132e6:	4602      	mov	r2, r0
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	2b02      	cmp	r3, #2
 80132ee:	d901      	bls.n	80132f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80132f0:	2303      	movs	r3, #3
 80132f2:	e0d5      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80132f4:	f7ff fbdd 	bl	8012ab2 <LL_RCC_IsActiveFlag_C2HPRE>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d0f1      	beq.n	80132e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013306:	2b00      	cmp	r3, #0
 8013308:	d016      	beq.n	8013338 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	699b      	ldr	r3, [r3, #24]
 801330e:	4618      	mov	r0, r3
 8013310:	f7ff faeb 	bl	80128ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8013314:	f7fc fef6 	bl	8010104 <HAL_GetTick>
 8013318:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801331a:	e008      	b.n	801332e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801331c:	f7fc fef2 	bl	8010104 <HAL_GetTick>
 8013320:	4602      	mov	r2, r0
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	1ad3      	subs	r3, r2, r3
 8013326:	2b02      	cmp	r3, #2
 8013328:	d901      	bls.n	801332e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801332a:	2303      	movs	r3, #3
 801332c:	e0b8      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801332e:	f7ff fbd3 	bl	8012ad8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d0f1      	beq.n	801331c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f003 0304 	and.w	r3, r3, #4
 8013340:	2b00      	cmp	r3, #0
 8013342:	d016      	beq.n	8013372 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	4618      	mov	r0, r3
 801334a:	f7ff fae5 	bl	8012918 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801334e:	f7fc fed9 	bl	8010104 <HAL_GetTick>
 8013352:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8013354:	e008      	b.n	8013368 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013356:	f7fc fed5 	bl	8010104 <HAL_GetTick>
 801335a:	4602      	mov	r2, r0
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	1ad3      	subs	r3, r2, r3
 8013360:	2b02      	cmp	r3, #2
 8013362:	d901      	bls.n	8013368 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8013364:	2303      	movs	r3, #3
 8013366:	e09b      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8013368:	f7ff fbc9 	bl	8012afe <LL_RCC_IsActiveFlag_PPRE1>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d0f1      	beq.n	8013356 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f003 0308 	and.w	r3, r3, #8
 801337a:	2b00      	cmp	r3, #0
 801337c:	d017      	beq.n	80133ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	00db      	lsls	r3, r3, #3
 8013384:	4618      	mov	r0, r3
 8013386:	f7ff fadb 	bl	8012940 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801338a:	f7fc febb 	bl	8010104 <HAL_GetTick>
 801338e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8013390:	e008      	b.n	80133a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8013392:	f7fc feb7 	bl	8010104 <HAL_GetTick>
 8013396:	4602      	mov	r2, r0
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	2b02      	cmp	r3, #2
 801339e:	d901      	bls.n	80133a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80133a0:	2303      	movs	r3, #3
 80133a2:	e07d      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80133a4:	f7ff fbbd 	bl	8012b22 <LL_RCC_IsActiveFlag_PPRE2>
 80133a8:	4603      	mov	r3, r0
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d0f1      	beq.n	8013392 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f003 0301 	and.w	r3, r3, #1
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d043      	beq.n	8013442 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	2b02      	cmp	r3, #2
 80133c0:	d106      	bne.n	80133d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80133c2:	f7ff f87b 	bl	80124bc <LL_RCC_HSE_IsReady>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d11e      	bne.n	801340a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80133cc:	2301      	movs	r3, #1
 80133ce:	e067      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	2b03      	cmp	r3, #3
 80133d6:	d106      	bne.n	80133e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80133d8:	f7ff fb16 	bl	8012a08 <LL_RCC_PLL_IsReady>
 80133dc:	4603      	mov	r3, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d113      	bne.n	801340a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80133e2:	2301      	movs	r3, #1
 80133e4:	e05c      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d106      	bne.n	80133fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80133ee:	f7ff f9e3 	bl	80127b8 <LL_RCC_MSI_IsReady>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d108      	bne.n	801340a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80133f8:	2301      	movs	r3, #1
 80133fa:	e051      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80133fc:	f7ff f88e 	bl	801251c <LL_RCC_HSI_IsReady>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d101      	bne.n	801340a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8013406:	2301      	movs	r3, #1
 8013408:	e04a      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff fa21 	bl	8012856 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013414:	f7fc fe76 	bl	8010104 <HAL_GetTick>
 8013418:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801341a:	e00a      	b.n	8013432 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801341c:	f7fc fe72 	bl	8010104 <HAL_GetTick>
 8013420:	4602      	mov	r2, r0
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	1ad3      	subs	r3, r2, r3
 8013426:	f241 3288 	movw	r2, #5000	@ 0x1388
 801342a:	4293      	cmp	r3, r2
 801342c:	d901      	bls.n	8013432 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801342e:	2303      	movs	r3, #3
 8013430:	e036      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013432:	f7ff fa24 	bl	801287e <LL_RCC_GetSysClkSource>
 8013436:	4602      	mov	r2, r0
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	429a      	cmp	r2, r3
 8013440:	d1ec      	bne.n	801341c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013442:	4b19      	ldr	r3, [pc, #100]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f003 0307 	and.w	r3, r3, #7
 801344a:	683a      	ldr	r2, [r7, #0]
 801344c:	429a      	cmp	r2, r3
 801344e:	d21b      	bcs.n	8013488 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013450:	4b15      	ldr	r3, [pc, #84]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f023 0207 	bic.w	r2, r3, #7
 8013458:	4913      	ldr	r1, [pc, #76]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	4313      	orrs	r3, r2
 801345e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013460:	f7fc fe50 	bl	8010104 <HAL_GetTick>
 8013464:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013466:	e008      	b.n	801347a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8013468:	f7fc fe4c 	bl	8010104 <HAL_GetTick>
 801346c:	4602      	mov	r2, r0
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	2b02      	cmp	r3, #2
 8013474:	d901      	bls.n	801347a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8013476:	2303      	movs	r3, #3
 8013478:	e012      	b.n	80134a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801347a:	4b0b      	ldr	r3, [pc, #44]	@ (80134a8 <HAL_RCC_ClockConfig+0x278>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f003 0307 	and.w	r3, r3, #7
 8013482:	683a      	ldr	r2, [r7, #0]
 8013484:	429a      	cmp	r2, r3
 8013486:	d1ef      	bne.n	8013468 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8013488:	f000 f87e 	bl	8013588 <HAL_RCC_GetHCLKFreq>
 801348c:	4603      	mov	r3, r0
 801348e:	4a07      	ldr	r2, [pc, #28]	@ (80134ac <HAL_RCC_ClockConfig+0x27c>)
 8013490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8013492:	f7fc fe43 	bl	801011c <HAL_GetTickPrio>
 8013496:	4603      	mov	r3, r0
 8013498:	4618      	mov	r0, r3
 801349a:	f7fc fde5 	bl	8010068 <HAL_InitTick>
 801349e:	4603      	mov	r3, r0
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3710      	adds	r7, #16
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	58004000 	.word	0x58004000
 80134ac:	20000580 	.word	0x20000580

080134b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80134b0:	b590      	push	{r4, r7, lr}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80134b6:	f7ff f9e2 	bl	801287e <LL_RCC_GetSysClkSource>
 80134ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10a      	bne.n	80134d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80134c2:	f7ff f99e 	bl	8012802 <LL_RCC_MSI_GetRange>
 80134c6:	4603      	mov	r3, r0
 80134c8:	091b      	lsrs	r3, r3, #4
 80134ca:	f003 030f 	and.w	r3, r3, #15
 80134ce:	4a2b      	ldr	r2, [pc, #172]	@ (801357c <HAL_RCC_GetSysClockFreq+0xcc>)
 80134d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134d4:	60fb      	str	r3, [r7, #12]
 80134d6:	e04b      	b.n	8013570 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2b04      	cmp	r3, #4
 80134dc:	d102      	bne.n	80134e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80134de:	4b28      	ldr	r3, [pc, #160]	@ (8013580 <HAL_RCC_GetSysClockFreq+0xd0>)
 80134e0:	60fb      	str	r3, [r7, #12]
 80134e2:	e045      	b.n	8013570 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2b08      	cmp	r3, #8
 80134e8:	d10a      	bne.n	8013500 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80134ea:	f7fe ffb7 	bl	801245c <LL_RCC_HSE_IsEnabledDiv2>
 80134ee:	4603      	mov	r3, r0
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d102      	bne.n	80134fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80134f4:	4b22      	ldr	r3, [pc, #136]	@ (8013580 <HAL_RCC_GetSysClockFreq+0xd0>)
 80134f6:	60fb      	str	r3, [r7, #12]
 80134f8:	e03a      	b.n	8013570 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80134fa:	4b22      	ldr	r3, [pc, #136]	@ (8013584 <HAL_RCC_GetSysClockFreq+0xd4>)
 80134fc:	60fb      	str	r3, [r7, #12]
 80134fe:	e037      	b.n	8013570 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8013500:	f7ff fab9 	bl	8012a76 <LL_RCC_PLL_GetMainSource>
 8013504:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	2b02      	cmp	r3, #2
 801350a:	d003      	beq.n	8013514 <HAL_RCC_GetSysClockFreq+0x64>
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	2b03      	cmp	r3, #3
 8013510:	d003      	beq.n	801351a <HAL_RCC_GetSysClockFreq+0x6a>
 8013512:	e00d      	b.n	8013530 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8013514:	4b1a      	ldr	r3, [pc, #104]	@ (8013580 <HAL_RCC_GetSysClockFreq+0xd0>)
 8013516:	60bb      	str	r3, [r7, #8]
        break;
 8013518:	e015      	b.n	8013546 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 801351a:	f7fe ff9f 	bl	801245c <LL_RCC_HSE_IsEnabledDiv2>
 801351e:	4603      	mov	r3, r0
 8013520:	2b01      	cmp	r3, #1
 8013522:	d102      	bne.n	801352a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8013524:	4b16      	ldr	r3, [pc, #88]	@ (8013580 <HAL_RCC_GetSysClockFreq+0xd0>)
 8013526:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8013528:	e00d      	b.n	8013546 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 801352a:	4b16      	ldr	r3, [pc, #88]	@ (8013584 <HAL_RCC_GetSysClockFreq+0xd4>)
 801352c:	60bb      	str	r3, [r7, #8]
        break;
 801352e:	e00a      	b.n	8013546 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8013530:	f7ff f967 	bl	8012802 <LL_RCC_MSI_GetRange>
 8013534:	4603      	mov	r3, r0
 8013536:	091b      	lsrs	r3, r3, #4
 8013538:	f003 030f 	and.w	r3, r3, #15
 801353c:	4a0f      	ldr	r2, [pc, #60]	@ (801357c <HAL_RCC_GetSysClockFreq+0xcc>)
 801353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013542:	60bb      	str	r3, [r7, #8]
        break;
 8013544:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8013546:	f7ff fa71 	bl	8012a2c <LL_RCC_PLL_GetN>
 801354a:	4602      	mov	r2, r0
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	fb03 f402 	mul.w	r4, r3, r2
 8013552:	f7ff fa84 	bl	8012a5e <LL_RCC_PLL_GetDivider>
 8013556:	4603      	mov	r3, r0
 8013558:	091b      	lsrs	r3, r3, #4
 801355a:	3301      	adds	r3, #1
 801355c:	fbb4 f4f3 	udiv	r4, r4, r3
 8013560:	f7ff fa71 	bl	8012a46 <LL_RCC_PLL_GetR>
 8013564:	4603      	mov	r3, r0
 8013566:	0f5b      	lsrs	r3, r3, #29
 8013568:	3301      	adds	r3, #1
 801356a:	fbb4 f3f3 	udiv	r3, r4, r3
 801356e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8013570:	68fb      	ldr	r3, [r7, #12]
}
 8013572:	4618      	mov	r0, r3
 8013574:	3714      	adds	r7, #20
 8013576:	46bd      	mov	sp, r7
 8013578:	bd90      	pop	{r4, r7, pc}
 801357a:	bf00      	nop
 801357c:	0802072c 	.word	0x0802072c
 8013580:	00f42400 	.word	0x00f42400
 8013584:	01e84800 	.word	0x01e84800

08013588 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013588:	b598      	push	{r3, r4, r7, lr}
 801358a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 801358c:	f7ff ff90 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8013590:	4604      	mov	r4, r0
 8013592:	f7ff f9e9 	bl	8012968 <LL_RCC_GetAHBPrescaler>
 8013596:	4603      	mov	r3, r0
 8013598:	091b      	lsrs	r3, r3, #4
 801359a:	f003 030f 	and.w	r3, r3, #15
 801359e:	4a03      	ldr	r2, [pc, #12]	@ (80135ac <HAL_RCC_GetHCLKFreq+0x24>)
 80135a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	bd98      	pop	{r3, r4, r7, pc}
 80135ac:	080206cc 	.word	0x080206cc

080135b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80135b0:	b598      	push	{r3, r4, r7, lr}
 80135b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80135b4:	f7ff ffe8 	bl	8013588 <HAL_RCC_GetHCLKFreq>
 80135b8:	4604      	mov	r4, r0
 80135ba:	f7ff f9ef 	bl	801299c <LL_RCC_GetAPB1Prescaler>
 80135be:	4603      	mov	r3, r0
 80135c0:	0a1b      	lsrs	r3, r3, #8
 80135c2:	f003 0307 	and.w	r3, r3, #7
 80135c6:	4a04      	ldr	r2, [pc, #16]	@ (80135d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80135c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135cc:	f003 031f 	and.w	r3, r3, #31
 80135d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	bd98      	pop	{r3, r4, r7, pc}
 80135d8:	0802070c 	.word	0x0802070c

080135dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80135dc:	b598      	push	{r3, r4, r7, lr}
 80135de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80135e0:	f7ff ffd2 	bl	8013588 <HAL_RCC_GetHCLKFreq>
 80135e4:	4604      	mov	r4, r0
 80135e6:	f7ff f9e5 	bl	80129b4 <LL_RCC_GetAPB2Prescaler>
 80135ea:	4603      	mov	r3, r0
 80135ec:	0adb      	lsrs	r3, r3, #11
 80135ee:	f003 0307 	and.w	r3, r3, #7
 80135f2:	4a04      	ldr	r2, [pc, #16]	@ (8013604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80135f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135f8:	f003 031f 	and.w	r3, r3, #31
 80135fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8013600:	4618      	mov	r0, r3
 8013602:	bd98      	pop	{r3, r4, r7, pc}
 8013604:	0802070c 	.word	0x0802070c

08013608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8013608:	b590      	push	{r4, r7, lr}
 801360a:	b085      	sub	sp, #20
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2bb0      	cmp	r3, #176	@ 0xb0
 8013614:	d903      	bls.n	801361e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8013616:	4b15      	ldr	r3, [pc, #84]	@ (801366c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8013618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801361a:	60fb      	str	r3, [r7, #12]
 801361c:	e007      	b.n	801362e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	091b      	lsrs	r3, r3, #4
 8013622:	f003 030f 	and.w	r3, r3, #15
 8013626:	4a11      	ldr	r2, [pc, #68]	@ (801366c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8013628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801362c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 801362e:	f7ff f9a7 	bl	8012980 <LL_RCC_GetAHB4Prescaler>
 8013632:	4603      	mov	r3, r0
 8013634:	091b      	lsrs	r3, r3, #4
 8013636:	f003 030f 	and.w	r3, r3, #15
 801363a:	4a0d      	ldr	r2, [pc, #52]	@ (8013670 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 801363c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	fbb2 f3f3 	udiv	r3, r2, r3
 8013646:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	4a0a      	ldr	r2, [pc, #40]	@ (8013674 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 801364c:	fba2 2303 	umull	r2, r3, r2, r3
 8013650:	0c9c      	lsrs	r4, r3, #18
 8013652:	f7fe fef5 	bl	8012440 <HAL_PWREx_GetVoltageRange>
 8013656:	4603      	mov	r3, r0
 8013658:	4619      	mov	r1, r3
 801365a:	4620      	mov	r0, r4
 801365c:	f000 f80c 	bl	8013678 <RCC_SetFlashLatency>
 8013660:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8013662:	4618      	mov	r0, r3
 8013664:	3714      	adds	r7, #20
 8013666:	46bd      	mov	sp, r7
 8013668:	bd90      	pop	{r4, r7, pc}
 801366a:	bf00      	nop
 801366c:	0802072c 	.word	0x0802072c
 8013670:	080206cc 	.word	0x080206cc
 8013674:	431bde83 	.word	0x431bde83

08013678 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8013678:	b590      	push	{r4, r7, lr}
 801367a:	b093      	sub	sp, #76	@ 0x4c
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8013682:	4b37      	ldr	r3, [pc, #220]	@ (8013760 <RCC_SetFlashLatency+0xe8>)
 8013684:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8013688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801368a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 801368e:	4a35      	ldr	r2, [pc, #212]	@ (8013764 <RCC_SetFlashLatency+0xec>)
 8013690:	f107 031c 	add.w	r3, r7, #28
 8013694:	ca07      	ldmia	r2, {r0, r1, r2}
 8013696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 801369a:	4b33      	ldr	r3, [pc, #204]	@ (8013768 <RCC_SetFlashLatency+0xf0>)
 801369c:	f107 040c 	add.w	r4, r7, #12
 80136a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80136a6:	2300      	movs	r3, #0
 80136a8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80136b0:	d11a      	bne.n	80136e8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80136b2:	2300      	movs	r3, #0
 80136b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80136b6:	e013      	b.n	80136e0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80136b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	3348      	adds	r3, #72	@ 0x48
 80136be:	443b      	add	r3, r7
 80136c0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d807      	bhi.n	80136da <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80136ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	3348      	adds	r3, #72	@ 0x48
 80136d0:	443b      	add	r3, r7
 80136d2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80136d6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80136d8:	e020      	b.n	801371c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80136da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136dc:	3301      	adds	r3, #1
 80136de:	643b      	str	r3, [r7, #64]	@ 0x40
 80136e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136e2:	2b03      	cmp	r3, #3
 80136e4:	d9e8      	bls.n	80136b8 <RCC_SetFlashLatency+0x40>
 80136e6:	e019      	b.n	801371c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80136e8:	2300      	movs	r3, #0
 80136ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136ec:	e013      	b.n	8013716 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80136ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	3348      	adds	r3, #72	@ 0x48
 80136f4:	443b      	add	r3, r7
 80136f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d807      	bhi.n	8013710 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8013700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013702:	009b      	lsls	r3, r3, #2
 8013704:	3348      	adds	r3, #72	@ 0x48
 8013706:	443b      	add	r3, r7
 8013708:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801370c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 801370e:	e005      	b.n	801371c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8013710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013712:	3301      	adds	r3, #1
 8013714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013718:	2b02      	cmp	r3, #2
 801371a:	d9e8      	bls.n	80136ee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801371c:	4b13      	ldr	r3, [pc, #76]	@ (801376c <RCC_SetFlashLatency+0xf4>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	f023 0207 	bic.w	r2, r3, #7
 8013724:	4911      	ldr	r1, [pc, #68]	@ (801376c <RCC_SetFlashLatency+0xf4>)
 8013726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013728:	4313      	orrs	r3, r2
 801372a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801372c:	f7fc fcea 	bl	8010104 <HAL_GetTick>
 8013730:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8013732:	e008      	b.n	8013746 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8013734:	f7fc fce6 	bl	8010104 <HAL_GetTick>
 8013738:	4602      	mov	r2, r0
 801373a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801373c:	1ad3      	subs	r3, r2, r3
 801373e:	2b02      	cmp	r3, #2
 8013740:	d901      	bls.n	8013746 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8013742:	2303      	movs	r3, #3
 8013744:	e007      	b.n	8013756 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8013746:	4b09      	ldr	r3, [pc, #36]	@ (801376c <RCC_SetFlashLatency+0xf4>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f003 0307 	and.w	r3, r3, #7
 801374e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013750:	429a      	cmp	r2, r3
 8013752:	d1ef      	bne.n	8013734 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8013754:	2300      	movs	r3, #0
}
 8013756:	4618      	mov	r0, r3
 8013758:	374c      	adds	r7, #76	@ 0x4c
 801375a:	46bd      	mov	sp, r7
 801375c:	bd90      	pop	{r4, r7, pc}
 801375e:	bf00      	nop
 8013760:	08020460 	.word	0x08020460
 8013764:	08020470 	.word	0x08020470
 8013768:	0802047c 	.word	0x0802047c
 801376c:	58004000 	.word	0x58004000

08013770 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8013770:	b480      	push	{r7}
 8013772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8013774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801377e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013782:	d101      	bne.n	8013788 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8013784:	2301      	movs	r3, #1
 8013786:	e000      	b.n	801378a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr

08013794 <LL_RCC_HSE_IsReady>:
{
 8013794:	b480      	push	{r7}
 8013796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8013798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80137a6:	d101      	bne.n	80137ac <LL_RCC_HSE_IsReady+0x18>
 80137a8:	2301      	movs	r3, #1
 80137aa:	e000      	b.n	80137ae <LL_RCC_HSE_IsReady+0x1a>
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <LL_RCC_HSI_IsReady>:
{
 80137b8:	b480      	push	{r7}
 80137ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80137bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80137c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80137ca:	d101      	bne.n	80137d0 <LL_RCC_HSI_IsReady+0x18>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e000      	b.n	80137d2 <LL_RCC_HSI_IsReady+0x1a>
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <LL_RCC_HSI48_IsReady>:
{
 80137dc:	b480      	push	{r7}
 80137de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80137e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80137e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80137e8:	f003 0302 	and.w	r3, r3, #2
 80137ec:	2b02      	cmp	r3, #2
 80137ee:	d101      	bne.n	80137f4 <LL_RCC_HSI48_IsReady+0x18>
 80137f0:	2301      	movs	r3, #1
 80137f2:	e000      	b.n	80137f6 <LL_RCC_HSI48_IsReady+0x1a>
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <LL_RCC_LSE_IsEnabled>:
{
 8013800:	b480      	push	{r7}
 8013802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8013804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801380c:	f003 0301 	and.w	r3, r3, #1
 8013810:	2b01      	cmp	r3, #1
 8013812:	d101      	bne.n	8013818 <LL_RCC_LSE_IsEnabled+0x18>
 8013814:	2301      	movs	r3, #1
 8013816:	e000      	b.n	801381a <LL_RCC_LSE_IsEnabled+0x1a>
 8013818:	2300      	movs	r3, #0
}
 801381a:	4618      	mov	r0, r3
 801381c:	46bd      	mov	sp, r7
 801381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013822:	4770      	bx	lr

08013824 <LL_RCC_LSE_IsReady>:
{
 8013824:	b480      	push	{r7}
 8013826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8013828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013830:	f003 0302 	and.w	r3, r3, #2
 8013834:	2b02      	cmp	r3, #2
 8013836:	d101      	bne.n	801383c <LL_RCC_LSE_IsReady+0x18>
 8013838:	2301      	movs	r3, #1
 801383a:	e000      	b.n	801383e <LL_RCC_LSE_IsReady+0x1a>
 801383c:	2300      	movs	r3, #0
}
 801383e:	4618      	mov	r0, r3
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr

08013848 <LL_RCC_LSI1_IsReady>:
{
 8013848:	b480      	push	{r7}
 801384a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801384c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013854:	f003 0302 	and.w	r3, r3, #2
 8013858:	2b02      	cmp	r3, #2
 801385a:	d101      	bne.n	8013860 <LL_RCC_LSI1_IsReady+0x18>
 801385c:	2301      	movs	r3, #1
 801385e:	e000      	b.n	8013862 <LL_RCC_LSI1_IsReady+0x1a>
 8013860:	2300      	movs	r3, #0
}
 8013862:	4618      	mov	r0, r3
 8013864:	46bd      	mov	sp, r7
 8013866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386a:	4770      	bx	lr

0801386c <LL_RCC_LSI2_IsReady>:
{
 801386c:	b480      	push	{r7}
 801386e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8013870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013878:	f003 0308 	and.w	r3, r3, #8
 801387c:	2b08      	cmp	r3, #8
 801387e:	d101      	bne.n	8013884 <LL_RCC_LSI2_IsReady+0x18>
 8013880:	2301      	movs	r3, #1
 8013882:	e000      	b.n	8013886 <LL_RCC_LSI2_IsReady+0x1a>
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <LL_RCC_MSI_IsReady>:
{
 8013890:	b480      	push	{r7}
 8013892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8013894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f003 0302 	and.w	r3, r3, #2
 801389e:	2b02      	cmp	r3, #2
 80138a0:	d101      	bne.n	80138a6 <LL_RCC_MSI_IsReady+0x16>
 80138a2:	2301      	movs	r3, #1
 80138a4:	e000      	b.n	80138a8 <LL_RCC_MSI_IsReady+0x18>
 80138a6:	2300      	movs	r3, #0
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <LL_RCC_MSI_GetRange>:
{
 80138b2:	b480      	push	{r7}
 80138b4:	b083      	sub	sp, #12
 80138b6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80138b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80138c2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80138c8:	d901      	bls.n	80138ce <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80138ca:	23b0      	movs	r3, #176	@ 0xb0
 80138cc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80138ce:	687b      	ldr	r3, [r7, #4]
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <LL_RCC_SetRFWKPClockSource>:
{
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80138e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80138e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80138ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80138f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4313      	orrs	r3, r2
 80138f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80138fc:	bf00      	nop
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr

08013908 <LL_RCC_GetRFWKPClockSource>:
{
 8013908:	b480      	push	{r7}
 801390a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 801390c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013914:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8013918:	4618      	mov	r0, r3
 801391a:	46bd      	mov	sp, r7
 801391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013920:	4770      	bx	lr

08013922 <LL_RCC_GetAHBPrescaler>:
{
 8013922:	b480      	push	{r7}
 8013924:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8013926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801392a:	689b      	ldr	r3, [r3, #8]
 801392c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8013930:	4618      	mov	r0, r3
 8013932:	46bd      	mov	sp, r7
 8013934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013938:	4770      	bx	lr

0801393a <LL_RCC_GetAPB1Prescaler>:
{
 801393a:	b480      	push	{r7}
 801393c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801393e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8013948:	4618      	mov	r0, r3
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <LL_RCC_GetAPB2Prescaler>:
{
 8013952:	b480      	push	{r7}
 8013954:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8013956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801395a:	689b      	ldr	r3, [r3, #8]
 801395c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8013960:	4618      	mov	r0, r3
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr

0801396a <LL_RCC_SetSMPSClockSource>:
{
 801396a:	b480      	push	{r7}
 801396c:	b083      	sub	sp, #12
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8013972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013978:	f023 0203 	bic.w	r2, r3, #3
 801397c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	4313      	orrs	r3, r2
 8013984:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8013986:	bf00      	nop
 8013988:	370c      	adds	r7, #12
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr

08013992 <LL_RCC_GetSMPSClockSource>:
{
 8013992:	b480      	push	{r7}
 8013994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8013996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801399c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	46bd      	mov	sp, r7
 80139a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a8:	4770      	bx	lr

080139aa <LL_RCC_SetSMPSPrescaler>:
{
 80139aa:	b480      	push	{r7}
 80139ac:	b083      	sub	sp, #12
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80139b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80139bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	4313      	orrs	r3, r2
 80139c4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80139c6:	bf00      	nop
 80139c8:	370c      	adds	r7, #12
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <LL_RCC_GetSMPSPrescaler>:
{
 80139d2:	b480      	push	{r7}
 80139d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80139d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr

080139ea <LL_RCC_SetUSARTClockSource>:
{
 80139ea:	b480      	push	{r7}
 80139ec:	b083      	sub	sp, #12
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80139f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80139f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80139fa:	f023 0203 	bic.w	r2, r3, #3
 80139fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4313      	orrs	r3, r2
 8013a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013a0a:	bf00      	nop
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr

08013a16 <LL_RCC_SetLPUARTClockSource>:
{
 8013a16:	b480      	push	{r7}
 8013a18:	b083      	sub	sp, #12
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8013a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013a26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8013a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4313      	orrs	r3, r2
 8013a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013a36:	bf00      	nop
 8013a38:	370c      	adds	r7, #12
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr

08013a42 <LL_RCC_SetI2CClockSource>:
{
 8013a42:	b480      	push	{r7}
 8013a44:	b083      	sub	sp, #12
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8013a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	091b      	lsrs	r3, r3, #4
 8013a56:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8013a5a:	43db      	mvns	r3, r3
 8013a5c:	401a      	ands	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	011b      	lsls	r3, r3, #4
 8013a62:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8013a66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013a6a:	4313      	orrs	r3, r2
 8013a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013a70:	bf00      	nop
 8013a72:	370c      	adds	r7, #12
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr

08013a7c <LL_RCC_SetLPTIMClockSource>:
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8013a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013a88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	0c1b      	lsrs	r3, r3, #16
 8013a90:	041b      	lsls	r3, r3, #16
 8013a92:	43db      	mvns	r3, r3
 8013a94:	401a      	ands	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	041b      	lsls	r3, r3, #16
 8013a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013a9e:	4313      	orrs	r3, r2
 8013aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013aa4:	bf00      	nop
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr

08013ab0 <LL_RCC_SetSAIClockSource>:
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8013ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013ac0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013ac4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	4313      	orrs	r3, r2
 8013acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013ad0:	bf00      	nop
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <LL_RCC_SetRNGClockSource>:
{
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8013ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013aec:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8013af0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4313      	orrs	r3, r2
 8013af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013afc:	bf00      	nop
 8013afe:	370c      	adds	r7, #12
 8013b00:	46bd      	mov	sp, r7
 8013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b06:	4770      	bx	lr

08013b08 <LL_RCC_SetCLK48ClockSource>:
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8013b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013b18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013b1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4313      	orrs	r3, r2
 8013b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013b28:	bf00      	nop
 8013b2a:	370c      	adds	r7, #12
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <LL_RCC_SetUSBClockSource>:
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f7ff ffe3 	bl	8013b08 <LL_RCC_SetCLK48ClockSource>
}
 8013b42:	bf00      	nop
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <LL_RCC_SetADCClockSource>:
{
 8013b4a:	b480      	push	{r7}
 8013b4c:	b083      	sub	sp, #12
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8013b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013b5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8013b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4313      	orrs	r3, r2
 8013b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8013b6a:	bf00      	nop
 8013b6c:	370c      	adds	r7, #12
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr

08013b76 <LL_RCC_GetUSARTClockSource>:
{
 8013b76:	b480      	push	{r7}
 8013b78:	b083      	sub	sp, #12
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8013b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4013      	ands	r3, r2
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	370c      	adds	r7, #12
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr

08013b96 <LL_RCC_GetLPUARTClockSource>:
{
 8013b96:	b480      	push	{r7}
 8013b98:	b083      	sub	sp, #12
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8013b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ba2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4013      	ands	r3, r2
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr

08013bb6 <LL_RCC_GetI2CClockSource>:
{
 8013bb6:	b480      	push	{r7}
 8013bb8:	b083      	sub	sp, #12
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8013bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013bc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	4013      	ands	r3, r2
 8013bca:	091a      	lsrs	r2, r3, #4
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	011b      	lsls	r3, r3, #4
 8013bd0:	4313      	orrs	r3, r2
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	370c      	adds	r7, #12
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bdc:	4770      	bx	lr

08013bde <LL_RCC_GetLPTIMClockSource>:
{
 8013bde:	b480      	push	{r7}
 8013be0:	b083      	sub	sp, #12
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8013be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013bea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	4013      	ands	r3, r2
 8013bf2:	0c1a      	lsrs	r2, r3, #16
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	4313      	orrs	r3, r2
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <LL_RCC_GetSAIClockSource>:
{
 8013c04:	b480      	push	{r7}
 8013c06:	b083      	sub	sp, #12
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8013c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	4013      	ands	r3, r2
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr

08013c24 <LL_RCC_GetRNGClockSource>:
{
 8013c24:	b480      	push	{r7}
 8013c26:	b083      	sub	sp, #12
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8013c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4013      	ands	r3, r2
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <LL_RCC_GetCLK48ClockSource>:
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8013c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4013      	ands	r3, r2
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	370c      	adds	r7, #12
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr

08013c64 <LL_RCC_GetUSBClockSource>:
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7ff ffe9 	bl	8013c44 <LL_RCC_GetCLK48ClockSource>
 8013c72:	4603      	mov	r3, r0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3708      	adds	r7, #8
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <LL_RCC_GetADCClockSource>:
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8013c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4013      	ands	r3, r2
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	370c      	adds	r7, #12
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <LL_RCC_SetRTCClockSource>:
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8013ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013cb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	4313      	orrs	r3, r2
 8013cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8013cbc:	bf00      	nop
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <LL_RCC_GetRTCClockSource>:
{
 8013cc8:	b480      	push	{r7}
 8013cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8013ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr

08013ce2 <LL_RCC_ForceBackupDomainReset>:
{
 8013ce2:	b480      	push	{r7}
 8013ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8013ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013cfa:	bf00      	nop
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <LL_RCC_ReleaseBackupDomainReset>:
{
 8013d04:	b480      	push	{r7}
 8013d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8013d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8013d1c:	bf00      	nop
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr

08013d26 <LL_RCC_PLL_IsReady>:
{
 8013d26:	b480      	push	{r7}
 8013d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8013d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d38:	d101      	bne.n	8013d3e <LL_RCC_PLL_IsReady+0x18>
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	e000      	b.n	8013d40 <LL_RCC_PLL_IsReady+0x1a>
 8013d3e:	2300      	movs	r3, #0
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr

08013d4a <LL_RCC_PLL_GetN>:
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8013d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	0a1b      	lsrs	r3, r3, #8
 8013d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <LL_RCC_PLL_GetP>:
{
 8013d64:	b480      	push	{r7}
 8013d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8013d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d6c:	68db      	ldr	r3, [r3, #12]
 8013d6e:	f403 1378 	and.w	r3, r3, #4063232	@ 0x3e0000
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <LL_RCC_PLL_GetQ>:
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8013d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <LL_RCC_PLL_GetDivider>:
{
 8013d94:	b480      	push	{r7}
 8013d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8013d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	46bd      	mov	sp, r7
 8013da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013daa:	4770      	bx	lr

08013dac <LL_RCC_PLLSAI1_Enable>:
{
 8013dac:	b480      	push	{r7}
 8013dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8013db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013dba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013dbe:	6013      	str	r3, [r2, #0]
}
 8013dc0:	bf00      	nop
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc8:	4770      	bx	lr

08013dca <LL_RCC_PLLSAI1_Disable>:
{
 8013dca:	b480      	push	{r7}
 8013dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8013dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013dd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013ddc:	6013      	str	r3, [r2, #0]
}
 8013dde:	bf00      	nop
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <LL_RCC_PLLSAI1_IsReady>:
{
 8013de8:	b480      	push	{r7}
 8013dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8013dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013dfa:	d101      	bne.n	8013e00 <LL_RCC_PLLSAI1_IsReady+0x18>
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	e000      	b.n	8013e02 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8013e00:	2300      	movs	r3, #0
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	46bd      	mov	sp, r7
 8013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0a:	4770      	bx	lr

08013e0c <LL_RCC_PLLSAI1_GetN>:
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8013e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e14:	691b      	ldr	r3, [r3, #16]
 8013e16:	0a1b      	lsrs	r3, r3, #8
 8013e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr

08013e26 <LL_RCC_PLLSAI1_GetP>:
{
 8013e26:	b480      	push	{r7}
 8013e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8013e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	f403 1378 	and.w	r3, r3, #4063232	@ 0x3e0000
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr

08013e3e <LL_RCC_PLLSAI1_GetQ>:
{
 8013e3e:	b480      	push	{r7}
 8013e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8013e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e46:	691b      	ldr	r3, [r3, #16]
 8013e48:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr

08013e56 <LL_RCC_PLLSAI1_GetR>:
{
 8013e56:	b480      	push	{r7}
 8013e58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8013e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e5e:	691b      	ldr	r3, [r3, #16]
 8013e60:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	46bd      	mov	sp, r7
 8013e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6c:	4770      	bx	lr

08013e6e <LL_RCC_PLL_GetMainSource>:
{
 8013e6e:	b480      	push	{r7}
 8013e70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8013e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	f003 0303 	and.w	r3, r3, #3
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr

08013e86 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b088      	sub	sp, #32
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8013e8e:	2300      	movs	r3, #0
 8013e90:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8013e92:	2300      	movs	r3, #0
 8013e94:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d034      	beq.n	8013f0c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ea6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8013eaa:	d021      	beq.n	8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8013eac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8013eb0:	d81b      	bhi.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013eb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013eb6:	d01d      	beq.n	8013ef4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8013eb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013ebc:	d815      	bhi.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d00b      	beq.n	8013eda <HAL_RCCEx_PeriphCLKConfig+0x54>
 8013ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013ec6:	d110      	bne.n	8013eea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8013ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013ecc:	68db      	ldr	r3, [r3, #12]
 8013ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013ed6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8013ed8:	e00d      	b.n	8013ef6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	3304      	adds	r3, #4
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f000 fd5d 	bl	801499e <RCCEx_PLLSAI1_ConfigNP>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8013ee8:	e005      	b.n	8013ef6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8013eea:	2301      	movs	r3, #1
 8013eec:	77fb      	strb	r3, [r7, #31]
        break;
 8013eee:	e002      	b.n	8013ef6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8013ef0:	bf00      	nop
 8013ef2:	e000      	b.n	8013ef6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8013ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013ef6:	7ffb      	ldrb	r3, [r7, #31]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d105      	bne.n	8013f08 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7ff fdd5 	bl	8013ab0 <LL_RCC_SetSAIClockSource>
 8013f06:	e001      	b.n	8013f0c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f08:	7ffb      	ldrb	r3, [r7, #31]
 8013f0a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d046      	beq.n	8013fa6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8013f18:	f7ff fed6 	bl	8013cc8 <LL_RCC_GetRTCClockSource>
 8013f1c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f22:	69ba      	ldr	r2, [r7, #24]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d03c      	beq.n	8013fa2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8013f28:	f7fe fa7a 	bl	8012420 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d105      	bne.n	8013f3e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7ff feb0 	bl	8013c9c <LL_RCC_SetRTCClockSource>
 8013f3c:	e02e      	b.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8013f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8013f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f46:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8013f48:	f7ff fecb 	bl	8013ce2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8013f4c:	f7ff feda 	bl	8013d04 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8013f50:	697b      	ldr	r3, [r7, #20]
 8013f52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f5a:	4313      	orrs	r3, r2
 8013f5c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8013f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8013f68:	f7ff fc4a 	bl	8013800 <LL_RCC_LSE_IsEnabled>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d114      	bne.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013f72:	f7fc f8c7 	bl	8010104 <HAL_GetTick>
 8013f76:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8013f78:	e00b      	b.n	8013f92 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013f7a:	f7fc f8c3 	bl	8010104 <HAL_GetTick>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013f88:	4293      	cmp	r3, r2
 8013f8a:	d902      	bls.n	8013f92 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8013f8c:	2303      	movs	r3, #3
 8013f8e:	77fb      	strb	r3, [r7, #31]
              break;
 8013f90:	e004      	b.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8013f92:	f7ff fc47 	bl	8013824 <LL_RCC_LSE_IsReady>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d1ee      	bne.n	8013f7a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8013f9c:	7ffb      	ldrb	r3, [r7, #31]
 8013f9e:	77bb      	strb	r3, [r7, #30]
 8013fa0:	e001      	b.n	8013fa6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013fa2:	7ffb      	ldrb	r3, [r7, #31]
 8013fa4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	f003 0301 	and.w	r3, r3, #1
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d004      	beq.n	8013fbc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	699b      	ldr	r3, [r3, #24]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff fd17 	bl	80139ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f003 0302 	and.w	r3, r3, #2
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d004      	beq.n	8013fd2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	69db      	ldr	r3, [r3, #28]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7ff fd22 	bl	8013a16 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	f003 0310 	and.w	r3, r3, #16
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d004      	beq.n	8013fe8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ff fd4a 	bl	8013a7c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	f003 0320 	and.w	r3, r3, #32
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d004      	beq.n	8013ffe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7ff fd3f 	bl	8013a7c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f003 0304 	and.w	r3, r3, #4
 8014006:	2b00      	cmp	r3, #0
 8014008:	d004      	beq.n	8014014 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6a1b      	ldr	r3, [r3, #32]
 801400e:	4618      	mov	r0, r3
 8014010:	f7ff fd17 	bl	8013a42 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	f003 0308 	and.w	r3, r3, #8
 801401c:	2b00      	cmp	r3, #0
 801401e:	d004      	beq.n	801402a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014024:	4618      	mov	r0, r3
 8014026:	f7ff fd0c 	bl	8013a42 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014032:	2b00      	cmp	r3, #0
 8014034:	d022      	beq.n	801407c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801403a:	4618      	mov	r0, r3
 801403c:	f7ff fd7a 	bl	8013b34 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014048:	d107      	bne.n	801405a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801404a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801404e:	68db      	ldr	r3, [r3, #12]
 8014050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8014054:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014058:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801405e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014062:	d10b      	bne.n	801407c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	3304      	adds	r3, #4
 8014068:	4618      	mov	r0, r3
 801406a:	f000 fcf3 	bl	8014a54 <RCCEx_PLLSAI1_ConfigNQ>
 801406e:	4603      	mov	r3, r0
 8014070:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014072:	7ffb      	ldrb	r3, [r7, #31]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d001      	beq.n	801407c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8014078:	7ffb      	ldrb	r3, [r7, #31]
 801407a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014084:	2b00      	cmp	r3, #0
 8014086:	d02b      	beq.n	80140e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801408c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014090:	d008      	beq.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801409a:	d003      	beq.n	80140a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d105      	bne.n	80140b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7ff fd17 	bl	8013adc <LL_RCC_SetRNGClockSource>
 80140ae:	e00a      	b.n	80140c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80140b8:	60fb      	str	r3, [r7, #12]
 80140ba:	2000      	movs	r0, #0
 80140bc:	f7ff fd0e 	bl	8013adc <LL_RCC_SetRNGClockSource>
 80140c0:	68f8      	ldr	r0, [r7, #12]
 80140c2:	f7ff fd21 	bl	8013b08 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140ca:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80140ce:	d107      	bne.n	80140e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80140d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80140d4:	68db      	ldr	r3, [r3, #12]
 80140d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80140da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80140de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d022      	beq.n	8014132 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7ff fd2a 	bl	8013b4a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80140fe:	d107      	bne.n	8014110 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8014100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801410a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801410e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014118:	d10b      	bne.n	8014132 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	3304      	adds	r3, #4
 801411e:	4618      	mov	r0, r3
 8014120:	f000 fcf3 	bl	8014b0a <RCCEx_PLLSAI1_ConfigNR>
 8014124:	4603      	mov	r3, r0
 8014126:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8014128:	7ffb      	ldrb	r3, [r7, #31]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d001      	beq.n	8014132 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 801412e:	7ffb      	ldrb	r3, [r7, #31]
 8014130:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801413a:	2b00      	cmp	r3, #0
 801413c:	d004      	beq.n	8014148 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014142:	4618      	mov	r0, r3
 8014144:	f7ff fbca 	bl	80138dc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014150:	2b00      	cmp	r3, #0
 8014152:	d009      	beq.n	8014168 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014158:	4618      	mov	r0, r3
 801415a:	f7ff fc26 	bl	80139aa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014162:	4618      	mov	r0, r3
 8014164:	f7ff fc01 	bl	801396a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8014168:	7fbb      	ldrb	r3, [r7, #30]
}
 801416a:	4618      	mov	r0, r3
 801416c:	3720      	adds	r7, #32
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
	...

08014174 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8014174:	b590      	push	{r4, r7, lr}
 8014176:	b093      	sub	sp, #76	@ 0x4c
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 801417c:	2300      	movs	r3, #0
 801417e:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8014180:	f7ff fc27 	bl	80139d2 <LL_RCC_GetSMPSPrescaler>
 8014184:	4603      	mov	r3, r0
 8014186:	091b      	lsrs	r3, r3, #4
 8014188:	643b      	str	r3, [r7, #64]	@ 0x40
#endif /* RCC_SMPS_SUPPORT */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014190:	d12d      	bne.n	80141ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8014192:	f7ff fd99 	bl	8013cc8 <LL_RCC_GetRTCClockSource>
 8014196:	6138      	str	r0, [r7, #16]

    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801419e:	d109      	bne.n	80141b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80141a0:	f7ff fb40 	bl	8013824 <LL_RCC_LSE_IsReady>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	f040 83d2 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80141ac:	f248 0306 	movw	r3, #32774	@ 0x8006
 80141b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80141b2:	e3cd      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80141ba:	d110      	bne.n	80141de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80141bc:	f7ff fb44 	bl	8013848 <LL_RCC_LSI1_IsReady>
 80141c0:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80141c2:	f7ff fb53 	bl	801386c <LL_RCC_LSI2_IsReady>
 80141c6:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2b01      	cmp	r3, #1
 80141cc:	d003      	beq.n	80141d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	f040 83bd 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 80141d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80141da:	647b      	str	r3, [r7, #68]	@ 0x44
 80141dc:	e3b8      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80141de:	693b      	ldr	r3, [r7, #16]
 80141e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80141e4:	f040 83b4 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      frequency = HSE_VALUE / 32U;
 80141e8:	4bab      	ldr	r3, [pc, #684]	@ (8014498 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 80141ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80141ec:	e3b0      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2b40      	cmp	r3, #64	@ 0x40
 80141f2:	d130      	bne.n	8014256 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80141f4:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 80141f8:	f7ff fd04 	bl	8013c04 <LL_RCC_GetSAIClockSource>
 80141fc:	4603      	mov	r3, r0
 80141fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014202:	d008      	beq.n	8014216 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8014204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014208:	d822      	bhi.n	8014250 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 801420a:	2b00      	cmp	r3, #0
 801420c:	d00c      	beq.n	8014228 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 801420e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014212:	d013      	beq.n	801423c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8014214:	e01c      	b.n	8014250 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
      case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
        if (LL_RCC_HSI_IsReady() == 1U)
 8014216:	f7ff facf 	bl	80137b8 <LL_RCC_HSI_IsReady>
 801421a:	4603      	mov	r3, r0
 801421c:	2b01      	cmp	r3, #1
 801421e:	f040 8378 	bne.w	8014912 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
        {
          frequency = HSI_VALUE;
 8014222:	4b9e      	ldr	r3, [pc, #632]	@ (801449c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8014224:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8014226:	e374      	b.n	8014912 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>

      case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8014228:	f7ff fdde 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 801422c:	4603      	mov	r3, r0
 801422e:	2b01      	cmp	r3, #1
 8014230:	f040 8371 	bne.w	8014916 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8014234:	f000 fdc6 	bl	8014dc4 <RCC_PLLSAI1_GetFreqDomain_P>
 8014238:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 801423a:	e36c      	b.n	8014916 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>

      case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
        if (LL_RCC_PLL_IsReady() == 1U)
 801423c:	f7ff fd73 	bl	8013d26 <LL_RCC_PLL_IsReady>
 8014240:	4603      	mov	r3, r0
 8014242:	2b01      	cmp	r3, #1
 8014244:	f040 8369 	bne.w	801491a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
        {
          frequency = RCC_PLL_GetFreqDomain_P();
 8014248:	f000 fcba 	bl	8014bc0 <RCC_PLL_GetFreqDomain_P>
 801424c:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 801424e:	e364      	b.n	801491a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>

      default: /* External input clock used as SAI1 clock source */
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8014250:	4b93      	ldr	r3, [pc, #588]	@ (80144a0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8014252:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8014254:	e37c      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* SAI1 */
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801425c:	d168      	bne.n	8014330 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 801425e:	f000 fb85 	bl	801496c <HAL_RCCEx_GetRngCLKSource>
 8014262:	61f8      	str	r0, [r7, #28]

    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801426a:	d110      	bne.n	801428e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 801426c:	f7ff faec 	bl	8013848 <LL_RCC_LSI1_IsReady>
 8014270:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8014272:	f7ff fafb 	bl	801386c <LL_RCC_LSI2_IsReady>
 8014276:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	2b01      	cmp	r3, #1
 801427c:	d003      	beq.n	8014286 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	2b01      	cmp	r3, #1
 8014282:	f040 8365 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8014286:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801428a:	647b      	str	r3, [r7, #68]	@ 0x44
 801428c:	e360      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014294:	d109      	bne.n	80142aa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8014296:	f7ff fac5 	bl	8013824 <LL_RCC_LSE_IsReady>
 801429a:	4603      	mov	r3, r0
 801429c:	2b01      	cmp	r3, #1
 801429e:	f040 8357 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80142a2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80142a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80142a8:	e352      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80142b0:	d10e      	bne.n	80142d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80142b2:	f7ff fd38 	bl	8013d26 <LL_RCC_PLL_IsReady>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	f040 8349 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80142be:	f000 fcd5 	bl	8014c6c <RCC_PLL_GetFreqDomain_Q>
 80142c2:	4603      	mov	r3, r0
 80142c4:	4a77      	ldr	r2, [pc, #476]	@ (80144a4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80142c6:	fba2 2303 	umull	r2, r3, r2, r3
 80142ca:	085b      	lsrs	r3, r3, #1
 80142cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80142ce:	e33f      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	f1b3 5fe0 	cmp.w	r3, #469762048	@ 0x1c000000
 80142d6:	d114      	bne.n	8014302 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80142d8:	f7ff fada 	bl	8013890 <LL_RCC_MSI_IsReady>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b01      	cmp	r3, #1
 80142e0:	f040 8336 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80142e4:	f7ff fae5 	bl	80138b2 <LL_RCC_MSI_GetRange>
 80142e8:	4603      	mov	r3, r0
 80142ea:	091b      	lsrs	r3, r3, #4
 80142ec:	f003 030f 	and.w	r3, r3, #15
 80142f0:	4a6d      	ldr	r2, [pc, #436]	@ (80144a8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80142f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142f6:	4a6b      	ldr	r2, [pc, #428]	@ (80144a4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80142f8:	fba2 2303 	umull	r2, r3, r2, r3
 80142fc:	085b      	lsrs	r3, r3, #1
 80142fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8014300:	e326      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	f1b3 5fa0 	cmp.w	r3, #335544320	@ 0x14000000
 8014308:	d109      	bne.n	801431e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 801430a:	f7ff fd6d 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 801430e:	4603      	mov	r3, r0
 8014310:	2b01      	cmp	r3, #1
 8014312:	f040 831d 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8014316:	f000 fdab 	bl	8014e70 <RCC_PLLSAI1_GetFreqDomain_Q>
 801431a:	6478      	str	r0, [r7, #68]	@ 0x44
 801431c:	e318      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 801431e:	f7ff fa5d 	bl	80137dc <LL_RCC_HSI48_IsReady>
 8014322:	4603      	mov	r3, r0
 8014324:	2b01      	cmp	r3, #1
 8014326:	f040 8313 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI48_VALUE / 3U;
 801432a:	4b5c      	ldr	r3, [pc, #368]	@ (801449c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 801432c:	647b      	str	r3, [r7, #68]	@ 0x44
 801432e:	e30f      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      /* Nothing to do as frequency already initialized to 0U */
#endif /* RCC_HSI48_SUPPORT */
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014336:	d13f      	bne.n	80143b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8014338:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 801433c:	f7ff fc92 	bl	8013c64 <LL_RCC_GetUSBClockSource>
 8014340:	4603      	mov	r3, r0
 8014342:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8014346:	d01d      	beq.n	8014384 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8014348:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801434c:	d82b      	bhi.n	80143a6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 801434e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014352:	d003      	beq.n	801435c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8014354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014358:	d00a      	beq.n	8014370 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 801435a:	e024      	b.n	80143a6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
      case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 801435c:	f7ff fd44 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014360:	4603      	mov	r3, r0
 8014362:	2b01      	cmp	r3, #1
 8014364:	f040 82db 	bne.w	801491e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
        {
          frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8014368:	f000 fd82 	bl	8014e70 <RCC_PLLSAI1_GetFreqDomain_Q>
 801436c:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 801436e:	e2d6      	b.n	801491e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
#endif /* SAI1 */

      case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
        if (LL_RCC_PLL_IsReady() == 1U)
 8014370:	f7ff fcd9 	bl	8013d26 <LL_RCC_PLL_IsReady>
 8014374:	4603      	mov	r3, r0
 8014376:	2b01      	cmp	r3, #1
 8014378:	f040 82d3 	bne.w	8014922 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
        {
          frequency = RCC_PLL_GetFreqDomain_Q();
 801437c:	f000 fc76 	bl	8014c6c <RCC_PLL_GetFreqDomain_Q>
 8014380:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8014382:	e2ce      	b.n	8014922 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>

      case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
        if (LL_RCC_MSI_IsReady() == 1U)
 8014384:	f7ff fa84 	bl	8013890 <LL_RCC_MSI_IsReady>
 8014388:	4603      	mov	r3, r0
 801438a:	2b01      	cmp	r3, #1
 801438c:	f040 82cb 	bne.w	8014926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014390:	f7ff fa8f 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014394:	4603      	mov	r3, r0
 8014396:	091b      	lsrs	r3, r3, #4
 8014398:	f003 030f 	and.w	r3, r3, #15
 801439c:	4a42      	ldr	r2, [pc, #264]	@ (80144a8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 801439e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143a2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80143a4:	e2bf      	b.n	8014926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>

      default: /* HSI48 clock used as USB clock source */
        if (LL_RCC_HSI48_IsReady() == 1U)
 80143a6:	f7ff fa19 	bl	80137dc <LL_RCC_HSI48_IsReady>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	f040 82bc 	bne.w	801492a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
        {
          frequency = HSI48_VALUE;
 80143b2:	4b3e      	ldr	r3, [pc, #248]	@ (80144ac <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80143b4:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80143b6:	e2b8      	b.n	801492a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
    }
  }
#endif /* USB */
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d140      	bne.n	8014440 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80143be:	2003      	movs	r0, #3
 80143c0:	f7ff fbd9 	bl	8013b76 <LL_RCC_GetUSARTClockSource>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b03      	cmp	r3, #3
 80143c8:	d013      	beq.n	80143f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80143ca:	2b03      	cmp	r3, #3
 80143cc:	d81b      	bhi.n	8014406 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d002      	beq.n	80143d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80143d2:	2b02      	cmp	r3, #2
 80143d4:	d004      	beq.n	80143e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80143d6:	e016      	b.n	8014406 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 80143d8:	f7ff f86a 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 80143dc:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 80143de:	e2b7      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80143e0:	f7ff f9ea 	bl	80137b8 <LL_RCC_HSI_IsReady>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	f040 82a1 	bne.w	801492e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        {
          frequency = HSI_VALUE;
 80143ec:	4b2b      	ldr	r3, [pc, #172]	@ (801449c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80143ee:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80143f0:	e29d      	b.n	801492e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80143f2:	f7ff fa17 	bl	8013824 <LL_RCC_LSE_IsReady>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	f040 829a 	bne.w	8014932 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
        {
          frequency = LSE_VALUE;
 80143fe:	f248 0306 	movw	r3, #32774	@ 0x8006
 8014402:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8014404:	e295      	b.n	8014932 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>

      default: /* USART1 Clock is PCLK2 */
        frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8014406:	f7ff f853 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 801440a:	4604      	mov	r4, r0
 801440c:	f7ff fa89 	bl	8013922 <LL_RCC_GetAHBPrescaler>
 8014410:	4603      	mov	r3, r0
 8014412:	091b      	lsrs	r3, r3, #4
 8014414:	f003 030f 	and.w	r3, r3, #15
 8014418:	4a25      	ldr	r2, [pc, #148]	@ (80144b0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 801441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801441e:	fbb4 f4f3 	udiv	r4, r4, r3
 8014422:	f7ff fa96 	bl	8013952 <LL_RCC_GetAPB2Prescaler>
 8014426:	4603      	mov	r3, r0
 8014428:	0adb      	lsrs	r3, r3, #11
 801442a:	f003 0307 	and.w	r3, r3, #7
 801442e:	4a21      	ldr	r2, [pc, #132]	@ (80144b4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8014430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014434:	f003 031f 	and.w	r3, r3, #31
 8014438:	fa24 f303 	lsr.w	r3, r4, r3
 801443c:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB2Prescaler());
        break;
 801443e:	e287      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2b02      	cmp	r3, #2
 8014444:	d155      	bne.n	80144f2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8014446:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801444a:	f7ff fba4 	bl	8013b96 <LL_RCC_GetLPUARTClockSource>
 801444e:	4603      	mov	r3, r0
 8014450:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014454:	d016      	beq.n	8014484 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8014456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801445a:	d82d      	bhi.n	80144b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 801445c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014460:	d003      	beq.n	801446a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8014462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014466:	d004      	beq.n	8014472 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8014468:	e026      	b.n	80144b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 801446a:	f7ff f821 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 801446e:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8014470:	e26e      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8014472:	f7ff f9a1 	bl	80137b8 <LL_RCC_HSI_IsReady>
 8014476:	4603      	mov	r3, r0
 8014478:	2b01      	cmp	r3, #1
 801447a:	f040 825c 	bne.w	8014936 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
        {
          frequency = HSI_VALUE;
 801447e:	4b07      	ldr	r3, [pc, #28]	@ (801449c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8014480:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8014482:	e258      	b.n	8014936 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8014484:	f7ff f9ce 	bl	8013824 <LL_RCC_LSE_IsReady>
 8014488:	4603      	mov	r3, r0
 801448a:	2b01      	cmp	r3, #1
 801448c:	f040 8255 	bne.w	801493a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
        {
          frequency = LSE_VALUE;
 8014490:	f248 0306 	movw	r3, #32774	@ 0x8006
 8014494:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8014496:	e250      	b.n	801493a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8014498:	000f4240 	.word	0x000f4240
 801449c:	00f42400 	.word	0x00f42400
 80144a0:	001fff68 	.word	0x001fff68
 80144a4:	aaaaaaab 	.word	0xaaaaaaab
 80144a8:	0802072c 	.word	0x0802072c
 80144ac:	02dc6c00 	.word	0x02dc6c00
 80144b0:	080206cc 	.word	0x080206cc
 80144b4:	0802070c 	.word	0x0802070c

      default: /* LPUART1 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80144b8:	f7fe fffa 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 80144bc:	4604      	mov	r4, r0
 80144be:	f7ff fa30 	bl	8013922 <LL_RCC_GetAHBPrescaler>
 80144c2:	4603      	mov	r3, r0
 80144c4:	091b      	lsrs	r3, r3, #4
 80144c6:	f003 030f 	and.w	r3, r3, #15
 80144ca:	4aaf      	ldr	r2, [pc, #700]	@ (8014788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 80144cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144d0:	fbb4 f4f3 	udiv	r4, r4, r3
 80144d4:	f7ff fa31 	bl	801393a <LL_RCC_GetAPB1Prescaler>
 80144d8:	4603      	mov	r3, r0
 80144da:	0a1b      	lsrs	r3, r3, #8
 80144dc:	f003 0307 	and.w	r3, r3, #7
 80144e0:	4aaa      	ldr	r2, [pc, #680]	@ (801478c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 80144e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144e6:	f003 031f 	and.w	r3, r3, #31
 80144ea:	fa24 f303 	lsr.w	r3, r4, r3
 80144ee:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 80144f0:	e22e      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* LPUART1 */
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80144f8:	d12a      	bne.n	8014550 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80144fa:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
 80144fe:	f7ff fbbd 	bl	8013c7c <LL_RCC_GetADCClockSource>
 8014502:	4603      	mov	r3, r0
 8014504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014508:	d014      	beq.n	8014534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 801450a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801450e:	f200 8216 	bhi.w	801493e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8014512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014516:	d003      	beq.n	8014520 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8014518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801451c:	d00e      	beq.n	801453c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;

      default: /* No clock used as ADC clock source */
        break;
 801451e:	e20e      	b.n	801493e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8014520:	f7ff fc62 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014524:	4603      	mov	r3, r0
 8014526:	2b01      	cmp	r3, #1
 8014528:	f040 820b 	bne.w	8014942 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
          frequency = RCC_PLLSAI1_GetFreqDomain_R();
 801452c:	f000 fbf4 	bl	8014d18 <RCC_PLLSAI1_GetFreqDomain_R>
 8014530:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8014532:	e206      	b.n	8014942 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
        frequency = HAL_RCC_GetSysClockFreq();
 8014534:	f7fe ffbc 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8014538:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 801453a:	e209      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        if (LL_RCC_PLL_IsReady() == 1U)
 801453c:	f7ff fbf3 	bl	8013d26 <LL_RCC_PLL_IsReady>
 8014540:	4603      	mov	r3, r0
 8014542:	2b01      	cmp	r3, #1
 8014544:	f040 81ff 	bne.w	8014946 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
          frequency = RCC_PLL_GetFreqDomain_P();
 8014548:	f000 fb3a 	bl	8014bc0 <RCC_PLL_GetFreqDomain_P>
 801454c:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 801454e:	e1fa      	b.n	8014946 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b04      	cmp	r3, #4
 8014554:	d135      	bne.n	80145c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8014556:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 801455a:	f7ff fb2c 	bl	8013bb6 <LL_RCC_GetI2CClockSource>
 801455e:	4603      	mov	r3, r0
 8014560:	4a8b      	ldr	r2, [pc, #556]	@ (8014790 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
 8014562:	4293      	cmp	r3, r2
 8014564:	d003      	beq.n	801456e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8014566:	4a8b      	ldr	r2, [pc, #556]	@ (8014794 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8014568:	4293      	cmp	r3, r2
 801456a:	d004      	beq.n	8014576 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 801456c:	e00c      	b.n	8014588 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
    {
      case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 801456e:	f7fe ff9f 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8014572:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8014574:	e1ec      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8014576:	f7ff f91f 	bl	80137b8 <LL_RCC_HSI_IsReady>
 801457a:	4603      	mov	r3, r0
 801457c:	2b01      	cmp	r3, #1
 801457e:	f040 81e4 	bne.w	801494a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
        {
          frequency = HSI_VALUE;
 8014582:	4b85      	ldr	r3, [pc, #532]	@ (8014798 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8014584:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8014586:	e1e0      	b.n	801494a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>

      default: /* I2C1 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8014588:	f7fe ff92 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 801458c:	4604      	mov	r4, r0
 801458e:	f7ff f9c8 	bl	8013922 <LL_RCC_GetAHBPrescaler>
 8014592:	4603      	mov	r3, r0
 8014594:	091b      	lsrs	r3, r3, #4
 8014596:	f003 030f 	and.w	r3, r3, #15
 801459a:	4a7b      	ldr	r2, [pc, #492]	@ (8014788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 801459c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80145a4:	f7ff f9c9 	bl	801393a <LL_RCC_GetAPB1Prescaler>
 80145a8:	4603      	mov	r3, r0
 80145aa:	0a1b      	lsrs	r3, r3, #8
 80145ac:	f003 0307 	and.w	r3, r3, #7
 80145b0:	4a76      	ldr	r2, [pc, #472]	@ (801478c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 80145b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145b6:	f003 031f 	and.w	r3, r3, #31
 80145ba:	fa24 f303 	lsr.w	r3, r4, r3
 80145be:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 80145c0:	e1c6      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b08      	cmp	r3, #8
 80145c6:	d135      	bne.n	8014634 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80145c8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80145cc:	f7ff faf3 	bl	8013bb6 <LL_RCC_GetI2CClockSource>
 80145d0:	4603      	mov	r3, r0
 80145d2:	4a72      	ldr	r2, [pc, #456]	@ (801479c <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 80145d4:	4293      	cmp	r3, r2
 80145d6:	d003      	beq.n	80145e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 80145d8:	4a71      	ldr	r2, [pc, #452]	@ (80147a0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80145da:	4293      	cmp	r3, r2
 80145dc:	d004      	beq.n	80145e8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
 80145de:	e00c      	b.n	80145fa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 80145e0:	f7fe ff66 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 80145e4:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 80145e6:	e1b3      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80145e8:	f7ff f8e6 	bl	80137b8 <LL_RCC_HSI_IsReady>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	f040 81ad 	bne.w	801494e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          frequency = HSI_VALUE;
 80145f4:	4b68      	ldr	r3, [pc, #416]	@ (8014798 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80145f6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80145f8:	e1a9      	b.n	801494e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>

      default: /* I2C3 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80145fa:	f7fe ff59 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 80145fe:	4604      	mov	r4, r0
 8014600:	f7ff f98f 	bl	8013922 <LL_RCC_GetAHBPrescaler>
 8014604:	4603      	mov	r3, r0
 8014606:	091b      	lsrs	r3, r3, #4
 8014608:	f003 030f 	and.w	r3, r3, #15
 801460c:	4a5e      	ldr	r2, [pc, #376]	@ (8014788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 801460e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014612:	fbb4 f4f3 	udiv	r4, r4, r3
 8014616:	f7ff f990 	bl	801393a <LL_RCC_GetAPB1Prescaler>
 801461a:	4603      	mov	r3, r0
 801461c:	0a1b      	lsrs	r3, r3, #8
 801461e:	f003 0307 	and.w	r3, r3, #7
 8014622:	4a5a      	ldr	r2, [pc, #360]	@ (801478c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8014624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014628:	f003 031f 	and.w	r3, r3, #31
 801462c:	fa24 f303 	lsr.w	r3, r4, r3
 8014630:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8014632:	e18d      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* I2C3 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2b10      	cmp	r3, #16
 8014638:	d151      	bne.n	80146de <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 801463a:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801463e:	f7ff face 	bl	8013bde <LL_RCC_GetLPTIMClockSource>
 8014642:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8014644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014646:	4a57      	ldr	r2, [pc, #348]	@ (80147a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8014648:	4293      	cmp	r3, r2
 801464a:	d110      	bne.n	801466e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 801464c:	f7ff f8fc 	bl	8013848 <LL_RCC_LSI1_IsReady>
 8014650:	6278      	str	r0, [r7, #36]	@ 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8014652:	f7ff f90b 	bl	801386c <LL_RCC_LSI2_IsReady>
 8014656:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8014658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801465a:	2b01      	cmp	r3, #1
 801465c:	d003      	beq.n	8014666 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 801465e:	6a3b      	ldr	r3, [r7, #32]
 8014660:	2b01      	cmp	r3, #1
 8014662:	f040 8175 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8014666:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801466a:	647b      	str	r3, [r7, #68]	@ 0x44
 801466c:	e170      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 801466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014670:	4a4d      	ldr	r2, [pc, #308]	@ (80147a8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
 8014672:	4293      	cmp	r3, r2
 8014674:	d108      	bne.n	8014688 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8014676:	f7ff f89f 	bl	80137b8 <LL_RCC_HSI_IsReady>
 801467a:	4603      	mov	r3, r0
 801467c:	2b01      	cmp	r3, #1
 801467e:	f040 8167 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE;
 8014682:	4b45      	ldr	r3, [pc, #276]	@ (8014798 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8014684:	647b      	str	r3, [r7, #68]	@ 0x44
 8014686:	e163      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 8014688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801468a:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 801468e:	d109      	bne.n	80146a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8014690:	f7ff f8c8 	bl	8013824 <LL_RCC_LSE_IsReady>
 8014694:	4603      	mov	r3, r0
 8014696:	2b01      	cmp	r3, #1
 8014698:	f040 815a 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 801469c:	f248 0306 	movw	r3, #32774	@ 0x8006
 80146a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80146a2:	e155      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80146a4:	f7fe ff04 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 80146a8:	4604      	mov	r4, r0
 80146aa:	f7ff f93a 	bl	8013922 <LL_RCC_GetAHBPrescaler>
 80146ae:	4603      	mov	r3, r0
 80146b0:	091b      	lsrs	r3, r3, #4
 80146b2:	f003 030f 	and.w	r3, r3, #15
 80146b6:	4a34      	ldr	r2, [pc, #208]	@ (8014788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 80146b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80146c0:	f7ff f93b 	bl	801393a <LL_RCC_GetAPB1Prescaler>
 80146c4:	4603      	mov	r3, r0
 80146c6:	0a1b      	lsrs	r3, r3, #8
 80146c8:	f003 0307 	and.w	r3, r3, #7
 80146cc:	4a2f      	ldr	r2, [pc, #188]	@ (801478c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 80146ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146d2:	f003 031f 	and.w	r3, r3, #31
 80146d6:	fa24 f303 	lsr.w	r3, r4, r3
 80146da:	647b      	str	r3, [r7, #68]	@ 0x44
 80146dc:	e138      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
                                                                    LL_RCC_GetAHBPrescaler()),
                                           LL_RCC_GetAPB1Prescaler());
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2b20      	cmp	r3, #32
 80146e2:	d167      	bne.n	80147b4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 80146e4:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80146e8:	f7ff fa79 	bl	8013bde <LL_RCC_GetLPTIMClockSource>
 80146ec:	6378      	str	r0, [r7, #52]	@ 0x34

    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 80146ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146f0:	4a2e      	ldr	r2, [pc, #184]	@ (80147ac <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d110      	bne.n	8014718 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80146f6:	f7ff f8a7 	bl	8013848 <LL_RCC_LSI1_IsReady>
 80146fa:	6338      	str	r0, [r7, #48]	@ 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80146fc:	f7ff f8b6 	bl	801386c <LL_RCC_LSI2_IsReady>
 8014700:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8014702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014704:	2b01      	cmp	r3, #1
 8014706:	d003      	beq.n	8014710 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8014708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801470a:	2b01      	cmp	r3, #1
 801470c:	f040 8120 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8014710:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8014714:	647b      	str	r3, [r7, #68]	@ 0x44
 8014716:	e11b      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8014718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801471a:	4a25      	ldr	r2, [pc, #148]	@ (80147b0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 801471c:	4293      	cmp	r3, r2
 801471e:	d108      	bne.n	8014732 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8014720:	f7ff f84a 	bl	80137b8 <LL_RCC_HSI_IsReady>
 8014724:	4603      	mov	r3, r0
 8014726:	2b01      	cmp	r3, #1
 8014728:	f040 8112 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE;
 801472c:	4b1a      	ldr	r3, [pc, #104]	@ (8014798 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 801472e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014730:	e10e      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8014732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014734:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8014738:	d109      	bne.n	801474e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 801473a:	f7ff f873 	bl	8013824 <LL_RCC_LSE_IsReady>
 801473e:	4603      	mov	r3, r0
 8014740:	2b01      	cmp	r3, #1
 8014742:	f040 8105 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8014746:	f248 0306 	movw	r3, #32774	@ 0x8006
 801474a:	647b      	str	r3, [r7, #68]	@ 0x44
 801474c:	e100      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 801474e:	f7fe feaf 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8014752:	4604      	mov	r4, r0
 8014754:	f7ff f8e5 	bl	8013922 <LL_RCC_GetAHBPrescaler>
 8014758:	4603      	mov	r3, r0
 801475a:	091b      	lsrs	r3, r3, #4
 801475c:	f003 030f 	and.w	r3, r3, #15
 8014760:	4a09      	ldr	r2, [pc, #36]	@ (8014788 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8014762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014766:	fbb4 f4f3 	udiv	r4, r4, r3
 801476a:	f7ff f8e6 	bl	801393a <LL_RCC_GetAPB1Prescaler>
 801476e:	4603      	mov	r3, r0
 8014770:	0a1b      	lsrs	r3, r3, #8
 8014772:	f003 0307 	and.w	r3, r3, #7
 8014776:	4a05      	ldr	r2, [pc, #20]	@ (801478c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8014778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801477c:	f003 031f 	and.w	r3, r3, #31
 8014780:	fa24 f303 	lsr.w	r3, r4, r3
 8014784:	647b      	str	r3, [r7, #68]	@ 0x44
 8014786:	e0e3      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8014788:	080206cc 	.word	0x080206cc
 801478c:	0802070c 	.word	0x0802070c
 8014790:	00030100 	.word	0x00030100
 8014794:	00030200 	.word	0x00030200
 8014798:	00f42400 	.word	0x00f42400
 801479c:	00301000 	.word	0x00301000
 80147a0:	00302000 	.word	0x00302000
 80147a4:	000c0004 	.word	0x000c0004
 80147a8:	000c0008 	.word	0x000c0008
 80147ac:	00300010 	.word	0x00300010
 80147b0:	00300020 	.word	0x00300020
                                                                    LL_RCC_GetAHBPrescaler()),
                                           LL_RCC_GetAPB1Prescaler());
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80147ba:	d119      	bne.n	80147f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 80147bc:	f7ff f8a4 	bl	8013908 <LL_RCC_GetRFWKPClockSource>
 80147c0:	63b8      	str	r0, [r7, #56]	@ 0x38

    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 80147c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80147c8:	d109      	bne.n	80147de <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80147ca:	f7ff f82b 	bl	8013824 <LL_RCC_LSE_IsReady>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	f040 80bd 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80147d6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80147da:	647b      	str	r3, [r7, #68]	@ 0x44
 80147dc:	e0b8      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 80147de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80147e4:	f040 80b4 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      frequency = HSE_VALUE / 1024U;
 80147e8:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80147ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80147ee:	e0af      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80147f6:	f040 80ab 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 80147fa:	f7ff f8ca 	bl	8013992 <LL_RCC_GetSMPSClockSource>
 80147fe:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8014800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014802:	2b00      	cmp	r3, #0
 8014804:	d115      	bne.n	8014832 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8014806:	f7fe ffd7 	bl	80137b8 <LL_RCC_HSI_IsReady>
 801480a:	4603      	mov	r3, r0
 801480c:	2b01      	cmp	r3, #1
 801480e:	f040 809f 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8014812:	4952      	ldr	r1, [pc, #328]	@ (801495c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8014814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	00db      	lsls	r3, r3, #3
 801481e:	440b      	add	r3, r1
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	4a4f      	ldr	r2, [pc, #316]	@ (8014960 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>)
 8014824:	fbb2 f3f3 	udiv	r3, r2, r3
 8014828:	647b      	str	r3, [r7, #68]	@ 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 801482a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801482c:	085b      	lsrs	r3, r3, #1
 801482e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014830:	e08e      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8014832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014838:	d116      	bne.n	8014868 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 801483a:	f7fe ffab 	bl	8013794 <LL_RCC_HSE_IsReady>
 801483e:	4603      	mov	r3, r0
 8014840:	2b01      	cmp	r3, #1
 8014842:	f040 8085 	bne.w	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8014846:	4945      	ldr	r1, [pc, #276]	@ (801495c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8014848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	440b      	add	r3, r1
 8014854:	3314      	adds	r3, #20
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4a42      	ldr	r2, [pc, #264]	@ (8014964 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>)
 801485a:	fbb2 f3f3 	udiv	r3, r2, r3
 801485e:	647b      	str	r3, [r7, #68]	@ 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8014860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014862:	085b      	lsrs	r3, r3, #1
 8014864:	647b      	str	r3, [r7, #68]	@ 0x44
 8014866:	e073      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8014868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801486a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801486e:	d16f      	bne.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      switch (LL_RCC_MSI_GetRange())
 8014870:	f7ff f81f 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014874:	4603      	mov	r3, r0
 8014876:	2bb0      	cmp	r3, #176	@ 0xb0
 8014878:	d037      	beq.n	80148ea <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 801487a:	2bb0      	cmp	r3, #176	@ 0xb0
 801487c:	d844      	bhi.n	8014908 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801487e:	2ba0      	cmp	r3, #160	@ 0xa0
 8014880:	d024      	beq.n	80148cc <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8014882:	2ba0      	cmp	r3, #160	@ 0xa0
 8014884:	d840      	bhi.n	8014908 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8014886:	2b80      	cmp	r3, #128	@ 0x80
 8014888:	d002      	beq.n	8014890 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 801488a:	2b90      	cmp	r3, #144	@ 0x90
 801488c:	d00f      	beq.n	80148ae <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          break;
        case LL_RCC_MSIRANGE_11:
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
          break;
        default:
          break;
 801488e:	e03b      	b.n	8014908 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8014890:	4b35      	ldr	r3, [pc, #212]	@ (8014968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8014892:	6a19      	ldr	r1, [r3, #32]
 8014894:	4831      	ldr	r0, [pc, #196]	@ (801495c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8014896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014898:	4613      	mov	r3, r2
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	4413      	add	r3, r2
 801489e:	00db      	lsls	r3, r3, #3
 80148a0:	4403      	add	r3, r0
 80148a2:	3310      	adds	r3, #16
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80148aa:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 80148ac:	e02d      	b.n	801490a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 80148ae:	4b2e      	ldr	r3, [pc, #184]	@ (8014968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80148b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80148b2:	482a      	ldr	r0, [pc, #168]	@ (801495c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 80148b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80148b6:	4613      	mov	r3, r2
 80148b8:	005b      	lsls	r3, r3, #1
 80148ba:	4413      	add	r3, r2
 80148bc:	00db      	lsls	r3, r3, #3
 80148be:	4403      	add	r3, r0
 80148c0:	330c      	adds	r3, #12
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80148c8:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 80148ca:	e01e      	b.n	801490a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80148cc:	4b26      	ldr	r3, [pc, #152]	@ (8014968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80148ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80148d0:	4822      	ldr	r0, [pc, #136]	@ (801495c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 80148d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80148d4:	4613      	mov	r3, r2
 80148d6:	005b      	lsls	r3, r3, #1
 80148d8:	4413      	add	r3, r2
 80148da:	00db      	lsls	r3, r3, #3
 80148dc:	4403      	add	r3, r0
 80148de:	3308      	adds	r3, #8
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80148e6:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 80148e8:	e00f      	b.n	801490a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 80148ea:	4b1f      	ldr	r3, [pc, #124]	@ (8014968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80148ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80148ee:	481b      	ldr	r0, [pc, #108]	@ (801495c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 80148f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80148f2:	4613      	mov	r3, r2
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	4413      	add	r3, r2
 80148f8:	00db      	lsls	r3, r3, #3
 80148fa:	4403      	add	r3, r0
 80148fc:	3304      	adds	r3, #4
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	fbb1 f3f3 	udiv	r3, r1, r3
 8014904:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8014906:	e000      	b.n	801490a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          break;
 8014908:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 801490a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801490c:	085b      	lsrs	r3, r3, #1
 801490e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014910:	e01e      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014912:	bf00      	nop
 8014914:	e01c      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014916:	bf00      	nop
 8014918:	e01a      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801491a:	bf00      	nop
 801491c:	e018      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801491e:	bf00      	nop
 8014920:	e016      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014922:	bf00      	nop
 8014924:	e014      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014926:	bf00      	nop
 8014928:	e012      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801492a:	bf00      	nop
 801492c:	e010      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801492e:	bf00      	nop
 8014930:	e00e      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014932:	bf00      	nop
 8014934:	e00c      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014936:	bf00      	nop
 8014938:	e00a      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801493a:	bf00      	nop
 801493c:	e008      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801493e:	bf00      	nop
 8014940:	e006      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014942:	bf00      	nop
 8014944:	e004      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8014946:	bf00      	nop
 8014948:	e002      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801494a:	bf00      	nop
 801494c:	e000      	b.n	8014950 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 801494e:	bf00      	nop
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif /* RCC_SMPS_SUPPORT */

  return (frequency);
 8014950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014952:	4618      	mov	r0, r3
 8014954:	374c      	adds	r7, #76	@ 0x4c
 8014956:	46bd      	mov	sp, r7
 8014958:	bd90      	pop	{r4, r7, pc}
 801495a:	bf00      	nop
 801495c:	0802076c 	.word	0x0802076c
 8014960:	00f42400 	.word	0x00f42400
 8014964:	01e84800 	.word	0x01e84800
 8014968:	0802072c 	.word	0x0802072c

0801496c <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8014972:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8014976:	f7ff f955 	bl	8013c24 <LL_RCC_GetRNGClockSource>
 801497a:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d108      	bne.n	8014994 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8014982:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 8014986:	f7ff f95d 	bl	8013c44 <LL_RCC_GetCLK48ClockSource>
 801498a:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014992:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8014994:	687b      	ldr	r3, [r7, #4]
}
 8014996:	4618      	mov	r0, r3
 8014998:	3708      	adds	r7, #8
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b084      	sub	sp, #16
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80149a6:	2300      	movs	r3, #0
 80149a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80149aa:	f7ff fa0e 	bl	8013dca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80149ae:	f7fb fba9 	bl	8010104 <HAL_GetTick>
 80149b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80149b4:	e009      	b.n	80149ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80149b6:	f7fb fba5 	bl	8010104 <HAL_GetTick>
 80149ba:	4602      	mov	r2, r0
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	1ad3      	subs	r3, r2, r3
 80149c0:	2b02      	cmp	r3, #2
 80149c2:	d902      	bls.n	80149ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80149c4:	2303      	movs	r3, #3
 80149c6:	73fb      	strb	r3, [r7, #15]
      break;
 80149c8:	e004      	b.n	80149d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80149ca:	f7ff fa0d 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 80149ce:	4603      	mov	r3, r0
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d1f0      	bne.n	80149b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80149d4:	7bfb      	ldrb	r3, [r7, #15]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d137      	bne.n	8014a4a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80149da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149de:	691b      	ldr	r3, [r3, #16]
 80149e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	021b      	lsls	r3, r3, #8
 80149ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80149ee:	4313      	orrs	r3, r2
 80149f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80149f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80149f6:	691b      	ldr	r3, [r3, #16]
 80149f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014a04:	4313      	orrs	r3, r2
 8014a06:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8014a08:	f7ff f9d0 	bl	8013dac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014a0c:	f7fb fb7a 	bl	8010104 <HAL_GetTick>
 8014a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014a12:	e009      	b.n	8014a28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014a14:	f7fb fb76 	bl	8010104 <HAL_GetTick>
 8014a18:	4602      	mov	r2, r0
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	1ad3      	subs	r3, r2, r3
 8014a1e:	2b02      	cmp	r3, #2
 8014a20:	d902      	bls.n	8014a28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8014a22:	2303      	movs	r3, #3
 8014a24:	73fb      	strb	r3, [r7, #15]
        break;
 8014a26:	e004      	b.n	8014a32 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014a28:	f7ff f9de 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d1f0      	bne.n	8014a14 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8014a32:	7bfb      	ldrb	r3, [r7, #15]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d108      	bne.n	8014a4a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8014a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a3c:	691a      	ldr	r2, [r3, #16]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	691b      	ldr	r3, [r3, #16]
 8014a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014a46:	4313      	orrs	r3, r2
 8014a48:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8014a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3710      	adds	r7, #16
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8014a60:	f7ff f9b3 	bl	8013dca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014a64:	f7fb fb4e 	bl	8010104 <HAL_GetTick>
 8014a68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014a6a:	e009      	b.n	8014a80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014a6c:	f7fb fb4a 	bl	8010104 <HAL_GetTick>
 8014a70:	4602      	mov	r2, r0
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	2b02      	cmp	r3, #2
 8014a78:	d902      	bls.n	8014a80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8014a7a:	2303      	movs	r3, #3
 8014a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8014a7e:	e004      	b.n	8014a8a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014a80:	f7ff f9b2 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d1f0      	bne.n	8014a6c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8014a8a:	7bfb      	ldrb	r3, [r7, #15]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d137      	bne.n	8014b00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8014a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014a94:	691b      	ldr	r3, [r3, #16]
 8014a96:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	021b      	lsls	r3, r3, #8
 8014aa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014aa4:	4313      	orrs	r3, r2
 8014aa6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8014aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014aac:	691b      	ldr	r3, [r3, #16]
 8014aae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	689b      	ldr	r3, [r3, #8]
 8014ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014aba:	4313      	orrs	r3, r2
 8014abc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8014abe:	f7ff f975 	bl	8013dac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014ac2:	f7fb fb1f 	bl	8010104 <HAL_GetTick>
 8014ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014ac8:	e009      	b.n	8014ade <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014aca:	f7fb fb1b 	bl	8010104 <HAL_GetTick>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	1ad3      	subs	r3, r2, r3
 8014ad4:	2b02      	cmp	r3, #2
 8014ad6:	d902      	bls.n	8014ade <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8014ad8:	2303      	movs	r3, #3
 8014ada:	73fb      	strb	r3, [r7, #15]
        break;
 8014adc:	e004      	b.n	8014ae8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014ade:	f7ff f983 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d1f0      	bne.n	8014aca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8014ae8:	7bfb      	ldrb	r3, [r7, #15]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d108      	bne.n	8014b00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8014aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014af2:	691a      	ldr	r2, [r3, #16]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	691b      	ldr	r3, [r3, #16]
 8014af8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014afc:	4313      	orrs	r3, r2
 8014afe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8014b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014b12:	2300      	movs	r3, #0
 8014b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8014b16:	f7ff f958 	bl	8013dca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8014b1a:	f7fb faf3 	bl	8010104 <HAL_GetTick>
 8014b1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014b20:	e009      	b.n	8014b36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014b22:	f7fb faef 	bl	8010104 <HAL_GetTick>
 8014b26:	4602      	mov	r2, r0
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	1ad3      	subs	r3, r2, r3
 8014b2c:	2b02      	cmp	r3, #2
 8014b2e:	d902      	bls.n	8014b36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8014b30:	2303      	movs	r3, #3
 8014b32:	73fb      	strb	r3, [r7, #15]
      break;
 8014b34:	e004      	b.n	8014b40 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8014b36:	f7ff f957 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d1f0      	bne.n	8014b22 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8014b40:	7bfb      	ldrb	r3, [r7, #15]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d137      	bne.n	8014bb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8014b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b4a:	691b      	ldr	r3, [r3, #16]
 8014b4c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	021b      	lsls	r3, r3, #8
 8014b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014b5a:	4313      	orrs	r3, r2
 8014b5c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8014b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014b62:	691b      	ldr	r3, [r3, #16]
 8014b64:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014b70:	4313      	orrs	r3, r2
 8014b72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8014b74:	f7ff f91a 	bl	8013dac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014b78:	f7fb fac4 	bl	8010104 <HAL_GetTick>
 8014b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014b7e:	e009      	b.n	8014b94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8014b80:	f7fb fac0 	bl	8010104 <HAL_GetTick>
 8014b84:	4602      	mov	r2, r0
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	1ad3      	subs	r3, r2, r3
 8014b8a:	2b02      	cmp	r3, #2
 8014b8c:	d902      	bls.n	8014b94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8014b8e:	2303      	movs	r3, #3
 8014b90:	73fb      	strb	r3, [r7, #15]
        break;
 8014b92:	e004      	b.n	8014b9e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8014b94:	f7ff f928 	bl	8013de8 <LL_RCC_PLLSAI1_IsReady>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d1f0      	bne.n	8014b80 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8014b9e:	7bfb      	ldrb	r3, [r7, #15]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d108      	bne.n	8014bb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8014ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ba8:	691a      	ldr	r2, [r3, #16]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014bb2:	4313      	orrs	r3, r2
 8014bb4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8014bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3710      	adds	r7, #16
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}

08014bc0 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8014bc0:	b590      	push	{r4, r7, lr}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8014bc6:	f7ff f952 	bl	8013e6e <LL_RCC_PLL_GetMainSource>
 8014bca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	d017      	beq.n	8014c02 <RCC_PLL_GetFreqDomain_P+0x42>
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d81f      	bhi.n	8014c18 <RCC_PLL_GetFreqDomain_P+0x58>
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	d003      	beq.n	8014be6 <RCC_PLL_GetFreqDomain_P+0x26>
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	2b02      	cmp	r3, #2
 8014be2:	d00b      	beq.n	8014bfc <RCC_PLL_GetFreqDomain_P+0x3c>
 8014be4:	e018      	b.n	8014c18 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014be6:	f7fe fe64 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014bea:	4603      	mov	r3, r0
 8014bec:	091b      	lsrs	r3, r3, #4
 8014bee:	f003 030f 	and.w	r3, r3, #15
 8014bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8014c60 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8014bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bf8:	607b      	str	r3, [r7, #4]
      break;
 8014bfa:	e018      	b.n	8014c2e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8014bfc:	4b19      	ldr	r3, [pc, #100]	@ (8014c64 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8014bfe:	607b      	str	r3, [r7, #4]
      break;
 8014c00:	e015      	b.n	8014c2e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014c02:	f7fe fdb5 	bl	8013770 <LL_RCC_HSE_IsEnabledDiv2>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d102      	bne.n	8014c12 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8014c0c:	4b15      	ldr	r3, [pc, #84]	@ (8014c64 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8014c0e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8014c10:	e00d      	b.n	8014c2e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8014c12:	4b15      	ldr	r3, [pc, #84]	@ (8014c68 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8014c14:	607b      	str	r3, [r7, #4]
      break;
 8014c16:	e00a      	b.n	8014c2e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014c18:	f7fe fe4b 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	091b      	lsrs	r3, r3, #4
 8014c20:	f003 030f 	and.w	r3, r3, #15
 8014c24:	4a0e      	ldr	r2, [pc, #56]	@ (8014c60 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8014c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c2a:	607b      	str	r3, [r7, #4]
      break;
 8014c2c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8014c2e:	f7ff f88c 	bl	8013d4a <LL_RCC_PLL_GetN>
 8014c32:	4602      	mov	r2, r0
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	fb03 f402 	mul.w	r4, r3, r2
 8014c3a:	f7ff f8ab 	bl	8013d94 <LL_RCC_PLL_GetDivider>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	091b      	lsrs	r3, r3, #4
 8014c42:	3301      	adds	r3, #1
 8014c44:	fbb4 f4f3 	udiv	r4, r4, r3
 8014c48:	f7ff f88c 	bl	8013d64 <LL_RCC_PLL_GetP>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	0c5b      	lsrs	r3, r3, #17
 8014c50:	3301      	adds	r3, #1
 8014c52:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	370c      	adds	r7, #12
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd90      	pop	{r4, r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	0802072c 	.word	0x0802072c
 8014c64:	00f42400 	.word	0x00f42400
 8014c68:	01e84800 	.word	0x01e84800

08014c6c <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8014c6c:	b590      	push	{r4, r7, lr}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8014c72:	f7ff f8fc 	bl	8013e6e <LL_RCC_PLL_GetMainSource>
 8014c76:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	2b03      	cmp	r3, #3
 8014c7c:	d017      	beq.n	8014cae <RCC_PLL_GetFreqDomain_Q+0x42>
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	2b03      	cmp	r3, #3
 8014c82:	d81f      	bhi.n	8014cc4 <RCC_PLL_GetFreqDomain_Q+0x58>
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d003      	beq.n	8014c92 <RCC_PLL_GetFreqDomain_Q+0x26>
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	2b02      	cmp	r3, #2
 8014c8e:	d00b      	beq.n	8014ca8 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8014c90:	e018      	b.n	8014cc4 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014c92:	f7fe fe0e 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014c96:	4603      	mov	r3, r0
 8014c98:	091b      	lsrs	r3, r3, #4
 8014c9a:	f003 030f 	and.w	r3, r3, #15
 8014c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8014d0c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8014ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ca4:	607b      	str	r3, [r7, #4]
      break;
 8014ca6:	e018      	b.n	8014cda <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8014ca8:	4b19      	ldr	r3, [pc, #100]	@ (8014d10 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8014caa:	607b      	str	r3, [r7, #4]
      break;
 8014cac:	e015      	b.n	8014cda <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014cae:	f7fe fd5f 	bl	8013770 <LL_RCC_HSE_IsEnabledDiv2>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d102      	bne.n	8014cbe <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8014cb8:	4b15      	ldr	r3, [pc, #84]	@ (8014d10 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8014cba:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8014cbc:	e00d      	b.n	8014cda <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8014cbe:	4b15      	ldr	r3, [pc, #84]	@ (8014d14 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8014cc0:	607b      	str	r3, [r7, #4]
      break;
 8014cc2:	e00a      	b.n	8014cda <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014cc4:	f7fe fdf5 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	091b      	lsrs	r3, r3, #4
 8014ccc:	f003 030f 	and.w	r3, r3, #15
 8014cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8014d0c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8014cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cd6:	607b      	str	r3, [r7, #4]
      break;
 8014cd8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8014cda:	f7ff f836 	bl	8013d4a <LL_RCC_PLL_GetN>
 8014cde:	4602      	mov	r2, r0
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	fb03 f402 	mul.w	r4, r3, r2
 8014ce6:	f7ff f855 	bl	8013d94 <LL_RCC_PLL_GetDivider>
 8014cea:	4603      	mov	r3, r0
 8014cec:	091b      	lsrs	r3, r3, #4
 8014cee:	3301      	adds	r3, #1
 8014cf0:	fbb4 f4f3 	udiv	r4, r4, r3
 8014cf4:	f7ff f842 	bl	8013d7c <LL_RCC_PLL_GetQ>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	0e5b      	lsrs	r3, r3, #25
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd90      	pop	{r4, r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	0802072c 	.word	0x0802072c
 8014d10:	00f42400 	.word	0x00f42400
 8014d14:	01e84800 	.word	0x01e84800

08014d18 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8014d18:	b590      	push	{r4, r7, lr}
 8014d1a:	b083      	sub	sp, #12
 8014d1c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8014d1e:	f7ff f8a6 	bl	8013e6e <LL_RCC_PLL_GetMainSource>
 8014d22:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	2b03      	cmp	r3, #3
 8014d28:	d017      	beq.n	8014d5a <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	2b03      	cmp	r3, #3
 8014d2e:	d81f      	bhi.n	8014d70 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d003      	beq.n	8014d3e <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	2b02      	cmp	r3, #2
 8014d3a:	d00b      	beq.n	8014d54 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8014d3c:	e018      	b.n	8014d70 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014d3e:	f7fe fdb8 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014d42:	4603      	mov	r3, r0
 8014d44:	091b      	lsrs	r3, r3, #4
 8014d46:	f003 030f 	and.w	r3, r3, #15
 8014d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8014db8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8014d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d50:	607b      	str	r3, [r7, #4]
      break;
 8014d52:	e018      	b.n	8014d86 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8014d54:	4b19      	ldr	r3, [pc, #100]	@ (8014dbc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8014d56:	607b      	str	r3, [r7, #4]
      break;
 8014d58:	e015      	b.n	8014d86 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014d5a:	f7fe fd09 	bl	8013770 <LL_RCC_HSE_IsEnabledDiv2>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d102      	bne.n	8014d6a <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8014d64:	4b15      	ldr	r3, [pc, #84]	@ (8014dbc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8014d66:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8014d68:	e00d      	b.n	8014d86 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8014d6a:	4b15      	ldr	r3, [pc, #84]	@ (8014dc0 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8014d6c:	607b      	str	r3, [r7, #4]
      break;
 8014d6e:	e00a      	b.n	8014d86 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014d70:	f7fe fd9f 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014d74:	4603      	mov	r3, r0
 8014d76:	091b      	lsrs	r3, r3, #4
 8014d78:	f003 030f 	and.w	r3, r3, #15
 8014d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8014db8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8014d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d82:	607b      	str	r3, [r7, #4]
      break;
 8014d84:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8014d86:	f7ff f841 	bl	8013e0c <LL_RCC_PLLSAI1_GetN>
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	fb03 f402 	mul.w	r4, r3, r2
 8014d92:	f7fe ffff 	bl	8013d94 <LL_RCC_PLL_GetDivider>
 8014d96:	4603      	mov	r3, r0
 8014d98:	091b      	lsrs	r3, r3, #4
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	fbb4 f4f3 	udiv	r4, r4, r3
 8014da0:	f7ff f859 	bl	8013e56 <LL_RCC_PLLSAI1_GetR>
 8014da4:	4603      	mov	r3, r0
 8014da6:	0f5b      	lsrs	r3, r3, #29
 8014da8:	3301      	adds	r3, #1
 8014daa:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd90      	pop	{r4, r7, pc}
 8014db6:	bf00      	nop
 8014db8:	0802072c 	.word	0x0802072c
 8014dbc:	00f42400 	.word	0x00f42400
 8014dc0:	01e84800 	.word	0x01e84800

08014dc4 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8014dc4:	b590      	push	{r4, r7, lr}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8014dca:	f7ff f850 	bl	8013e6e <LL_RCC_PLL_GetMainSource>
 8014dce:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	2b03      	cmp	r3, #3
 8014dd4:	d017      	beq.n	8014e06 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	2b03      	cmp	r3, #3
 8014dda:	d81f      	bhi.n	8014e1c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d003      	beq.n	8014dea <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	2b02      	cmp	r3, #2
 8014de6:	d00b      	beq.n	8014e00 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8014de8:	e018      	b.n	8014e1c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014dea:	f7fe fd62 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014dee:	4603      	mov	r3, r0
 8014df0:	091b      	lsrs	r3, r3, #4
 8014df2:	f003 030f 	and.w	r3, r3, #15
 8014df6:	4a1b      	ldr	r2, [pc, #108]	@ (8014e64 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8014df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dfc:	607b      	str	r3, [r7, #4]
      break;
 8014dfe:	e018      	b.n	8014e32 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8014e00:	4b19      	ldr	r3, [pc, #100]	@ (8014e68 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8014e02:	607b      	str	r3, [r7, #4]
      break;
 8014e04:	e015      	b.n	8014e32 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014e06:	f7fe fcb3 	bl	8013770 <LL_RCC_HSE_IsEnabledDiv2>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d102      	bne.n	8014e16 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8014e10:	4b15      	ldr	r3, [pc, #84]	@ (8014e68 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8014e12:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8014e14:	e00d      	b.n	8014e32 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8014e16:	4b15      	ldr	r3, [pc, #84]	@ (8014e6c <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8014e18:	607b      	str	r3, [r7, #4]
      break;
 8014e1a:	e00a      	b.n	8014e32 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014e1c:	f7fe fd49 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014e20:	4603      	mov	r3, r0
 8014e22:	091b      	lsrs	r3, r3, #4
 8014e24:	f003 030f 	and.w	r3, r3, #15
 8014e28:	4a0e      	ldr	r2, [pc, #56]	@ (8014e64 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8014e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e2e:	607b      	str	r3, [r7, #4]
      break;
 8014e30:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8014e32:	f7fe ffeb 	bl	8013e0c <LL_RCC_PLLSAI1_GetN>
 8014e36:	4602      	mov	r2, r0
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	fb03 f402 	mul.w	r4, r3, r2
 8014e3e:	f7fe ffa9 	bl	8013d94 <LL_RCC_PLL_GetDivider>
 8014e42:	4603      	mov	r3, r0
 8014e44:	091b      	lsrs	r3, r3, #4
 8014e46:	3301      	adds	r3, #1
 8014e48:	fbb4 f4f3 	udiv	r4, r4, r3
 8014e4c:	f7fe ffeb 	bl	8013e26 <LL_RCC_PLLSAI1_GetP>
 8014e50:	4603      	mov	r3, r0
 8014e52:	0c5b      	lsrs	r3, r3, #17
 8014e54:	3301      	adds	r3, #1
 8014e56:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	370c      	adds	r7, #12
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd90      	pop	{r4, r7, pc}
 8014e62:	bf00      	nop
 8014e64:	0802072c 	.word	0x0802072c
 8014e68:	00f42400 	.word	0x00f42400
 8014e6c:	01e84800 	.word	0x01e84800

08014e70 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8014e70:	b590      	push	{r4, r7, lr}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8014e76:	f7fe fffa 	bl	8013e6e <LL_RCC_PLL_GetMainSource>
 8014e7a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	2b03      	cmp	r3, #3
 8014e80:	d017      	beq.n	8014eb2 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	2b03      	cmp	r3, #3
 8014e86:	d81f      	bhi.n	8014ec8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	d003      	beq.n	8014e96 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	2b02      	cmp	r3, #2
 8014e92:	d00b      	beq.n	8014eac <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8014e94:	e018      	b.n	8014ec8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014e96:	f7fe fd0c 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	091b      	lsrs	r3, r3, #4
 8014e9e:	f003 030f 	and.w	r3, r3, #15
 8014ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8014f10 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8014ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ea8:	607b      	str	r3, [r7, #4]
      break;
 8014eaa:	e018      	b.n	8014ede <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8014eac:	4b19      	ldr	r3, [pc, #100]	@ (8014f14 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8014eae:	607b      	str	r3, [r7, #4]
      break;
 8014eb0:	e015      	b.n	8014ede <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8014eb2:	f7fe fc5d 	bl	8013770 <LL_RCC_HSE_IsEnabledDiv2>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d102      	bne.n	8014ec2 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8014ebc:	4b15      	ldr	r3, [pc, #84]	@ (8014f14 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8014ebe:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8014ec0:	e00d      	b.n	8014ede <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8014ec2:	4b15      	ldr	r3, [pc, #84]	@ (8014f18 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8014ec4:	607b      	str	r3, [r7, #4]
      break;
 8014ec6:	e00a      	b.n	8014ede <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8014ec8:	f7fe fcf3 	bl	80138b2 <LL_RCC_MSI_GetRange>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	091b      	lsrs	r3, r3, #4
 8014ed0:	f003 030f 	and.w	r3, r3, #15
 8014ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8014f10 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8014ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014eda:	607b      	str	r3, [r7, #4]
      break;
 8014edc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8014ede:	f7fe ff95 	bl	8013e0c <LL_RCC_PLLSAI1_GetN>
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	fb03 f402 	mul.w	r4, r3, r2
 8014eea:	f7fe ff53 	bl	8013d94 <LL_RCC_PLL_GetDivider>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	091b      	lsrs	r3, r3, #4
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	fbb4 f4f3 	udiv	r4, r4, r3
 8014ef8:	f7fe ffa1 	bl	8013e3e <LL_RCC_PLLSAI1_GetQ>
 8014efc:	4603      	mov	r3, r0
 8014efe:	0e5b      	lsrs	r3, r3, #25
 8014f00:	3301      	adds	r3, #1
 8014f02:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	370c      	adds	r7, #12
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd90      	pop	{r4, r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	0802072c 	.word	0x0802072c
 8014f14:	00f42400 	.word	0x00f42400
 8014f18:	01e84800 	.word	0x01e84800

08014f1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b084      	sub	sp, #16
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d101      	bne.n	8014f2e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e09f      	b.n	801506e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d106      	bne.n	8014f48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7ee f95a 	bl	80031fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2202      	movs	r2, #2
 8014f4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8014f50:	4b49      	ldr	r3, [pc, #292]	@ (8015078 <HAL_RTC_Init+0x15c>)
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	f003 0310 	and.w	r3, r3, #16
 8014f58:	2b10      	cmp	r3, #16
 8014f5a:	d07e      	beq.n	801505a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	22ca      	movs	r2, #202	@ 0xca
 8014f62:	625a      	str	r2, [r3, #36]	@ 0x24
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2253      	movs	r2, #83	@ 0x53
 8014f6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f000 f8ab 	bl	80150c8 <RTC_EnterInitMode>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d00a      	beq.n	8014f8e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	22ff      	movs	r2, #255	@ 0xff
 8014f7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2204      	movs	r2, #4
 8014f84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	73fb      	strb	r3, [r7, #15]
 8014f8c:	e067      	b.n	801505e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	689b      	ldr	r3, [r3, #8]
 8014f94:	687a      	ldr	r2, [r7, #4]
 8014f96:	6812      	ldr	r2, [r2, #0]
 8014f98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014fa0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	6899      	ldr	r1, [r3, #8]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	685a      	ldr	r2, [r3, #4]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	691b      	ldr	r3, [r3, #16]
 8014fb0:	431a      	orrs	r2, r3
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	699b      	ldr	r3, [r3, #24]
 8014fb6:	431a      	orrs	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	430a      	orrs	r2, r1
 8014fbe:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	68d2      	ldr	r2, [r2, #12]
 8014fc8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	6919      	ldr	r1, [r3, #16]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	689b      	ldr	r3, [r3, #8]
 8014fd4:	041a      	lsls	r2, r3, #16
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	430a      	orrs	r2, r1
 8014fdc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	68da      	ldr	r2, [r3, #12]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014fec:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	f022 0203 	bic.w	r2, r2, #3
 8014ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	69da      	ldr	r2, [r3, #28]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	695b      	ldr	r3, [r3, #20]
 801500c:	431a      	orrs	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	430a      	orrs	r2, r1
 8015014:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	f003 0320 	and.w	r3, r3, #32
 8015020:	2b00      	cmp	r3, #0
 8015022:	d113      	bne.n	801504c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f000 f829 	bl	801507c <HAL_RTC_WaitForSynchro>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00d      	beq.n	801504c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	22ff      	movs	r2, #255	@ 0xff
 8015036:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2204      	movs	r2, #4
 801503c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8015048:	2301      	movs	r3, #1
 801504a:	e010      	b.n	801506e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	22ff      	movs	r2, #255	@ 0xff
 8015052:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8015054:	2300      	movs	r3, #0
 8015056:	73fb      	strb	r3, [r7, #15]
 8015058:	e001      	b.n	801505e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 801505a:	2300      	movs	r3, #0
 801505c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 801505e:	7bfb      	ldrb	r3, [r7, #15]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d103      	bne.n	801506c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2201      	movs	r2, #1
 8015068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 801506c:	7bfb      	ldrb	r3, [r7, #15]
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
 8015076:	bf00      	nop
 8015078:	40002800 	.word	0x40002800

0801507c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	68da      	ldr	r2, [r3, #12]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8015092:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8015094:	f7fb f836 	bl	8010104 <HAL_GetTick>
 8015098:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801509a:	e009      	b.n	80150b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801509c:	f7fb f832 	bl	8010104 <HAL_GetTick>
 80150a0:	4602      	mov	r2, r0
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	1ad3      	subs	r3, r2, r3
 80150a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80150aa:	d901      	bls.n	80150b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80150ac:	2303      	movs	r3, #3
 80150ae:	e007      	b.n	80150c0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	f003 0320 	and.w	r3, r3, #32
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d0ee      	beq.n	801509c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80150be:	2300      	movs	r3, #0
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	3710      	adds	r7, #16
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b084      	sub	sp, #16
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d119      	bne.n	8015112 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f04f 32ff 	mov.w	r2, #4294967295
 80150e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80150e8:	f7fb f80c 	bl	8010104 <HAL_GetTick>
 80150ec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80150ee:	e009      	b.n	8015104 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80150f0:	f7fb f808 	bl	8010104 <HAL_GetTick>
 80150f4:	4602      	mov	r2, r0
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	1ad3      	subs	r3, r2, r3
 80150fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80150fe:	d901      	bls.n	8015104 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8015100:	2303      	movs	r3, #3
 8015102:	e007      	b.n	8015114 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	68db      	ldr	r3, [r3, #12]
 801510a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801510e:	2b00      	cmp	r3, #0
 8015110:	d0ee      	beq.n	80150f0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8015112:	2300      	movs	r3, #0
}
 8015114:	4618      	mov	r0, r3
 8015116:	3710      	adds	r7, #16
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d101      	bne.n	801512e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801512a:	2301      	movs	r3, #1
 801512c:	e095      	b.n	801525a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015132:	2b00      	cmp	r3, #0
 8015134:	d108      	bne.n	8015148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801513e:	d009      	beq.n	8015154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2200      	movs	r2, #0
 8015144:	61da      	str	r2, [r3, #28]
 8015146:	e005      	b.n	8015154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2200      	movs	r2, #0
 801514c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	2200      	movs	r2, #0
 8015152:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2200      	movs	r2, #0
 8015158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8015160:	b2db      	uxtb	r3, r3
 8015162:	2b00      	cmp	r3, #0
 8015164:	d106      	bne.n	8015174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2200      	movs	r2, #0
 801516a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f000 f877 	bl	8015262 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2202      	movs	r2, #2
 8015178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	681a      	ldr	r2, [r3, #0]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801518a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8015194:	d902      	bls.n	801519c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8015196:	2300      	movs	r3, #0
 8015198:	60fb      	str	r3, [r7, #12]
 801519a:	e002      	b.n	80151a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801519c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80151a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	68db      	ldr	r3, [r3, #12]
 80151a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80151aa:	d007      	beq.n	80151bc <HAL_SPI_Init+0xa0>
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80151b4:	d002      	beq.n	80151bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2200      	movs	r2, #0
 80151ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80151cc:	431a      	orrs	r2, r3
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	691b      	ldr	r3, [r3, #16]
 80151d2:	f003 0302 	and.w	r3, r3, #2
 80151d6:	431a      	orrs	r2, r3
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	695b      	ldr	r3, [r3, #20]
 80151dc:	f003 0301 	and.w	r3, r3, #1
 80151e0:	431a      	orrs	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	699b      	ldr	r3, [r3, #24]
 80151e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80151ea:	431a      	orrs	r2, r3
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	69db      	ldr	r3, [r3, #28]
 80151f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80151f4:	431a      	orrs	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6a1b      	ldr	r3, [r3, #32]
 80151fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80151fe:	ea42 0103 	orr.w	r1, r2, r3
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015206:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	430a      	orrs	r2, r1
 8015210:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	699b      	ldr	r3, [r3, #24]
 8015216:	0c1b      	lsrs	r3, r3, #16
 8015218:	f003 0204 	and.w	r2, r3, #4
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015220:	f003 0310 	and.w	r3, r3, #16
 8015224:	431a      	orrs	r2, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801522a:	f003 0308 	and.w	r3, r3, #8
 801522e:	431a      	orrs	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	68db      	ldr	r3, [r3, #12]
 8015234:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8015238:	ea42 0103 	orr.w	r1, r2, r3
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	430a      	orrs	r2, r1
 8015248:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2200      	movs	r2, #0
 801524e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2201      	movs	r2, #1
 8015254:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3710      	adds	r7, #16
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8015262:	b480      	push	{r7}
 8015264:	b083      	sub	sp, #12
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 801526a:	bf00      	nop
 801526c:	370c      	adds	r7, #12
 801526e:	46bd      	mov	sp, r7
 8015270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015274:	4770      	bx	lr

08015276 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015276:	b580      	push	{r7, lr}
 8015278:	b088      	sub	sp, #32
 801527a:	af00      	add	r7, sp, #0
 801527c:	60f8      	str	r0, [r7, #12]
 801527e:	60b9      	str	r1, [r7, #8]
 8015280:	603b      	str	r3, [r7, #0]
 8015282:	4613      	mov	r3, r2
 8015284:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015286:	f7fa ff3d 	bl	8010104 <HAL_GetTick>
 801528a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 801528c:	88fb      	ldrh	r3, [r7, #6]
 801528e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8015296:	b2db      	uxtb	r3, r3
 8015298:	2b01      	cmp	r3, #1
 801529a:	d001      	beq.n	80152a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 801529c:	2302      	movs	r3, #2
 801529e:	e15c      	b.n	801555a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d002      	beq.n	80152ac <HAL_SPI_Transmit+0x36>
 80152a6:	88fb      	ldrh	r3, [r7, #6]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d101      	bne.n	80152b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80152ac:	2301      	movs	r3, #1
 80152ae:	e154      	b.n	801555a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80152b6:	2b01      	cmp	r3, #1
 80152b8:	d101      	bne.n	80152be <HAL_SPI_Transmit+0x48>
 80152ba:	2302      	movs	r3, #2
 80152bc:	e14d      	b.n	801555a <HAL_SPI_Transmit+0x2e4>
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2201      	movs	r2, #1
 80152c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2203      	movs	r2, #3
 80152ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	68ba      	ldr	r2, [r7, #8]
 80152d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	88fa      	ldrh	r2, [r7, #6]
 80152de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	88fa      	ldrh	r2, [r7, #6]
 80152e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2200      	movs	r2, #0
 80152ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	2200      	movs	r2, #0
 80152f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	2200      	movs	r2, #0
 80152f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2200      	movs	r2, #0
 8015300:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	2200      	movs	r2, #0
 8015306:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	689b      	ldr	r3, [r3, #8]
 801530c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015310:	d10f      	bne.n	8015332 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	681a      	ldr	r2, [r3, #0]
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8015330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801533c:	2b40      	cmp	r3, #64	@ 0x40
 801533e:	d007      	beq.n	8015350 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	681a      	ldr	r2, [r3, #0]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801534e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8015358:	d952      	bls.n	8015400 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d002      	beq.n	8015368 <HAL_SPI_Transmit+0xf2>
 8015362:	8b7b      	ldrh	r3, [r7, #26]
 8015364:	2b01      	cmp	r3, #1
 8015366:	d145      	bne.n	80153f4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801536c:	881a      	ldrh	r2, [r3, #0]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015378:	1c9a      	adds	r2, r3, #2
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015382:	b29b      	uxth	r3, r3
 8015384:	3b01      	subs	r3, #1
 8015386:	b29a      	uxth	r2, r3
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801538c:	e032      	b.n	80153f4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	689b      	ldr	r3, [r3, #8]
 8015394:	f003 0302 	and.w	r3, r3, #2
 8015398:	2b02      	cmp	r3, #2
 801539a:	d112      	bne.n	80153c2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153a0:	881a      	ldrh	r2, [r3, #0]
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80153ac:	1c9a      	adds	r2, r3, #2
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	3b01      	subs	r3, #1
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80153c0:	e018      	b.n	80153f4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80153c2:	f7fa fe9f 	bl	8010104 <HAL_GetTick>
 80153c6:	4602      	mov	r2, r0
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	1ad3      	subs	r3, r2, r3
 80153cc:	683a      	ldr	r2, [r7, #0]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d803      	bhi.n	80153da <HAL_SPI_Transmit+0x164>
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153d8:	d102      	bne.n	80153e0 <HAL_SPI_Transmit+0x16a>
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d109      	bne.n	80153f4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2201      	movs	r2, #1
 80153e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80153f0:	2303      	movs	r3, #3
 80153f2:	e0b2      	b.n	801555a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1c7      	bne.n	801538e <HAL_SPI_Transmit+0x118>
 80153fe:	e083      	b.n	8015508 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	685b      	ldr	r3, [r3, #4]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d002      	beq.n	801540e <HAL_SPI_Transmit+0x198>
 8015408:	8b7b      	ldrh	r3, [r7, #26]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d177      	bne.n	80154fe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015412:	b29b      	uxth	r3, r3
 8015414:	2b01      	cmp	r3, #1
 8015416:	d912      	bls.n	801543e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801541c:	881a      	ldrh	r2, [r3, #0]
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015428:	1c9a      	adds	r2, r3, #2
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015432:	b29b      	uxth	r3, r3
 8015434:	3b02      	subs	r3, #2
 8015436:	b29a      	uxth	r2, r3
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801543c:	e05f      	b.n	80154fe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	330c      	adds	r3, #12
 8015448:	7812      	ldrb	r2, [r2, #0]
 801544a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015450:	1c5a      	adds	r2, r3, #1
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801545a:	b29b      	uxth	r3, r3
 801545c:	3b01      	subs	r3, #1
 801545e:	b29a      	uxth	r2, r3
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8015464:	e04b      	b.n	80154fe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	689b      	ldr	r3, [r3, #8]
 801546c:	f003 0302 	and.w	r3, r3, #2
 8015470:	2b02      	cmp	r3, #2
 8015472:	d12b      	bne.n	80154cc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015478:	b29b      	uxth	r3, r3
 801547a:	2b01      	cmp	r3, #1
 801547c:	d912      	bls.n	80154a4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015482:	881a      	ldrh	r2, [r3, #0]
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801548e:	1c9a      	adds	r2, r3, #2
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015498:	b29b      	uxth	r3, r3
 801549a:	3b02      	subs	r3, #2
 801549c:	b29a      	uxth	r2, r3
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80154a2:	e02c      	b.n	80154fe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	330c      	adds	r3, #12
 80154ae:	7812      	ldrb	r2, [r2, #0]
 80154b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154b6:	1c5a      	adds	r2, r3, #1
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	3b01      	subs	r3, #1
 80154c4:	b29a      	uxth	r2, r3
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80154ca:	e018      	b.n	80154fe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80154cc:	f7fa fe1a 	bl	8010104 <HAL_GetTick>
 80154d0:	4602      	mov	r2, r0
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	1ad3      	subs	r3, r2, r3
 80154d6:	683a      	ldr	r2, [r7, #0]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d803      	bhi.n	80154e4 <HAL_SPI_Transmit+0x26e>
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154e2:	d102      	bne.n	80154ea <HAL_SPI_Transmit+0x274>
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d109      	bne.n	80154fe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	2201      	movs	r2, #1
 80154ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2200      	movs	r2, #0
 80154f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80154fa:	2303      	movs	r3, #3
 80154fc:	e02d      	b.n	801555a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015502:	b29b      	uxth	r3, r3
 8015504:	2b00      	cmp	r3, #0
 8015506:	d1ae      	bne.n	8015466 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015508:	69fa      	ldr	r2, [r7, #28]
 801550a:	6839      	ldr	r1, [r7, #0]
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f000 fb73 	bl	8015bf8 <SPI_EndRxTxTransaction>
 8015512:	4603      	mov	r3, r0
 8015514:	2b00      	cmp	r3, #0
 8015516:	d002      	beq.n	801551e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2220      	movs	r2, #32
 801551c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	689b      	ldr	r3, [r3, #8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d10a      	bne.n	801553c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015526:	2300      	movs	r3, #0
 8015528:	617b      	str	r3, [r7, #20]
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	68db      	ldr	r3, [r3, #12]
 8015530:	617b      	str	r3, [r7, #20]
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	689b      	ldr	r3, [r3, #8]
 8015538:	617b      	str	r3, [r7, #20]
 801553a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2201      	movs	r2, #1
 8015540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2200      	movs	r2, #0
 8015548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015550:	2b00      	cmp	r3, #0
 8015552:	d001      	beq.n	8015558 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8015554:	2301      	movs	r3, #1
 8015556:	e000      	b.n	801555a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8015558:	2300      	movs	r3, #0
  }
}
 801555a:	4618      	mov	r0, r3
 801555c:	3720      	adds	r7, #32
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}

08015562 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015562:	b580      	push	{r7, lr}
 8015564:	b08a      	sub	sp, #40	@ 0x28
 8015566:	af00      	add	r7, sp, #0
 8015568:	60f8      	str	r0, [r7, #12]
 801556a:	60b9      	str	r1, [r7, #8]
 801556c:	607a      	str	r2, [r7, #4]
 801556e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8015570:	2301      	movs	r3, #1
 8015572:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015574:	f7fa fdc6 	bl	8010104 <HAL_GetTick>
 8015578:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8015580:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8015588:	887b      	ldrh	r3, [r7, #2]
 801558a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 801558c:	887b      	ldrh	r3, [r7, #2]
 801558e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8015590:	7ffb      	ldrb	r3, [r7, #31]
 8015592:	2b01      	cmp	r3, #1
 8015594:	d00c      	beq.n	80155b0 <HAL_SPI_TransmitReceive+0x4e>
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801559c:	d106      	bne.n	80155ac <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	689b      	ldr	r3, [r3, #8]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d102      	bne.n	80155ac <HAL_SPI_TransmitReceive+0x4a>
 80155a6:	7ffb      	ldrb	r3, [r7, #31]
 80155a8:	2b04      	cmp	r3, #4
 80155aa:	d001      	beq.n	80155b0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80155ac:	2302      	movs	r3, #2
 80155ae:	e1f3      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d005      	beq.n	80155c2 <HAL_SPI_TransmitReceive+0x60>
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d002      	beq.n	80155c2 <HAL_SPI_TransmitReceive+0x60>
 80155bc:	887b      	ldrh	r3, [r7, #2]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d101      	bne.n	80155c6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80155c2:	2301      	movs	r3, #1
 80155c4:	e1e8      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d101      	bne.n	80155d4 <HAL_SPI_TransmitReceive+0x72>
 80155d0:	2302      	movs	r3, #2
 80155d2:	e1e1      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2201      	movs	r2, #1
 80155d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80155e2:	b2db      	uxtb	r3, r3
 80155e4:	2b04      	cmp	r3, #4
 80155e6:	d003      	beq.n	80155f0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	2205      	movs	r2, #5
 80155ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	2200      	movs	r2, #0
 80155f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	887a      	ldrh	r2, [r7, #2]
 8015600:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	887a      	ldrh	r2, [r7, #2]
 8015608:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	68ba      	ldr	r2, [r7, #8]
 8015610:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	887a      	ldrh	r2, [r7, #2]
 8015616:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	887a      	ldrh	r2, [r7, #2]
 801561c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2200      	movs	r2, #0
 8015622:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	2200      	movs	r2, #0
 8015628:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	68db      	ldr	r3, [r3, #12]
 801562e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8015632:	d802      	bhi.n	801563a <HAL_SPI_TransmitReceive+0xd8>
 8015634:	8abb      	ldrh	r3, [r7, #20]
 8015636:	2b01      	cmp	r3, #1
 8015638:	d908      	bls.n	801564c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	685a      	ldr	r2, [r3, #4]
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8015648:	605a      	str	r2, [r3, #4]
 801564a:	e007      	b.n	801565c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801565a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015666:	2b40      	cmp	r3, #64	@ 0x40
 8015668:	d007      	beq.n	801567a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015678:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	68db      	ldr	r3, [r3, #12]
 801567e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8015682:	f240 8083 	bls.w	801578c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d002      	beq.n	8015694 <HAL_SPI_TransmitReceive+0x132>
 801568e:	8afb      	ldrh	r3, [r7, #22]
 8015690:	2b01      	cmp	r3, #1
 8015692:	d16f      	bne.n	8015774 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015698:	881a      	ldrh	r2, [r3, #0]
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156a4:	1c9a      	adds	r2, r3, #2
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	3b01      	subs	r3, #1
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80156b8:	e05c      	b.n	8015774 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	689b      	ldr	r3, [r3, #8]
 80156c0:	f003 0302 	and.w	r3, r3, #2
 80156c4:	2b02      	cmp	r3, #2
 80156c6:	d11b      	bne.n	8015700 <HAL_SPI_TransmitReceive+0x19e>
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d016      	beq.n	8015700 <HAL_SPI_TransmitReceive+0x19e>
 80156d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d113      	bne.n	8015700 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156dc:	881a      	ldrh	r2, [r3, #0]
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156e8:	1c9a      	adds	r2, r3, #2
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	3b01      	subs	r3, #1
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80156fc:	2300      	movs	r3, #0
 80156fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	689b      	ldr	r3, [r3, #8]
 8015706:	f003 0301 	and.w	r3, r3, #1
 801570a:	2b01      	cmp	r3, #1
 801570c:	d11c      	bne.n	8015748 <HAL_SPI_TransmitReceive+0x1e6>
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8015714:	b29b      	uxth	r3, r3
 8015716:	2b00      	cmp	r3, #0
 8015718:	d016      	beq.n	8015748 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	68da      	ldr	r2, [r3, #12]
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015724:	b292      	uxth	r2, r2
 8015726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801572c:	1c9a      	adds	r2, r3, #2
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8015738:	b29b      	uxth	r3, r3
 801573a:	3b01      	subs	r3, #1
 801573c:	b29a      	uxth	r2, r3
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015744:	2301      	movs	r3, #1
 8015746:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8015748:	f7fa fcdc 	bl	8010104 <HAL_GetTick>
 801574c:	4602      	mov	r2, r0
 801574e:	6a3b      	ldr	r3, [r7, #32]
 8015750:	1ad3      	subs	r3, r2, r3
 8015752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015754:	429a      	cmp	r2, r3
 8015756:	d80d      	bhi.n	8015774 <HAL_SPI_TransmitReceive+0x212>
 8015758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801575e:	d009      	beq.n	8015774 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2201      	movs	r2, #1
 8015764:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2200      	movs	r2, #0
 801576c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8015770:	2303      	movs	r3, #3
 8015772:	e111      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015778:	b29b      	uxth	r3, r3
 801577a:	2b00      	cmp	r3, #0
 801577c:	d19d      	bne.n	80156ba <HAL_SPI_TransmitReceive+0x158>
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8015784:	b29b      	uxth	r3, r3
 8015786:	2b00      	cmp	r3, #0
 8015788:	d197      	bne.n	80156ba <HAL_SPI_TransmitReceive+0x158>
 801578a:	e0e5      	b.n	8015958 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d003      	beq.n	801579c <HAL_SPI_TransmitReceive+0x23a>
 8015794:	8afb      	ldrh	r3, [r7, #22]
 8015796:	2b01      	cmp	r3, #1
 8015798:	f040 80d1 	bne.w	801593e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	2b01      	cmp	r3, #1
 80157a4:	d912      	bls.n	80157cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157aa:	881a      	ldrh	r2, [r3, #0]
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157b6:	1c9a      	adds	r2, r3, #2
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	3b02      	subs	r3, #2
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80157ca:	e0b8      	b.n	801593e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	330c      	adds	r3, #12
 80157d6:	7812      	ldrb	r2, [r2, #0]
 80157d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157de:	1c5a      	adds	r2, r3, #1
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	3b01      	subs	r3, #1
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80157f2:	e0a4      	b.n	801593e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	f003 0302 	and.w	r3, r3, #2
 80157fe:	2b02      	cmp	r3, #2
 8015800:	d134      	bne.n	801586c <HAL_SPI_TransmitReceive+0x30a>
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015806:	b29b      	uxth	r3, r3
 8015808:	2b00      	cmp	r3, #0
 801580a:	d02f      	beq.n	801586c <HAL_SPI_TransmitReceive+0x30a>
 801580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801580e:	2b01      	cmp	r3, #1
 8015810:	d12c      	bne.n	801586c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015816:	b29b      	uxth	r3, r3
 8015818:	2b01      	cmp	r3, #1
 801581a:	d912      	bls.n	8015842 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015820:	881a      	ldrh	r2, [r3, #0]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801582c:	1c9a      	adds	r2, r3, #2
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015836:	b29b      	uxth	r3, r3
 8015838:	3b02      	subs	r3, #2
 801583a:	b29a      	uxth	r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8015840:	e012      	b.n	8015868 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	330c      	adds	r3, #12
 801584c:	7812      	ldrb	r2, [r2, #0]
 801584e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015854:	1c5a      	adds	r2, r3, #1
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801585e:	b29b      	uxth	r3, r3
 8015860:	3b01      	subs	r3, #1
 8015862:	b29a      	uxth	r2, r3
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8015868:	2300      	movs	r3, #0
 801586a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	689b      	ldr	r3, [r3, #8]
 8015872:	f003 0301 	and.w	r3, r3, #1
 8015876:	2b01      	cmp	r3, #1
 8015878:	d148      	bne.n	801590c <HAL_SPI_TransmitReceive+0x3aa>
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8015880:	b29b      	uxth	r3, r3
 8015882:	2b00      	cmp	r3, #0
 8015884:	d042      	beq.n	801590c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801588c:	b29b      	uxth	r3, r3
 801588e:	2b01      	cmp	r3, #1
 8015890:	d923      	bls.n	80158da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	68da      	ldr	r2, [r3, #12]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801589c:	b292      	uxth	r2, r2
 801589e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158a4:	1c9a      	adds	r2, r3, #2
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80158b0:	b29b      	uxth	r3, r3
 80158b2:	3b02      	subs	r3, #2
 80158b4:	b29a      	uxth	r2, r3
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	2b01      	cmp	r3, #1
 80158c6:	d81f      	bhi.n	8015908 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	685a      	ldr	r2, [r3, #4]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80158d6:	605a      	str	r2, [r3, #4]
 80158d8:	e016      	b.n	8015908 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	f103 020c 	add.w	r2, r3, #12
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158e6:	7812      	ldrb	r2, [r2, #0]
 80158e8:	b2d2      	uxtb	r2, r2
 80158ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158f0:	1c5a      	adds	r2, r3, #1
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	3b01      	subs	r3, #1
 8015900:	b29a      	uxth	r2, r3
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8015908:	2301      	movs	r3, #1
 801590a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801590c:	f7fa fbfa 	bl	8010104 <HAL_GetTick>
 8015910:	4602      	mov	r2, r0
 8015912:	6a3b      	ldr	r3, [r7, #32]
 8015914:	1ad3      	subs	r3, r2, r3
 8015916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015918:	429a      	cmp	r2, r3
 801591a:	d803      	bhi.n	8015924 <HAL_SPI_TransmitReceive+0x3c2>
 801591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015922:	d102      	bne.n	801592a <HAL_SPI_TransmitReceive+0x3c8>
 8015924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015926:	2b00      	cmp	r3, #0
 8015928:	d109      	bne.n	801593e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2201      	movs	r2, #1
 801592e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	2200      	movs	r2, #0
 8015936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 801593a:	2303      	movs	r3, #3
 801593c:	e02c      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8015942:	b29b      	uxth	r3, r3
 8015944:	2b00      	cmp	r3, #0
 8015946:	f47f af55 	bne.w	80157f4 <HAL_SPI_TransmitReceive+0x292>
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8015950:	b29b      	uxth	r3, r3
 8015952:	2b00      	cmp	r3, #0
 8015954:	f47f af4e 	bne.w	80157f4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8015958:	6a3a      	ldr	r2, [r7, #32]
 801595a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f000 f94b 	bl	8015bf8 <SPI_EndRxTxTransaction>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d008      	beq.n	801597a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	2220      	movs	r2, #32
 801596c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2200      	movs	r2, #0
 8015972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8015976:	2301      	movs	r3, #1
 8015978:	e00e      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	2201      	movs	r2, #1
 801597e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	2200      	movs	r2, #0
 8015986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801598e:	2b00      	cmp	r3, #0
 8015990:	d001      	beq.n	8015996 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8015992:	2301      	movs	r3, #1
 8015994:	e000      	b.n	8015998 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8015996:	2300      	movs	r3, #0
  }
}
 8015998:	4618      	mov	r0, r3
 801599a:	3728      	adds	r7, #40	@ 0x28
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80159ae:	b2db      	uxtb	r3, r3
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr

080159bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b088      	sub	sp, #32
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	60f8      	str	r0, [r7, #12]
 80159c4:	60b9      	str	r1, [r7, #8]
 80159c6:	603b      	str	r3, [r7, #0]
 80159c8:	4613      	mov	r3, r2
 80159ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80159cc:	f7fa fb9a 	bl	8010104 <HAL_GetTick>
 80159d0:	4602      	mov	r2, r0
 80159d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d4:	1a9b      	subs	r3, r3, r2
 80159d6:	683a      	ldr	r2, [r7, #0]
 80159d8:	4413      	add	r3, r2
 80159da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80159dc:	f7fa fb92 	bl	8010104 <HAL_GetTick>
 80159e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80159e2:	4b39      	ldr	r3, [pc, #228]	@ (8015ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	015b      	lsls	r3, r3, #5
 80159e8:	0d1b      	lsrs	r3, r3, #20
 80159ea:	69fa      	ldr	r2, [r7, #28]
 80159ec:	fb02 f303 	mul.w	r3, r2, r3
 80159f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80159f2:	e054      	b.n	8015a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159fa:	d050      	beq.n	8015a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80159fc:	f7fa fb82 	bl	8010104 <HAL_GetTick>
 8015a00:	4602      	mov	r2, r0
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	1ad3      	subs	r3, r2, r3
 8015a06:	69fa      	ldr	r2, [r7, #28]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d902      	bls.n	8015a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d13d      	bne.n	8015a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	685a      	ldr	r2, [r3, #4]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8015a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015a2a:	d111      	bne.n	8015a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	689b      	ldr	r3, [r3, #8]
 8015a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015a34:	d004      	beq.n	8015a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	689b      	ldr	r3, [r3, #8]
 8015a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015a3e:	d107      	bne.n	8015a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	681a      	ldr	r2, [r3, #0]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a58:	d10f      	bne.n	8015a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	681a      	ldr	r2, [r3, #0]
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8015a68:	601a      	str	r2, [r3, #0]
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	681a      	ldr	r2, [r3, #0]
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8015a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2201      	movs	r2, #1
 8015a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2200      	movs	r2, #0
 8015a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8015a8a:	2303      	movs	r3, #3
 8015a8c:	e017      	b.n	8015abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d101      	bne.n	8015a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8015a94:	2300      	movs	r3, #0
 8015a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	689a      	ldr	r2, [r3, #8]
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	4013      	ands	r3, r2
 8015aa8:	68ba      	ldr	r2, [r7, #8]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	bf0c      	ite	eq
 8015aae:	2301      	moveq	r3, #1
 8015ab0:	2300      	movne	r3, #0
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	79fb      	ldrb	r3, [r7, #7]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d19b      	bne.n	80159f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8015abc:	2300      	movs	r3, #0
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3720      	adds	r7, #32
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	20000580 	.word	0x20000580

08015acc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b08a      	sub	sp, #40	@ 0x28
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	60f8      	str	r0, [r7, #12]
 8015ad4:	60b9      	str	r1, [r7, #8]
 8015ad6:	607a      	str	r2, [r7, #4]
 8015ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8015ada:	2300      	movs	r3, #0
 8015adc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8015ade:	f7fa fb11 	bl	8010104 <HAL_GetTick>
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ae6:	1a9b      	subs	r3, r3, r2
 8015ae8:	683a      	ldr	r2, [r7, #0]
 8015aea:	4413      	add	r3, r2
 8015aec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8015aee:	f7fa fb09 	bl	8010104 <HAL_GetTick>
 8015af2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	330c      	adds	r3, #12
 8015afa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8015afc:	4b3d      	ldr	r3, [pc, #244]	@ (8015bf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	4613      	mov	r3, r2
 8015b02:	009b      	lsls	r3, r3, #2
 8015b04:	4413      	add	r3, r2
 8015b06:	00da      	lsls	r2, r3, #3
 8015b08:	1ad3      	subs	r3, r2, r3
 8015b0a:	0d1b      	lsrs	r3, r3, #20
 8015b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b0e:	fb02 f303 	mul.w	r3, r2, r3
 8015b12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8015b14:	e060      	b.n	8015bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8015b1c:	d107      	bne.n	8015b2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d104      	bne.n	8015b2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8015b24:	69fb      	ldr	r3, [r7, #28]
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8015b2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b34:	d050      	beq.n	8015bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015b36:	f7fa fae5 	bl	8010104 <HAL_GetTick>
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	6a3b      	ldr	r3, [r7, #32]
 8015b3e:	1ad3      	subs	r3, r2, r3
 8015b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d902      	bls.n	8015b4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8015b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d13d      	bne.n	8015bc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	685a      	ldr	r2, [r3, #4]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8015b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	685b      	ldr	r3, [r3, #4]
 8015b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8015b64:	d111      	bne.n	8015b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	689b      	ldr	r3, [r3, #8]
 8015b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015b6e:	d004      	beq.n	8015b7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	689b      	ldr	r3, [r3, #8]
 8015b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015b78:	d107      	bne.n	8015b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	681a      	ldr	r2, [r3, #0]
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015b88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015b92:	d10f      	bne.n	8015bb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8015ba2:	601a      	str	r2, [r3, #0]
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8015bb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8015bc4:	2303      	movs	r3, #3
 8015bc6:	e010      	b.n	8015bea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015bc8:	69bb      	ldr	r3, [r7, #24]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d101      	bne.n	8015bd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	3b01      	subs	r3, #1
 8015bd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	689a      	ldr	r2, [r3, #8]
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	4013      	ands	r3, r2
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d196      	bne.n	8015b16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8015be8:	2300      	movs	r3, #0
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3728      	adds	r7, #40	@ 0x28
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	20000580 	.word	0x20000580

08015bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b086      	sub	sp, #24
 8015bfc:	af02      	add	r7, sp, #8
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	60b9      	str	r1, [r7, #8]
 8015c02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f7ff ff5b 	bl	8015acc <SPI_WaitFifoStateUntilTimeout>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d007      	beq.n	8015c2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c20:	f043 0220 	orr.w	r2, r3, #32
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8015c28:	2303      	movs	r3, #3
 8015c2a:	e027      	b.n	8015c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	2200      	movs	r2, #0
 8015c34:	2180      	movs	r1, #128	@ 0x80
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	f7ff fec0 	bl	80159bc <SPI_WaitFlagStateUntilTimeout>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d007      	beq.n	8015c52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c46:	f043 0220 	orr.w	r2, r3, #32
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8015c4e:	2303      	movs	r3, #3
 8015c50:	e014      	b.n	8015c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	9300      	str	r3, [sp, #0]
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	f7ff ff34 	bl	8015acc <SPI_WaitFifoStateUntilTimeout>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d007      	beq.n	8015c7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c6e:	f043 0220 	orr.w	r2, r3, #32
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8015c76:	2303      	movs	r3, #3
 8015c78:	e000      	b.n	8015c7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8015c7a:	2300      	movs	r3, #0
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d101      	bne.n	8015c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015c92:	2301      	movs	r3, #1
 8015c94:	e049      	b.n	8015d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d106      	bne.n	8015cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f000 f841 	bl	8015d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2202      	movs	r2, #2
 8015cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	4610      	mov	r0, r2
 8015cc4:	f000 f914 	bl	8015ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2201      	movs	r2, #1
 8015ccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2201      	movs	r2, #1
 8015cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2201      	movs	r2, #1
 8015cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2201      	movs	r2, #1
 8015d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2201      	movs	r2, #1
 8015d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2201      	movs	r2, #1
 8015d1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2201      	movs	r2, #1
 8015d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015d28:	2300      	movs	r3, #0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}

08015d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8015d32:	b480      	push	{r7}
 8015d34:	b083      	sub	sp, #12
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8015d3a:	bf00      	nop
 8015d3c:	370c      	adds	r7, #12
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d44:	4770      	bx	lr
	...

08015d48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015d48:	b480      	push	{r7}
 8015d4a:	b085      	sub	sp, #20
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	2b01      	cmp	r3, #1
 8015d5a:	d001      	beq.n	8015d60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	e02e      	b.n	8015dbe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2202      	movs	r2, #2
 8015d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	4a17      	ldr	r2, [pc, #92]	@ (8015dcc <HAL_TIM_Base_Start+0x84>)
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d004      	beq.n	8015d7c <HAL_TIM_Base_Start+0x34>
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d7a:	d115      	bne.n	8015da8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	689a      	ldr	r2, [r3, #8]
 8015d82:	4b13      	ldr	r3, [pc, #76]	@ (8015dd0 <HAL_TIM_Base_Start+0x88>)
 8015d84:	4013      	ands	r3, r2
 8015d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2b06      	cmp	r3, #6
 8015d8c:	d015      	beq.n	8015dba <HAL_TIM_Base_Start+0x72>
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d94:	d011      	beq.n	8015dba <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f042 0201 	orr.w	r2, r2, #1
 8015da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015da6:	e008      	b.n	8015dba <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	681a      	ldr	r2, [r3, #0]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	f042 0201 	orr.w	r2, r2, #1
 8015db6:	601a      	str	r2, [r3, #0]
 8015db8:	e000      	b.n	8015dbc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015dbc:	2300      	movs	r3, #0
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3714      	adds	r7, #20
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	40012c00 	.word	0x40012c00
 8015dd0:	00010007 	.word	0x00010007

08015dd4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b083      	sub	sp, #12
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	6a1a      	ldr	r2, [r3, #32]
 8015de2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015de6:	4013      	ands	r3, r2
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10f      	bne.n	8015e0c <HAL_TIM_Base_Stop+0x38>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	6a1a      	ldr	r2, [r3, #32]
 8015df2:	f240 4344 	movw	r3, #1092	@ 0x444
 8015df6:	4013      	ands	r3, r2
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d107      	bne.n	8015e0c <HAL_TIM_Base_Stop+0x38>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	681a      	ldr	r2, [r3, #0]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	f022 0201 	bic.w	r2, r2, #1
 8015e0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2201      	movs	r2, #1
 8015e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8015e14:	2300      	movs	r3, #0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	370c      	adds	r7, #12
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e20:	4770      	bx	lr

08015e22 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b082      	sub	sp, #8
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2202      	movs	r2, #2
 8015e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	6a1a      	ldr	r2, [r3, #32]
 8015e38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8015e3c:	4013      	ands	r3, r2
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10f      	bne.n	8015e62 <HAL_TIM_PWM_DeInit+0x40>
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	6a1a      	ldr	r2, [r3, #32]
 8015e48:	f240 4344 	movw	r3, #1092	@ 0x444
 8015e4c:	4013      	ands	r3, r2
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d107      	bne.n	8015e62 <HAL_TIM_PWM_DeInit+0x40>
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	681a      	ldr	r2, [r3, #0]
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f022 0201 	bic.w	r2, r2, #1
 8015e60:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f000 f839 	bl	8015eda <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2200      	movs	r2, #0
 8015e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2200      	movs	r2, #0
 8015e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2200      	movs	r2, #0
 8015e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8015ed0:	2300      	movs	r3, #0
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3708      	adds	r7, #8
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}

08015eda <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8015eda:	b480      	push	{r7}
 8015edc:	b083      	sub	sp, #12
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8015ee2:	bf00      	nop
 8015ee4:	370c      	adds	r7, #12
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eec:	4770      	bx	lr
	...

08015ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015ef0:	b480      	push	{r7}
 8015ef2:	b085      	sub	sp, #20
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	4a30      	ldr	r2, [pc, #192]	@ (8015fc4 <TIM_Base_SetConfig+0xd4>)
 8015f04:	4293      	cmp	r3, r2
 8015f06:	d003      	beq.n	8015f10 <TIM_Base_SetConfig+0x20>
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015f0e:	d108      	bne.n	8015f22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	685b      	ldr	r3, [r3, #4]
 8015f1c:	68fa      	ldr	r2, [r7, #12]
 8015f1e:	4313      	orrs	r3, r2
 8015f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	4a27      	ldr	r2, [pc, #156]	@ (8015fc4 <TIM_Base_SetConfig+0xd4>)
 8015f26:	4293      	cmp	r3, r2
 8015f28:	d00b      	beq.n	8015f42 <TIM_Base_SetConfig+0x52>
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015f30:	d007      	beq.n	8015f42 <TIM_Base_SetConfig+0x52>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	4a24      	ldr	r2, [pc, #144]	@ (8015fc8 <TIM_Base_SetConfig+0xd8>)
 8015f36:	4293      	cmp	r3, r2
 8015f38:	d003      	beq.n	8015f42 <TIM_Base_SetConfig+0x52>
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	4a23      	ldr	r2, [pc, #140]	@ (8015fcc <TIM_Base_SetConfig+0xdc>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d108      	bne.n	8015f54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015f4a:	683b      	ldr	r3, [r7, #0]
 8015f4c:	68db      	ldr	r3, [r3, #12]
 8015f4e:	68fa      	ldr	r2, [r7, #12]
 8015f50:	4313      	orrs	r3, r2
 8015f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	695b      	ldr	r3, [r3, #20]
 8015f5e:	4313      	orrs	r3, r2
 8015f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	689a      	ldr	r2, [r3, #8]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	681a      	ldr	r2, [r3, #0]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	4a12      	ldr	r2, [pc, #72]	@ (8015fc4 <TIM_Base_SetConfig+0xd4>)
 8015f7c:	4293      	cmp	r3, r2
 8015f7e:	d007      	beq.n	8015f90 <TIM_Base_SetConfig+0xa0>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	4a11      	ldr	r2, [pc, #68]	@ (8015fc8 <TIM_Base_SetConfig+0xd8>)
 8015f84:	4293      	cmp	r3, r2
 8015f86:	d003      	beq.n	8015f90 <TIM_Base_SetConfig+0xa0>
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	4a10      	ldr	r2, [pc, #64]	@ (8015fcc <TIM_Base_SetConfig+0xdc>)
 8015f8c:	4293      	cmp	r3, r2
 8015f8e:	d103      	bne.n	8015f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	691a      	ldr	r2, [r3, #16]
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2201      	movs	r2, #1
 8015f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	691b      	ldr	r3, [r3, #16]
 8015fa2:	f003 0301 	and.w	r3, r3, #1
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d105      	bne.n	8015fb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	691b      	ldr	r3, [r3, #16]
 8015fae:	f023 0201 	bic.w	r2, r3, #1
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	611a      	str	r2, [r3, #16]
  }
}
 8015fb6:	bf00      	nop
 8015fb8:	3714      	adds	r7, #20
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	40012c00 	.word	0x40012c00
 8015fc8:	40014400 	.word	0x40014400
 8015fcc:	40014800 	.word	0x40014800

08015fd0 <LL_RCC_GetUSARTClockSource>:
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8015fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015fdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	4013      	ands	r3, r2
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	370c      	adds	r7, #12
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <LL_RCC_GetLPUARTClockSource>:
{
 8015ff0:	b480      	push	{r7}
 8015ff2:	b083      	sub	sp, #12
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8015ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015ffc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	4013      	ands	r3, r2
}
 8016004:	4618      	mov	r0, r3
 8016006:	370c      	adds	r7, #12
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr

08016010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d101      	bne.n	8016022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801601e:	2301      	movs	r3, #1
 8016020:	e042      	b.n	80160a8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016028:	2b00      	cmp	r3, #0
 801602a:	d106      	bne.n	801603a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2200      	movs	r2, #0
 8016030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7ed f90d 	bl	8003254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2224      	movs	r2, #36	@ 0x24
 801603e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	681a      	ldr	r2, [r3, #0]
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	f022 0201 	bic.w	r2, r2, #1
 8016050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016056:	2b00      	cmp	r3, #0
 8016058:	d002      	beq.n	8016060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 fe7e 	bl	8016d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 fc53 	bl	801690c <UART_SetConfig>
 8016066:	4603      	mov	r3, r0
 8016068:	2b01      	cmp	r3, #1
 801606a:	d101      	bne.n	8016070 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801606c:	2301      	movs	r3, #1
 801606e:	e01b      	b.n	80160a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	685a      	ldr	r2, [r3, #4]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801607e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	689a      	ldr	r2, [r3, #8]
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801608e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	681a      	ldr	r2, [r3, #0]
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	f042 0201 	orr.w	r2, r2, #1
 801609e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 fefd 	bl	8016ea0 <UART_CheckIdleState>
 80160a6:	4603      	mov	r3, r0
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3708      	adds	r7, #8
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b08a      	sub	sp, #40	@ 0x28
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4613      	mov	r3, r2
 80160bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80160c4:	2b20      	cmp	r3, #32
 80160c6:	d137      	bne.n	8016138 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d002      	beq.n	80160d4 <HAL_UART_Receive_IT+0x24>
 80160ce:	88fb      	ldrh	r3, [r7, #6]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d101      	bne.n	80160d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80160d4:	2301      	movs	r3, #1
 80160d6:	e030      	b.n	801613a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	2200      	movs	r2, #0
 80160dc:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	4a18      	ldr	r2, [pc, #96]	@ (8016144 <HAL_UART_Receive_IT+0x94>)
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d01f      	beq.n	8016128 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d018      	beq.n	8016128 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	e853 3f00 	ldrex	r3, [r3]
 8016102:	613b      	str	r3, [r7, #16]
   return(result);
 8016104:	693b      	ldr	r3, [r7, #16]
 8016106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801610a:	627b      	str	r3, [r7, #36]	@ 0x24
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	461a      	mov	r2, r3
 8016112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016114:	623b      	str	r3, [r7, #32]
 8016116:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016118:	69f9      	ldr	r1, [r7, #28]
 801611a:	6a3a      	ldr	r2, [r7, #32]
 801611c:	e841 2300 	strex	r3, r2, [r1]
 8016120:	61bb      	str	r3, [r7, #24]
   return(result);
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d1e6      	bne.n	80160f6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016128:	88fb      	ldrh	r3, [r7, #6]
 801612a:	461a      	mov	r2, r3
 801612c:	68b9      	ldr	r1, [r7, #8]
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	f000 ffce 	bl	80170d0 <UART_Start_Receive_IT>
 8016134:	4603      	mov	r3, r0
 8016136:	e000      	b.n	801613a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016138:	2302      	movs	r3, #2
  }
}
 801613a:	4618      	mov	r0, r3
 801613c:	3728      	adds	r7, #40	@ 0x28
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	40008000 	.word	0x40008000

08016148 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b08a      	sub	sp, #40	@ 0x28
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	4613      	mov	r3, r2
 8016154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801615c:	2b20      	cmp	r3, #32
 801615e:	d167      	bne.n	8016230 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d002      	beq.n	801616c <HAL_UART_Transmit_DMA+0x24>
 8016166:	88fb      	ldrh	r3, [r7, #6]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d101      	bne.n	8016170 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801616c:	2301      	movs	r3, #1
 801616e:	e060      	b.n	8016232 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	68ba      	ldr	r2, [r7, #8]
 8016174:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	88fa      	ldrh	r2, [r7, #6]
 801617a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	88fa      	ldrh	r2, [r7, #6]
 8016182:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	2200      	movs	r2, #0
 801618a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2221      	movs	r2, #33	@ 0x21
 8016192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801619a:	2b00      	cmp	r3, #0
 801619c:	d028      	beq.n	80161f0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161a2:	4a26      	ldr	r2, [pc, #152]	@ (801623c <HAL_UART_Transmit_DMA+0xf4>)
 80161a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161aa:	4a25      	ldr	r2, [pc, #148]	@ (8016240 <HAL_UART_Transmit_DMA+0xf8>)
 80161ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161b2:	4a24      	ldr	r2, [pc, #144]	@ (8016244 <HAL_UART_Transmit_DMA+0xfc>)
 80161b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161ba:	2200      	movs	r2, #0
 80161bc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161c6:	4619      	mov	r1, r3
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	3328      	adds	r3, #40	@ 0x28
 80161ce:	461a      	mov	r2, r3
 80161d0:	88fb      	ldrh	r3, [r7, #6]
 80161d2:	f7fa fa09 	bl	80105e8 <HAL_DMA_Start_IT>
 80161d6:	4603      	mov	r3, r0
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d009      	beq.n	80161f0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2210      	movs	r2, #16
 80161e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2220      	movs	r2, #32
 80161e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80161ec:	2301      	movs	r3, #1
 80161ee:	e020      	b.n	8016232 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2240      	movs	r2, #64	@ 0x40
 80161f6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	3308      	adds	r3, #8
 80161fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	e853 3f00 	ldrex	r3, [r3]
 8016206:	613b      	str	r3, [r7, #16]
   return(result);
 8016208:	693b      	ldr	r3, [r7, #16]
 801620a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	3308      	adds	r3, #8
 8016216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016218:	623a      	str	r2, [r7, #32]
 801621a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801621c:	69f9      	ldr	r1, [r7, #28]
 801621e:	6a3a      	ldr	r2, [r7, #32]
 8016220:	e841 2300 	strex	r3, r2, [r1]
 8016224:	61bb      	str	r3, [r7, #24]
   return(result);
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d1e5      	bne.n	80161f8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801622c:	2300      	movs	r3, #0
 801622e:	e000      	b.n	8016232 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8016230:	2302      	movs	r3, #2
  }
}
 8016232:	4618      	mov	r0, r3
 8016234:	3728      	adds	r7, #40	@ 0x28
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	08017463 	.word	0x08017463
 8016240:	080174fd 	.word	0x080174fd
 8016244:	08017519 	.word	0x08017519

08016248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b0ba      	sub	sp, #232	@ 0xe8
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	69db      	ldr	r3, [r3, #28]
 8016256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	689b      	ldr	r3, [r3, #8]
 801626a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801626e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8016272:	f640 030f 	movw	r3, #2063	@ 0x80f
 8016276:	4013      	ands	r3, r2
 8016278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801627c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8016280:	2b00      	cmp	r3, #0
 8016282:	d11b      	bne.n	80162bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016288:	f003 0320 	and.w	r3, r3, #32
 801628c:	2b00      	cmp	r3, #0
 801628e:	d015      	beq.n	80162bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016294:	f003 0320 	and.w	r3, r3, #32
 8016298:	2b00      	cmp	r3, #0
 801629a:	d105      	bne.n	80162a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801629c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80162a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d009      	beq.n	80162bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	f000 8300 	beq.w	80168b2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	4798      	blx	r3
      }
      return;
 80162ba:	e2fa      	b.n	80168b2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80162bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 8123 	beq.w	801650c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80162c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80162ca:	4b8d      	ldr	r3, [pc, #564]	@ (8016500 <HAL_UART_IRQHandler+0x2b8>)
 80162cc:	4013      	ands	r3, r2
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d106      	bne.n	80162e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80162d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80162d6:	4b8b      	ldr	r3, [pc, #556]	@ (8016504 <HAL_UART_IRQHandler+0x2bc>)
 80162d8:	4013      	ands	r3, r2
 80162da:	2b00      	cmp	r3, #0
 80162dc:	f000 8116 	beq.w	801650c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80162e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80162e4:	f003 0301 	and.w	r3, r3, #1
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d011      	beq.n	8016310 <HAL_UART_IRQHandler+0xc8>
 80162ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80162f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d00b      	beq.n	8016310 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2201      	movs	r2, #1
 80162fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016306:	f043 0201 	orr.w	r2, r3, #1
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016314:	f003 0302 	and.w	r3, r3, #2
 8016318:	2b00      	cmp	r3, #0
 801631a:	d011      	beq.n	8016340 <HAL_UART_IRQHandler+0xf8>
 801631c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016320:	f003 0301 	and.w	r3, r3, #1
 8016324:	2b00      	cmp	r3, #0
 8016326:	d00b      	beq.n	8016340 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	2202      	movs	r2, #2
 801632e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016336:	f043 0204 	orr.w	r2, r3, #4
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016344:	f003 0304 	and.w	r3, r3, #4
 8016348:	2b00      	cmp	r3, #0
 801634a:	d011      	beq.n	8016370 <HAL_UART_IRQHandler+0x128>
 801634c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016350:	f003 0301 	and.w	r3, r3, #1
 8016354:	2b00      	cmp	r3, #0
 8016356:	d00b      	beq.n	8016370 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2204      	movs	r2, #4
 801635e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016366:	f043 0202 	orr.w	r2, r3, #2
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016374:	f003 0308 	and.w	r3, r3, #8
 8016378:	2b00      	cmp	r3, #0
 801637a:	d017      	beq.n	80163ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016380:	f003 0320 	and.w	r3, r3, #32
 8016384:	2b00      	cmp	r3, #0
 8016386:	d105      	bne.n	8016394 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8016388:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801638c:	4b5c      	ldr	r3, [pc, #368]	@ (8016500 <HAL_UART_IRQHandler+0x2b8>)
 801638e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016390:	2b00      	cmp	r3, #0
 8016392:	d00b      	beq.n	80163ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	2208      	movs	r2, #8
 801639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80163a2:	f043 0208 	orr.w	r2, r3, #8
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80163ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80163b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d012      	beq.n	80163de <HAL_UART_IRQHandler+0x196>
 80163b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80163bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00c      	beq.n	80163de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80163cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80163d4:	f043 0220 	orr.w	r2, r3, #32
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f000 8266 	beq.w	80168b6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80163ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80163ee:	f003 0320 	and.w	r3, r3, #32
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d013      	beq.n	801641e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80163f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80163fa:	f003 0320 	and.w	r3, r3, #32
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d105      	bne.n	801640e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801640a:	2b00      	cmp	r3, #0
 801640c:	d007      	beq.n	801641e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016412:	2b00      	cmp	r3, #0
 8016414:	d003      	beq.n	801641e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016424:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	689b      	ldr	r3, [r3, #8]
 801642e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016432:	2b40      	cmp	r3, #64	@ 0x40
 8016434:	d005      	beq.n	8016442 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801643a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801643e:	2b00      	cmp	r3, #0
 8016440:	d054      	beq.n	80164ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f000 ffa7 	bl	8017396 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	689b      	ldr	r3, [r3, #8]
 801644e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016452:	2b40      	cmp	r3, #64	@ 0x40
 8016454:	d146      	bne.n	80164e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	3308      	adds	r3, #8
 801645c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016460:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016464:	e853 3f00 	ldrex	r3, [r3]
 8016468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801646c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	3308      	adds	r3, #8
 801647e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8016482:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8016486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801648a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801648e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8016492:	e841 2300 	strex	r3, r2, [r1]
 8016496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801649a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d1d9      	bne.n	8016456 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d017      	beq.n	80164dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80164b2:	4a15      	ldr	r2, [pc, #84]	@ (8016508 <HAL_UART_IRQHandler+0x2c0>)
 80164b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80164bc:	4618      	mov	r0, r3
 80164be:	f7fa f96d 	bl	801079c <HAL_DMA_Abort_IT>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d019      	beq.n	80164fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80164ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80164d6:	4610      	mov	r0, r2
 80164d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164da:	e00f      	b.n	80164fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f000 f9ff 	bl	80168e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164e2:	e00b      	b.n	80164fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f000 f9fb 	bl	80168e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164ea:	e007      	b.n	80164fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f000 f9f7 	bl	80168e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2200      	movs	r2, #0
 80164f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80164fa:	e1dc      	b.n	80168b6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164fc:	bf00      	nop
    return;
 80164fe:	e1da      	b.n	80168b6 <HAL_UART_IRQHandler+0x66e>
 8016500:	10000001 	.word	0x10000001
 8016504:	04000120 	.word	0x04000120
 8016508:	08017599 	.word	0x08017599

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016510:	2b01      	cmp	r3, #1
 8016512:	f040 8170 	bne.w	80167f6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801651a:	f003 0310 	and.w	r3, r3, #16
 801651e:	2b00      	cmp	r3, #0
 8016520:	f000 8169 	beq.w	80167f6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016528:	f003 0310 	and.w	r3, r3, #16
 801652c:	2b00      	cmp	r3, #0
 801652e:	f000 8162 	beq.w	80167f6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2210      	movs	r2, #16
 8016538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	689b      	ldr	r3, [r3, #8]
 8016540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016544:	2b40      	cmp	r3, #64	@ 0x40
 8016546:	f040 80d8 	bne.w	80166fa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801655c:	2b00      	cmp	r3, #0
 801655e:	f000 80af 	beq.w	80166c0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8016568:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801656c:	429a      	cmp	r2, r3
 801656e:	f080 80a7 	bcs.w	80166c0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8016578:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f003 0320 	and.w	r3, r3, #32
 801658a:	2b00      	cmp	r3, #0
 801658c:	f040 8087 	bne.w	801669e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801659c:	e853 3f00 	ldrex	r3, [r3]
 80165a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80165a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80165a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80165ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	461a      	mov	r2, r3
 80165b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80165ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80165be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80165c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80165ca:	e841 2300 	strex	r3, r2, [r1]
 80165ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80165d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d1da      	bne.n	8016590 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	3308      	adds	r3, #8
 80165e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80165e4:	e853 3f00 	ldrex	r3, [r3]
 80165e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80165ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80165ec:	f023 0301 	bic.w	r3, r3, #1
 80165f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	3308      	adds	r3, #8
 80165fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80165fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8016602:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016604:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8016606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801660a:	e841 2300 	strex	r3, r2, [r1]
 801660e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8016610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016612:	2b00      	cmp	r3, #0
 8016614:	d1e1      	bne.n	80165da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	3308      	adds	r3, #8
 801661c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801661e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016620:	e853 3f00 	ldrex	r3, [r3]
 8016624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8016626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801662c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	3308      	adds	r3, #8
 8016636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801663a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801663c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801663e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8016640:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016642:	e841 2300 	strex	r3, r2, [r1]
 8016646:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8016648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801664a:	2b00      	cmp	r3, #0
 801664c:	d1e3      	bne.n	8016616 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2220      	movs	r2, #32
 8016652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2200      	movs	r2, #0
 801665a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016664:	e853 3f00 	ldrex	r3, [r3]
 8016668:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801666a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801666c:	f023 0310 	bic.w	r3, r3, #16
 8016670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	461a      	mov	r2, r3
 801667a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801667e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016680:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016684:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8016686:	e841 2300 	strex	r3, r2, [r1]
 801668a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801668c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801668e:	2b00      	cmp	r3, #0
 8016690:	d1e4      	bne.n	801665c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016698:	4618      	mov	r0, r3
 801669a:	f7fa f820 	bl	80106de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2202      	movs	r2, #2
 80166a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	4619      	mov	r1, r3
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 f91b 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80166be:	e0fc      	b.n	80168ba <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80166c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80166ca:	429a      	cmp	r2, r3
 80166cc:	f040 80f5 	bne.w	80168ba <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	f003 0320 	and.w	r3, r3, #32
 80166de:	2b20      	cmp	r3, #32
 80166e0:	f040 80eb 	bne.w	80168ba <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2202      	movs	r2, #2
 80166e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80166f0:	4619      	mov	r1, r3
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f000 f8fe 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
      return;
 80166f8:	e0df      	b.n	80168ba <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016706:	b29b      	uxth	r3, r3
 8016708:	1ad3      	subs	r3, r2, r3
 801670a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016714:	b29b      	uxth	r3, r3
 8016716:	2b00      	cmp	r3, #0
 8016718:	f000 80d1 	beq.w	80168be <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 801671c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8016720:	2b00      	cmp	r3, #0
 8016722:	f000 80cc 	beq.w	80168be <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801672e:	e853 3f00 	ldrex	r3, [r3]
 8016732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801673a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	461a      	mov	r2, r3
 8016744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8016748:	647b      	str	r3, [r7, #68]	@ 0x44
 801674a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801674c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801674e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016750:	e841 2300 	strex	r3, r2, [r1]
 8016754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016758:	2b00      	cmp	r3, #0
 801675a:	d1e4      	bne.n	8016726 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	3308      	adds	r3, #8
 8016762:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016766:	e853 3f00 	ldrex	r3, [r3]
 801676a:	623b      	str	r3, [r7, #32]
   return(result);
 801676c:	6a3b      	ldr	r3, [r7, #32]
 801676e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016772:	f023 0301 	bic.w	r3, r3, #1
 8016776:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	3308      	adds	r3, #8
 8016780:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8016784:	633a      	str	r2, [r7, #48]	@ 0x30
 8016786:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801678a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801678c:	e841 2300 	strex	r3, r2, [r1]
 8016790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016794:	2b00      	cmp	r3, #0
 8016796:	d1e1      	bne.n	801675c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2220      	movs	r2, #32
 801679c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2200      	movs	r2, #0
 80167aa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	e853 3f00 	ldrex	r3, [r3]
 80167b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f023 0310 	bic.w	r3, r3, #16
 80167c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	461a      	mov	r2, r3
 80167ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80167ce:	61fb      	str	r3, [r7, #28]
 80167d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167d2:	69b9      	ldr	r1, [r7, #24]
 80167d4:	69fa      	ldr	r2, [r7, #28]
 80167d6:	e841 2300 	strex	r3, r2, [r1]
 80167da:	617b      	str	r3, [r7, #20]
   return(result);
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d1e4      	bne.n	80167ac <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2202      	movs	r2, #2
 80167e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80167e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80167ec:	4619      	mov	r1, r3
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f000 f880 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80167f4:	e063      	b.n	80168be <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80167f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80167fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d00e      	beq.n	8016820 <HAL_UART_IRQHandler+0x5d8>
 8016802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801680a:	2b00      	cmp	r3, #0
 801680c:	d008      	beq.n	8016820 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8016816:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f001 fc1b 	bl	8018054 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801681e:	e051      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016828:	2b00      	cmp	r3, #0
 801682a:	d014      	beq.n	8016856 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016834:	2b00      	cmp	r3, #0
 8016836:	d105      	bne.n	8016844 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801683c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8016840:	2b00      	cmp	r3, #0
 8016842:	d008      	beq.n	8016856 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016848:	2b00      	cmp	r3, #0
 801684a:	d03a      	beq.n	80168c2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	4798      	blx	r3
    }
    return;
 8016854:	e035      	b.n	80168c2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801685a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801685e:	2b00      	cmp	r3, #0
 8016860:	d009      	beq.n	8016876 <HAL_UART_IRQHandler+0x62e>
 8016862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801686a:	2b00      	cmp	r3, #0
 801686c:	d003      	beq.n	8016876 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f000 fea4 	bl	80175bc <UART_EndTransmit_IT>
    return;
 8016874:	e026      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801687a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801687e:	2b00      	cmp	r3, #0
 8016880:	d009      	beq.n	8016896 <HAL_UART_IRQHandler+0x64e>
 8016882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016886:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801688a:	2b00      	cmp	r3, #0
 801688c:	d003      	beq.n	8016896 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f001 fbf4 	bl	801807c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016894:	e016      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801689a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d010      	beq.n	80168c4 <HAL_UART_IRQHandler+0x67c>
 80168a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	da0c      	bge.n	80168c4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f001 fbdc 	bl	8018068 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80168b0:	e008      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80168b2:	bf00      	nop
 80168b4:	e006      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
    return;
 80168b6:	bf00      	nop
 80168b8:	e004      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80168ba:	bf00      	nop
 80168bc:	e002      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
      return;
 80168be:	bf00      	nop
 80168c0:	e000      	b.n	80168c4 <HAL_UART_IRQHandler+0x67c>
    return;
 80168c2:	bf00      	nop
  }
}
 80168c4:	37e8      	adds	r7, #232	@ 0xe8
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop

080168cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80168cc:	b480      	push	{r7}
 80168ce:	b083      	sub	sp, #12
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80168d4:	bf00      	nop
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr

080168e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b083      	sub	sp, #12
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80168e8:	bf00      	nop
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr

080168f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016900:	bf00      	nop
 8016902:	370c      	adds	r7, #12
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016910:	b08c      	sub	sp, #48	@ 0x30
 8016912:	af00      	add	r7, sp, #0
 8016914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016916:	2300      	movs	r3, #0
 8016918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	689a      	ldr	r2, [r3, #8]
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	691b      	ldr	r3, [r3, #16]
 8016924:	431a      	orrs	r2, r3
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	695b      	ldr	r3, [r3, #20]
 801692a:	431a      	orrs	r2, r3
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	69db      	ldr	r3, [r3, #28]
 8016930:	4313      	orrs	r3, r2
 8016932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	4baf      	ldr	r3, [pc, #700]	@ (8016bf8 <UART_SetConfig+0x2ec>)
 801693c:	4013      	ands	r3, r2
 801693e:	697a      	ldr	r2, [r7, #20]
 8016940:	6812      	ldr	r2, [r2, #0]
 8016942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016944:	430b      	orrs	r3, r1
 8016946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	685b      	ldr	r3, [r3, #4]
 801694e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	68da      	ldr	r2, [r3, #12]
 8016956:	697b      	ldr	r3, [r7, #20]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	430a      	orrs	r2, r1
 801695c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	699b      	ldr	r3, [r3, #24]
 8016962:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4aa4      	ldr	r2, [pc, #656]	@ (8016bfc <UART_SetConfig+0x2f0>)
 801696a:	4293      	cmp	r3, r2
 801696c:	d004      	beq.n	8016978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	6a1b      	ldr	r3, [r3, #32]
 8016972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016974:	4313      	orrs	r3, r2
 8016976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	689b      	ldr	r3, [r3, #8]
 801697e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8016982:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8016986:	697a      	ldr	r2, [r7, #20]
 8016988:	6812      	ldr	r2, [r2, #0]
 801698a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801698c:	430b      	orrs	r3, r1
 801698e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016990:	697b      	ldr	r3, [r7, #20]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016996:	f023 010f 	bic.w	r1, r3, #15
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801699e:	697b      	ldr	r3, [r7, #20]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	430a      	orrs	r2, r1
 80169a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	4a95      	ldr	r2, [pc, #596]	@ (8016c00 <UART_SetConfig+0x2f4>)
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d125      	bne.n	80169fc <UART_SetConfig+0xf0>
 80169b0:	2003      	movs	r0, #3
 80169b2:	f7ff fb0d 	bl	8015fd0 <LL_RCC_GetUSARTClockSource>
 80169b6:	4603      	mov	r3, r0
 80169b8:	2b03      	cmp	r3, #3
 80169ba:	d81b      	bhi.n	80169f4 <UART_SetConfig+0xe8>
 80169bc:	a201      	add	r2, pc, #4	@ (adr r2, 80169c4 <UART_SetConfig+0xb8>)
 80169be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169c2:	bf00      	nop
 80169c4:	080169d5 	.word	0x080169d5
 80169c8:	080169e5 	.word	0x080169e5
 80169cc:	080169dd 	.word	0x080169dd
 80169d0:	080169ed 	.word	0x080169ed
 80169d4:	2301      	movs	r3, #1
 80169d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80169da:	e042      	b.n	8016a62 <UART_SetConfig+0x156>
 80169dc:	2302      	movs	r3, #2
 80169de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80169e2:	e03e      	b.n	8016a62 <UART_SetConfig+0x156>
 80169e4:	2304      	movs	r3, #4
 80169e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80169ea:	e03a      	b.n	8016a62 <UART_SetConfig+0x156>
 80169ec:	2308      	movs	r3, #8
 80169ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80169f2:	e036      	b.n	8016a62 <UART_SetConfig+0x156>
 80169f4:	2310      	movs	r3, #16
 80169f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80169fa:	e032      	b.n	8016a62 <UART_SetConfig+0x156>
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	4a7e      	ldr	r2, [pc, #504]	@ (8016bfc <UART_SetConfig+0x2f0>)
 8016a02:	4293      	cmp	r3, r2
 8016a04:	d12a      	bne.n	8016a5c <UART_SetConfig+0x150>
 8016a06:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8016a0a:	f7ff faf1 	bl	8015ff0 <LL_RCC_GetLPUARTClockSource>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016a14:	d01a      	beq.n	8016a4c <UART_SetConfig+0x140>
 8016a16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016a1a:	d81b      	bhi.n	8016a54 <UART_SetConfig+0x148>
 8016a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a20:	d00c      	beq.n	8016a3c <UART_SetConfig+0x130>
 8016a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a26:	d815      	bhi.n	8016a54 <UART_SetConfig+0x148>
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d003      	beq.n	8016a34 <UART_SetConfig+0x128>
 8016a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a30:	d008      	beq.n	8016a44 <UART_SetConfig+0x138>
 8016a32:	e00f      	b.n	8016a54 <UART_SetConfig+0x148>
 8016a34:	2300      	movs	r3, #0
 8016a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016a3a:	e012      	b.n	8016a62 <UART_SetConfig+0x156>
 8016a3c:	2302      	movs	r3, #2
 8016a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016a42:	e00e      	b.n	8016a62 <UART_SetConfig+0x156>
 8016a44:	2304      	movs	r3, #4
 8016a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016a4a:	e00a      	b.n	8016a62 <UART_SetConfig+0x156>
 8016a4c:	2308      	movs	r3, #8
 8016a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016a52:	e006      	b.n	8016a62 <UART_SetConfig+0x156>
 8016a54:	2310      	movs	r3, #16
 8016a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016a5a:	e002      	b.n	8016a62 <UART_SetConfig+0x156>
 8016a5c:	2310      	movs	r3, #16
 8016a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016a62:	697b      	ldr	r3, [r7, #20]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	4a65      	ldr	r2, [pc, #404]	@ (8016bfc <UART_SetConfig+0x2f0>)
 8016a68:	4293      	cmp	r3, r2
 8016a6a:	f040 8097 	bne.w	8016b9c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016a72:	2b08      	cmp	r3, #8
 8016a74:	d823      	bhi.n	8016abe <UART_SetConfig+0x1b2>
 8016a76:	a201      	add	r2, pc, #4	@ (adr r2, 8016a7c <UART_SetConfig+0x170>)
 8016a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a7c:	08016aa1 	.word	0x08016aa1
 8016a80:	08016abf 	.word	0x08016abf
 8016a84:	08016aa9 	.word	0x08016aa9
 8016a88:	08016abf 	.word	0x08016abf
 8016a8c:	08016aaf 	.word	0x08016aaf
 8016a90:	08016abf 	.word	0x08016abf
 8016a94:	08016abf 	.word	0x08016abf
 8016a98:	08016abf 	.word	0x08016abf
 8016a9c:	08016ab7 	.word	0x08016ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016aa0:	f7fc fd86 	bl	80135b0 <HAL_RCC_GetPCLK1Freq>
 8016aa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016aa6:	e010      	b.n	8016aca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016aa8:	4b56      	ldr	r3, [pc, #344]	@ (8016c04 <UART_SetConfig+0x2f8>)
 8016aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016aac:	e00d      	b.n	8016aca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016aae:	f7fc fcff 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8016ab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016ab4:	e009      	b.n	8016aca <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016ab6:	f248 0306 	movw	r3, #32774	@ 0x8006
 8016aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016abc:	e005      	b.n	8016aca <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8016ac8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	f000 812b 	beq.w	8016d28 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8016c08 <UART_SetConfig+0x2fc>)
 8016ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016adc:	461a      	mov	r2, r3
 8016ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ae4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	685a      	ldr	r2, [r3, #4]
 8016aea:	4613      	mov	r3, r2
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	4413      	add	r3, r2
 8016af0:	69ba      	ldr	r2, [r7, #24]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d305      	bcc.n	8016b02 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016afc:	69ba      	ldr	r2, [r7, #24]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d903      	bls.n	8016b0a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8016b02:	2301      	movs	r3, #1
 8016b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016b08:	e10e      	b.n	8016d28 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	60bb      	str	r3, [r7, #8]
 8016b10:	60fa      	str	r2, [r7, #12]
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b16:	4a3c      	ldr	r2, [pc, #240]	@ (8016c08 <UART_SetConfig+0x2fc>)
 8016b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	2200      	movs	r2, #0
 8016b20:	603b      	str	r3, [r7, #0]
 8016b22:	607a      	str	r2, [r7, #4]
 8016b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016b2c:	f7ea f874 	bl	8000c18 <__aeabi_uldivmod>
 8016b30:	4602      	mov	r2, r0
 8016b32:	460b      	mov	r3, r1
 8016b34:	4610      	mov	r0, r2
 8016b36:	4619      	mov	r1, r3
 8016b38:	f04f 0200 	mov.w	r2, #0
 8016b3c:	f04f 0300 	mov.w	r3, #0
 8016b40:	020b      	lsls	r3, r1, #8
 8016b42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016b46:	0202      	lsls	r2, r0, #8
 8016b48:	6979      	ldr	r1, [r7, #20]
 8016b4a:	6849      	ldr	r1, [r1, #4]
 8016b4c:	0849      	lsrs	r1, r1, #1
 8016b4e:	2000      	movs	r0, #0
 8016b50:	460c      	mov	r4, r1
 8016b52:	4605      	mov	r5, r0
 8016b54:	eb12 0804 	adds.w	r8, r2, r4
 8016b58:	eb43 0905 	adc.w	r9, r3, r5
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	685b      	ldr	r3, [r3, #4]
 8016b60:	2200      	movs	r2, #0
 8016b62:	469a      	mov	sl, r3
 8016b64:	4693      	mov	fp, r2
 8016b66:	4652      	mov	r2, sl
 8016b68:	465b      	mov	r3, fp
 8016b6a:	4640      	mov	r0, r8
 8016b6c:	4649      	mov	r1, r9
 8016b6e:	f7ea f853 	bl	8000c18 <__aeabi_uldivmod>
 8016b72:	4602      	mov	r2, r0
 8016b74:	460b      	mov	r3, r1
 8016b76:	4613      	mov	r3, r2
 8016b78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016b7a:	6a3b      	ldr	r3, [r7, #32]
 8016b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016b80:	d308      	bcc.n	8016b94 <UART_SetConfig+0x288>
 8016b82:	6a3b      	ldr	r3, [r7, #32]
 8016b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b88:	d204      	bcs.n	8016b94 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	6a3a      	ldr	r2, [r7, #32]
 8016b90:	60da      	str	r2, [r3, #12]
 8016b92:	e0c9      	b.n	8016d28 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8016b94:	2301      	movs	r3, #1
 8016b96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016b9a:	e0c5      	b.n	8016d28 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	69db      	ldr	r3, [r3, #28]
 8016ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016ba4:	d16d      	bne.n	8016c82 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8016ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016baa:	3b01      	subs	r3, #1
 8016bac:	2b07      	cmp	r3, #7
 8016bae:	d82d      	bhi.n	8016c0c <UART_SetConfig+0x300>
 8016bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8016bb8 <UART_SetConfig+0x2ac>)
 8016bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bb6:	bf00      	nop
 8016bb8:	08016bd9 	.word	0x08016bd9
 8016bbc:	08016be1 	.word	0x08016be1
 8016bc0:	08016c0d 	.word	0x08016c0d
 8016bc4:	08016be7 	.word	0x08016be7
 8016bc8:	08016c0d 	.word	0x08016c0d
 8016bcc:	08016c0d 	.word	0x08016c0d
 8016bd0:	08016c0d 	.word	0x08016c0d
 8016bd4:	08016bef 	.word	0x08016bef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016bd8:	f7fc fd00 	bl	80135dc <HAL_RCC_GetPCLK2Freq>
 8016bdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016bde:	e01b      	b.n	8016c18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016be0:	4b08      	ldr	r3, [pc, #32]	@ (8016c04 <UART_SetConfig+0x2f8>)
 8016be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016be4:	e018      	b.n	8016c18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016be6:	f7fc fc63 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8016bea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016bec:	e014      	b.n	8016c18 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016bee:	f248 0306 	movw	r3, #32774	@ 0x8006
 8016bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016bf4:	e010      	b.n	8016c18 <UART_SetConfig+0x30c>
 8016bf6:	bf00      	nop
 8016bf8:	cfff69f3 	.word	0xcfff69f3
 8016bfc:	40008000 	.word	0x40008000
 8016c00:	40013800 	.word	0x40013800
 8016c04:	00f42400 	.word	0x00f42400
 8016c08:	080207cc 	.word	0x080207cc
      default:
        pclk = 0U;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8016c10:	2301      	movs	r3, #1
 8016c12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8016c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f000 8084 	beq.w	8016d28 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016c20:	697b      	ldr	r3, [r7, #20]
 8016c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c24:	4a4b      	ldr	r2, [pc, #300]	@ (8016d54 <UART_SetConfig+0x448>)
 8016c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c32:	005a      	lsls	r2, r3, #1
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	085b      	lsrs	r3, r3, #1
 8016c3a:	441a      	add	r2, r3
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c44:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016c46:	6a3b      	ldr	r3, [r7, #32]
 8016c48:	2b0f      	cmp	r3, #15
 8016c4a:	d916      	bls.n	8016c7a <UART_SetConfig+0x36e>
 8016c4c:	6a3b      	ldr	r3, [r7, #32]
 8016c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016c52:	d212      	bcs.n	8016c7a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016c54:	6a3b      	ldr	r3, [r7, #32]
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	f023 030f 	bic.w	r3, r3, #15
 8016c5c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016c5e:	6a3b      	ldr	r3, [r7, #32]
 8016c60:	085b      	lsrs	r3, r3, #1
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	f003 0307 	and.w	r3, r3, #7
 8016c68:	b29a      	uxth	r2, r3
 8016c6a:	8bfb      	ldrh	r3, [r7, #30]
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	8bfa      	ldrh	r2, [r7, #30]
 8016c76:	60da      	str	r2, [r3, #12]
 8016c78:	e056      	b.n	8016d28 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016c80:	e052      	b.n	8016d28 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016c86:	3b01      	subs	r3, #1
 8016c88:	2b07      	cmp	r3, #7
 8016c8a:	d822      	bhi.n	8016cd2 <UART_SetConfig+0x3c6>
 8016c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8016c94 <UART_SetConfig+0x388>)
 8016c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c92:	bf00      	nop
 8016c94:	08016cb5 	.word	0x08016cb5
 8016c98:	08016cbd 	.word	0x08016cbd
 8016c9c:	08016cd3 	.word	0x08016cd3
 8016ca0:	08016cc3 	.word	0x08016cc3
 8016ca4:	08016cd3 	.word	0x08016cd3
 8016ca8:	08016cd3 	.word	0x08016cd3
 8016cac:	08016cd3 	.word	0x08016cd3
 8016cb0:	08016ccb 	.word	0x08016ccb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016cb4:	f7fc fc92 	bl	80135dc <HAL_RCC_GetPCLK2Freq>
 8016cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016cba:	e010      	b.n	8016cde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016cbc:	4b26      	ldr	r3, [pc, #152]	@ (8016d58 <UART_SetConfig+0x44c>)
 8016cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016cc0:	e00d      	b.n	8016cde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016cc2:	f7fc fbf5 	bl	80134b0 <HAL_RCC_GetSysClockFreq>
 8016cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016cc8:	e009      	b.n	8016cde <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016cca:	f248 0306 	movw	r3, #32774	@ 0x8006
 8016cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016cd0:	e005      	b.n	8016cde <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8016cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8016cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d021      	beq.n	8016d28 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8016d54 <UART_SetConfig+0x448>)
 8016cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	685b      	ldr	r3, [r3, #4]
 8016cfa:	085b      	lsrs	r3, r3, #1
 8016cfc:	441a      	add	r2, r3
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	685b      	ldr	r3, [r3, #4]
 8016d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016d08:	6a3b      	ldr	r3, [r7, #32]
 8016d0a:	2b0f      	cmp	r3, #15
 8016d0c:	d909      	bls.n	8016d22 <UART_SetConfig+0x416>
 8016d0e:	6a3b      	ldr	r3, [r7, #32]
 8016d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016d14:	d205      	bcs.n	8016d22 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016d16:	6a3b      	ldr	r3, [r7, #32]
 8016d18:	b29a      	uxth	r2, r3
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	60da      	str	r2, [r3, #12]
 8016d20:	e002      	b.n	8016d28 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8016d22:	2301      	movs	r3, #1
 8016d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	2201      	movs	r2, #1
 8016d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	2201      	movs	r2, #1
 8016d34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	2200      	movs	r2, #0
 8016d42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8016d44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3730      	adds	r7, #48	@ 0x30
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016d52:	bf00      	nop
 8016d54:	080207cc 	.word	0x080207cc
 8016d58:	00f42400 	.word	0x00f42400

08016d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016d5c:	b480      	push	{r7}
 8016d5e:	b083      	sub	sp, #12
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d68:	f003 0308 	and.w	r3, r3, #8
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00a      	beq.n	8016d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	430a      	orrs	r2, r1
 8016d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d8a:	f003 0301 	and.w	r3, r3, #1
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d00a      	beq.n	8016da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	430a      	orrs	r2, r1
 8016da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016dac:	f003 0302 	and.w	r3, r3, #2
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d00a      	beq.n	8016dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	430a      	orrs	r2, r1
 8016dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016dce:	f003 0304 	and.w	r3, r3, #4
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d00a      	beq.n	8016dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	430a      	orrs	r2, r1
 8016dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016df0:	f003 0310 	and.w	r3, r3, #16
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d00a      	beq.n	8016e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	689b      	ldr	r3, [r3, #8]
 8016dfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	430a      	orrs	r2, r1
 8016e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e12:	f003 0320 	and.w	r3, r3, #32
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00a      	beq.n	8016e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	689b      	ldr	r3, [r3, #8]
 8016e20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	430a      	orrs	r2, r1
 8016e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d01a      	beq.n	8016e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	685b      	ldr	r3, [r3, #4]
 8016e42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	430a      	orrs	r2, r1
 8016e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016e5a:	d10a      	bne.n	8016e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	685b      	ldr	r3, [r3, #4]
 8016e62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	430a      	orrs	r2, r1
 8016e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00a      	beq.n	8016e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	430a      	orrs	r2, r1
 8016e92:	605a      	str	r2, [r3, #4]
  }
}
 8016e94:	bf00      	nop
 8016e96:	370c      	adds	r7, #12
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b098      	sub	sp, #96	@ 0x60
 8016ea4:	af02      	add	r7, sp, #8
 8016ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016eb0:	f7f9 f928 	bl	8010104 <HAL_GetTick>
 8016eb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f003 0308 	and.w	r3, r3, #8
 8016ec0:	2b08      	cmp	r3, #8
 8016ec2:	d12f      	bne.n	8016f24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016ec4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ecc:	2200      	movs	r2, #0
 8016ece:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f000 f88e 	bl	8016ff4 <UART_WaitOnFlagUntilTimeout>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d022      	beq.n	8016f24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ee6:	e853 3f00 	ldrex	r3, [r3]
 8016eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	461a      	mov	r2, r3
 8016efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8016efe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016f02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016f04:	e841 2300 	strex	r3, r2, [r1]
 8016f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d1e6      	bne.n	8016ede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2220      	movs	r2, #32
 8016f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016f20:	2303      	movs	r3, #3
 8016f22:	e063      	b.n	8016fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	f003 0304 	and.w	r3, r3, #4
 8016f2e:	2b04      	cmp	r3, #4
 8016f30:	d149      	bne.n	8016fc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016f32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f000 f857 	bl	8016ff4 <UART_WaitOnFlagUntilTimeout>
 8016f46:	4603      	mov	r3, r0
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d03c      	beq.n	8016fc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f54:	e853 3f00 	ldrex	r3, [r3]
 8016f58:	623b      	str	r3, [r7, #32]
   return(result);
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	461a      	mov	r2, r3
 8016f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f72:	e841 2300 	strex	r3, r2, [r1]
 8016f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d1e6      	bne.n	8016f4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	3308      	adds	r3, #8
 8016f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	e853 3f00 	ldrex	r3, [r3]
 8016f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f023 0301 	bic.w	r3, r3, #1
 8016f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	3308      	adds	r3, #8
 8016f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016f9e:	61fa      	str	r2, [r7, #28]
 8016fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fa2:	69b9      	ldr	r1, [r7, #24]
 8016fa4:	69fa      	ldr	r2, [r7, #28]
 8016fa6:	e841 2300 	strex	r3, r2, [r1]
 8016faa:	617b      	str	r3, [r7, #20]
   return(result);
 8016fac:	697b      	ldr	r3, [r7, #20]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d1e5      	bne.n	8016f7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2220      	movs	r2, #32
 8016fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016fc2:	2303      	movs	r3, #3
 8016fc4:	e012      	b.n	8016fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	2220      	movs	r2, #32
 8016fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2220      	movs	r2, #32
 8016fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8016fea:	2300      	movs	r3, #0
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3758      	adds	r7, #88	@ 0x58
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	60f8      	str	r0, [r7, #12]
 8016ffc:	60b9      	str	r1, [r7, #8]
 8016ffe:	603b      	str	r3, [r7, #0]
 8017000:	4613      	mov	r3, r2
 8017002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017004:	e04f      	b.n	80170a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017006:	69bb      	ldr	r3, [r7, #24]
 8017008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801700c:	d04b      	beq.n	80170a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801700e:	f7f9 f879 	bl	8010104 <HAL_GetTick>
 8017012:	4602      	mov	r2, r0
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	1ad3      	subs	r3, r2, r3
 8017018:	69ba      	ldr	r2, [r7, #24]
 801701a:	429a      	cmp	r2, r3
 801701c:	d302      	bcc.n	8017024 <UART_WaitOnFlagUntilTimeout+0x30>
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d101      	bne.n	8017028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8017024:	2303      	movs	r3, #3
 8017026:	e04e      	b.n	80170c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	f003 0304 	and.w	r3, r3, #4
 8017032:	2b00      	cmp	r3, #0
 8017034:	d037      	beq.n	80170a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	2b80      	cmp	r3, #128	@ 0x80
 801703a:	d034      	beq.n	80170a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	2b40      	cmp	r3, #64	@ 0x40
 8017040:	d031      	beq.n	80170a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	69db      	ldr	r3, [r3, #28]
 8017048:	f003 0308 	and.w	r3, r3, #8
 801704c:	2b08      	cmp	r3, #8
 801704e:	d110      	bne.n	8017072 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2208      	movs	r2, #8
 8017056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f000 f99c 	bl	8017396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	2208      	movs	r2, #8
 8017062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	2200      	movs	r2, #0
 801706a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801706e:	2301      	movs	r3, #1
 8017070:	e029      	b.n	80170c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	69db      	ldr	r3, [r3, #28]
 8017078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801707c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017080:	d111      	bne.n	80170a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801708a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801708c:	68f8      	ldr	r0, [r7, #12]
 801708e:	f000 f982 	bl	8017396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2220      	movs	r2, #32
 8017096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	2200      	movs	r2, #0
 801709e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80170a2:	2303      	movs	r3, #3
 80170a4:	e00f      	b.n	80170c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	69da      	ldr	r2, [r3, #28]
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	4013      	ands	r3, r2
 80170b0:	68ba      	ldr	r2, [r7, #8]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	bf0c      	ite	eq
 80170b6:	2301      	moveq	r3, #1
 80170b8:	2300      	movne	r3, #0
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	461a      	mov	r2, r3
 80170be:	79fb      	ldrb	r3, [r7, #7]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d0a0      	beq.n	8017006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80170c4:	2300      	movs	r3, #0
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3710      	adds	r7, #16
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
	...

080170d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b0a3      	sub	sp, #140	@ 0x8c
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	60f8      	str	r0, [r7, #12]
 80170d8:	60b9      	str	r1, [r7, #8]
 80170da:	4613      	mov	r3, r2
 80170dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	88fa      	ldrh	r2, [r7, #6]
 80170e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	88fa      	ldrh	r2, [r7, #6]
 80170f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2200      	movs	r2, #0
 80170f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	689b      	ldr	r3, [r3, #8]
 80170fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017102:	d10e      	bne.n	8017122 <UART_Start_Receive_IT+0x52>
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	691b      	ldr	r3, [r3, #16]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d105      	bne.n	8017118 <UART_Start_Receive_IT+0x48>
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8017112:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8017116:	e02d      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	22ff      	movs	r2, #255	@ 0xff
 801711c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8017120:	e028      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	689b      	ldr	r3, [r3, #8]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d10d      	bne.n	8017146 <UART_Start_Receive_IT+0x76>
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	691b      	ldr	r3, [r3, #16]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d104      	bne.n	801713c <UART_Start_Receive_IT+0x6c>
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	22ff      	movs	r2, #255	@ 0xff
 8017136:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801713a:	e01b      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	227f      	movs	r2, #127	@ 0x7f
 8017140:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8017144:	e016      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	689b      	ldr	r3, [r3, #8]
 801714a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801714e:	d10d      	bne.n	801716c <UART_Start_Receive_IT+0x9c>
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	691b      	ldr	r3, [r3, #16]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d104      	bne.n	8017162 <UART_Start_Receive_IT+0x92>
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	227f      	movs	r2, #127	@ 0x7f
 801715c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8017160:	e008      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	223f      	movs	r2, #63	@ 0x3f
 8017166:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801716a:	e003      	b.n	8017174 <UART_Start_Receive_IT+0xa4>
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	2200      	movs	r2, #0
 8017170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2200      	movs	r2, #0
 8017178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2222      	movs	r2, #34	@ 0x22
 8017180:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	3308      	adds	r3, #8
 801718a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801718c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801718e:	e853 3f00 	ldrex	r3, [r3]
 8017192:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8017194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017196:	f043 0301 	orr.w	r3, r3, #1
 801719a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	3308      	adds	r3, #8
 80171a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80171a8:	673a      	str	r2, [r7, #112]	@ 0x70
 80171aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80171ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80171b0:	e841 2300 	strex	r3, r2, [r1]
 80171b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80171b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d1e3      	bne.n	8017184 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80171c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80171c4:	d14f      	bne.n	8017266 <UART_Start_Receive_IT+0x196>
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80171cc:	88fa      	ldrh	r2, [r7, #6]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d349      	bcc.n	8017266 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	689b      	ldr	r3, [r3, #8]
 80171d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80171da:	d107      	bne.n	80171ec <UART_Start_Receive_IT+0x11c>
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	691b      	ldr	r3, [r3, #16]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d103      	bne.n	80171ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	4a47      	ldr	r2, [pc, #284]	@ (8017304 <UART_Start_Receive_IT+0x234>)
 80171e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80171ea:	e002      	b.n	80171f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	4a46      	ldr	r2, [pc, #280]	@ (8017308 <UART_Start_Receive_IT+0x238>)
 80171f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	691b      	ldr	r3, [r3, #16]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d01a      	beq.n	8017230 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017202:	e853 3f00 	ldrex	r3, [r3]
 8017206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8017208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801720a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801720e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	461a      	mov	r2, r3
 8017218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801721c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801721e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017220:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8017222:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017224:	e841 2300 	strex	r3, r2, [r1]
 8017228:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801722a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801722c:	2b00      	cmp	r3, #0
 801722e:	d1e4      	bne.n	80171fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	3308      	adds	r3, #8
 8017236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801723a:	e853 3f00 	ldrex	r3, [r3]
 801723e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017246:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	3308      	adds	r3, #8
 801724e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017250:	64ba      	str	r2, [r7, #72]	@ 0x48
 8017252:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017254:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017258:	e841 2300 	strex	r3, r2, [r1]
 801725c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801725e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1e5      	bne.n	8017230 <UART_Start_Receive_IT+0x160>
 8017264:	e046      	b.n	80172f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	689b      	ldr	r3, [r3, #8]
 801726a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801726e:	d107      	bne.n	8017280 <UART_Start_Receive_IT+0x1b0>
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	691b      	ldr	r3, [r3, #16]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d103      	bne.n	8017280 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	4a24      	ldr	r2, [pc, #144]	@ (801730c <UART_Start_Receive_IT+0x23c>)
 801727c:	675a      	str	r2, [r3, #116]	@ 0x74
 801727e:	e002      	b.n	8017286 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4a23      	ldr	r2, [pc, #140]	@ (8017310 <UART_Start_Receive_IT+0x240>)
 8017284:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	691b      	ldr	r3, [r3, #16]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d019      	beq.n	80172c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017296:	e853 3f00 	ldrex	r3, [r3]
 801729a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801729e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80172a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	461a      	mov	r2, r3
 80172aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80172ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80172ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80172b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80172b4:	e841 2300 	strex	r3, r2, [r1]
 80172b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80172ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d1e6      	bne.n	801728e <UART_Start_Receive_IT+0x1be>
 80172c0:	e018      	b.n	80172f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	e853 3f00 	ldrex	r3, [r3]
 80172ce:	613b      	str	r3, [r7, #16]
   return(result);
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	f043 0320 	orr.w	r3, r3, #32
 80172d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	461a      	mov	r2, r3
 80172de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80172e0:	623b      	str	r3, [r7, #32]
 80172e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172e4:	69f9      	ldr	r1, [r7, #28]
 80172e6:	6a3a      	ldr	r2, [r7, #32]
 80172e8:	e841 2300 	strex	r3, r2, [r1]
 80172ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d1e6      	bne.n	80172c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80172f4:	2300      	movs	r3, #0
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	378c      	adds	r7, #140	@ 0x8c
 80172fa:	46bd      	mov	sp, r7
 80172fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017300:	4770      	bx	lr
 8017302:	bf00      	nop
 8017304:	08017ce9 	.word	0x08017ce9
 8017308:	08017985 	.word	0x08017985
 801730c:	080177cd 	.word	0x080177cd
 8017310:	08017615 	.word	0x08017615

08017314 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017314:	b480      	push	{r7}
 8017316:	b08f      	sub	sp, #60	@ 0x3c
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017322:	6a3b      	ldr	r3, [r7, #32]
 8017324:	e853 3f00 	ldrex	r3, [r3]
 8017328:	61fb      	str	r3, [r7, #28]
   return(result);
 801732a:	69fb      	ldr	r3, [r7, #28]
 801732c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8017330:	637b      	str	r3, [r7, #52]	@ 0x34
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	461a      	mov	r2, r3
 8017338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801733a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801733c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801733e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017342:	e841 2300 	strex	r3, r2, [r1]
 8017346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801734a:	2b00      	cmp	r3, #0
 801734c:	d1e6      	bne.n	801731c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	3308      	adds	r3, #8
 8017354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	e853 3f00 	ldrex	r3, [r3]
 801735c:	60bb      	str	r3, [r7, #8]
   return(result);
 801735e:	68bb      	ldr	r3, [r7, #8]
 8017360:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8017364:	633b      	str	r3, [r7, #48]	@ 0x30
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	3308      	adds	r3, #8
 801736c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801736e:	61ba      	str	r2, [r7, #24]
 8017370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017372:	6979      	ldr	r1, [r7, #20]
 8017374:	69ba      	ldr	r2, [r7, #24]
 8017376:	e841 2300 	strex	r3, r2, [r1]
 801737a:	613b      	str	r3, [r7, #16]
   return(result);
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d1e5      	bne.n	801734e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2220      	movs	r2, #32
 8017386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801738a:	bf00      	nop
 801738c:	373c      	adds	r7, #60	@ 0x3c
 801738e:	46bd      	mov	sp, r7
 8017390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017394:	4770      	bx	lr

08017396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017396:	b480      	push	{r7}
 8017398:	b095      	sub	sp, #84	@ 0x54
 801739a:	af00      	add	r7, sp, #0
 801739c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173a6:	e853 3f00 	ldrex	r3, [r3]
 80173aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80173ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80173b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	461a      	mov	r2, r3
 80173ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80173be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80173c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80173c4:	e841 2300 	strex	r3, r2, [r1]
 80173c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80173ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d1e6      	bne.n	801739e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	3308      	adds	r3, #8
 80173d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173d8:	6a3b      	ldr	r3, [r7, #32]
 80173da:	e853 3f00 	ldrex	r3, [r3]
 80173de:	61fb      	str	r3, [r7, #28]
   return(result);
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80173e6:	f023 0301 	bic.w	r3, r3, #1
 80173ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	3308      	adds	r3, #8
 80173f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80173f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80173f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80173fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80173fc:	e841 2300 	strex	r3, r2, [r1]
 8017400:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017404:	2b00      	cmp	r3, #0
 8017406:	d1e3      	bne.n	80173d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801740c:	2b01      	cmp	r3, #1
 801740e:	d118      	bne.n	8017442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	e853 3f00 	ldrex	r3, [r3]
 801741c:	60bb      	str	r3, [r7, #8]
   return(result);
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	f023 0310 	bic.w	r3, r3, #16
 8017424:	647b      	str	r3, [r7, #68]	@ 0x44
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	461a      	mov	r2, r3
 801742c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801742e:	61bb      	str	r3, [r7, #24]
 8017430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017432:	6979      	ldr	r1, [r7, #20]
 8017434:	69ba      	ldr	r2, [r7, #24]
 8017436:	e841 2300 	strex	r3, r2, [r1]
 801743a:	613b      	str	r3, [r7, #16]
   return(result);
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d1e6      	bne.n	8017410 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2220      	movs	r2, #32
 8017446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2200      	movs	r2, #0
 801744e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8017456:	bf00      	nop
 8017458:	3754      	adds	r7, #84	@ 0x54
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr

08017462 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017462:	b580      	push	{r7, lr}
 8017464:	b090      	sub	sp, #64	@ 0x40
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801746e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	f003 0320 	and.w	r3, r3, #32
 801747a:	2b00      	cmp	r3, #0
 801747c:	d137      	bne.n	80174ee <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801747e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017480:	2200      	movs	r2, #0
 8017482:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	3308      	adds	r3, #8
 801748c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017490:	e853 3f00 	ldrex	r3, [r3]
 8017494:	623b      	str	r3, [r7, #32]
   return(result);
 8017496:	6a3b      	ldr	r3, [r7, #32]
 8017498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801749c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801749e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	3308      	adds	r3, #8
 80174a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80174a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80174a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80174ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80174ae:	e841 2300 	strex	r3, r2, [r1]
 80174b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80174b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d1e5      	bne.n	8017486 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80174ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	e853 3f00 	ldrex	r3, [r3]
 80174c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80174d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	461a      	mov	r2, r3
 80174d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174d8:	61fb      	str	r3, [r7, #28]
 80174da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174dc:	69b9      	ldr	r1, [r7, #24]
 80174de:	69fa      	ldr	r2, [r7, #28]
 80174e0:	e841 2300 	strex	r3, r2, [r1]
 80174e4:	617b      	str	r3, [r7, #20]
   return(result);
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d1e6      	bne.n	80174ba <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80174ec:	e002      	b.n	80174f4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80174ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80174f0:	f7eb fa3a 	bl	8002968 <HAL_UART_TxCpltCallback>
}
 80174f4:	bf00      	nop
 80174f6:	3740      	adds	r7, #64	@ 0x40
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017508:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801750a:	68f8      	ldr	r0, [r7, #12]
 801750c:	f7ff f9de 	bl	80168cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017510:	bf00      	nop
 8017512:	3710      	adds	r7, #16
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b086      	sub	sp, #24
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017524:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801752c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801752e:	697b      	ldr	r3, [r7, #20]
 8017530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017534:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017536:	697b      	ldr	r3, [r7, #20]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	689b      	ldr	r3, [r3, #8]
 801753c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017540:	2b80      	cmp	r3, #128	@ 0x80
 8017542:	d109      	bne.n	8017558 <UART_DMAError+0x40>
 8017544:	693b      	ldr	r3, [r7, #16]
 8017546:	2b21      	cmp	r3, #33	@ 0x21
 8017548:	d106      	bne.n	8017558 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	2200      	movs	r2, #0
 801754e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8017552:	6978      	ldr	r0, [r7, #20]
 8017554:	f7ff fede 	bl	8017314 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	689b      	ldr	r3, [r3, #8]
 801755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017562:	2b40      	cmp	r3, #64	@ 0x40
 8017564:	d109      	bne.n	801757a <UART_DMAError+0x62>
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	2b22      	cmp	r3, #34	@ 0x22
 801756a:	d106      	bne.n	801757a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	2200      	movs	r2, #0
 8017570:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8017574:	6978      	ldr	r0, [r7, #20]
 8017576:	f7ff ff0e 	bl	8017396 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801757a:	697b      	ldr	r3, [r7, #20]
 801757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017580:	f043 0210 	orr.w	r2, r3, #16
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801758a:	6978      	ldr	r0, [r7, #20]
 801758c:	f7ff f9a8 	bl	80168e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017590:	bf00      	nop
 8017592:	3718      	adds	r7, #24
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b084      	sub	sp, #16
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	2200      	movs	r2, #0
 80175aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80175ae:	68f8      	ldr	r0, [r7, #12]
 80175b0:	f7ff f996 	bl	80168e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80175b4:	bf00      	nop
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b088      	sub	sp, #32
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	e853 3f00 	ldrex	r3, [r3]
 80175d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80175d8:	61fb      	str	r3, [r7, #28]
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	461a      	mov	r2, r3
 80175e0:	69fb      	ldr	r3, [r7, #28]
 80175e2:	61bb      	str	r3, [r7, #24]
 80175e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175e6:	6979      	ldr	r1, [r7, #20]
 80175e8:	69ba      	ldr	r2, [r7, #24]
 80175ea:	e841 2300 	strex	r3, r2, [r1]
 80175ee:	613b      	str	r3, [r7, #16]
   return(result);
 80175f0:	693b      	ldr	r3, [r7, #16]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d1e6      	bne.n	80175c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2220      	movs	r2, #32
 80175fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2200      	movs	r2, #0
 8017602:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f7eb f9af 	bl	8002968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801760a:	bf00      	nop
 801760c:	3720      	adds	r7, #32
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
	...

08017614 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b09c      	sub	sp, #112	@ 0x70
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017622:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801762c:	2b22      	cmp	r3, #34	@ 0x22
 801762e:	f040 80be 	bne.w	80177ae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017638:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801763c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8017640:	b2d9      	uxtb	r1, r3
 8017642:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8017646:	b2da      	uxtb	r2, r3
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801764c:	400a      	ands	r2, r1
 801764e:	b2d2      	uxtb	r2, r2
 8017650:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017656:	1c5a      	adds	r2, r3, #1
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017662:	b29b      	uxth	r3, r3
 8017664:	3b01      	subs	r3, #1
 8017666:	b29a      	uxth	r2, r3
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017674:	b29b      	uxth	r3, r3
 8017676:	2b00      	cmp	r3, #0
 8017678:	f040 80a1 	bne.w	80177be <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017684:	e853 3f00 	ldrex	r3, [r3]
 8017688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801768a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801768c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	461a      	mov	r2, r3
 8017698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801769a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801769c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801769e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80176a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80176a2:	e841 2300 	strex	r3, r2, [r1]
 80176a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80176a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d1e6      	bne.n	801767c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	3308      	adds	r3, #8
 80176b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176b8:	e853 3f00 	ldrex	r3, [r3]
 80176bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80176be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176c0:	f023 0301 	bic.w	r3, r3, #1
 80176c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	3308      	adds	r3, #8
 80176cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80176ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80176d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80176d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80176d6:	e841 2300 	strex	r3, r2, [r1]
 80176da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80176dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d1e5      	bne.n	80176ae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2220      	movs	r2, #32
 80176e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	2200      	movs	r2, #0
 80176ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2200      	movs	r2, #0
 80176f4:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	4a33      	ldr	r2, [pc, #204]	@ (80177c8 <UART_RxISR_8BIT+0x1b4>)
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d01f      	beq.n	8017740 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	685b      	ldr	r3, [r3, #4]
 8017706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801770a:	2b00      	cmp	r3, #0
 801770c:	d018      	beq.n	8017740 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017716:	e853 3f00 	ldrex	r3, [r3]
 801771a:	623b      	str	r3, [r7, #32]
   return(result);
 801771c:	6a3b      	ldr	r3, [r7, #32]
 801771e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017722:	663b      	str	r3, [r7, #96]	@ 0x60
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	461a      	mov	r2, r3
 801772a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801772c:	633b      	str	r3, [r7, #48]	@ 0x30
 801772e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017730:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017734:	e841 2300 	strex	r3, r2, [r1]
 8017738:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801773a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801773c:	2b00      	cmp	r3, #0
 801773e:	d1e6      	bne.n	801770e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017744:	2b01      	cmp	r3, #1
 8017746:	d12e      	bne.n	80177a6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	2200      	movs	r2, #0
 801774c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	e853 3f00 	ldrex	r3, [r3]
 801775a:	60fb      	str	r3, [r7, #12]
   return(result);
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	f023 0310 	bic.w	r3, r3, #16
 8017762:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	461a      	mov	r2, r3
 801776a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801776c:	61fb      	str	r3, [r7, #28]
 801776e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017770:	69b9      	ldr	r1, [r7, #24]
 8017772:	69fa      	ldr	r2, [r7, #28]
 8017774:	e841 2300 	strex	r3, r2, [r1]
 8017778:	617b      	str	r3, [r7, #20]
   return(result);
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d1e6      	bne.n	801774e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	69db      	ldr	r3, [r3, #28]
 8017786:	f003 0310 	and.w	r3, r3, #16
 801778a:	2b10      	cmp	r3, #16
 801778c:	d103      	bne.n	8017796 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	2210      	movs	r2, #16
 8017794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801779c:	4619      	mov	r1, r3
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f7ff f8a8 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80177a4:	e00b      	b.n	80177be <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f7eb f8c0 	bl	800292c <HAL_UART_RxCpltCallback>
}
 80177ac:	e007      	b.n	80177be <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	699a      	ldr	r2, [r3, #24]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	f042 0208 	orr.w	r2, r2, #8
 80177bc:	619a      	str	r2, [r3, #24]
}
 80177be:	bf00      	nop
 80177c0:	3770      	adds	r7, #112	@ 0x70
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	40008000 	.word	0x40008000

080177cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b09c      	sub	sp, #112	@ 0x70
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80177da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80177e4:	2b22      	cmp	r3, #34	@ 0x22
 80177e6:	f040 80be 	bne.w	8017966 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80177f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80177fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80177fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8017802:	4013      	ands	r3, r2
 8017804:	b29a      	uxth	r2, r3
 8017806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017808:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801780e:	1c9a      	adds	r2, r3, #2
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801781a:	b29b      	uxth	r3, r3
 801781c:	3b01      	subs	r3, #1
 801781e:	b29a      	uxth	r2, r3
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801782c:	b29b      	uxth	r3, r3
 801782e:	2b00      	cmp	r3, #0
 8017830:	f040 80a1 	bne.w	8017976 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801783a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801783c:	e853 3f00 	ldrex	r3, [r3]
 8017840:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8017842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017848:	667b      	str	r3, [r7, #100]	@ 0x64
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	461a      	mov	r2, r3
 8017850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017852:	657b      	str	r3, [r7, #84]	@ 0x54
 8017854:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017856:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017858:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801785a:	e841 2300 	strex	r3, r2, [r1]
 801785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8017860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1e6      	bne.n	8017834 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	3308      	adds	r3, #8
 801786c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801786e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017870:	e853 3f00 	ldrex	r3, [r3]
 8017874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017878:	f023 0301 	bic.w	r3, r3, #1
 801787c:	663b      	str	r3, [r7, #96]	@ 0x60
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	3308      	adds	r3, #8
 8017884:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8017886:	643a      	str	r2, [r7, #64]	@ 0x40
 8017888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801788a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801788c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801788e:	e841 2300 	strex	r3, r2, [r1]
 8017892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017896:	2b00      	cmp	r3, #0
 8017898:	d1e5      	bne.n	8017866 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	2220      	movs	r2, #32
 801789e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2200      	movs	r2, #0
 80178a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	2200      	movs	r2, #0
 80178ac:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	4a33      	ldr	r2, [pc, #204]	@ (8017980 <UART_RxISR_16BIT+0x1b4>)
 80178b4:	4293      	cmp	r3, r2
 80178b6:	d01f      	beq.n	80178f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	685b      	ldr	r3, [r3, #4]
 80178be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d018      	beq.n	80178f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178cc:	6a3b      	ldr	r3, [r7, #32]
 80178ce:	e853 3f00 	ldrex	r3, [r3]
 80178d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80178da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	461a      	mov	r2, r3
 80178e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80178e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80178e6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80178ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80178ec:	e841 2300 	strex	r3, r2, [r1]
 80178f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80178f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d1e6      	bne.n	80178c6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178fc:	2b01      	cmp	r3, #1
 80178fe:	d12e      	bne.n	801795e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2200      	movs	r2, #0
 8017904:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	e853 3f00 	ldrex	r3, [r3]
 8017912:	60bb      	str	r3, [r7, #8]
   return(result);
 8017914:	68bb      	ldr	r3, [r7, #8]
 8017916:	f023 0310 	bic.w	r3, r3, #16
 801791a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	461a      	mov	r2, r3
 8017922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017924:	61bb      	str	r3, [r7, #24]
 8017926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017928:	6979      	ldr	r1, [r7, #20]
 801792a:	69ba      	ldr	r2, [r7, #24]
 801792c:	e841 2300 	strex	r3, r2, [r1]
 8017930:	613b      	str	r3, [r7, #16]
   return(result);
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d1e6      	bne.n	8017906 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	69db      	ldr	r3, [r3, #28]
 801793e:	f003 0310 	and.w	r3, r3, #16
 8017942:	2b10      	cmp	r3, #16
 8017944:	d103      	bne.n	801794e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	2210      	movs	r2, #16
 801794c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017954:	4619      	mov	r1, r3
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f7fe ffcc 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801795c:	e00b      	b.n	8017976 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	f7ea ffe4 	bl	800292c <HAL_UART_RxCpltCallback>
}
 8017964:	e007      	b.n	8017976 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	699a      	ldr	r2, [r3, #24]
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	f042 0208 	orr.w	r2, r2, #8
 8017974:	619a      	str	r2, [r3, #24]
}
 8017976:	bf00      	nop
 8017978:	3770      	adds	r7, #112	@ 0x70
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}
 801797e:	bf00      	nop
 8017980:	40008000 	.word	0x40008000

08017984 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b0ac      	sub	sp, #176	@ 0xb0
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017992:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	69db      	ldr	r3, [r3, #28]
 801799c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	689b      	ldr	r3, [r3, #8]
 80179b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80179ba:	2b22      	cmp	r3, #34	@ 0x22
 80179bc:	f040 8183 	bne.w	8017cc6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80179c6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80179ca:	e126      	b.n	8017c1a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179d2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80179d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80179da:	b2d9      	uxtb	r1, r3
 80179dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80179e0:	b2da      	uxtb	r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80179e6:	400a      	ands	r2, r1
 80179e8:	b2d2      	uxtb	r2, r2
 80179ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80179f0:	1c5a      	adds	r2, r3, #1
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80179fc:	b29b      	uxth	r3, r3
 80179fe:	3b01      	subs	r3, #1
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	69db      	ldr	r3, [r3, #28]
 8017a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017a16:	f003 0307 	and.w	r3, r3, #7
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d053      	beq.n	8017ac6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017a22:	f003 0301 	and.w	r3, r3, #1
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d011      	beq.n	8017a4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8017a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d00b      	beq.n	8017a4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	2201      	movs	r2, #1
 8017a3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a44:	f043 0201 	orr.w	r2, r3, #1
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017a52:	f003 0302 	and.w	r3, r3, #2
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d011      	beq.n	8017a7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8017a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017a5e:	f003 0301 	and.w	r3, r3, #1
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d00b      	beq.n	8017a7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	2202      	movs	r2, #2
 8017a6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a74:	f043 0204 	orr.w	r2, r3, #4
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017a82:	f003 0304 	and.w	r3, r3, #4
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d011      	beq.n	8017aae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8017a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017a8e:	f003 0301 	and.w	r3, r3, #1
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d00b      	beq.n	8017aae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	2204      	movs	r2, #4
 8017a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017aa4:	f043 0202 	orr.w	r2, r3, #2
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d006      	beq.n	8017ac6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017ab8:	6878      	ldr	r0, [r7, #4]
 8017aba:	f7fe ff11 	bl	80168e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	f040 80a3 	bne.w	8017c1a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017adc:	e853 3f00 	ldrex	r3, [r3]
 8017ae0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8017ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	461a      	mov	r2, r3
 8017af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017af8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017afa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8017afc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017afe:	e841 2300 	strex	r3, r2, [r1]
 8017b02:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8017b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d1e4      	bne.n	8017ad4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	3308      	adds	r3, #8
 8017b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017b14:	e853 3f00 	ldrex	r3, [r3]
 8017b18:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8017b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017b20:	f023 0301 	bic.w	r3, r3, #1
 8017b24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	3308      	adds	r3, #8
 8017b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017b32:	66ba      	str	r2, [r7, #104]	@ 0x68
 8017b34:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b36:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8017b38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017b3a:	e841 2300 	strex	r3, r2, [r1]
 8017b3e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8017b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d1e1      	bne.n	8017b0a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	2220      	movs	r2, #32
 8017b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2200      	movs	r2, #0
 8017b52:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2200      	movs	r2, #0
 8017b58:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	4a60      	ldr	r2, [pc, #384]	@ (8017ce0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8017b60:	4293      	cmp	r3, r2
 8017b62:	d021      	beq.n	8017ba8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d01a      	beq.n	8017ba8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017b7a:	e853 3f00 	ldrex	r3, [r3]
 8017b7e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8017b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	461a      	mov	r2, r3
 8017b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8017b96:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017b9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017b9c:	e841 2300 	strex	r3, r2, [r1]
 8017ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8017ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d1e4      	bne.n	8017b72 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d130      	bne.n	8017c12 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bbe:	e853 3f00 	ldrex	r3, [r3]
 8017bc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bc6:	f023 0310 	bic.w	r3, r3, #16
 8017bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	461a      	mov	r2, r3
 8017bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8017bda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017bde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017be0:	e841 2300 	strex	r3, r2, [r1]
 8017be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d1e4      	bne.n	8017bb6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	69db      	ldr	r3, [r3, #28]
 8017bf2:	f003 0310 	and.w	r3, r3, #16
 8017bf6:	2b10      	cmp	r3, #16
 8017bf8:	d103      	bne.n	8017c02 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	2210      	movs	r2, #16
 8017c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017c08:	4619      	mov	r1, r3
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f7fe fe72 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8017c10:	e00e      	b.n	8017c30 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f7ea fe8a 	bl	800292c <HAL_UART_RxCpltCallback>
        break;
 8017c18:	e00a      	b.n	8017c30 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017c1a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d006      	beq.n	8017c30 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8017c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017c26:	f003 0320 	and.w	r3, r3, #32
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	f47f aece 	bne.w	80179cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017c36:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017c3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d049      	beq.n	8017cd6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017c48:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d242      	bcs.n	8017cd6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	3308      	adds	r3, #8
 8017c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c58:	6a3b      	ldr	r3, [r7, #32]
 8017c5a:	e853 3f00 	ldrex	r3, [r3]
 8017c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017c60:	69fb      	ldr	r3, [r7, #28]
 8017c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017c66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	3308      	adds	r3, #8
 8017c70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8017c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017c7c:	e841 2300 	strex	r3, r2, [r1]
 8017c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d1e3      	bne.n	8017c50 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	4a16      	ldr	r2, [pc, #88]	@ (8017ce4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8017c8c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	e853 3f00 	ldrex	r3, [r3]
 8017c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	f043 0320 	orr.w	r3, r3, #32
 8017ca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	461a      	mov	r2, r3
 8017cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017cb0:	61bb      	str	r3, [r7, #24]
 8017cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cb4:	6979      	ldr	r1, [r7, #20]
 8017cb6:	69ba      	ldr	r2, [r7, #24]
 8017cb8:	e841 2300 	strex	r3, r2, [r1]
 8017cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8017cbe:	693b      	ldr	r3, [r7, #16]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d1e4      	bne.n	8017c8e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017cc4:	e007      	b.n	8017cd6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	699a      	ldr	r2, [r3, #24]
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	f042 0208 	orr.w	r2, r2, #8
 8017cd4:	619a      	str	r2, [r3, #24]
}
 8017cd6:	bf00      	nop
 8017cd8:	37b0      	adds	r7, #176	@ 0xb0
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	40008000 	.word	0x40008000
 8017ce4:	08017615 	.word	0x08017615

08017ce8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b0ae      	sub	sp, #184	@ 0xb8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017cf6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	69db      	ldr	r3, [r3, #28]
 8017d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	689b      	ldr	r3, [r3, #8]
 8017d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017d1e:	2b22      	cmp	r3, #34	@ 0x22
 8017d20:	f040 8187 	bne.w	8018032 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017d2a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017d2e:	e12a      	b.n	8017f86 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d36:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8017d42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8017d46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8017d4a:	4013      	ands	r3, r2
 8017d4c:	b29a      	uxth	r2, r3
 8017d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017d52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d58:	1c9a      	adds	r2, r3, #2
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017d64:	b29b      	uxth	r3, r3
 8017d66:	3b01      	subs	r3, #1
 8017d68:	b29a      	uxth	r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	69db      	ldr	r3, [r3, #28]
 8017d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017d7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017d7e:	f003 0307 	and.w	r3, r3, #7
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d053      	beq.n	8017e2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017d86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017d8a:	f003 0301 	and.w	r3, r3, #1
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d011      	beq.n	8017db6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8017d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d00b      	beq.n	8017db6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	2201      	movs	r2, #1
 8017da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017dac:	f043 0201 	orr.w	r2, r3, #1
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017dba:	f003 0302 	and.w	r3, r3, #2
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d011      	beq.n	8017de6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8017dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017dc6:	f003 0301 	and.w	r3, r3, #1
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d00b      	beq.n	8017de6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2202      	movs	r2, #2
 8017dd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ddc:	f043 0204 	orr.w	r2, r3, #4
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017dea:	f003 0304 	and.w	r3, r3, #4
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d011      	beq.n	8017e16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8017df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017df6:	f003 0301 	and.w	r3, r3, #1
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d00b      	beq.n	8017e16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	2204      	movs	r2, #4
 8017e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e0c:	f043 0202 	orr.w	r2, r3, #2
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d006      	beq.n	8017e2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f7fe fd5d 	bl	80168e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	f040 80a5 	bne.w	8017f86 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017e44:	e853 3f00 	ldrex	r3, [r3]
 8017e48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017e4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017e50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	461a      	mov	r2, r3
 8017e5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017e5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8017e62:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017e66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017e6a:	e841 2300 	strex	r3, r2, [r1]
 8017e6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d1e2      	bne.n	8017e3c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	3308      	adds	r3, #8
 8017e7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017e80:	e853 3f00 	ldrex	r3, [r3]
 8017e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017e8c:	f023 0301 	bic.w	r3, r3, #1
 8017e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	3308      	adds	r3, #8
 8017e9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8017e9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ea2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017ea4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017ea6:	e841 2300 	strex	r3, r2, [r1]
 8017eaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d1e1      	bne.n	8017e76 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	2220      	movs	r2, #32
 8017eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	4a60      	ldr	r2, [pc, #384]	@ (801804c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8017ecc:	4293      	cmp	r3, r2
 8017ece:	d021      	beq.n	8017f14 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	685b      	ldr	r3, [r3, #4]
 8017ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d01a      	beq.n	8017f14 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ee6:	e853 3f00 	ldrex	r3, [r3]
 8017eea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017eee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	461a      	mov	r2, r3
 8017efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017f02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017f06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017f08:	e841 2300 	strex	r3, r2, [r1]
 8017f0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d1e4      	bne.n	8017ede <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d130      	bne.n	8017f7e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2200      	movs	r2, #0
 8017f20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f2a:	e853 3f00 	ldrex	r3, [r3]
 8017f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f32:	f023 0310 	bic.w	r3, r3, #16
 8017f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	461a      	mov	r2, r3
 8017f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017f4c:	e841 2300 	strex	r3, r2, [r1]
 8017f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d1e4      	bne.n	8017f22 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	69db      	ldr	r3, [r3, #28]
 8017f5e:	f003 0310 	and.w	r3, r3, #16
 8017f62:	2b10      	cmp	r3, #16
 8017f64:	d103      	bne.n	8017f6e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	2210      	movs	r2, #16
 8017f6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017f74:	4619      	mov	r1, r3
 8017f76:	6878      	ldr	r0, [r7, #4]
 8017f78:	f7fe fcbc 	bl	80168f4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8017f7c:	e00e      	b.n	8017f9c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8017f7e:	6878      	ldr	r0, [r7, #4]
 8017f80:	f7ea fcd4 	bl	800292c <HAL_UART_RxCpltCallback>
        break;
 8017f84:	e00a      	b.n	8017f9c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017f86:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d006      	beq.n	8017f9c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8017f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017f92:	f003 0320 	and.w	r3, r3, #32
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f47f aeca 	bne.w	8017d30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017fa2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017fa6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d049      	beq.n	8018042 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017fb4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d242      	bcs.n	8018042 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	3308      	adds	r3, #8
 8017fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fc6:	e853 3f00 	ldrex	r3, [r3]
 8017fca:	623b      	str	r3, [r7, #32]
   return(result);
 8017fcc:	6a3b      	ldr	r3, [r7, #32]
 8017fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017fd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	3308      	adds	r3, #8
 8017fdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8017fe0:	633a      	str	r2, [r7, #48]	@ 0x30
 8017fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fe8:	e841 2300 	strex	r3, r2, [r1]
 8017fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d1e3      	bne.n	8017fbc <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	4a16      	ldr	r2, [pc, #88]	@ (8018050 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8017ff8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	e853 3f00 	ldrex	r3, [r3]
 8018006:	60fb      	str	r3, [r7, #12]
   return(result);
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	f043 0320 	orr.w	r3, r3, #32
 801800e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	461a      	mov	r2, r3
 8018018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801801c:	61fb      	str	r3, [r7, #28]
 801801e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018020:	69b9      	ldr	r1, [r7, #24]
 8018022:	69fa      	ldr	r2, [r7, #28]
 8018024:	e841 2300 	strex	r3, r2, [r1]
 8018028:	617b      	str	r3, [r7, #20]
   return(result);
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d1e4      	bne.n	8017ffa <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018030:	e007      	b.n	8018042 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	699a      	ldr	r2, [r3, #24]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	f042 0208 	orr.w	r2, r2, #8
 8018040:	619a      	str	r2, [r3, #24]
}
 8018042:	bf00      	nop
 8018044:	37b8      	adds	r7, #184	@ 0xb8
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}
 801804a:	bf00      	nop
 801804c:	40008000 	.word	0x40008000
 8018050:	080177cd 	.word	0x080177cd

08018054 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018054:	b480      	push	{r7}
 8018056:	b083      	sub	sp, #12
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801805c:	bf00      	nop
 801805e:	370c      	adds	r7, #12
 8018060:	46bd      	mov	sp, r7
 8018062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018066:	4770      	bx	lr

08018068 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8018068:	b480      	push	{r7}
 801806a:	b083      	sub	sp, #12
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018070:	bf00      	nop
 8018072:	370c      	adds	r7, #12
 8018074:	46bd      	mov	sp, r7
 8018076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807a:	4770      	bx	lr

0801807c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801807c:	b480      	push	{r7}
 801807e:	b083      	sub	sp, #12
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018084:	bf00      	nop
 8018086:	370c      	adds	r7, #12
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr

08018090 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018090:	b480      	push	{r7}
 8018092:	b085      	sub	sp, #20
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801809e:	2b01      	cmp	r3, #1
 80180a0:	d101      	bne.n	80180a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80180a2:	2302      	movs	r3, #2
 80180a4:	e027      	b.n	80180f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	2201      	movs	r2, #1
 80180aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	2224      	movs	r2, #36	@ 0x24
 80180b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f022 0201 	bic.w	r2, r2, #1
 80180cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80180d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	2200      	movs	r2, #0
 80180da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	68fa      	ldr	r2, [r7, #12]
 80180e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	2220      	movs	r2, #32
 80180e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	2200      	movs	r2, #0
 80180f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80180f4:	2300      	movs	r3, #0
}
 80180f6:	4618      	mov	r0, r3
 80180f8:	3714      	adds	r7, #20
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr

08018102 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018102:	b580      	push	{r7, lr}
 8018104:	b084      	sub	sp, #16
 8018106:	af00      	add	r7, sp, #0
 8018108:	6078      	str	r0, [r7, #4]
 801810a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8018112:	2b01      	cmp	r3, #1
 8018114:	d101      	bne.n	801811a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018116:	2302      	movs	r3, #2
 8018118:	e02d      	b.n	8018176 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2201      	movs	r2, #1
 801811e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2224      	movs	r2, #36	@ 0x24
 8018126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f022 0201 	bic.w	r2, r2, #1
 8018140:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	689b      	ldr	r3, [r3, #8]
 8018148:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	683a      	ldr	r2, [r7, #0]
 8018152:	430a      	orrs	r2, r1
 8018154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018156:	6878      	ldr	r0, [r7, #4]
 8018158:	f000 f850 	bl	80181fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	68fa      	ldr	r2, [r7, #12]
 8018162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	2220      	movs	r2, #32
 8018168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2200      	movs	r2, #0
 8018170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8018174:	2300      	movs	r3, #0
}
 8018176:	4618      	mov	r0, r3
 8018178:	3710      	adds	r7, #16
 801817a:	46bd      	mov	sp, r7
 801817c:	bd80      	pop	{r7, pc}

0801817e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801817e:	b580      	push	{r7, lr}
 8018180:	b084      	sub	sp, #16
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
 8018186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801818e:	2b01      	cmp	r3, #1
 8018190:	d101      	bne.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018192:	2302      	movs	r3, #2
 8018194:	e02d      	b.n	80181f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2201      	movs	r2, #1
 801819a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	2224      	movs	r2, #36	@ 0x24
 80181a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	f022 0201 	bic.w	r2, r2, #1
 80181bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	689b      	ldr	r3, [r3, #8]
 80181c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	683a      	ldr	r2, [r7, #0]
 80181ce:	430a      	orrs	r2, r1
 80181d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f000 f812 	bl	80181fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	68fa      	ldr	r2, [r7, #12]
 80181de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2220      	movs	r2, #32
 80181e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2200      	movs	r2, #0
 80181ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80181f0:	2300      	movs	r3, #0
}
 80181f2:	4618      	mov	r0, r3
 80181f4:	3710      	adds	r7, #16
 80181f6:	46bd      	mov	sp, r7
 80181f8:	bd80      	pop	{r7, pc}
	...

080181fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80181fc:	b480      	push	{r7}
 80181fe:	b085      	sub	sp, #20
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018208:	2b00      	cmp	r3, #0
 801820a:	d108      	bne.n	801821e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	2201      	movs	r2, #1
 8018210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2201      	movs	r2, #1
 8018218:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801821c:	e031      	b.n	8018282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801821e:	2308      	movs	r3, #8
 8018220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018222:	2308      	movs	r3, #8
 8018224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	689b      	ldr	r3, [r3, #8]
 801822c:	0e5b      	lsrs	r3, r3, #25
 801822e:	b2db      	uxtb	r3, r3
 8018230:	f003 0307 	and.w	r3, r3, #7
 8018234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	689b      	ldr	r3, [r3, #8]
 801823c:	0f5b      	lsrs	r3, r3, #29
 801823e:	b2db      	uxtb	r3, r3
 8018240:	f003 0307 	and.w	r3, r3, #7
 8018244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018246:	7bbb      	ldrb	r3, [r7, #14]
 8018248:	7b3a      	ldrb	r2, [r7, #12]
 801824a:	4911      	ldr	r1, [pc, #68]	@ (8018290 <UARTEx_SetNbDataToProcess+0x94>)
 801824c:	5c8a      	ldrb	r2, [r1, r2]
 801824e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018252:	7b3a      	ldrb	r2, [r7, #12]
 8018254:	490f      	ldr	r1, [pc, #60]	@ (8018294 <UARTEx_SetNbDataToProcess+0x98>)
 8018256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018258:	fb93 f3f2 	sdiv	r3, r3, r2
 801825c:	b29a      	uxth	r2, r3
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018264:	7bfb      	ldrb	r3, [r7, #15]
 8018266:	7b7a      	ldrb	r2, [r7, #13]
 8018268:	4909      	ldr	r1, [pc, #36]	@ (8018290 <UARTEx_SetNbDataToProcess+0x94>)
 801826a:	5c8a      	ldrb	r2, [r1, r2]
 801826c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018270:	7b7a      	ldrb	r2, [r7, #13]
 8018272:	4908      	ldr	r1, [pc, #32]	@ (8018294 <UARTEx_SetNbDataToProcess+0x98>)
 8018274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018276:	fb93 f3f2 	sdiv	r3, r3, r2
 801827a:	b29a      	uxth	r2, r3
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8018282:	bf00      	nop
 8018284:	3714      	adds	r7, #20
 8018286:	46bd      	mov	sp, r7
 8018288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828c:	4770      	bx	lr
 801828e:	bf00      	nop
 8018290:	080207e4 	.word	0x080207e4
 8018294:	080207ec 	.word	0x080207ec

08018298 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b088      	sub	sp, #32
 801829c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801829e:	2300      	movs	r3, #0
 80182a0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80182a2:	f107 0308 	add.w	r3, r7, #8
 80182a6:	2218      	movs	r2, #24
 80182a8:	2100      	movs	r1, #0
 80182aa:	4618      	mov	r0, r3
 80182ac:	f001 fb84 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80182b0:	233f      	movs	r3, #63	@ 0x3f
 80182b2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80182b4:	2381      	movs	r3, #129	@ 0x81
 80182b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80182b8:	1dfb      	adds	r3, r7, #7
 80182ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80182bc:	2301      	movs	r3, #1
 80182be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80182c0:	f107 0308 	add.w	r3, r7, #8
 80182c4:	2100      	movs	r1, #0
 80182c6:	4618      	mov	r0, r3
 80182c8:	f001 fa34 	bl	8019734 <hci_send_req>
 80182cc:	4603      	mov	r3, r0
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	da01      	bge.n	80182d6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80182d2:	23ff      	movs	r3, #255	@ 0xff
 80182d4:	e000      	b.n	80182d8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80182d6:	79fb      	ldrb	r3, [r7, #7]
}
 80182d8:	4618      	mov	r0, r3
 80182da:	3720      	adds	r7, #32
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}

080182e0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80182e0:	b5b0      	push	{r4, r5, r7, lr}
 80182e2:	b0ce      	sub	sp, #312	@ 0x138
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	4605      	mov	r5, r0
 80182e8:	460c      	mov	r4, r1
 80182ea:	4610      	mov	r0, r2
 80182ec:	4619      	mov	r1, r3
 80182ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80182f2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80182f6:	462a      	mov	r2, r5
 80182f8:	701a      	strb	r2, [r3, #0]
 80182fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80182fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8018302:	4622      	mov	r2, r4
 8018304:	801a      	strh	r2, [r3, #0]
 8018306:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801830a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 801830e:	4602      	mov	r2, r0
 8018310:	801a      	strh	r2, [r3, #0]
 8018312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018316:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801831a:	460a      	mov	r2, r1
 801831c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 801831e:	f107 0310 	add.w	r3, r7, #16
 8018322:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8018326:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801832a:	3308      	adds	r3, #8
 801832c:	f107 0210 	add.w	r2, r7, #16
 8018330:	4413      	add	r3, r2
 8018332:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8018336:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801833a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 801833e:	4413      	add	r3, r2
 8018340:	3309      	adds	r3, #9
 8018342:	f107 0210 	add.w	r2, r7, #16
 8018346:	4413      	add	r3, r2
 8018348:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801834c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018350:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8018354:	2200      	movs	r2, #0
 8018356:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 801835e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018362:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018366:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 801836a:	7812      	ldrb	r2, [r2, #0]
 801836c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801836e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018372:	3301      	adds	r3, #1
 8018374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8018378:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801837c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018380:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8018384:	8812      	ldrh	r2, [r2, #0]
 8018386:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 801838a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801838e:	3302      	adds	r3, #2
 8018390:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8018394:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018398:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801839c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80183a0:	8812      	ldrh	r2, [r2, #0]
 80183a2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80183a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80183aa:	3302      	adds	r3, #2
 80183ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80183b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80183b4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80183b8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80183bc:	7812      	ldrb	r2, [r2, #0]
 80183be:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80183c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80183c4:	3301      	adds	r3, #1
 80183c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80183ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80183ce:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80183d2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80183d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80183d8:	3301      	adds	r3, #1
 80183da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80183de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80183e2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80183e6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80183e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80183ec:	3301      	adds	r3, #1
 80183ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80183f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80183f6:	3308      	adds	r3, #8
 80183f8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80183fc:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8018400:	4618      	mov	r0, r3
 8018402:	f001 fac9 	bl	8019998 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8018406:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801840a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801840e:	4413      	add	r3, r2
 8018410:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8018414:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018418:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801841c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801841e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018422:	3301      	adds	r3, #1
 8018424:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8018428:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801842c:	3301      	adds	r3, #1
 801842e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8018432:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8018436:	4618      	mov	r0, r3
 8018438:	f001 faae 	bl	8019998 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 801843c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8018440:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8018444:	4413      	add	r3, r2
 8018446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 801844a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801844e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8018452:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8018454:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018458:	3302      	adds	r3, #2
 801845a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 801845e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018462:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8018466:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8018468:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801846c:	3302      	adds	r3, #2
 801846e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018476:	2218      	movs	r2, #24
 8018478:	2100      	movs	r1, #0
 801847a:	4618      	mov	r0, r3
 801847c:	f001 fa9c 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018480:	233f      	movs	r3, #63	@ 0x3f
 8018482:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8018486:	2383      	movs	r3, #131	@ 0x83
 8018488:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801848c:	f107 0310 	add.w	r3, r7, #16
 8018490:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8018494:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018498:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801849c:	f107 030f 	add.w	r3, r7, #15
 80184a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80184a4:	2301      	movs	r3, #1
 80184a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80184aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80184ae:	2100      	movs	r1, #0
 80184b0:	4618      	mov	r0, r3
 80184b2:	f001 f93f 	bl	8019734 <hci_send_req>
 80184b6:	4603      	mov	r3, r0
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	da01      	bge.n	80184c0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80184bc:	23ff      	movs	r3, #255	@ 0xff
 80184be:	e004      	b.n	80184ca <aci_gap_set_discoverable+0x1ea>
  return status;
 80184c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80184c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80184c8:	781b      	ldrb	r3, [r3, #0]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80184d0:	46bd      	mov	sp, r7
 80184d2:	bdb0      	pop	{r4, r5, r7, pc}

080184d4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b0cc      	sub	sp, #304	@ 0x130
 80184d8:	af00      	add	r7, sp, #0
 80184da:	4602      	mov	r2, r0
 80184dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80184e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80184e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80184e6:	f107 0310 	add.w	r3, r7, #16
 80184ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80184ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80184f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80184f6:	2200      	movs	r2, #0
 80184f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80184fa:	2300      	movs	r3, #0
 80184fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8018500:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018504:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018508:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801850c:	7812      	ldrb	r2, [r2, #0]
 801850e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8018510:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018514:	3301      	adds	r3, #1
 8018516:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801851a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801851e:	2218      	movs	r2, #24
 8018520:	2100      	movs	r1, #0
 8018522:	4618      	mov	r0, r3
 8018524:	f001 fa48 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018528:	233f      	movs	r3, #63	@ 0x3f
 801852a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 801852e:	2385      	movs	r3, #133	@ 0x85
 8018530:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8018534:	f107 0310 	add.w	r3, r7, #16
 8018538:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801853c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018540:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8018544:	f107 030f 	add.w	r3, r7, #15
 8018548:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801854c:	2301      	movs	r3, #1
 801854e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8018552:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018556:	2100      	movs	r1, #0
 8018558:	4618      	mov	r0, r3
 801855a:	f001 f8eb 	bl	8019734 <hci_send_req>
 801855e:	4603      	mov	r3, r0
 8018560:	2b00      	cmp	r3, #0
 8018562:	da01      	bge.n	8018568 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8018564:	23ff      	movs	r3, #255	@ 0xff
 8018566:	e004      	b.n	8018572 <aci_gap_set_io_capability+0x9e>
  return status;
 8018568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801856c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018570:	781b      	ldrb	r3, [r3, #0]
}
 8018572:	4618      	mov	r0, r3
 8018574:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}

0801857c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 801857c:	b5b0      	push	{r4, r5, r7, lr}
 801857e:	b0cc      	sub	sp, #304	@ 0x130
 8018580:	af00      	add	r7, sp, #0
 8018582:	4605      	mov	r5, r0
 8018584:	460c      	mov	r4, r1
 8018586:	4610      	mov	r0, r2
 8018588:	4619      	mov	r1, r3
 801858a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801858e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8018592:	462a      	mov	r2, r5
 8018594:	701a      	strb	r2, [r3, #0]
 8018596:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801859a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801859e:	4622      	mov	r2, r4
 80185a0:	701a      	strb	r2, [r3, #0]
 80185a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185a6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80185aa:	4602      	mov	r2, r0
 80185ac:	701a      	strb	r2, [r3, #0]
 80185ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80185b6:	460a      	mov	r2, r1
 80185b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80185ba:	f107 0310 	add.w	r3, r7, #16
 80185be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80185c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80185c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80185ca:	2200      	movs	r2, #0
 80185cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80185ce:	2300      	movs	r3, #0
 80185d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80185d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80185d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80185dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80185e0:	7812      	ldrb	r2, [r2, #0]
 80185e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80185e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80185e8:	3301      	adds	r3, #1
 80185ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80185ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80185f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80185f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80185fa:	7812      	ldrb	r2, [r2, #0]
 80185fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80185fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018602:	3301      	adds	r3, #1
 8018604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8018608:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801860c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018610:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8018614:	7812      	ldrb	r2, [r2, #0]
 8018616:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8018618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801861c:	3301      	adds	r3, #1
 801861e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8018622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018626:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801862a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801862e:	7812      	ldrb	r2, [r2, #0]
 8018630:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8018632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018636:	3301      	adds	r3, #1
 8018638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 801863c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018640:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8018644:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8018646:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801864a:	3301      	adds	r3, #1
 801864c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8018650:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018654:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8018658:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801865a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801865e:	3301      	adds	r3, #1
 8018660:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8018664:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018668:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 801866c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 801866e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018672:	3301      	adds	r3, #1
 8018674:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8018678:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801867c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8018680:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8018684:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018688:	3304      	adds	r3, #4
 801868a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 801868e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018692:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8018696:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8018698:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801869c:	3301      	adds	r3, #1
 801869e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80186a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80186a6:	2218      	movs	r2, #24
 80186a8:	2100      	movs	r1, #0
 80186aa:	4618      	mov	r0, r3
 80186ac:	f001 f984 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80186b0:	233f      	movs	r3, #63	@ 0x3f
 80186b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80186b6:	2386      	movs	r3, #134	@ 0x86
 80186b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80186bc:	f107 0310 	add.w	r3, r7, #16
 80186c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80186c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80186c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80186cc:	f107 030f 	add.w	r3, r7, #15
 80186d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80186d4:	2301      	movs	r3, #1
 80186d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80186da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80186de:	2100      	movs	r1, #0
 80186e0:	4618      	mov	r0, r3
 80186e2:	f001 f827 	bl	8019734 <hci_send_req>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	da01      	bge.n	80186f0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80186ec:	23ff      	movs	r3, #255	@ 0xff
 80186ee:	e004      	b.n	80186fa <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80186f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80186f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80186f8:	781b      	ldrb	r3, [r3, #0]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8018700:	46bd      	mov	sp, r7
 8018702:	bdb0      	pop	{r4, r5, r7, pc}

08018704 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8018704:	b590      	push	{r4, r7, lr}
 8018706:	b0cd      	sub	sp, #308	@ 0x134
 8018708:	af00      	add	r7, sp, #0
 801870a:	4604      	mov	r4, r0
 801870c:	4608      	mov	r0, r1
 801870e:	4611      	mov	r1, r2
 8018710:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018714:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8018718:	6013      	str	r3, [r2, #0]
 801871a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801871e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8018722:	4622      	mov	r2, r4
 8018724:	701a      	strb	r2, [r3, #0]
 8018726:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801872a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801872e:	4602      	mov	r2, r0
 8018730:	701a      	strb	r2, [r3, #0]
 8018732:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018736:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801873a:	460a      	mov	r2, r1
 801873c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 801873e:	f107 0310 	add.w	r3, r7, #16
 8018742:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8018746:	f107 0308 	add.w	r3, r7, #8
 801874a:	2207      	movs	r2, #7
 801874c:	2100      	movs	r1, #0
 801874e:	4618      	mov	r0, r3
 8018750:	f001 f932 	bl	80199b8 <Osal_MemSet>
  int index_input = 0;
 8018754:	2300      	movs	r3, #0
 8018756:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801875a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801875e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018762:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8018766:	7812      	ldrb	r2, [r2, #0]
 8018768:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801876a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801876e:	3301      	adds	r3, #1
 8018770:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8018774:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018778:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801877c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8018780:	7812      	ldrb	r2, [r2, #0]
 8018782:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8018784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018788:	3301      	adds	r3, #1
 801878a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 801878e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018792:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018796:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801879a:	7812      	ldrb	r2, [r2, #0]
 801879c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801879e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80187a2:	3301      	adds	r3, #1
 80187a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80187a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80187ac:	2218      	movs	r2, #24
 80187ae:	2100      	movs	r1, #0
 80187b0:	4618      	mov	r0, r3
 80187b2:	f001 f901 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80187b6:	233f      	movs	r3, #63	@ 0x3f
 80187b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80187bc:	238a      	movs	r3, #138	@ 0x8a
 80187be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80187c2:	f107 0310 	add.w	r3, r7, #16
 80187c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80187ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80187ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80187d2:	f107 0308 	add.w	r3, r7, #8
 80187d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80187da:	2307      	movs	r3, #7
 80187dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80187e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80187e4:	2100      	movs	r1, #0
 80187e6:	4618      	mov	r0, r3
 80187e8:	f000 ffa4 	bl	8019734 <hci_send_req>
 80187ec:	4603      	mov	r3, r0
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	da01      	bge.n	80187f6 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80187f2:	23ff      	movs	r3, #255	@ 0xff
 80187f4:	e02e      	b.n	8018854 <aci_gap_init+0x150>
  if ( resp.Status )
 80187f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80187fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d005      	beq.n	8018810 <aci_gap_init+0x10c>
    return resp.Status;
 8018804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018808:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	e021      	b.n	8018854 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8018810:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018814:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018818:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801881c:	b29a      	uxth	r2, r3
 801881e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018822:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801882a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801882e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018832:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8018836:	b29a      	uxth	r2, r3
 8018838:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801883c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 801883e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018842:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018846:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801884a:	b29a      	uxth	r2, r3
 801884c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8018850:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8018852:	2300      	movs	r3, #0
}
 8018854:	4618      	mov	r0, r3
 8018856:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801885a:	46bd      	mov	sp, r7
 801885c:	bd90      	pop	{r4, r7, pc}

0801885e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 801885e:	b580      	push	{r7, lr}
 8018860:	b0cc      	sub	sp, #304	@ 0x130
 8018862:	af00      	add	r7, sp, #0
 8018864:	4602      	mov	r2, r0
 8018866:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801886a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801886e:	6019      	str	r1, [r3, #0]
 8018870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018874:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8018878:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801887a:	f107 0310 	add.w	r3, r7, #16
 801887e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8018882:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018886:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801888a:	2200      	movs	r2, #0
 801888c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801888e:	2300      	movs	r3, #0
 8018890:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8018894:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018898:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801889c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80188a0:	7812      	ldrb	r2, [r2, #0]
 80188a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80188a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80188a8:	3301      	adds	r3, #1
 80188aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80188ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80188b2:	1c58      	adds	r0, r3, #1
 80188b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80188b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80188bc:	781a      	ldrb	r2, [r3, #0]
 80188be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80188c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80188c6:	6819      	ldr	r1, [r3, #0]
 80188c8:	f001 f866 	bl	8019998 <Osal_MemCpy>
  index_input += AdvDataLen;
 80188cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80188d0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80188d4:	781b      	ldrb	r3, [r3, #0]
 80188d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80188da:	4413      	add	r3, r2
 80188dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80188e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80188e4:	2218      	movs	r2, #24
 80188e6:	2100      	movs	r1, #0
 80188e8:	4618      	mov	r0, r3
 80188ea:	f001 f865 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80188ee:	233f      	movs	r3, #63	@ 0x3f
 80188f0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80188f4:	238e      	movs	r3, #142	@ 0x8e
 80188f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80188fa:	f107 0310 	add.w	r3, r7, #16
 80188fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8018902:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018906:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801890a:	f107 030f 	add.w	r3, r7, #15
 801890e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8018912:	2301      	movs	r3, #1
 8018914:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8018918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801891c:	2100      	movs	r1, #0
 801891e:	4618      	mov	r0, r3
 8018920:	f000 ff08 	bl	8019734 <hci_send_req>
 8018924:	4603      	mov	r3, r0
 8018926:	2b00      	cmp	r3, #0
 8018928:	da01      	bge.n	801892e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 801892a:	23ff      	movs	r3, #255	@ 0xff
 801892c:	e004      	b.n	8018938 <aci_gap_update_adv_data+0xda>
  return status;
 801892e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018932:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018936:	781b      	ldrb	r3, [r3, #0]
}
 8018938:	4618      	mov	r0, r3
 801893a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}

08018942 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8018942:	b580      	push	{r7, lr}
 8018944:	b088      	sub	sp, #32
 8018946:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8018948:	2300      	movs	r3, #0
 801894a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801894c:	f107 0308 	add.w	r3, r7, #8
 8018950:	2218      	movs	r2, #24
 8018952:	2100      	movs	r1, #0
 8018954:	4618      	mov	r0, r3
 8018956:	f001 f82f 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 801895a:	233f      	movs	r3, #63	@ 0x3f
 801895c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 801895e:	2392      	movs	r3, #146	@ 0x92
 8018960:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8018962:	1dfb      	adds	r3, r7, #7
 8018964:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8018966:	2301      	movs	r3, #1
 8018968:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801896a:	f107 0308 	add.w	r3, r7, #8
 801896e:	2100      	movs	r1, #0
 8018970:	4618      	mov	r0, r3
 8018972:	f000 fedf 	bl	8019734 <hci_send_req>
 8018976:	4603      	mov	r3, r0
 8018978:	2b00      	cmp	r3, #0
 801897a:	da01      	bge.n	8018980 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801897c:	23ff      	movs	r3, #255	@ 0xff
 801897e:	e000      	b.n	8018982 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8018980:	79fb      	ldrb	r3, [r7, #7]
}
 8018982:	4618      	mov	r0, r3
 8018984:	3720      	adds	r7, #32
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}

0801898a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801898a:	b580      	push	{r7, lr}
 801898c:	b088      	sub	sp, #32
 801898e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8018990:	2300      	movs	r3, #0
 8018992:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018994:	f107 0308 	add.w	r3, r7, #8
 8018998:	2218      	movs	r2, #24
 801899a:	2100      	movs	r1, #0
 801899c:	4618      	mov	r0, r3
 801899e:	f001 f80b 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80189a2:	233f      	movs	r3, #63	@ 0x3f
 80189a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80189a6:	f240 1301 	movw	r3, #257	@ 0x101
 80189aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80189ac:	1dfb      	adds	r3, r7, #7
 80189ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80189b0:	2301      	movs	r3, #1
 80189b2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80189b4:	f107 0308 	add.w	r3, r7, #8
 80189b8:	2100      	movs	r1, #0
 80189ba:	4618      	mov	r0, r3
 80189bc:	f000 feba 	bl	8019734 <hci_send_req>
 80189c0:	4603      	mov	r3, r0
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	da01      	bge.n	80189ca <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80189c6:	23ff      	movs	r3, #255	@ 0xff
 80189c8:	e000      	b.n	80189cc <aci_gatt_init+0x42>
  return status;
 80189ca:	79fb      	ldrb	r3, [r7, #7]
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3720      	adds	r7, #32
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bd80      	pop	{r7, pc}

080189d4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b0cf      	sub	sp, #316	@ 0x13c
 80189d8:	af00      	add	r7, sp, #0
 80189da:	4604      	mov	r4, r0
 80189dc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80189e0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80189e4:	6001      	str	r1, [r0, #0]
 80189e6:	4610      	mov	r0, r2
 80189e8:	4619      	mov	r1, r3
 80189ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80189ee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80189f2:	4622      	mov	r2, r4
 80189f4:	701a      	strb	r2, [r3, #0]
 80189f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80189fa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80189fe:	4602      	mov	r2, r0
 8018a00:	701a      	strb	r2, [r3, #0]
 8018a02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018a06:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8018a0a:	460a      	mov	r2, r1
 8018a0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8018a0e:	f107 0310 	add.w	r3, r7, #16
 8018a12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8018a16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018a1a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	2b01      	cmp	r3, #1
 8018a22:	d00a      	beq.n	8018a3a <aci_gatt_add_service+0x66>
 8018a24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018a28:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	2b02      	cmp	r3, #2
 8018a30:	d101      	bne.n	8018a36 <aci_gatt_add_service+0x62>
 8018a32:	2311      	movs	r3, #17
 8018a34:	e002      	b.n	8018a3c <aci_gatt_add_service+0x68>
 8018a36:	2301      	movs	r3, #1
 8018a38:	e000      	b.n	8018a3c <aci_gatt_add_service+0x68>
 8018a3a:	2303      	movs	r3, #3
 8018a3c:	f107 0210 	add.w	r2, r7, #16
 8018a40:	4413      	add	r3, r2
 8018a42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8018a46:	f107 030c 	add.w	r3, r7, #12
 8018a4a:	2203      	movs	r2, #3
 8018a4c:	2100      	movs	r1, #0
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f000 ffb2 	bl	80199b8 <Osal_MemSet>
  int index_input = 0;
 8018a54:	2300      	movs	r3, #0
 8018a56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8018a5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018a5e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018a62:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8018a66:	7812      	ldrb	r2, [r2, #0]
 8018a68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8018a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018a6e:	3301      	adds	r3, #1
 8018a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8018a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018a78:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	2b01      	cmp	r3, #1
 8018a80:	d002      	beq.n	8018a88 <aci_gatt_add_service+0xb4>
 8018a82:	2b02      	cmp	r3, #2
 8018a84:	d004      	beq.n	8018a90 <aci_gatt_add_service+0xbc>
 8018a86:	e007      	b.n	8018a98 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8018a88:	2302      	movs	r3, #2
 8018a8a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8018a8e:	e005      	b.n	8018a9c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8018a90:	2310      	movs	r3, #16
 8018a92:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8018a96:	e001      	b.n	8018a9c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8018a98:	2397      	movs	r3, #151	@ 0x97
 8018a9a:	e06c      	b.n	8018b76 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8018a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018aa0:	1c58      	adds	r0, r3, #1
 8018aa2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8018aa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018aaa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018aae:	6819      	ldr	r1, [r3, #0]
 8018ab0:	f000 ff72 	bl	8019998 <Osal_MemCpy>
    index_input += size;
 8018ab4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8018ab8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8018abc:	4413      	add	r3, r2
 8018abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8018ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018ac6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018aca:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8018ace:	7812      	ldrb	r2, [r2, #0]
 8018ad0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8018ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8018adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018ae0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018ae4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8018ae8:	7812      	ldrb	r2, [r2, #0]
 8018aea:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8018aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018af0:	3301      	adds	r3, #1
 8018af2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018af6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018afa:	2218      	movs	r2, #24
 8018afc:	2100      	movs	r1, #0
 8018afe:	4618      	mov	r0, r3
 8018b00:	f000 ff5a 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018b04:	233f      	movs	r3, #63	@ 0x3f
 8018b06:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8018b0a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8018b0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8018b12:	f107 0310 	add.w	r3, r7, #16
 8018b16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8018b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018b1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8018b22:	f107 030c 	add.w	r3, r7, #12
 8018b26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8018b2a:	2303      	movs	r3, #3
 8018b2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8018b30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018b34:	2100      	movs	r1, #0
 8018b36:	4618      	mov	r0, r3
 8018b38:	f000 fdfc 	bl	8019734 <hci_send_req>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	da01      	bge.n	8018b46 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8018b42:	23ff      	movs	r3, #255	@ 0xff
 8018b44:	e017      	b.n	8018b76 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8018b46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018b4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018b4e:	781b      	ldrb	r3, [r3, #0]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d005      	beq.n	8018b60 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8018b54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018b5c:	781b      	ldrb	r3, [r3, #0]
 8018b5e:	e00a      	b.n	8018b76 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8018b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018b68:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8018b6c:	b29a      	uxth	r2, r3
 8018b6e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8018b72:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8018b74:	2300      	movs	r3, #0
}
 8018b76:	4618      	mov	r0, r3
 8018b78:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd90      	pop	{r4, r7, pc}

08018b80 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8018b80:	b590      	push	{r4, r7, lr}
 8018b82:	b0d1      	sub	sp, #324	@ 0x144
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	4604      	mov	r4, r0
 8018b88:	4608      	mov	r0, r1
 8018b8a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8018b8e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8018b92:	600a      	str	r2, [r1, #0]
 8018b94:	4619      	mov	r1, r3
 8018b96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018b9a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8018b9e:	4622      	mov	r2, r4
 8018ba0:	801a      	strh	r2, [r3, #0]
 8018ba2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018ba6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8018baa:	4602      	mov	r2, r0
 8018bac:	701a      	strb	r2, [r3, #0]
 8018bae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bb2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8018bb6:	460a      	mov	r2, r1
 8018bb8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8018bba:	f107 0318 	add.w	r3, r7, #24
 8018bbe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8018bc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bc6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8018bca:	781b      	ldrb	r3, [r3, #0]
 8018bcc:	2b01      	cmp	r3, #1
 8018bce:	d00a      	beq.n	8018be6 <aci_gatt_add_char+0x66>
 8018bd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018bd4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	2b02      	cmp	r3, #2
 8018bdc:	d101      	bne.n	8018be2 <aci_gatt_add_char+0x62>
 8018bde:	2313      	movs	r3, #19
 8018be0:	e002      	b.n	8018be8 <aci_gatt_add_char+0x68>
 8018be2:	2303      	movs	r3, #3
 8018be4:	e000      	b.n	8018be8 <aci_gatt_add_char+0x68>
 8018be6:	2305      	movs	r3, #5
 8018be8:	f107 0218 	add.w	r2, r7, #24
 8018bec:	4413      	add	r3, r2
 8018bee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8018bf2:	f107 0314 	add.w	r3, r7, #20
 8018bf6:	2203      	movs	r2, #3
 8018bf8:	2100      	movs	r1, #0
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f000 fedc 	bl	80199b8 <Osal_MemSet>
  int index_input = 0;
 8018c00:	2300      	movs	r3, #0
 8018c02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8018c06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018c0a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018c0e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8018c12:	8812      	ldrh	r2, [r2, #0]
 8018c14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8018c16:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018c1a:	3302      	adds	r3, #2
 8018c1c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8018c20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018c24:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018c28:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8018c2c:	7812      	ldrb	r2, [r2, #0]
 8018c2e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8018c30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018c34:	3301      	adds	r3, #1
 8018c36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8018c3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018c3e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8018c42:	781b      	ldrb	r3, [r3, #0]
 8018c44:	2b01      	cmp	r3, #1
 8018c46:	d002      	beq.n	8018c4e <aci_gatt_add_char+0xce>
 8018c48:	2b02      	cmp	r3, #2
 8018c4a:	d004      	beq.n	8018c56 <aci_gatt_add_char+0xd6>
 8018c4c:	e007      	b.n	8018c5e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8018c4e:	2302      	movs	r3, #2
 8018c50:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8018c54:	e005      	b.n	8018c62 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8018c56:	2310      	movs	r3, #16
 8018c58:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8018c5c:	e001      	b.n	8018c62 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8018c5e:	2397      	movs	r3, #151	@ 0x97
 8018c60:	e091      	b.n	8018d86 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8018c62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8018c66:	1cd8      	adds	r0, r3, #3
 8018c68:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8018c6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018c70:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018c74:	6819      	ldr	r1, [r3, #0]
 8018c76:	f000 fe8f 	bl	8019998 <Osal_MemCpy>
    index_input += size;
 8018c7a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8018c7e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8018c82:	4413      	add	r3, r2
 8018c84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8018c88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018c8c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8018c90:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8018c94:	8812      	ldrh	r2, [r2, #0]
 8018c96:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8018c98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018c9c:	3302      	adds	r3, #2
 8018c9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8018ca2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018ca6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8018caa:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8018cac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018cb0:	3301      	adds	r3, #1
 8018cb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8018cb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018cba:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8018cbe:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8018cc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018cc4:	3301      	adds	r3, #1
 8018cc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8018cca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018cce:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8018cd2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8018cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018cd8:	3301      	adds	r3, #1
 8018cda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8018cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018ce2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8018ce6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8018ce8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018cec:	3301      	adds	r3, #1
 8018cee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8018cf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018cf6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8018cfa:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8018cfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018d00:	3301      	adds	r3, #1
 8018d02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018d06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018d0a:	2218      	movs	r2, #24
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f000 fe52 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018d14:	233f      	movs	r3, #63	@ 0x3f
 8018d16:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8018d1a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8018d1e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8018d22:	f107 0318 	add.w	r3, r7, #24
 8018d26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8018d2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8018d2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8018d32:	f107 0314 	add.w	r3, r7, #20
 8018d36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8018d3a:	2303      	movs	r3, #3
 8018d3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8018d40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018d44:	2100      	movs	r1, #0
 8018d46:	4618      	mov	r0, r3
 8018d48:	f000 fcf4 	bl	8019734 <hci_send_req>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	da01      	bge.n	8018d56 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8018d52:	23ff      	movs	r3, #255	@ 0xff
 8018d54:	e017      	b.n	8018d86 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8018d56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018d5e:	781b      	ldrb	r3, [r3, #0]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d005      	beq.n	8018d70 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8018d64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018d6c:	781b      	ldrb	r3, [r3, #0]
 8018d6e:	e00a      	b.n	8018d86 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8018d70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8018d74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018d78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8018d7c:	b29a      	uxth	r2, r3
 8018d7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8018d82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8018d84:	2300      	movs	r3, #0
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	bd90      	pop	{r4, r7, pc}

08018d90 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8018d90:	b5b0      	push	{r4, r5, r7, lr}
 8018d92:	b0cc      	sub	sp, #304	@ 0x130
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	4605      	mov	r5, r0
 8018d98:	460c      	mov	r4, r1
 8018d9a:	4610      	mov	r0, r2
 8018d9c:	4619      	mov	r1, r3
 8018d9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018da2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8018da6:	462a      	mov	r2, r5
 8018da8:	801a      	strh	r2, [r3, #0]
 8018daa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018dae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8018db2:	4622      	mov	r2, r4
 8018db4:	801a      	strh	r2, [r3, #0]
 8018db6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018dba:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	701a      	strb	r2, [r3, #0]
 8018dc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018dc6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8018dca:	460a      	mov	r2, r1
 8018dcc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8018dce:	f107 0310 	add.w	r3, r7, #16
 8018dd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8018dd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018dda:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018dde:	2200      	movs	r2, #0
 8018de0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8018de2:	2300      	movs	r3, #0
 8018de4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8018de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018dec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018df0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8018df4:	8812      	ldrh	r2, [r2, #0]
 8018df6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8018df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018dfc:	3302      	adds	r3, #2
 8018dfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8018e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018e06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018e0a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8018e0e:	8812      	ldrh	r2, [r2, #0]
 8018e10:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8018e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018e16:	3302      	adds	r3, #2
 8018e18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8018e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018e20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018e24:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8018e28:	7812      	ldrb	r2, [r2, #0]
 8018e2a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8018e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018e30:	3301      	adds	r3, #1
 8018e32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8018e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018e3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018e3e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8018e42:	7812      	ldrb	r2, [r2, #0]
 8018e44:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8018e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8018e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018e54:	1d98      	adds	r0, r3, #6
 8018e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018e5a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8018e5e:	781b      	ldrb	r3, [r3, #0]
 8018e60:	461a      	mov	r2, r3
 8018e62:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8018e66:	f000 fd97 	bl	8019998 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8018e6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018e6e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8018e78:	4413      	add	r3, r2
 8018e7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018e7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018e82:	2218      	movs	r2, #24
 8018e84:	2100      	movs	r1, #0
 8018e86:	4618      	mov	r0, r3
 8018e88:	f000 fd96 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018e8c:	233f      	movs	r3, #63	@ 0x3f
 8018e8e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8018e92:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8018e96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8018e9a:	f107 0310 	add.w	r3, r7, #16
 8018e9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8018ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018ea6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8018eaa:	f107 030f 	add.w	r3, r7, #15
 8018eae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8018eb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f000 fc38 	bl	8019734 <hci_send_req>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	da01      	bge.n	8018ece <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8018eca:	23ff      	movs	r3, #255	@ 0xff
 8018ecc:	e004      	b.n	8018ed8 <aci_gatt_update_char_value+0x148>
  return status;
 8018ece:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018ed2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018ed6:	781b      	ldrb	r3, [r3, #0]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bdb0      	pop	{r4, r5, r7, pc}

08018ee2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8018ee2:	b580      	push	{r7, lr}
 8018ee4:	b0cc      	sub	sp, #304	@ 0x130
 8018ee6:	af00      	add	r7, sp, #0
 8018ee8:	4602      	mov	r2, r0
 8018eea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018eee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8018ef2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8018ef4:	f107 0310 	add.w	r3, r7, #16
 8018ef8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8018efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018f00:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018f04:	2200      	movs	r2, #0
 8018f06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8018f08:	2300      	movs	r3, #0
 8018f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8018f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018f12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018f16:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8018f1a:	8812      	ldrh	r2, [r2, #0]
 8018f1c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8018f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018f22:	3302      	adds	r3, #2
 8018f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018f28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018f2c:	2218      	movs	r2, #24
 8018f2e:	2100      	movs	r1, #0
 8018f30:	4618      	mov	r0, r3
 8018f32:	f000 fd41 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018f36:	233f      	movs	r3, #63	@ 0x3f
 8018f38:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8018f3c:	f240 1325 	movw	r3, #293	@ 0x125
 8018f40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8018f44:	f107 0310 	add.w	r3, r7, #16
 8018f48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8018f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018f50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8018f54:	f107 030f 	add.w	r3, r7, #15
 8018f58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8018f5c:	2301      	movs	r3, #1
 8018f5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8018f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018f66:	2100      	movs	r1, #0
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f000 fbe3 	bl	8019734 <hci_send_req>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	da01      	bge.n	8018f78 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8018f74:	23ff      	movs	r3, #255	@ 0xff
 8018f76:	e004      	b.n	8018f82 <aci_gatt_confirm_indication+0xa0>
  return status;
 8018f78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018f7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018f80:	781b      	ldrb	r3, [r3, #0]
}
 8018f82:	4618      	mov	r0, r3
 8018f84:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b0cc      	sub	sp, #304	@ 0x130
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	4602      	mov	r2, r0
 8018f94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018f98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8018f9c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8018f9e:	f107 0310 	add.w	r3, r7, #16
 8018fa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8018fa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8018faa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8018fae:	2200      	movs	r2, #0
 8018fb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8018fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8018fbc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8018fc0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8018fc4:	8812      	ldrh	r2, [r2, #0]
 8018fc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8018fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018fcc:	3302      	adds	r3, #2
 8018fce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8018fd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8018fd6:	2218      	movs	r2, #24
 8018fd8:	2100      	movs	r1, #0
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f000 fcec 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8018fe0:	233f      	movs	r3, #63	@ 0x3f
 8018fe2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8018fe6:	f240 1327 	movw	r3, #295	@ 0x127
 8018fea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8018fee:	f107 0310 	add.w	r3, r7, #16
 8018ff2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8018ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8018ffa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8018ffe:	f107 030f 	add.w	r3, r7, #15
 8019002:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8019006:	2301      	movs	r3, #1
 8019008:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801900c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019010:	2100      	movs	r1, #0
 8019012:	4618      	mov	r0, r3
 8019014:	f000 fb8e 	bl	8019734 <hci_send_req>
 8019018:	4603      	mov	r3, r0
 801901a:	2b00      	cmp	r3, #0
 801901c:	da01      	bge.n	8019022 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 801901e:	23ff      	movs	r3, #255	@ 0xff
 8019020:	e004      	b.n	801902c <aci_gatt_allow_read+0xa0>
  return status;
 8019022:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019026:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801902a:	781b      	ldrb	r3, [r3, #0]
}
 801902c:	4618      	mov	r0, r3
 801902e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}

08019036 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8019036:	b580      	push	{r7, lr}
 8019038:	b0cc      	sub	sp, #304	@ 0x130
 801903a:	af00      	add	r7, sp, #0
 801903c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019040:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8019044:	601a      	str	r2, [r3, #0]
 8019046:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801904a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801904e:	4602      	mov	r2, r0
 8019050:	701a      	strb	r2, [r3, #0]
 8019052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019056:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801905a:	460a      	mov	r2, r1
 801905c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 801905e:	f107 0310 	add.w	r3, r7, #16
 8019062:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8019066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801906a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801906e:	2200      	movs	r2, #0
 8019070:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8019072:	2300      	movs	r3, #0
 8019074:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8019078:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801907c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8019080:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8019084:	7812      	ldrb	r2, [r2, #0]
 8019086:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8019088:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801908c:	3301      	adds	r3, #1
 801908e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8019092:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019096:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801909a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801909e:	7812      	ldrb	r2, [r2, #0]
 80190a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80190a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80190a6:	3301      	adds	r3, #1
 80190a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80190ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80190b0:	1c98      	adds	r0, r3, #2
 80190b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80190b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80190ba:	781a      	ldrb	r2, [r3, #0]
 80190bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80190c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80190c4:	6819      	ldr	r1, [r3, #0]
 80190c6:	f000 fc67 	bl	8019998 <Osal_MemCpy>
  index_input += Length;
 80190ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80190ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80190d8:	4413      	add	r3, r2
 80190da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80190de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80190e2:	2218      	movs	r2, #24
 80190e4:	2100      	movs	r1, #0
 80190e6:	4618      	mov	r0, r3
 80190e8:	f000 fc66 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80190ec:	233f      	movs	r3, #63	@ 0x3f
 80190ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80190f2:	230c      	movs	r3, #12
 80190f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80190f8:	f107 0310 	add.w	r3, r7, #16
 80190fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8019100:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019104:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8019108:	f107 030f 	add.w	r3, r7, #15
 801910c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8019110:	2301      	movs	r3, #1
 8019112:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8019116:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801911a:	2100      	movs	r1, #0
 801911c:	4618      	mov	r0, r3
 801911e:	f000 fb09 	bl	8019734 <hci_send_req>
 8019122:	4603      	mov	r3, r0
 8019124:	2b00      	cmp	r3, #0
 8019126:	da01      	bge.n	801912c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8019128:	23ff      	movs	r3, #255	@ 0xff
 801912a:	e004      	b.n	8019136 <aci_hal_write_config_data+0x100>
  return status;
 801912c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019130:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8019134:	781b      	ldrb	r3, [r3, #0]
}
 8019136:	4618      	mov	r0, r3
 8019138:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}

08019140 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b0cc      	sub	sp, #304	@ 0x130
 8019144:	af00      	add	r7, sp, #0
 8019146:	4602      	mov	r2, r0
 8019148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801914c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8019150:	701a      	strb	r2, [r3, #0]
 8019152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019156:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801915a:	460a      	mov	r2, r1
 801915c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 801915e:	f107 0310 	add.w	r3, r7, #16
 8019162:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8019166:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801916a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801916e:	2200      	movs	r2, #0
 8019170:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8019172:	2300      	movs	r3, #0
 8019174:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8019178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801917c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8019180:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8019184:	7812      	ldrb	r2, [r2, #0]
 8019186:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8019188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801918c:	3301      	adds	r3, #1
 801918e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8019192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019196:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801919a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801919e:	7812      	ldrb	r2, [r2, #0]
 80191a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80191a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80191a6:	3301      	adds	r3, #1
 80191a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80191ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80191b0:	2218      	movs	r2, #24
 80191b2:	2100      	movs	r1, #0
 80191b4:	4618      	mov	r0, r3
 80191b6:	f000 fbff 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80191ba:	233f      	movs	r3, #63	@ 0x3f
 80191bc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80191c0:	230f      	movs	r3, #15
 80191c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80191c6:	f107 0310 	add.w	r3, r7, #16
 80191ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80191ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80191d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80191d6:	f107 030f 	add.w	r3, r7, #15
 80191da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80191de:	2301      	movs	r3, #1
 80191e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80191e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80191e8:	2100      	movs	r1, #0
 80191ea:	4618      	mov	r0, r3
 80191ec:	f000 faa2 	bl	8019734 <hci_send_req>
 80191f0:	4603      	mov	r3, r0
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	da01      	bge.n	80191fa <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80191f6:	23ff      	movs	r3, #255	@ 0xff
 80191f8:	e004      	b.n	8019204 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80191fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80191fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8019202:	781b      	ldrb	r3, [r3, #0]
}
 8019204:	4618      	mov	r0, r3
 8019206:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}

0801920e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 801920e:	b580      	push	{r7, lr}
 8019210:	b0cc      	sub	sp, #304	@ 0x130
 8019212:	af00      	add	r7, sp, #0
 8019214:	4602      	mov	r2, r0
 8019216:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801921a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801921e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8019220:	f107 0310 	add.w	r3, r7, #16
 8019224:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8019228:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801922c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8019230:	2200      	movs	r2, #0
 8019232:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8019234:	2300      	movs	r3, #0
 8019236:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801923a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801923e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8019242:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8019246:	8812      	ldrh	r2, [r2, #0]
 8019248:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801924a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801924e:	3302      	adds	r3, #2
 8019250:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8019254:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019258:	2218      	movs	r2, #24
 801925a:	2100      	movs	r1, #0
 801925c:	4618      	mov	r0, r3
 801925e:	f000 fbab 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8019262:	233f      	movs	r3, #63	@ 0x3f
 8019264:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8019268:	2318      	movs	r3, #24
 801926a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801926e:	f107 0310 	add.w	r3, r7, #16
 8019272:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8019276:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801927a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801927e:	f107 030f 	add.w	r3, r7, #15
 8019282:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8019286:	2301      	movs	r3, #1
 8019288:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801928c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019290:	2100      	movs	r1, #0
 8019292:	4618      	mov	r0, r3
 8019294:	f000 fa4e 	bl	8019734 <hci_send_req>
 8019298:	4603      	mov	r3, r0
 801929a:	2b00      	cmp	r3, #0
 801929c:	da01      	bge.n	80192a2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 801929e:	23ff      	movs	r3, #255	@ 0xff
 80192a0:	e004      	b.n	80192ac <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80192a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80192a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80192aa:	781b      	ldrb	r3, [r3, #0]
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}

080192b6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80192b6:	b580      	push	{r7, lr}
 80192b8:	b088      	sub	sp, #32
 80192ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80192bc:	2300      	movs	r3, #0
 80192be:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80192c0:	f107 0308 	add.w	r3, r7, #8
 80192c4:	2218      	movs	r2, #24
 80192c6:	2100      	movs	r1, #0
 80192c8:	4618      	mov	r0, r3
 80192ca:	f000 fb75 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x03;
 80192ce:	2303      	movs	r3, #3
 80192d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80192d2:	2303      	movs	r3, #3
 80192d4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80192d6:	1dfb      	adds	r3, r7, #7
 80192d8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80192da:	2301      	movs	r3, #1
 80192dc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80192de:	f107 0308 	add.w	r3, r7, #8
 80192e2:	2100      	movs	r1, #0
 80192e4:	4618      	mov	r0, r3
 80192e6:	f000 fa25 	bl	8019734 <hci_send_req>
 80192ea:	4603      	mov	r3, r0
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	da01      	bge.n	80192f4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80192f0:	23ff      	movs	r3, #255	@ 0xff
 80192f2:	e000      	b.n	80192f6 <hci_reset+0x40>
  return status;
 80192f4:	79fb      	ldrb	r3, [r7, #7]
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3720      	adds	r7, #32
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}

080192fe <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80192fe:	b580      	push	{r7, lr}
 8019300:	b0ce      	sub	sp, #312	@ 0x138
 8019302:	af00      	add	r7, sp, #0
 8019304:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019308:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801930c:	6019      	str	r1, [r3, #0]
 801930e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8019312:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8019316:	601a      	str	r2, [r3, #0]
 8019318:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801931c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8019320:	4602      	mov	r2, r0
 8019322:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8019324:	f107 0318 	add.w	r3, r7, #24
 8019328:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801932c:	f107 0310 	add.w	r3, r7, #16
 8019330:	2205      	movs	r2, #5
 8019332:	2100      	movs	r1, #0
 8019334:	4618      	mov	r0, r3
 8019336:	f000 fb3f 	bl	80199b8 <Osal_MemSet>
  int index_input = 0;
 801933a:	2300      	movs	r3, #0
 801933c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8019340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8019344:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8019348:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801934c:	8812      	ldrh	r2, [r2, #0]
 801934e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8019350:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019354:	3302      	adds	r3, #2
 8019356:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801935a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801935e:	2218      	movs	r2, #24
 8019360:	2100      	movs	r1, #0
 8019362:	4618      	mov	r0, r3
 8019364:	f000 fb28 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x08;
 8019368:	2308      	movs	r3, #8
 801936a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 801936e:	2330      	movs	r3, #48	@ 0x30
 8019370:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8019374:	f107 0318 	add.w	r3, r7, #24
 8019378:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 801937c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019380:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8019384:	f107 0310 	add.w	r3, r7, #16
 8019388:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 801938c:	2305      	movs	r3, #5
 801938e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8019392:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019396:	2100      	movs	r1, #0
 8019398:	4618      	mov	r0, r3
 801939a:	f000 f9cb 	bl	8019734 <hci_send_req>
 801939e:	4603      	mov	r3, r0
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	da01      	bge.n	80193a8 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 80193a4:	23ff      	movs	r3, #255	@ 0xff
 80193a6:	e023      	b.n	80193f0 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80193a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80193ac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d005      	beq.n	80193c2 <hci_le_read_phy+0xc4>
    return resp.Status;
 80193b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80193ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	e016      	b.n	80193f0 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 80193c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80193c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80193ca:	78da      	ldrb	r2, [r3, #3]
 80193cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80193d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80193d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80193dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80193e0:	791a      	ldrb	r2, [r3, #4]
 80193e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80193e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80193ee:	2300      	movs	r3, #0
}
 80193f0:	4618      	mov	r0, r3
 80193f2:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}

080193fa <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80193fa:	b590      	push	{r4, r7, lr}
 80193fc:	b0cd      	sub	sp, #308	@ 0x134
 80193fe:	af00      	add	r7, sp, #0
 8019400:	4604      	mov	r4, r0
 8019402:	4608      	mov	r0, r1
 8019404:	4611      	mov	r1, r2
 8019406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801940a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801940e:	4622      	mov	r2, r4
 8019410:	701a      	strb	r2, [r3, #0]
 8019412:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019416:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801941a:	4602      	mov	r2, r0
 801941c:	701a      	strb	r2, [r3, #0]
 801941e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019422:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8019426:	460a      	mov	r2, r1
 8019428:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 801942a:	f107 0310 	add.w	r3, r7, #16
 801942e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8019432:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8019436:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801943a:	2200      	movs	r2, #0
 801943c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801943e:	2300      	movs	r3, #0
 8019440:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8019444:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019448:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801944c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8019450:	7812      	ldrb	r2, [r2, #0]
 8019452:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8019454:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019458:	3301      	adds	r3, #1
 801945a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 801945e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019462:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8019466:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801946a:	7812      	ldrb	r2, [r2, #0]
 801946c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801946e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019472:	3301      	adds	r3, #1
 8019474:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8019478:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801947c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8019480:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8019484:	7812      	ldrb	r2, [r2, #0]
 8019486:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8019488:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801948c:	3301      	adds	r3, #1
 801948e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8019492:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019496:	2218      	movs	r2, #24
 8019498:	2100      	movs	r1, #0
 801949a:	4618      	mov	r0, r3
 801949c:	f000 fa8c 	bl	80199b8 <Osal_MemSet>
  rq.ogf = 0x08;
 80194a0:	2308      	movs	r3, #8
 80194a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80194a6:	2331      	movs	r3, #49	@ 0x31
 80194a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80194ac:	f107 0310 	add.w	r3, r7, #16
 80194b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80194b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80194b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80194bc:	f107 030f 	add.w	r3, r7, #15
 80194c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80194c4:	2301      	movs	r3, #1
 80194c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80194ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80194ce:	2100      	movs	r1, #0
 80194d0:	4618      	mov	r0, r3
 80194d2:	f000 f92f 	bl	8019734 <hci_send_req>
 80194d6:	4603      	mov	r3, r0
 80194d8:	2b00      	cmp	r3, #0
 80194da:	da01      	bge.n	80194e0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80194dc:	23ff      	movs	r3, #255	@ 0xff
 80194de:	e004      	b.n	80194ea <hci_le_set_default_phy+0xf0>
  return status;
 80194e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80194e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80194e8:	781b      	ldrb	r3, [r3, #0]
}
 80194ea:	4618      	mov	r0, r3
 80194ec:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd90      	pop	{r4, r7, pc}

080194f4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b086      	sub	sp, #24
 80194f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194fa:	f3ef 8310 	mrs	r3, PRIMASK
 80194fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8019500:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8019502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019504:	b672      	cpsid	i
}
 8019506:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8019508:	1cbb      	adds	r3, r7, #2
 801950a:	4619      	mov	r1, r3
 801950c:	4812      	ldr	r0, [pc, #72]	@ (8019558 <DbgTrace_TxCpltCallback+0x64>)
 801950e:	f001 f8f1 	bl	801a6f4 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8019512:	1cbb      	adds	r3, r7, #2
 8019514:	4619      	mov	r1, r3
 8019516:	4810      	ldr	r0, [pc, #64]	@ (8019558 <DbgTrace_TxCpltCallback+0x64>)
 8019518:	f001 f9db 	bl	801a8d2 <CircularQueue_Sense>
 801951c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d00c      	beq.n	801953e <DbgTrace_TxCpltCallback+0x4a>
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	f383 8810 	msr	PRIMASK, r3
}
 801952e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8019530:	887b      	ldrh	r3, [r7, #2]
 8019532:	4a0a      	ldr	r2, [pc, #40]	@ (801955c <DbgTrace_TxCpltCallback+0x68>)
 8019534:	4619      	mov	r1, r3
 8019536:	6938      	ldr	r0, [r7, #16]
 8019538:	f7e7 fe4b 	bl	80011d2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 801953c:	e008      	b.n	8019550 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 801953e:	4b08      	ldr	r3, [pc, #32]	@ (8019560 <DbgTrace_TxCpltCallback+0x6c>)
 8019540:	2201      	movs	r2, #1
 8019542:	701a      	strb	r2, [r3, #0]
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f383 8810 	msr	PRIMASK, r3
}
 801954e:	bf00      	nop
}
 8019550:	bf00      	nop
 8019552:	3718      	adds	r7, #24
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	20001c24 	.word	0x20001c24
 801955c:	080194f5 	.word	0x080194f5
 8019560:	20000589 	.word	0x20000589

08019564 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 801956a:	f7e7 fe2c 	bl	80011c6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 801956e:	2302      	movs	r3, #2
 8019570:	9300      	str	r3, [sp, #0]
 8019572:	2300      	movs	r3, #0
 8019574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8019578:	4903      	ldr	r1, [pc, #12]	@ (8019588 <DbgTraceInit+0x24>)
 801957a:	4804      	ldr	r0, [pc, #16]	@ (801958c <DbgTraceInit+0x28>)
 801957c:	f000 fe62 	bl	801a244 <CircularQueue_Init>
#endif 
#endif
  return;
 8019580:	bf00      	nop
}
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}
 8019586:	bf00      	nop
 8019588:	20001c44 	.word	0x20001c44
 801958c:	20001c24 	.word	0x20001c24

08019590 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	60f8      	str	r0, [r7, #12]
 8019598:	60b9      	str	r1, [r7, #8]
 801959a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 801959c:	687a      	ldr	r2, [r7, #4]
 801959e:	68b9      	ldr	r1, [r7, #8]
 80195a0:	68f8      	ldr	r0, [r7, #12]
 80195a2:	f000 f805 	bl	80195b0 <DbgTraceWrite>
 80195a6:	4603      	mov	r3, r0
}
 80195a8:	4618      	mov	r0, r3
 80195aa:	3710      	adds	r7, #16
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b08a      	sub	sp, #40	@ 0x28
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	60f8      	str	r0, [r7, #12]
 80195b8:	60b9      	str	r1, [r7, #8]
 80195ba:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80195bc:	2300      	movs	r3, #0
 80195be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195c0:	f3ef 8310 	mrs	r3, PRIMASK
 80195c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80195c6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80195c8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195d0:	d102      	bne.n	80195d8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80195d2:	2300      	movs	r3, #0
 80195d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80195d6:	e037      	b.n	8019648 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	2b01      	cmp	r3, #1
 80195dc:	d006      	beq.n	80195ec <DbgTraceWrite+0x3c>
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	2b02      	cmp	r3, #2
 80195e2:	d003      	beq.n	80195ec <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80195e4:	f04f 33ff 	mov.w	r3, #4294967295
 80195e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80195ea:	e02d      	b.n	8019648 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d02a      	beq.n	8019648 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80195f6:	b672      	cpsid	i
}
 80195f8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	b29a      	uxth	r2, r3
 80195fe:	2301      	movs	r3, #1
 8019600:	68b9      	ldr	r1, [r7, #8]
 8019602:	4814      	ldr	r0, [pc, #80]	@ (8019654 <DbgTraceWrite+0xa4>)
 8019604:	f000 fe50 	bl	801a2a8 <CircularQueue_Add>
 8019608:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801960a:	69fb      	ldr	r3, [r7, #28]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d015      	beq.n	801963c <DbgTraceWrite+0x8c>
 8019610:	4b11      	ldr	r3, [pc, #68]	@ (8019658 <DbgTraceWrite+0xa8>)
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	b2db      	uxtb	r3, r3
 8019616:	2b00      	cmp	r3, #0
 8019618:	d010      	beq.n	801963c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801961a:	4b0f      	ldr	r3, [pc, #60]	@ (8019658 <DbgTraceWrite+0xa8>)
 801961c:	2200      	movs	r2, #0
 801961e:	701a      	strb	r2, [r3, #0]
 8019620:	6a3b      	ldr	r3, [r7, #32]
 8019622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	f383 8810 	msr	PRIMASK, r3
}
 801962a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	b29b      	uxth	r3, r3
 8019630:	4a0a      	ldr	r2, [pc, #40]	@ (801965c <DbgTraceWrite+0xac>)
 8019632:	4619      	mov	r1, r3
 8019634:	69f8      	ldr	r0, [r7, #28]
 8019636:	f7e7 fdcc 	bl	80011d2 <DbgOutputTraces>
 801963a:	e005      	b.n	8019648 <DbgTraceWrite+0x98>
 801963c:	6a3b      	ldr	r3, [r7, #32]
 801963e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019640:	693b      	ldr	r3, [r7, #16]
 8019642:	f383 8810 	msr	PRIMASK, r3
}
 8019646:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8019648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801964a:	4618      	mov	r0, r3
 801964c:	3728      	adds	r7, #40	@ 0x28
 801964e:	46bd      	mov	sp, r7
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	20001c24 	.word	0x20001c24
 8019658:	20000589 	.word	0x20000589
 801965c:	080194f5 	.word	0x080194f5

08019660 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	4a08      	ldr	r2, [pc, #32]	@ (8019690 <hci_init+0x30>)
 8019670:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8019672:	4a08      	ldr	r2, [pc, #32]	@ (8019694 <hci_init+0x34>)
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8019678:	4806      	ldr	r0, [pc, #24]	@ (8019694 <hci_init+0x34>)
 801967a:	f000 f979 	bl	8019970 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	4618      	mov	r0, r3
 8019684:	f000 f8da 	bl	801983c <TlInit>

  return;
 8019688:	bf00      	nop
}
 801968a:	3708      	adds	r7, #8
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	20002c6c 	.word	0x20002c6c
 8019694:	20002c44 	.word	0x20002c44

08019698 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b084      	sub	sp, #16
 801969c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801969e:	4822      	ldr	r0, [pc, #136]	@ (8019728 <hci_user_evt_proc+0x90>)
 80196a0:	f000 fd22 	bl	801a0e8 <LST_is_empty>
 80196a4:	4603      	mov	r3, r0
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d12b      	bne.n	8019702 <hci_user_evt_proc+0x6a>
 80196aa:	4b20      	ldr	r3, [pc, #128]	@ (801972c <hci_user_evt_proc+0x94>)
 80196ac:	781b      	ldrb	r3, [r3, #0]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d027      	beq.n	8019702 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80196b2:	f107 030c 	add.w	r3, r7, #12
 80196b6:	4619      	mov	r1, r3
 80196b8:	481b      	ldr	r0, [pc, #108]	@ (8019728 <hci_user_evt_proc+0x90>)
 80196ba:	f000 fda4 	bl	801a206 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80196be:	4b1c      	ldr	r3, [pc, #112]	@ (8019730 <hci_user_evt_proc+0x98>)
 80196c0:	69db      	ldr	r3, [r3, #28]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d00c      	beq.n	80196e0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80196ca:	2301      	movs	r3, #1
 80196cc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80196ce:	4b18      	ldr	r3, [pc, #96]	@ (8019730 <hci_user_evt_proc+0x98>)
 80196d0:	69db      	ldr	r3, [r3, #28]
 80196d2:	1d3a      	adds	r2, r7, #4
 80196d4:	4610      	mov	r0, r2
 80196d6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80196d8:	793a      	ldrb	r2, [r7, #4]
 80196da:	4b14      	ldr	r3, [pc, #80]	@ (801972c <hci_user_evt_proc+0x94>)
 80196dc:	701a      	strb	r2, [r3, #0]
 80196de:	e002      	b.n	80196e6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80196e0:	4b12      	ldr	r3, [pc, #72]	@ (801972c <hci_user_evt_proc+0x94>)
 80196e2:	2201      	movs	r2, #1
 80196e4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80196e6:	4b11      	ldr	r3, [pc, #68]	@ (801972c <hci_user_evt_proc+0x94>)
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d004      	beq.n	80196f8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	4618      	mov	r0, r3
 80196f2:	f001 fc3d 	bl	801af70 <TL_MM_EvtDone>
 80196f6:	e004      	b.n	8019702 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	4619      	mov	r1, r3
 80196fc:	480a      	ldr	r0, [pc, #40]	@ (8019728 <hci_user_evt_proc+0x90>)
 80196fe:	f000 fd15 	bl	801a12c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8019702:	4809      	ldr	r0, [pc, #36]	@ (8019728 <hci_user_evt_proc+0x90>)
 8019704:	f000 fcf0 	bl	801a0e8 <LST_is_empty>
 8019708:	4603      	mov	r3, r0
 801970a:	2b00      	cmp	r3, #0
 801970c:	d107      	bne.n	801971e <hci_user_evt_proc+0x86>
 801970e:	4b07      	ldr	r3, [pc, #28]	@ (801972c <hci_user_evt_proc+0x94>)
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d003      	beq.n	801971e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8019716:	4804      	ldr	r0, [pc, #16]	@ (8019728 <hci_user_evt_proc+0x90>)
 8019718:	f7ef fe15 	bl	8009346 <hci_notify_asynch_evt>
  }


  return;
 801971c:	bf00      	nop
 801971e:	bf00      	nop
}
 8019720:	3710      	adds	r7, #16
 8019722:	46bd      	mov	sp, r7
 8019724:	bd80      	pop	{r7, pc}
 8019726:	bf00      	nop
 8019728:	20000768 	.word	0x20000768
 801972c:	20000774 	.word	0x20000774
 8019730:	20002c44 	.word	0x20002c44

08019734 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b088      	sub	sp, #32
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
 801973c:	460b      	mov	r3, r1
 801973e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8019740:	2000      	movs	r0, #0
 8019742:	f000 f8d1 	bl	80198e8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8019746:	2300      	movs	r3, #0
 8019748:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	885b      	ldrh	r3, [r3, #2]
 801974e:	b21b      	sxth	r3, r3
 8019750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019754:	b21a      	sxth	r2, r3
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	881b      	ldrh	r3, [r3, #0]
 801975a:	029b      	lsls	r3, r3, #10
 801975c:	b21b      	sxth	r3, r3
 801975e:	4313      	orrs	r3, r2
 8019760:	b21b      	sxth	r3, r3
 8019762:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8019764:	4b33      	ldr	r3, [pc, #204]	@ (8019834 <hci_send_req+0x100>)
 8019766:	2201      	movs	r2, #1
 8019768:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	68db      	ldr	r3, [r3, #12]
 801976e:	b2d9      	uxtb	r1, r3
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	689a      	ldr	r2, [r3, #8]
 8019774:	8bbb      	ldrh	r3, [r7, #28]
 8019776:	4618      	mov	r0, r3
 8019778:	f000 f890 	bl	801989c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 801977c:	e04e      	b.n	801981c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801977e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8019782:	f7ef fdf7 	bl	8009374 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8019786:	e043      	b.n	8019810 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8019788:	f107 030c 	add.w	r3, r7, #12
 801978c:	4619      	mov	r1, r3
 801978e:	482a      	ldr	r0, [pc, #168]	@ (8019838 <hci_send_req+0x104>)
 8019790:	f000 fd39 	bl	801a206 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	7a5b      	ldrb	r3, [r3, #9]
 8019798:	2b0f      	cmp	r3, #15
 801979a:	d114      	bne.n	80197c6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	330b      	adds	r3, #11
 80197a0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80197a2:	693b      	ldr	r3, [r7, #16]
 80197a4:	885b      	ldrh	r3, [r3, #2]
 80197a6:	b29b      	uxth	r3, r3
 80197a8:	8bba      	ldrh	r2, [r7, #28]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d104      	bne.n	80197b8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	691b      	ldr	r3, [r3, #16]
 80197b2:	693a      	ldr	r2, [r7, #16]
 80197b4:	7812      	ldrb	r2, [r2, #0]
 80197b6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80197b8:	693b      	ldr	r3, [r7, #16]
 80197ba:	785b      	ldrb	r3, [r3, #1]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d027      	beq.n	8019810 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80197c0:	2301      	movs	r3, #1
 80197c2:	77fb      	strb	r3, [r7, #31]
 80197c4:	e024      	b.n	8019810 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	330b      	adds	r3, #11
 80197ca:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80197cc:	69bb      	ldr	r3, [r7, #24]
 80197ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80197d2:	b29b      	uxth	r3, r3
 80197d4:	8bba      	ldrh	r2, [r7, #28]
 80197d6:	429a      	cmp	r2, r3
 80197d8:	d114      	bne.n	8019804 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	7a9b      	ldrb	r3, [r3, #10]
 80197de:	3b03      	subs	r3, #3
 80197e0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	695a      	ldr	r2, [r3, #20]
 80197e6:	7dfb      	ldrb	r3, [r7, #23]
 80197e8:	429a      	cmp	r2, r3
 80197ea:	bfa8      	it	ge
 80197ec:	461a      	movge	r2, r3
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	6918      	ldr	r0, [r3, #16]
 80197f6:	69bb      	ldr	r3, [r7, #24]
 80197f8:	1cd9      	adds	r1, r3, #3
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	695b      	ldr	r3, [r3, #20]
 80197fe:	461a      	mov	r2, r3
 8019800:	f003 f979 	bl	801caf6 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8019804:	69bb      	ldr	r3, [r7, #24]
 8019806:	781b      	ldrb	r3, [r3, #0]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d001      	beq.n	8019810 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801980c:	2301      	movs	r3, #1
 801980e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8019810:	4809      	ldr	r0, [pc, #36]	@ (8019838 <hci_send_req+0x104>)
 8019812:	f000 fc69 	bl	801a0e8 <LST_is_empty>
 8019816:	4603      	mov	r3, r0
 8019818:	2b00      	cmp	r3, #0
 801981a:	d0b5      	beq.n	8019788 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801981c:	7ffb      	ldrb	r3, [r7, #31]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d0ad      	beq.n	801977e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8019822:	2001      	movs	r0, #1
 8019824:	f000 f860 	bl	80198e8 <NotifyCmdStatus>

  return 0;
 8019828:	2300      	movs	r3, #0
}
 801982a:	4618      	mov	r0, r3
 801982c:	3720      	adds	r7, #32
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}
 8019832:	bf00      	nop
 8019834:	20002c70 	.word	0x20002c70
 8019838:	20002c64 	.word	0x20002c64

0801983c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b086      	sub	sp, #24
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8019844:	480f      	ldr	r0, [pc, #60]	@ (8019884 <TlInit+0x48>)
 8019846:	f000 fc3f 	bl	801a0c8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801984a:	4a0f      	ldr	r2, [pc, #60]	@ (8019888 <TlInit+0x4c>)
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8019850:	480e      	ldr	r0, [pc, #56]	@ (801988c <TlInit+0x50>)
 8019852:	f000 fc39 	bl	801a0c8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8019856:	4b0e      	ldr	r3, [pc, #56]	@ (8019890 <TlInit+0x54>)
 8019858:	2201      	movs	r2, #1
 801985a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 801985c:	4b0d      	ldr	r3, [pc, #52]	@ (8019894 <TlInit+0x58>)
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d00a      	beq.n	801987a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8019868:	4b0b      	ldr	r3, [pc, #44]	@ (8019898 <TlInit+0x5c>)
 801986a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 801986c:	4b09      	ldr	r3, [pc, #36]	@ (8019894 <TlInit+0x58>)
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	f107 0208 	add.w	r2, r7, #8
 8019874:	4610      	mov	r0, r2
 8019876:	4798      	blx	r3
  }

  return;
 8019878:	bf00      	nop
 801987a:	bf00      	nop
}
 801987c:	3718      	adds	r7, #24
 801987e:	46bd      	mov	sp, r7
 8019880:	bd80      	pop	{r7, pc}
 8019882:	bf00      	nop
 8019884:	20002c64 	.word	0x20002c64
 8019888:	20000770 	.word	0x20000770
 801988c:	20000768 	.word	0x20000768
 8019890:	20000774 	.word	0x20000774
 8019894:	20002c44 	.word	0x20002c44
 8019898:	08019929 	.word	0x08019929

0801989c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	4603      	mov	r3, r0
 80198a4:	603a      	str	r2, [r7, #0]
 80198a6:	80fb      	strh	r3, [r7, #6]
 80198a8:	460b      	mov	r3, r1
 80198aa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80198ac:	4b0c      	ldr	r3, [pc, #48]	@ (80198e0 <SendCmd+0x44>)
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	88fa      	ldrh	r2, [r7, #6]
 80198b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80198b6:	4b0a      	ldr	r3, [pc, #40]	@ (80198e0 <SendCmd+0x44>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	797a      	ldrb	r2, [r7, #5]
 80198bc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80198be:	4b08      	ldr	r3, [pc, #32]	@ (80198e0 <SendCmd+0x44>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	330c      	adds	r3, #12
 80198c4:	797a      	ldrb	r2, [r7, #5]
 80198c6:	6839      	ldr	r1, [r7, #0]
 80198c8:	4618      	mov	r0, r3
 80198ca:	f003 f914 	bl	801caf6 <memcpy>

  hciContext.io.Send(0,0);
 80198ce:	4b05      	ldr	r3, [pc, #20]	@ (80198e4 <SendCmd+0x48>)
 80198d0:	691b      	ldr	r3, [r3, #16]
 80198d2:	2100      	movs	r1, #0
 80198d4:	2000      	movs	r0, #0
 80198d6:	4798      	blx	r3

  return;
 80198d8:	bf00      	nop
}
 80198da:	3708      	adds	r7, #8
 80198dc:	46bd      	mov	sp, r7
 80198de:	bd80      	pop	{r7, pc}
 80198e0:	20000770 	.word	0x20000770
 80198e4:	20002c44 	.word	0x20002c44

080198e8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b082      	sub	sp, #8
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	4603      	mov	r3, r0
 80198f0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80198f2:	79fb      	ldrb	r3, [r7, #7]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d108      	bne.n	801990a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80198f8:	4b0a      	ldr	r3, [pc, #40]	@ (8019924 <NotifyCmdStatus+0x3c>)
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d00d      	beq.n	801991c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8019900:	4b08      	ldr	r3, [pc, #32]	@ (8019924 <NotifyCmdStatus+0x3c>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2000      	movs	r0, #0
 8019906:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8019908:	e008      	b.n	801991c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801990a:	4b06      	ldr	r3, [pc, #24]	@ (8019924 <NotifyCmdStatus+0x3c>)
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d004      	beq.n	801991c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8019912:	4b04      	ldr	r3, [pc, #16]	@ (8019924 <NotifyCmdStatus+0x3c>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	2001      	movs	r0, #1
 8019918:	4798      	blx	r3
  return;
 801991a:	bf00      	nop
 801991c:	bf00      	nop
}
 801991e:	3708      	adds	r7, #8
 8019920:	46bd      	mov	sp, r7
 8019922:	bd80      	pop	{r7, pc}
 8019924:	20002c6c 	.word	0x20002c6c

08019928 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b082      	sub	sp, #8
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	7a5b      	ldrb	r3, [r3, #9]
 8019934:	2b0f      	cmp	r3, #15
 8019936:	d003      	beq.n	8019940 <TlEvtReceived+0x18>
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	7a5b      	ldrb	r3, [r3, #9]
 801993c:	2b0e      	cmp	r3, #14
 801993e:	d107      	bne.n	8019950 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8019940:	6879      	ldr	r1, [r7, #4]
 8019942:	4809      	ldr	r0, [pc, #36]	@ (8019968 <TlEvtReceived+0x40>)
 8019944:	f000 fc18 	bl	801a178 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8019948:	2000      	movs	r0, #0
 801994a:	f7ef fd08 	bl	800935e <hci_cmd_resp_release>
 801994e:	e006      	b.n	801995e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8019950:	6879      	ldr	r1, [r7, #4]
 8019952:	4806      	ldr	r0, [pc, #24]	@ (801996c <TlEvtReceived+0x44>)
 8019954:	f000 fc10 	bl	801a178 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8019958:	4804      	ldr	r0, [pc, #16]	@ (801996c <TlEvtReceived+0x44>)
 801995a:	f7ef fcf4 	bl	8009346 <hci_notify_asynch_evt>
  }

  return;
 801995e:	bf00      	nop
}
 8019960:	3708      	adds	r7, #8
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}
 8019966:	bf00      	nop
 8019968:	20002c64 	.word	0x20002c64
 801996c:	20000768 	.word	0x20000768

08019970 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8019970:	b480      	push	{r7}
 8019972:	b083      	sub	sp, #12
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	4a05      	ldr	r2, [pc, #20]	@ (8019990 <hci_register_io_bus+0x20>)
 801997c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	4a04      	ldr	r2, [pc, #16]	@ (8019994 <hci_register_io_bus+0x24>)
 8019982:	611a      	str	r2, [r3, #16]

  return;
 8019984:	bf00      	nop
}
 8019986:	370c      	adds	r7, #12
 8019988:	46bd      	mov	sp, r7
 801998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998e:	4770      	bx	lr
 8019990:	0801ace9 	.word	0x0801ace9
 8019994:	0801ad51 	.word	0x0801ad51

08019998 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b084      	sub	sp, #16
 801999c:	af00      	add	r7, sp, #0
 801999e:	60f8      	str	r0, [r7, #12]
 80199a0:	60b9      	str	r1, [r7, #8]
 80199a2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80199a4:	687a      	ldr	r2, [r7, #4]
 80199a6:	68b9      	ldr	r1, [r7, #8]
 80199a8:	68f8      	ldr	r0, [r7, #12]
 80199aa:	f003 f8a4 	bl	801caf6 <memcpy>
 80199ae:	4603      	mov	r3, r0
}
 80199b0:	4618      	mov	r0, r3
 80199b2:	3710      	adds	r7, #16
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b084      	sub	sp, #16
 80199bc:	af00      	add	r7, sp, #0
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	68b9      	ldr	r1, [r7, #8]
 80199c8:	68f8      	ldr	r0, [r7, #12]
 80199ca:	f003 f80d 	bl	801c9e8 <memset>
 80199ce:	4603      	mov	r3, r0
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	3710      	adds	r7, #16
 80199d4:	46bd      	mov	sp, r7
 80199d6:	bd80      	pop	{r7, pc}

080199d8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80199d8:	b480      	push	{r7}
 80199da:	b085      	sub	sp, #20
 80199dc:	af00      	add	r7, sp, #0
 80199de:	4603      	mov	r3, r0
 80199e0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80199e2:	4b0f      	ldr	r3, [pc, #60]	@ (8019a20 <OTP_Read+0x48>)
 80199e4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80199e6:	e002      	b.n	80199ee <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	3b08      	subs	r3, #8
 80199ec:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	3307      	adds	r3, #7
 80199f2:	781b      	ldrb	r3, [r3, #0]
 80199f4:	79fa      	ldrb	r2, [r7, #7]
 80199f6:	429a      	cmp	r2, r3
 80199f8:	d003      	beq.n	8019a02 <OTP_Read+0x2a>
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	4a09      	ldr	r2, [pc, #36]	@ (8019a24 <OTP_Read+0x4c>)
 80199fe:	4293      	cmp	r3, r2
 8019a00:	d1f2      	bne.n	80199e8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	3307      	adds	r3, #7
 8019a06:	781b      	ldrb	r3, [r3, #0]
 8019a08:	79fa      	ldrb	r2, [r7, #7]
 8019a0a:	429a      	cmp	r2, r3
 8019a0c:	d001      	beq.n	8019a12 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8019a0e:	2300      	movs	r3, #0
 8019a10:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8019a12:	68fb      	ldr	r3, [r7, #12]
}
 8019a14:	4618      	mov	r0, r3
 8019a16:	3714      	adds	r7, #20
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1e:	4770      	bx	lr
 8019a20:	1fff73f8 	.word	0x1fff73f8
 8019a24:	1fff7000 	.word	0x1fff7000

08019a28 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b08a      	sub	sp, #40	@ 0x28
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8019a30:	2300      	movs	r3, #0
 8019a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	3301      	adds	r3, #1
 8019a3a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8019a3c:	6a3b      	ldr	r3, [r7, #32]
 8019a3e:	781b      	ldrb	r3, [r3, #0]
 8019a40:	2bff      	cmp	r3, #255	@ 0xff
 8019a42:	d14c      	bne.n	8019ade <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8019a44:	6a3b      	ldr	r3, [r7, #32]
 8019a46:	3302      	adds	r3, #2
 8019a48:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8019a4a:	69fb      	ldr	r3, [r7, #28]
 8019a4c:	881b      	ldrh	r3, [r3, #0]
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	461a      	mov	r2, r3
 8019a52:	f640 4301 	movw	r3, #3073	@ 0xc01
 8019a56:	429a      	cmp	r2, r3
 8019a58:	d13d      	bne.n	8019ad6 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8019a5a:	69fb      	ldr	r3, [r7, #28]
 8019a5c:	3302      	adds	r3, #2
 8019a5e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8019a60:	69bb      	ldr	r3, [r7, #24]
 8019a62:	885b      	ldrh	r3, [r3, #2]
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	461a      	mov	r2, r3
 8019a68:	4b20      	ldr	r3, [pc, #128]	@ (8019aec <PeerToPeer_Event_Handler+0xc4>)
 8019a6a:	889b      	ldrh	r3, [r3, #4]
 8019a6c:	3302      	adds	r3, #2
 8019a6e:	429a      	cmp	r2, r3
 8019a70:	d118      	bne.n	8019aa4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8019a72:	2301      	movs	r3, #1
 8019a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8019a78:	69bb      	ldr	r3, [r7, #24]
 8019a7a:	7a1b      	ldrb	r3, [r3, #8]
 8019a7c:	f003 0301 	and.w	r3, r3, #1
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d007      	beq.n	8019a94 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8019a84:	2300      	movs	r3, #0
 8019a86:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8019a88:	f107 0308 	add.w	r3, r7, #8
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7f0 f8e3 	bl	8009c58 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8019a92:	e022      	b.n	8019ada <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8019a94:	2301      	movs	r3, #1
 8019a96:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8019a98:	f107 0308 	add.w	r3, r7, #8
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f7f0 f8db 	bl	8009c58 <P2PS_STM_App_Notification>
        break;
 8019aa2:	e01a      	b.n	8019ada <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8019aa4:	69bb      	ldr	r3, [r7, #24]
 8019aa6:	885b      	ldrh	r3, [r3, #2]
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	461a      	mov	r2, r3
 8019aac:	4b0f      	ldr	r3, [pc, #60]	@ (8019aec <PeerToPeer_Event_Handler+0xc4>)
 8019aae:	885b      	ldrh	r3, [r3, #2]
 8019ab0:	3301      	adds	r3, #1
 8019ab2:	429a      	cmp	r2, r3
 8019ab4:	d111      	bne.n	8019ada <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8019ab6:	2303      	movs	r3, #3
 8019ab8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8019aba:	69bb      	ldr	r3, [r7, #24]
 8019abc:	88db      	ldrh	r3, [r3, #6]
 8019abe:	b29b      	uxth	r3, r3
 8019ac0:	b2db      	uxtb	r3, r3
 8019ac2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8019ac4:	69bb      	ldr	r3, [r7, #24]
 8019ac6:	3308      	adds	r3, #8
 8019ac8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8019aca:	f107 0308 	add.w	r3, r7, #8
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7f0 f8c2 	bl	8009c58 <P2PS_STM_App_Notification>
        break;
 8019ad4:	e001      	b.n	8019ada <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 8019ad6:	bf00      	nop
 8019ad8:	e002      	b.n	8019ae0 <PeerToPeer_Event_Handler+0xb8>
        break;
 8019ada:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8019adc:	e000      	b.n	8019ae0 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8019ade:	bf00      	nop
  }

  return(return_value);
 8019ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3728      	adds	r7, #40	@ 0x28
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}
 8019aec:	20000778 	.word	0x20000778

08019af0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b08a      	sub	sp, #40	@ 0x28
 8019af4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8019af6:	484a      	ldr	r0, [pc, #296]	@ (8019c20 <P2PS_STM_Init+0x130>)
 8019af8:	f001 f848 	bl	801ab8c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8019afc:	238f      	movs	r3, #143	@ 0x8f
 8019afe:	703b      	strb	r3, [r7, #0]
 8019b00:	23e5      	movs	r3, #229	@ 0xe5
 8019b02:	707b      	strb	r3, [r7, #1]
 8019b04:	23b3      	movs	r3, #179	@ 0xb3
 8019b06:	70bb      	strb	r3, [r7, #2]
 8019b08:	23d5      	movs	r3, #213	@ 0xd5
 8019b0a:	70fb      	strb	r3, [r7, #3]
 8019b0c:	232e      	movs	r3, #46	@ 0x2e
 8019b0e:	713b      	strb	r3, [r7, #4]
 8019b10:	237f      	movs	r3, #127	@ 0x7f
 8019b12:	717b      	strb	r3, [r7, #5]
 8019b14:	234a      	movs	r3, #74	@ 0x4a
 8019b16:	71bb      	strb	r3, [r7, #6]
 8019b18:	2398      	movs	r3, #152	@ 0x98
 8019b1a:	71fb      	strb	r3, [r7, #7]
 8019b1c:	232a      	movs	r3, #42	@ 0x2a
 8019b1e:	723b      	strb	r3, [r7, #8]
 8019b20:	2348      	movs	r3, #72	@ 0x48
 8019b22:	727b      	strb	r3, [r7, #9]
 8019b24:	237a      	movs	r3, #122	@ 0x7a
 8019b26:	72bb      	strb	r3, [r7, #10]
 8019b28:	23cc      	movs	r3, #204	@ 0xcc
 8019b2a:	72fb      	strb	r3, [r7, #11]
 8019b2c:	2340      	movs	r3, #64	@ 0x40
 8019b2e:	733b      	strb	r3, [r7, #12]
 8019b30:	23fe      	movs	r3, #254	@ 0xfe
 8019b32:	737b      	strb	r3, [r7, #13]
 8019b34:	2300      	movs	r3, #0
 8019b36:	73bb      	strb	r3, [r7, #14]
 8019b38:	2300      	movs	r3, #0
 8019b3a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8019b3c:	4639      	mov	r1, r7
 8019b3e:	4b39      	ldr	r3, [pc, #228]	@ (8019c24 <P2PS_STM_Init+0x134>)
 8019b40:	9300      	str	r3, [sp, #0]
 8019b42:	2306      	movs	r3, #6
 8019b44:	2201      	movs	r2, #1
 8019b46:	2002      	movs	r0, #2
 8019b48:	f7fe ff44 	bl	80189d4 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8019b4c:	2319      	movs	r3, #25
 8019b4e:	703b      	strb	r3, [r7, #0]
 8019b50:	23ed      	movs	r3, #237	@ 0xed
 8019b52:	707b      	strb	r3, [r7, #1]
 8019b54:	2382      	movs	r3, #130	@ 0x82
 8019b56:	70bb      	strb	r3, [r7, #2]
 8019b58:	23ae      	movs	r3, #174	@ 0xae
 8019b5a:	70fb      	strb	r3, [r7, #3]
 8019b5c:	23ed      	movs	r3, #237	@ 0xed
 8019b5e:	713b      	strb	r3, [r7, #4]
 8019b60:	2321      	movs	r3, #33	@ 0x21
 8019b62:	717b      	strb	r3, [r7, #5]
 8019b64:	234c      	movs	r3, #76	@ 0x4c
 8019b66:	71bb      	strb	r3, [r7, #6]
 8019b68:	239d      	movs	r3, #157	@ 0x9d
 8019b6a:	71fb      	strb	r3, [r7, #7]
 8019b6c:	2341      	movs	r3, #65	@ 0x41
 8019b6e:	723b      	strb	r3, [r7, #8]
 8019b70:	2345      	movs	r3, #69	@ 0x45
 8019b72:	727b      	strb	r3, [r7, #9]
 8019b74:	2322      	movs	r3, #34	@ 0x22
 8019b76:	72bb      	strb	r3, [r7, #10]
 8019b78:	238e      	movs	r3, #142	@ 0x8e
 8019b7a:	72fb      	strb	r3, [r7, #11]
 8019b7c:	2341      	movs	r3, #65	@ 0x41
 8019b7e:	733b      	strb	r3, [r7, #12]
 8019b80:	23fe      	movs	r3, #254	@ 0xfe
 8019b82:	737b      	strb	r3, [r7, #13]
 8019b84:	2300      	movs	r3, #0
 8019b86:	73bb      	strb	r3, [r7, #14]
 8019b88:	2300      	movs	r3, #0
 8019b8a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8019b8c:	4b25      	ldr	r3, [pc, #148]	@ (8019c24 <P2PS_STM_Init+0x134>)
 8019b8e:	8818      	ldrh	r0, [r3, #0]
 8019b90:	463a      	mov	r2, r7
 8019b92:	4b25      	ldr	r3, [pc, #148]	@ (8019c28 <P2PS_STM_Init+0x138>)
 8019b94:	9305      	str	r3, [sp, #20]
 8019b96:	2301      	movs	r3, #1
 8019b98:	9304      	str	r3, [sp, #16]
 8019b9a:	230a      	movs	r3, #10
 8019b9c:	9303      	str	r3, [sp, #12]
 8019b9e:	2301      	movs	r3, #1
 8019ba0:	9302      	str	r3, [sp, #8]
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	9301      	str	r3, [sp, #4]
 8019ba6:	2306      	movs	r3, #6
 8019ba8:	9300      	str	r3, [sp, #0]
 8019baa:	2302      	movs	r3, #2
 8019bac:	2102      	movs	r1, #2
 8019bae:	f7fe ffe7 	bl	8018b80 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8019bb2:	2319      	movs	r3, #25
 8019bb4:	703b      	strb	r3, [r7, #0]
 8019bb6:	23ed      	movs	r3, #237	@ 0xed
 8019bb8:	707b      	strb	r3, [r7, #1]
 8019bba:	2382      	movs	r3, #130	@ 0x82
 8019bbc:	70bb      	strb	r3, [r7, #2]
 8019bbe:	23ae      	movs	r3, #174	@ 0xae
 8019bc0:	70fb      	strb	r3, [r7, #3]
 8019bc2:	23ed      	movs	r3, #237	@ 0xed
 8019bc4:	713b      	strb	r3, [r7, #4]
 8019bc6:	2321      	movs	r3, #33	@ 0x21
 8019bc8:	717b      	strb	r3, [r7, #5]
 8019bca:	234c      	movs	r3, #76	@ 0x4c
 8019bcc:	71bb      	strb	r3, [r7, #6]
 8019bce:	239d      	movs	r3, #157	@ 0x9d
 8019bd0:	71fb      	strb	r3, [r7, #7]
 8019bd2:	2341      	movs	r3, #65	@ 0x41
 8019bd4:	723b      	strb	r3, [r7, #8]
 8019bd6:	2345      	movs	r3, #69	@ 0x45
 8019bd8:	727b      	strb	r3, [r7, #9]
 8019bda:	2322      	movs	r3, #34	@ 0x22
 8019bdc:	72bb      	strb	r3, [r7, #10]
 8019bde:	238e      	movs	r3, #142	@ 0x8e
 8019be0:	72fb      	strb	r3, [r7, #11]
 8019be2:	2342      	movs	r3, #66	@ 0x42
 8019be4:	733b      	strb	r3, [r7, #12]
 8019be6:	23fe      	movs	r3, #254	@ 0xfe
 8019be8:	737b      	strb	r3, [r7, #13]
 8019bea:	2300      	movs	r3, #0
 8019bec:	73bb      	strb	r3, [r7, #14]
 8019bee:	2300      	movs	r3, #0
 8019bf0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8019bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8019c24 <P2PS_STM_Init+0x134>)
 8019bf4:	8818      	ldrh	r0, [r3, #0]
 8019bf6:	463a      	mov	r2, r7
 8019bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8019c2c <P2PS_STM_Init+0x13c>)
 8019bfa:	9305      	str	r3, [sp, #20]
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	9304      	str	r3, [sp, #16]
 8019c00:	230a      	movs	r3, #10
 8019c02:	9303      	str	r3, [sp, #12]
 8019c04:	2301      	movs	r3, #1
 8019c06:	9302      	str	r3, [sp, #8]
 8019c08:	2300      	movs	r3, #0
 8019c0a:	9301      	str	r3, [sp, #4]
 8019c0c:	2310      	movs	r3, #16
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	2302      	movs	r3, #2
 8019c12:	2102      	movs	r1, #2
 8019c14:	f7fe ffb4 	bl	8018b80 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8019c18:	bf00      	nop
}
 8019c1a:	3710      	adds	r7, #16
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}
 8019c20:	08019a29 	.word	0x08019a29
 8019c24:	20000778 	.word	0x20000778
 8019c28:	2000077a 	.word	0x2000077a
 8019c2c:	2000077c 	.word	0x2000077c

08019c30 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b086      	sub	sp, #24
 8019c34:	af02      	add	r7, sp, #8
 8019c36:	4603      	mov	r3, r0
 8019c38:	6039      	str	r1, [r7, #0]
 8019c3a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8019c3c:	2392      	movs	r3, #146	@ 0x92
 8019c3e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8019c40:	88fb      	ldrh	r3, [r7, #6]
 8019c42:	f64f 6242 	movw	r2, #65090	@ 0xfe42
 8019c46:	4293      	cmp	r3, r2
 8019c48:	d10c      	bne.n	8019c64 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8019c4a:	4b09      	ldr	r3, [pc, #36]	@ (8019c70 <P2PS_STM_App_Update_Char+0x40>)
 8019c4c:	8818      	ldrh	r0, [r3, #0]
 8019c4e:	4b08      	ldr	r3, [pc, #32]	@ (8019c70 <P2PS_STM_App_Update_Char+0x40>)
 8019c50:	8899      	ldrh	r1, [r3, #4]
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	9300      	str	r3, [sp, #0]
 8019c56:	2302      	movs	r3, #2
 8019c58:	2200      	movs	r2, #0
 8019c5a:	f7ff f899 	bl	8018d90 <aci_gatt_update_char_value>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8019c62:	e000      	b.n	8019c66 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8019c64:	bf00      	nop
  }

  return result;
 8019c66:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8019c68:	4618      	mov	r0, r3
 8019c6a:	3710      	adds	r7, #16
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	20000778 	.word	0x20000778

08019c74 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b088      	sub	sp, #32
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8019c7c:	f107 030c 	add.w	r3, r7, #12
 8019c80:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8019c88:	69fb      	ldr	r3, [r7, #28]
 8019c8a:	212e      	movs	r1, #46	@ 0x2e
 8019c8c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8019c90:	f000 f94c 	bl	8019f2c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8019c94:	69fb      	ldr	r3, [r7, #28]
 8019c96:	330b      	adds	r3, #11
 8019c98:	78db      	ldrb	r3, [r3, #3]
}
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	3720      	adds	r7, #32
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}

08019ca2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8019ca2:	b580      	push	{r7, lr}
 8019ca4:	b088      	sub	sp, #32
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8019caa:	f107 030c 	add.w	r3, r7, #12
 8019cae:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8019cb6:	69fb      	ldr	r3, [r7, #28]
 8019cb8:	210f      	movs	r1, #15
 8019cba:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8019cbe:	f000 f935 	bl	8019f2c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8019cc2:	69fb      	ldr	r3, [r7, #28]
 8019cc4:	330b      	adds	r3, #11
 8019cc6:	78db      	ldrb	r3, [r3, #3]
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3720      	adds	r7, #32
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}

08019cd0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b088      	sub	sp, #32
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8019cd8:	f107 030c 	add.w	r3, r7, #12
 8019cdc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8019cde:	69fb      	ldr	r3, [r7, #28]
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	2110      	movs	r1, #16
 8019ce4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8019ce8:	f000 f920 	bl	8019f2c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8019cec:	69fb      	ldr	r3, [r7, #28]
 8019cee:	330b      	adds	r3, #11
 8019cf0:	78db      	ldrb	r3, [r3, #3]
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3720      	adds	r7, #32
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}
	...

08019cfc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8019cfc:	b480      	push	{r7}
 8019cfe:	b08b      	sub	sp, #44	@ 0x2c
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8019d04:	2300      	movs	r3, #0
 8019d06:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8019d08:	2300      	movs	r3, #0
 8019d0a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8019d10:	2300      	movs	r3, #0
 8019d12:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8019d14:	2300      	movs	r3, #0
 8019d16:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8019d18:	2300      	movs	r3, #0
 8019d1a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8019d20:	2300      	movs	r3, #0
 8019d22:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8019d24:	4b4a      	ldr	r3, [pc, #296]	@ (8019e50 <SHCI_GetWirelessFwInfo+0x154>)
 8019d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019d2c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8019d2e:	693b      	ldr	r3, [r7, #16]
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8019d36:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8019d3e:	68bb      	ldr	r3, [r7, #8]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	4a44      	ldr	r2, [pc, #272]	@ (8019e54 <SHCI_GetWirelessFwInfo+0x158>)
 8019d44:	4293      	cmp	r3, r2
 8019d46:	d10f      	bne.n	8019d68 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	695b      	ldr	r3, [r3, #20]
 8019d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8019d4e:	68bb      	ldr	r3, [r7, #8]
 8019d50:	699b      	ldr	r3, [r3, #24]
 8019d52:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	69db      	ldr	r3, [r3, #28]
 8019d58:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8019d5a:	68bb      	ldr	r3, [r7, #8]
 8019d5c:	68db      	ldr	r3, [r3, #12]
 8019d5e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	691b      	ldr	r3, [r3, #16]
 8019d64:	617b      	str	r3, [r7, #20]
 8019d66:	e01a      	b.n	8019d9e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8019d68:	693b      	ldr	r3, [r7, #16]
 8019d6a:	009b      	lsls	r3, r3, #2
 8019d6c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8019d70:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8019d74:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	691b      	ldr	r3, [r3, #16]
 8019d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	695b      	ldr	r3, [r3, #20]
 8019d84:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	699b      	ldr	r3, [r3, #24]
 8019d8c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	685b      	ldr	r3, [r3, #4]
 8019d94:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	689b      	ldr	r3, [r3, #8]
 8019d9c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8019d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da0:	0e1b      	lsrs	r3, r3, #24
 8019da2:	b2da      	uxtb	r2, r3
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8019da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019daa:	0c1b      	lsrs	r3, r3, #16
 8019dac:	b2da      	uxtb	r2, r3
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8019db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db4:	0a1b      	lsrs	r3, r3, #8
 8019db6:	b2da      	uxtb	r2, r3
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8019dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dbe:	091b      	lsrs	r3, r3, #4
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	f003 030f 	and.w	r3, r3, #15
 8019dc6:	b2da      	uxtb	r2, r3
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8019dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	f003 030f 	and.w	r3, r3, #15
 8019dd4:	b2da      	uxtb	r2, r3
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8019dda:	6a3b      	ldr	r3, [r7, #32]
 8019ddc:	0e1b      	lsrs	r3, r3, #24
 8019dde:	b2da      	uxtb	r2, r3
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8019de4:	6a3b      	ldr	r3, [r7, #32]
 8019de6:	0c1b      	lsrs	r3, r3, #16
 8019de8:	b2da      	uxtb	r2, r3
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8019dee:	6a3b      	ldr	r3, [r7, #32]
 8019df0:	0a1b      	lsrs	r3, r3, #8
 8019df2:	b2da      	uxtb	r2, r3
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8019df8:	6a3b      	ldr	r3, [r7, #32]
 8019dfa:	b2da      	uxtb	r2, r3
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8019e00:	69fb      	ldr	r3, [r7, #28]
 8019e02:	b2da      	uxtb	r2, r3
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8019e08:	69bb      	ldr	r3, [r7, #24]
 8019e0a:	0e1b      	lsrs	r3, r3, #24
 8019e0c:	b2da      	uxtb	r2, r3
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8019e12:	69bb      	ldr	r3, [r7, #24]
 8019e14:	0c1b      	lsrs	r3, r3, #16
 8019e16:	b2da      	uxtb	r2, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8019e1c:	69bb      	ldr	r3, [r7, #24]
 8019e1e:	0a1b      	lsrs	r3, r3, #8
 8019e20:	b2da      	uxtb	r2, r3
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8019e26:	697b      	ldr	r3, [r7, #20]
 8019e28:	0e1b      	lsrs	r3, r3, #24
 8019e2a:	b2da      	uxtb	r2, r3
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8019e30:	697b      	ldr	r3, [r7, #20]
 8019e32:	0c1b      	lsrs	r3, r3, #16
 8019e34:	b2da      	uxtb	r2, r3
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	b2da      	uxtb	r2, r3
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8019e42:	2300      	movs	r3, #0
}
 8019e44:	4618      	mov	r0, r3
 8019e46:	372c      	adds	r7, #44	@ 0x2c
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4e:	4770      	bx	lr
 8019e50:	58004000 	.word	0x58004000
 8019e54:	a94656b9 	.word	0xa94656b9

08019e58 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b082      	sub	sp, #8
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
 8019e60:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8019e62:	683b      	ldr	r3, [r7, #0]
 8019e64:	685b      	ldr	r3, [r3, #4]
 8019e66:	4a08      	ldr	r2, [pc, #32]	@ (8019e88 <shci_init+0x30>)
 8019e68:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8019e6a:	4a08      	ldr	r2, [pc, #32]	@ (8019e8c <shci_init+0x34>)
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8019e70:	4806      	ldr	r0, [pc, #24]	@ (8019e8c <shci_init+0x34>)
 8019e72:	f000 f915 	bl	801a0a0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f000 f898 	bl	8019fb0 <TlInit>

  return;
 8019e80:	bf00      	nop
}
 8019e82:	3708      	adds	r7, #8
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}
 8019e88:	20002c94 	.word	0x20002c94
 8019e8c:	20002c74 	.word	0x20002c74

08019e90 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b084      	sub	sp, #16
 8019e94:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8019e96:	4822      	ldr	r0, [pc, #136]	@ (8019f20 <shci_user_evt_proc+0x90>)
 8019e98:	f000 f926 	bl	801a0e8 <LST_is_empty>
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d12b      	bne.n	8019efa <shci_user_evt_proc+0x6a>
 8019ea2:	4b20      	ldr	r3, [pc, #128]	@ (8019f24 <shci_user_evt_proc+0x94>)
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d027      	beq.n	8019efa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8019eaa:	f107 030c 	add.w	r3, r7, #12
 8019eae:	4619      	mov	r1, r3
 8019eb0:	481b      	ldr	r0, [pc, #108]	@ (8019f20 <shci_user_evt_proc+0x90>)
 8019eb2:	f000 f9a8 	bl	801a206 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8019eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8019f28 <shci_user_evt_proc+0x98>)
 8019eb8:	69db      	ldr	r3, [r3, #28]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d00c      	beq.n	8019ed8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8019ec2:	2301      	movs	r3, #1
 8019ec4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8019ec6:	4b18      	ldr	r3, [pc, #96]	@ (8019f28 <shci_user_evt_proc+0x98>)
 8019ec8:	69db      	ldr	r3, [r3, #28]
 8019eca:	1d3a      	adds	r2, r7, #4
 8019ecc:	4610      	mov	r0, r2
 8019ece:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8019ed0:	793a      	ldrb	r2, [r7, #4]
 8019ed2:	4b14      	ldr	r3, [pc, #80]	@ (8019f24 <shci_user_evt_proc+0x94>)
 8019ed4:	701a      	strb	r2, [r3, #0]
 8019ed6:	e002      	b.n	8019ede <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8019ed8:	4b12      	ldr	r3, [pc, #72]	@ (8019f24 <shci_user_evt_proc+0x94>)
 8019eda:	2201      	movs	r2, #1
 8019edc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8019ede:	4b11      	ldr	r3, [pc, #68]	@ (8019f24 <shci_user_evt_proc+0x94>)
 8019ee0:	781b      	ldrb	r3, [r3, #0]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d004      	beq.n	8019ef0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f001 f841 	bl	801af70 <TL_MM_EvtDone>
 8019eee:	e004      	b.n	8019efa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	4619      	mov	r1, r3
 8019ef4:	480a      	ldr	r0, [pc, #40]	@ (8019f20 <shci_user_evt_proc+0x90>)
 8019ef6:	f000 f919 	bl	801a12c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8019efa:	4809      	ldr	r0, [pc, #36]	@ (8019f20 <shci_user_evt_proc+0x90>)
 8019efc:	f000 f8f4 	bl	801a0e8 <LST_is_empty>
 8019f00:	4603      	mov	r3, r0
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d107      	bne.n	8019f16 <shci_user_evt_proc+0x86>
 8019f06:	4b07      	ldr	r3, [pc, #28]	@ (8019f24 <shci_user_evt_proc+0x94>)
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d003      	beq.n	8019f16 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8019f0e:	4804      	ldr	r0, [pc, #16]	@ (8019f20 <shci_user_evt_proc+0x90>)
 8019f10:	f7e7 fcb3 	bl	800187a <shci_notify_asynch_evt>
  }


  return;
 8019f14:	bf00      	nop
 8019f16:	bf00      	nop
}
 8019f18:	3710      	adds	r7, #16
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	bd80      	pop	{r7, pc}
 8019f1e:	bf00      	nop
 8019f20:	200007a4 	.word	0x200007a4
 8019f24:	200007b4 	.word	0x200007b4
 8019f28:	20002c74 	.word	0x20002c74

08019f2c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b084      	sub	sp, #16
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	60ba      	str	r2, [r7, #8]
 8019f34:	607b      	str	r3, [r7, #4]
 8019f36:	4603      	mov	r3, r0
 8019f38:	81fb      	strh	r3, [r7, #14]
 8019f3a:	460b      	mov	r3, r1
 8019f3c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8019f3e:	2000      	movs	r0, #0
 8019f40:	f000 f868 	bl	801a014 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8019f44:	4b17      	ldr	r3, [pc, #92]	@ (8019fa4 <shci_send+0x78>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	89fa      	ldrh	r2, [r7, #14]
 8019f4a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8019f4e:	4b15      	ldr	r3, [pc, #84]	@ (8019fa4 <shci_send+0x78>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	7b7a      	ldrb	r2, [r7, #13]
 8019f54:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8019f56:	4b13      	ldr	r3, [pc, #76]	@ (8019fa4 <shci_send+0x78>)
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	330c      	adds	r3, #12
 8019f5c:	7b7a      	ldrb	r2, [r7, #13]
 8019f5e:	68b9      	ldr	r1, [r7, #8]
 8019f60:	4618      	mov	r0, r3
 8019f62:	f002 fdc8 	bl	801caf6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8019f66:	4b10      	ldr	r3, [pc, #64]	@ (8019fa8 <shci_send+0x7c>)
 8019f68:	2201      	movs	r2, #1
 8019f6a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8019f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8019fac <shci_send+0x80>)
 8019f6e:	691b      	ldr	r3, [r3, #16]
 8019f70:	2100      	movs	r1, #0
 8019f72:	2000      	movs	r0, #0
 8019f74:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8019f76:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8019f7a:	f7e7 fc95 	bl	80018a8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	f103 0008 	add.w	r0, r3, #8
 8019f84:	4b07      	ldr	r3, [pc, #28]	@ (8019fa4 <shci_send+0x78>)
 8019f86:	6819      	ldr	r1, [r3, #0]
 8019f88:	4b06      	ldr	r3, [pc, #24]	@ (8019fa4 <shci_send+0x78>)
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	789b      	ldrb	r3, [r3, #2]
 8019f8e:	3303      	adds	r3, #3
 8019f90:	461a      	mov	r2, r3
 8019f92:	f002 fdb0 	bl	801caf6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8019f96:	2001      	movs	r0, #1
 8019f98:	f000 f83c 	bl	801a014 <Cmd_SetStatus>

  return;
 8019f9c:	bf00      	nop
}
 8019f9e:	3710      	adds	r7, #16
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	200007b0 	.word	0x200007b0
 8019fa8:	20002c98 	.word	0x20002c98
 8019fac:	20002c74 	.word	0x20002c74

08019fb0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b086      	sub	sp, #24
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8019fb8:	4a10      	ldr	r2, [pc, #64]	@ (8019ffc <TlInit+0x4c>)
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8019fbe:	4810      	ldr	r0, [pc, #64]	@ (801a000 <TlInit+0x50>)
 8019fc0:	f000 f882 	bl	801a0c8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8019fc4:	2001      	movs	r0, #1
 8019fc6:	f000 f825 	bl	801a014 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8019fca:	4b0e      	ldr	r3, [pc, #56]	@ (801a004 <TlInit+0x54>)
 8019fcc:	2201      	movs	r2, #1
 8019fce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8019fd0:	4b0d      	ldr	r3, [pc, #52]	@ (801a008 <TlInit+0x58>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d00c      	beq.n	8019ff2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8019fdc:	4b0b      	ldr	r3, [pc, #44]	@ (801a00c <TlInit+0x5c>)
 8019fde:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8019fe0:	4b0b      	ldr	r3, [pc, #44]	@ (801a010 <TlInit+0x60>)
 8019fe2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8019fe4:	4b08      	ldr	r3, [pc, #32]	@ (801a008 <TlInit+0x58>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	f107 020c 	add.w	r2, r7, #12
 8019fec:	4610      	mov	r0, r2
 8019fee:	4798      	blx	r3
  }

  return;
 8019ff0:	bf00      	nop
 8019ff2:	bf00      	nop
}
 8019ff4:	3718      	adds	r7, #24
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}
 8019ffa:	bf00      	nop
 8019ffc:	200007b0 	.word	0x200007b0
 801a000:	200007a4 	.word	0x200007a4
 801a004:	200007b4 	.word	0x200007b4
 801a008:	20002c74 	.word	0x20002c74
 801a00c:	0801a065 	.word	0x0801a065
 801a010:	0801a07d 	.word	0x0801a07d

0801a014 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 801a014:	b580      	push	{r7, lr}
 801a016:	b082      	sub	sp, #8
 801a018:	af00      	add	r7, sp, #0
 801a01a:	4603      	mov	r3, r0
 801a01c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801a01e:	79fb      	ldrb	r3, [r7, #7]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d10b      	bne.n	801a03c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 801a024:	4b0d      	ldr	r3, [pc, #52]	@ (801a05c <Cmd_SetStatus+0x48>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d003      	beq.n	801a034 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 801a02c:	4b0b      	ldr	r3, [pc, #44]	@ (801a05c <Cmd_SetStatus+0x48>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	2000      	movs	r0, #0
 801a032:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801a034:	4b0a      	ldr	r3, [pc, #40]	@ (801a060 <Cmd_SetStatus+0x4c>)
 801a036:	2200      	movs	r2, #0
 801a038:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801a03a:	e00b      	b.n	801a054 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 801a03c:	4b08      	ldr	r3, [pc, #32]	@ (801a060 <Cmd_SetStatus+0x4c>)
 801a03e:	2201      	movs	r2, #1
 801a040:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801a042:	4b06      	ldr	r3, [pc, #24]	@ (801a05c <Cmd_SetStatus+0x48>)
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d004      	beq.n	801a054 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801a04a:	4b04      	ldr	r3, [pc, #16]	@ (801a05c <Cmd_SetStatus+0x48>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	2001      	movs	r0, #1
 801a050:	4798      	blx	r3
  return;
 801a052:	bf00      	nop
 801a054:	bf00      	nop
}
 801a056:	3708      	adds	r7, #8
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}
 801a05c:	20002c94 	.word	0x20002c94
 801a060:	200007ac 	.word	0x200007ac

0801a064 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b082      	sub	sp, #8
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 801a06c:	2000      	movs	r0, #0
 801a06e:	f7e7 fc10 	bl	8001892 <shci_cmd_resp_release>

  return;
 801a072:	bf00      	nop
}
 801a074:	3708      	adds	r7, #8
 801a076:	46bd      	mov	sp, r7
 801a078:	bd80      	pop	{r7, pc}
	...

0801a07c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801a084:	6879      	ldr	r1, [r7, #4]
 801a086:	4805      	ldr	r0, [pc, #20]	@ (801a09c <TlUserEvtReceived+0x20>)
 801a088:	f000 f876 	bl	801a178 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801a08c:	4803      	ldr	r0, [pc, #12]	@ (801a09c <TlUserEvtReceived+0x20>)
 801a08e:	f7e7 fbf4 	bl	800187a <shci_notify_asynch_evt>

  return;
 801a092:	bf00      	nop
}
 801a094:	3708      	adds	r7, #8
 801a096:	46bd      	mov	sp, r7
 801a098:	bd80      	pop	{r7, pc}
 801a09a:	bf00      	nop
 801a09c:	200007a4 	.word	0x200007a4

0801a0a0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b083      	sub	sp, #12
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	4a05      	ldr	r2, [pc, #20]	@ (801a0c0 <shci_register_io_bus+0x20>)
 801a0ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	4a04      	ldr	r2, [pc, #16]	@ (801a0c4 <shci_register_io_bus+0x24>)
 801a0b2:	611a      	str	r2, [r3, #16]

  return;
 801a0b4:	bf00      	nop
}
 801a0b6:	370c      	adds	r7, #12
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0be:	4770      	bx	lr
 801a0c0:	0801adfd 	.word	0x0801adfd
 801a0c4:	0801ae51 	.word	0x0801ae51

0801a0c8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801a0c8:	b480      	push	{r7}
 801a0ca:	b083      	sub	sp, #12
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	687a      	ldr	r2, [r7, #4]
 801a0d4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	605a      	str	r2, [r3, #4]
}
 801a0dc:	bf00      	nop
 801a0de:	370c      	adds	r7, #12
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e6:	4770      	bx	lr

0801a0e8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 801a0e8:	b480      	push	{r7}
 801a0ea:	b087      	sub	sp, #28
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0f0:	f3ef 8310 	mrs	r3, PRIMASK
 801a0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 801a0f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801a0f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0fa:	b672      	cpsid	i
}
 801a0fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	687a      	ldr	r2, [r7, #4]
 801a104:	429a      	cmp	r2, r3
 801a106:	d102      	bne.n	801a10e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 801a108:	2301      	movs	r3, #1
 801a10a:	75fb      	strb	r3, [r7, #23]
 801a10c:	e001      	b.n	801a112 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801a10e:	2300      	movs	r3, #0
 801a110:	75fb      	strb	r3, [r7, #23]
 801a112:	693b      	ldr	r3, [r7, #16]
 801a114:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	f383 8810 	msr	PRIMASK, r3
}
 801a11c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801a11e:	7dfb      	ldrb	r3, [r7, #23]
}
 801a120:	4618      	mov	r0, r3
 801a122:	371c      	adds	r7, #28
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr

0801a12c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801a12c:	b480      	push	{r7}
 801a12e:	b087      	sub	sp, #28
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
 801a134:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a136:	f3ef 8310 	mrs	r3, PRIMASK
 801a13a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a13c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801a13e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a140:	b672      	cpsid	i
}
 801a142:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681a      	ldr	r2, [r3, #0]
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	687a      	ldr	r2, [r7, #4]
 801a150:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	683a      	ldr	r2, [r7, #0]
 801a156:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	683a      	ldr	r2, [r7, #0]
 801a15e:	605a      	str	r2, [r3, #4]
 801a160:	697b      	ldr	r3, [r7, #20]
 801a162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a164:	693b      	ldr	r3, [r7, #16]
 801a166:	f383 8810 	msr	PRIMASK, r3
}
 801a16a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801a16c:	bf00      	nop
 801a16e:	371c      	adds	r7, #28
 801a170:	46bd      	mov	sp, r7
 801a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a176:	4770      	bx	lr

0801a178 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801a178:	b480      	push	{r7}
 801a17a:	b087      	sub	sp, #28
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a182:	f3ef 8310 	mrs	r3, PRIMASK
 801a186:	60fb      	str	r3, [r7, #12]
  return(result);
 801a188:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801a18a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a18c:	b672      	cpsid	i
}
 801a18e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801a190:	683b      	ldr	r3, [r7, #0]
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	685a      	ldr	r2, [r3, #4]
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	683a      	ldr	r2, [r7, #0]
 801a1a2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801a1a4:	683b      	ldr	r3, [r7, #0]
 801a1a6:	685b      	ldr	r3, [r3, #4]
 801a1a8:	683a      	ldr	r2, [r7, #0]
 801a1aa:	601a      	str	r2, [r3, #0]
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1b0:	693b      	ldr	r3, [r7, #16]
 801a1b2:	f383 8810 	msr	PRIMASK, r3
}
 801a1b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801a1b8:	bf00      	nop
 801a1ba:	371c      	adds	r7, #28
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c2:	4770      	bx	lr

0801a1c4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801a1c4:	b480      	push	{r7}
 801a1c6:	b087      	sub	sp, #28
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1cc:	f3ef 8310 	mrs	r3, PRIMASK
 801a1d0:	60fb      	str	r3, [r7, #12]
  return(result);
 801a1d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801a1d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1d6:	b672      	cpsid	i
}
 801a1d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	687a      	ldr	r2, [r7, #4]
 801a1e0:	6812      	ldr	r2, [r2, #0]
 801a1e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	687a      	ldr	r2, [r7, #4]
 801a1ea:	6852      	ldr	r2, [r2, #4]
 801a1ec:	605a      	str	r2, [r3, #4]
 801a1ee:	697b      	ldr	r3, [r7, #20]
 801a1f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1f2:	693b      	ldr	r3, [r7, #16]
 801a1f4:	f383 8810 	msr	PRIMASK, r3
}
 801a1f8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801a1fa:	bf00      	nop
 801a1fc:	371c      	adds	r7, #28
 801a1fe:	46bd      	mov	sp, r7
 801a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a204:	4770      	bx	lr

0801a206 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801a206:	b580      	push	{r7, lr}
 801a208:	b086      	sub	sp, #24
 801a20a:	af00      	add	r7, sp, #0
 801a20c:	6078      	str	r0, [r7, #4]
 801a20e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a210:	f3ef 8310 	mrs	r3, PRIMASK
 801a214:	60fb      	str	r3, [r7, #12]
  return(result);
 801a216:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801a218:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a21a:	b672      	cpsid	i
}
 801a21c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	4618      	mov	r0, r3
 801a22c:	f7ff ffca 	bl	801a1c4 <LST_remove_node>
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a234:	693b      	ldr	r3, [r7, #16]
 801a236:	f383 8810 	msr	PRIMASK, r3
}
 801a23a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801a23c:	bf00      	nop
 801a23e:	3718      	adds	r7, #24
 801a240:	46bd      	mov	sp, r7
 801a242:	bd80      	pop	{r7, pc}

0801a244 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 801a244:	b480      	push	{r7}
 801a246:	b085      	sub	sp, #20
 801a248:	af00      	add	r7, sp, #0
 801a24a:	60f8      	str	r0, [r7, #12]
 801a24c:	60b9      	str	r1, [r7, #8]
 801a24e:	607a      	str	r2, [r7, #4]
 801a250:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	68ba      	ldr	r2, [r7, #8]
 801a256:	601a      	str	r2, [r3, #0]
  q->first = 0;
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	2200      	movs	r2, #0
 801a25c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	2200      	movs	r2, #0
 801a262:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2200      	movs	r2, #0
 801a268:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	2200      	movs	r2, #0
 801a26e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	887a      	ldrh	r2, [r7, #2]
 801a27a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	7e3a      	ldrb	r2, [r7, #24]
 801a280:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801a282:	7e3b      	ldrb	r3, [r7, #24]
 801a284:	f003 0302 	and.w	r3, r3, #2
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d006      	beq.n	801a29a <CircularQueue_Init+0x56>
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	891b      	ldrh	r3, [r3, #8]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d002      	beq.n	801a29a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 801a294:	f04f 33ff 	mov.w	r3, #4294967295
 801a298:	e000      	b.n	801a29c <CircularQueue_Init+0x58>
  }
  return 0;
 801a29a:	2300      	movs	r3, #0
}
 801a29c:	4618      	mov	r0, r3
 801a29e:	3714      	adds	r7, #20
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a6:	4770      	bx	lr

0801a2a8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b08e      	sub	sp, #56	@ 0x38
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	60f8      	str	r0, [r7, #12]
 801a2b0:	60b9      	str	r1, [r7, #8]
 801a2b2:	603b      	str	r3, [r7, #0]
 801a2b4:	4613      	mov	r3, r2
 801a2b6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 801a2bc:	2300      	movs	r3, #0
 801a2be:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	891b      	ldrh	r3, [r3, #8]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d101      	bne.n	801a2e0 <CircularQueue_Add+0x38>
 801a2dc:	2302      	movs	r3, #2
 801a2de:	e000      	b.n	801a2e2 <CircularQueue_Add+0x3a>
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	695b      	ldr	r3, [r3, #20]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d029      	beq.n	801a340 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	891b      	ldrh	r3, [r3, #8]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d122      	bne.n	801a33a <CircularQueue_Add+0x92>
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	681a      	ldr	r2, [r3, #0]
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	691b      	ldr	r3, [r3, #16]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	781b      	ldrb	r3, [r3, #0]
 801a300:	4618      	mov	r0, r3
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	681a      	ldr	r2, [r3, #0]
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	691b      	ldr	r3, [r3, #16]
 801a30a:	1c59      	adds	r1, r3, #1
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	685b      	ldr	r3, [r3, #4]
 801a310:	4299      	cmp	r1, r3
 801a312:	d306      	bcc.n	801a322 <CircularQueue_Add+0x7a>
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	6919      	ldr	r1, [r3, #16]
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	685b      	ldr	r3, [r3, #4]
 801a31c:	1acb      	subs	r3, r1, r3
 801a31e:	3301      	adds	r3, #1
 801a320:	e002      	b.n	801a328 <CircularQueue_Add+0x80>
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	691b      	ldr	r3, [r3, #16]
 801a326:	3301      	adds	r3, #1
 801a328:	4413      	add	r3, r2
 801a32a:	781b      	ldrb	r3, [r3, #0]
 801a32c:	021b      	lsls	r3, r3, #8
 801a32e:	b29b      	uxth	r3, r3
 801a330:	4403      	add	r3, r0
 801a332:	b29b      	uxth	r3, r3
 801a334:	3302      	adds	r3, #2
 801a336:	b29b      	uxth	r3, r3
 801a338:	e001      	b.n	801a33e <CircularQueue_Add+0x96>
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	891b      	ldrh	r3, [r3, #8]
 801a33e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	891b      	ldrh	r3, [r3, #8]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d002      	beq.n	801a34e <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	891b      	ldrh	r3, [r3, #8]
 801a34c:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	691a      	ldr	r2, [r3, #16]
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	68db      	ldr	r3, [r3, #12]
 801a356:	429a      	cmp	r2, r3
 801a358:	d307      	bcc.n	801a36a <CircularQueue_Add+0xc2>
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	685a      	ldr	r2, [r3, #4]
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	6919      	ldr	r1, [r3, #16]
 801a362:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a364:	440b      	add	r3, r1
 801a366:	1ad3      	subs	r3, r2, r3
 801a368:	e000      	b.n	801a36c <CircularQueue_Add+0xc4>
 801a36a:	2300      	movs	r3, #0
 801a36c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801a36e:	88fa      	ldrh	r2, [r7, #6]
 801a370:	7ffb      	ldrb	r3, [r7, #31]
 801a372:	4413      	add	r3, r2
 801a374:	461a      	mov	r2, r3
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	fb02 f303 	mul.w	r3, r2, r3
 801a37c:	69ba      	ldr	r2, [r7, #24]
 801a37e:	429a      	cmp	r2, r3
 801a380:	d80b      	bhi.n	801a39a <CircularQueue_Add+0xf2>
 801a382:	88fa      	ldrh	r2, [r7, #6]
 801a384:	7ffb      	ldrb	r3, [r7, #31]
 801a386:	4413      	add	r3, r2
 801a388:	461a      	mov	r2, r3
 801a38a:	69bb      	ldr	r3, [r7, #24]
 801a38c:	fbb3 f1f2 	udiv	r1, r3, r2
 801a390:	fb01 f202 	mul.w	r2, r1, r2
 801a394:	1a9b      	subs	r3, r3, r2
 801a396:	b2db      	uxtb	r3, r3
 801a398:	e000      	b.n	801a39c <CircularQueue_Add+0xf4>
 801a39a:	2300      	movs	r3, #0
 801a39c:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 801a39e:	7dfa      	ldrb	r2, [r7, #23]
 801a3a0:	7ffb      	ldrb	r3, [r7, #31]
 801a3a2:	429a      	cmp	r2, r3
 801a3a4:	bf8c      	ite	hi
 801a3a6:	2301      	movhi	r3, #1
 801a3a8:	2300      	movls	r3, #0
 801a3aa:	b2db      	uxtb	r3, r3
 801a3ac:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 801a3ae:	7fbb      	ldrb	r3, [r7, #30]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d008      	beq.n	801a3c6 <CircularQueue_Add+0x11e>
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	7f1b      	ldrb	r3, [r3, #28]
 801a3b8:	f003 0301 	and.w	r3, r3, #1
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d002      	beq.n	801a3c6 <CircularQueue_Add+0x11e>
 801a3c0:	7dfb      	ldrb	r3, [r7, #23]
 801a3c2:	b29b      	uxth	r3, r3
 801a3c4:	e000      	b.n	801a3c8 <CircularQueue_Add+0x120>
 801a3c6:	8bbb      	ldrh	r3, [r7, #28]
 801a3c8:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 801a3ca:	7fbb      	ldrb	r3, [r7, #30]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d008      	beq.n	801a3e2 <CircularQueue_Add+0x13a>
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	7f1b      	ldrb	r3, [r3, #28]
 801a3d4:	f003 0302 	and.w	r3, r3, #2
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d002      	beq.n	801a3e2 <CircularQueue_Add+0x13a>
 801a3dc:	7ffb      	ldrb	r3, [r7, #31]
 801a3de:	b29b      	uxth	r3, r3
 801a3e0:	e000      	b.n	801a3e4 <CircularQueue_Add+0x13c>
 801a3e2:	8bbb      	ldrh	r3, [r7, #28]
 801a3e4:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 801a3e6:	88fb      	ldrh	r3, [r7, #6]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	f000 817e 	beq.w	801a6ea <CircularQueue_Add+0x442>
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	695a      	ldr	r2, [r3, #20]
 801a3f2:	88f9      	ldrh	r1, [r7, #6]
 801a3f4:	7ffb      	ldrb	r3, [r7, #31]
 801a3f6:	440b      	add	r3, r1
 801a3f8:	4619      	mov	r1, r3
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	fb01 f303 	mul.w	r3, r1, r3
 801a400:	441a      	add	r2, r3
 801a402:	8bbb      	ldrh	r3, [r7, #28]
 801a404:	441a      	add	r2, r3
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	685b      	ldr	r3, [r3, #4]
 801a40a:	429a      	cmp	r2, r3
 801a40c:	f200 816d 	bhi.w	801a6ea <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 801a410:	2300      	movs	r3, #0
 801a412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a414:	e14a      	b.n	801a6ac <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	691a      	ldr	r2, [r3, #16]
 801a41a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a41c:	441a      	add	r2, r3
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	685b      	ldr	r3, [r3, #4]
 801a422:	429a      	cmp	r2, r3
 801a424:	d307      	bcc.n	801a436 <CircularQueue_Add+0x18e>
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	691a      	ldr	r2, [r3, #16]
 801a42a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a42c:	441a      	add	r2, r3
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	1ad3      	subs	r3, r2, r3
 801a434:	e003      	b.n	801a43e <CircularQueue_Add+0x196>
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	691a      	ldr	r2, [r3, #16]
 801a43a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a43c:	4413      	add	r3, r2
 801a43e:	68fa      	ldr	r2, [r7, #12]
 801a440:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	691b      	ldr	r3, [r3, #16]
 801a446:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	891b      	ldrh	r3, [r3, #8]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d130      	bne.n	801a4b2 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	681a      	ldr	r2, [r3, #0]
 801a454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a456:	1c59      	adds	r1, r3, #1
 801a458:	6339      	str	r1, [r7, #48]	@ 0x30
 801a45a:	4413      	add	r3, r2
 801a45c:	88fa      	ldrh	r2, [r7, #6]
 801a45e:	b2d2      	uxtb	r2, r2
 801a460:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a468:	429a      	cmp	r2, r3
 801a46a:	d304      	bcc.n	801a476 <CircularQueue_Add+0x1ce>
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a472:	1ad3      	subs	r3, r2, r3
 801a474:	e000      	b.n	801a478 <CircularQueue_Add+0x1d0>
 801a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a478:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801a47a:	88fb      	ldrh	r3, [r7, #6]
 801a47c:	0a1b      	lsrs	r3, r3, #8
 801a47e:	b298      	uxth	r0, r3
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a486:	1c59      	adds	r1, r3, #1
 801a488:	6339      	str	r1, [r7, #48]	@ 0x30
 801a48a:	4413      	add	r3, r2
 801a48c:	b2c2      	uxtb	r2, r0
 801a48e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	685b      	ldr	r3, [r3, #4]
 801a494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a496:	429a      	cmp	r2, r3
 801a498:	d304      	bcc.n	801a4a4 <CircularQueue_Add+0x1fc>
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	685b      	ldr	r3, [r3, #4]
 801a49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a4a0:	1ad3      	subs	r3, r2, r3
 801a4a2:	e000      	b.n	801a4a6 <CircularQueue_Add+0x1fe>
 801a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4a6:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	695b      	ldr	r3, [r3, #20]
 801a4ac:	1c9a      	adds	r2, r3, #2
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 801a4b2:	88fa      	ldrh	r2, [r7, #6]
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	6859      	ldr	r1, [r3, #4]
 801a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4ba:	1acb      	subs	r3, r1, r3
 801a4bc:	4293      	cmp	r3, r2
 801a4be:	bf28      	it	cs
 801a4c0:	4613      	movcs	r3, r2
 801a4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 801a4c4:	88fb      	ldrh	r3, [r7, #6]
 801a4c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a4c8:	429a      	cmp	r2, r3
 801a4ca:	d007      	beq.n	801a4dc <CircularQueue_Add+0x234>
 801a4cc:	88fb      	ldrh	r3, [r7, #6]
 801a4ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a4d0:	429a      	cmp	r2, r3
 801a4d2:	d225      	bcs.n	801a520 <CircularQueue_Add+0x278>
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	7f1b      	ldrb	r3, [r3, #28]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d121      	bne.n	801a520 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801a4dc:	68fb      	ldr	r3, [r7, #12]
 801a4de:	681a      	ldr	r2, [r3, #0]
 801a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4e2:	18d0      	adds	r0, r2, r3
 801a4e4:	88fb      	ldrh	r3, [r7, #6]
 801a4e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4e8:	fb02 f303 	mul.w	r3, r2, r3
 801a4ec:	68ba      	ldr	r2, [r7, #8]
 801a4ee:	4413      	add	r3, r2
 801a4f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a4f2:	4619      	mov	r1, r3
 801a4f4:	f002 faff 	bl	801caf6 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	695a      	ldr	r2, [r3, #20]
 801a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4fe:	441a      	add	r2, r3
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 801a504:	2300      	movs	r3, #0
 801a506:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 801a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a50a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 801a50c:	88fa      	ldrh	r2, [r7, #6]
 801a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a510:	1ad3      	subs	r3, r2, r3
 801a512:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 801a514:	7ffb      	ldrb	r3, [r7, #31]
 801a516:	b29a      	uxth	r2, r3
 801a518:	88fb      	ldrh	r3, [r7, #6]
 801a51a:	4413      	add	r3, r2
 801a51c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801a51e:	e0a4      	b.n	801a66a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 801a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a522:	2b00      	cmp	r3, #0
 801a524:	f000 80a1 	beq.w	801a66a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	7f1b      	ldrb	r3, [r3, #28]
 801a52c:	f003 0301 	and.w	r3, r3, #1
 801a530:	2b00      	cmp	r3, #0
 801a532:	d03a      	beq.n	801a5aa <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	891b      	ldrh	r3, [r3, #8]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d10d      	bne.n	801a558 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	681a      	ldr	r2, [r3, #0]
 801a540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a542:	3b02      	subs	r3, #2
 801a544:	4413      	add	r3, r2
 801a546:	22ff      	movs	r2, #255	@ 0xff
 801a548:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	681a      	ldr	r2, [r3, #0]
 801a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a550:	3b01      	subs	r3, #1
 801a552:	4413      	add	r3, r2
 801a554:	22ff      	movs	r2, #255	@ 0xff
 801a556:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	695a      	ldr	r2, [r3, #20]
 801a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a55e:	441a      	add	r2, r3
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801a564:	2300      	movs	r3, #0
 801a566:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 801a568:	88fb      	ldrh	r3, [r7, #6]
 801a56a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 801a56c:	2300      	movs	r3, #0
 801a56e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	891b      	ldrh	r3, [r3, #8]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d16f      	bne.n	801a658 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681a      	ldr	r2, [r3, #0]
 801a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a57e:	1c59      	adds	r1, r3, #1
 801a580:	6339      	str	r1, [r7, #48]	@ 0x30
 801a582:	4413      	add	r3, r2
 801a584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a586:	b2d2      	uxtb	r2, r2
 801a588:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a58c:	0a18      	lsrs	r0, r3, #8
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	681a      	ldr	r2, [r3, #0]
 801a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a594:	1c59      	adds	r1, r3, #1
 801a596:	6339      	str	r1, [r7, #48]	@ 0x30
 801a598:	4413      	add	r3, r2
 801a59a:	b2c2      	uxtb	r2, r0
 801a59c:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	695b      	ldr	r3, [r3, #20]
 801a5a2:	1c9a      	adds	r2, r3, #2
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	615a      	str	r2, [r3, #20]
 801a5a8:	e056      	b.n	801a658 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	7f1b      	ldrb	r3, [r3, #28]
 801a5ae:	f003 0302 	and.w	r3, r3, #2
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d050      	beq.n	801a658 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	891b      	ldrh	r3, [r3, #8]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d14a      	bne.n	801a654 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	681a      	ldr	r2, [r3, #0]
 801a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5c4:	3b02      	subs	r3, #2
 801a5c6:	4413      	add	r3, r2
 801a5c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a5ca:	b2d2      	uxtb	r2, r2
 801a5cc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801a5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5d0:	0a19      	lsrs	r1, r3, #8
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	681a      	ldr	r2, [r3, #0]
 801a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5d8:	3b01      	subs	r3, #1
 801a5da:	4413      	add	r3, r2
 801a5dc:	b2ca      	uxtb	r2, r1
 801a5de:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	681a      	ldr	r2, [r3, #0]
 801a5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5e6:	18d0      	adds	r0, r2, r3
 801a5e8:	88fb      	ldrh	r3, [r7, #6]
 801a5ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a5ec:	fb02 f303 	mul.w	r3, r2, r3
 801a5f0:	68ba      	ldr	r2, [r7, #8]
 801a5f2:	4413      	add	r3, r2
 801a5f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a5f6:	4619      	mov	r1, r3
 801a5f8:	f002 fa7d 	bl	801caf6 <memcpy>
             q->byteCount += NbBytesToCopy; 
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	695a      	ldr	r2, [r3, #20]
 801a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a602:	441a      	add	r2, r3
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 801a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a60a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 801a60c:	88fa      	ldrh	r2, [r7, #6]
 801a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a610:	1ad3      	subs	r3, r2, r3
 801a612:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	699b      	ldr	r3, [r3, #24]
 801a618:	1c5a      	adds	r2, r3, #1
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 801a61e:	2300      	movs	r3, #0
 801a620:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	681a      	ldr	r2, [r3, #0]
 801a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a628:	1c59      	adds	r1, r3, #1
 801a62a:	6339      	str	r1, [r7, #48]	@ 0x30
 801a62c:	4413      	add	r3, r2
 801a62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a630:	b2d2      	uxtb	r2, r2
 801a632:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a636:	0a18      	lsrs	r0, r3, #8
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	681a      	ldr	r2, [r3, #0]
 801a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a63e:	1c59      	adds	r1, r3, #1
 801a640:	6339      	str	r1, [r7, #48]	@ 0x30
 801a642:	4413      	add	r3, r2
 801a644:	b2c2      	uxtb	r2, r0
 801a646:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	695b      	ldr	r3, [r3, #20]
 801a64c:	1c9a      	adds	r2, r3, #2
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	615a      	str	r2, [r3, #20]
 801a652:	e001      	b.n	801a658 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801a654:	2300      	movs	r3, #0
 801a656:	e049      	b.n	801a6ec <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 801a658:	7ffb      	ldrb	r3, [r7, #31]
 801a65a:	b29a      	uxth	r2, r3
 801a65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a65e:	b29b      	uxth	r3, r3
 801a660:	4413      	add	r3, r2
 801a662:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	2200      	movs	r2, #0
 801a668:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 801a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d015      	beq.n	801a69c <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	681a      	ldr	r2, [r3, #0]
 801a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a676:	18d0      	adds	r0, r2, r3
 801a678:	88fb      	ldrh	r3, [r7, #6]
 801a67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a67c:	fb03 f202 	mul.w	r2, r3, r2
 801a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a682:	4413      	add	r3, r2
 801a684:	68ba      	ldr	r2, [r7, #8]
 801a686:	4413      	add	r3, r2
 801a688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a68a:	4619      	mov	r1, r3
 801a68c:	f002 fa33 	bl	801caf6 <memcpy>
        q->byteCount += NbBytesToCopy;
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	695a      	ldr	r2, [r3, #20]
 801a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a696:	441a      	add	r2, r3
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	699b      	ldr	r3, [r3, #24]
 801a6a0:	1c5a      	adds	r2, r3, #1
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801a6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a6ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a6ae:	683b      	ldr	r3, [r7, #0]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	f4ff aeb0 	bcc.w	801a416 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	681a      	ldr	r2, [r3, #0]
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	6919      	ldr	r1, [r3, #16]
 801a6be:	7ffb      	ldrb	r3, [r7, #31]
 801a6c0:	4419      	add	r1, r3
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	4299      	cmp	r1, r3
 801a6c8:	d307      	bcc.n	801a6da <CircularQueue_Add+0x432>
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	6919      	ldr	r1, [r3, #16]
 801a6ce:	7ffb      	ldrb	r3, [r7, #31]
 801a6d0:	4419      	add	r1, r3
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	685b      	ldr	r3, [r3, #4]
 801a6d6:	1acb      	subs	r3, r1, r3
 801a6d8:	e003      	b.n	801a6e2 <CircularQueue_Add+0x43a>
 801a6da:	68fb      	ldr	r3, [r7, #12]
 801a6dc:	6919      	ldr	r1, [r3, #16]
 801a6de:	7ffb      	ldrb	r3, [r7, #31]
 801a6e0:	440b      	add	r3, r1
 801a6e2:	4413      	add	r3, r2
 801a6e4:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 801a6e6:	6a3b      	ldr	r3, [r7, #32]
 801a6e8:	e000      	b.n	801a6ec <CircularQueue_Add+0x444>
    return NULL;
 801a6ea:	2300      	movs	r3, #0
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3738      	adds	r7, #56	@ 0x38
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 801a6f4:	b480      	push	{r7}
 801a6f6:	b085      	sub	sp, #20
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
 801a6fc:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 801a6fe:	2300      	movs	r3, #0
 801a700:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 801a702:	2300      	movs	r3, #0
 801a704:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	891b      	ldrh	r3, [r3, #8]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d101      	bne.n	801a712 <CircularQueue_Remove+0x1e>
 801a70e:	2302      	movs	r3, #2
 801a710:	e000      	b.n	801a714 <CircularQueue_Remove+0x20>
 801a712:	2300      	movs	r3, #0
 801a714:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 801a716:	2300      	movs	r3, #0
 801a718:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	695b      	ldr	r3, [r3, #20]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	f000 80ca 	beq.w	801a8b8 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	891b      	ldrh	r3, [r3, #8]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d120      	bne.n	801a76e <CircularQueue_Remove+0x7a>
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	681a      	ldr	r2, [r3, #0]
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	68db      	ldr	r3, [r3, #12]
 801a734:	4413      	add	r3, r2
 801a736:	781b      	ldrb	r3, [r3, #0]
 801a738:	4618      	mov	r0, r3
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	681a      	ldr	r2, [r3, #0]
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	68db      	ldr	r3, [r3, #12]
 801a742:	1c59      	adds	r1, r3, #1
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	685b      	ldr	r3, [r3, #4]
 801a748:	4299      	cmp	r1, r3
 801a74a:	d306      	bcc.n	801a75a <CircularQueue_Remove+0x66>
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	68d9      	ldr	r1, [r3, #12]
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	685b      	ldr	r3, [r3, #4]
 801a754:	1acb      	subs	r3, r1, r3
 801a756:	3301      	adds	r3, #1
 801a758:	e002      	b.n	801a760 <CircularQueue_Remove+0x6c>
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	68db      	ldr	r3, [r3, #12]
 801a75e:	3301      	adds	r3, #1
 801a760:	4413      	add	r3, r2
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	021b      	lsls	r3, r3, #8
 801a766:	b29b      	uxth	r3, r3
 801a768:	4403      	add	r3, r0
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	e001      	b.n	801a772 <CircularQueue_Remove+0x7e>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	891b      	ldrh	r3, [r3, #8]
 801a772:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	7f1b      	ldrb	r3, [r3, #28]
 801a778:	f003 0301 	and.w	r3, r3, #1
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d056      	beq.n	801a82e <CircularQueue_Remove+0x13a>
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	7f1b      	ldrb	r3, [r3, #28]
 801a784:	f003 0302 	and.w	r3, r3, #2
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d150      	bne.n	801a82e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801a78c:	897b      	ldrh	r3, [r7, #10]
 801a78e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a792:	4293      	cmp	r3, r2
 801a794:	d103      	bne.n	801a79e <CircularQueue_Remove+0xaa>
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	891b      	ldrh	r3, [r3, #8]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d012      	beq.n	801a7c4 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	68da      	ldr	r2, [r3, #12]
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801a7a6:	429a      	cmp	r2, r3
 801a7a8:	d941      	bls.n	801a82e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	891b      	ldrh	r3, [r3, #8]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d03d      	beq.n	801a82e <CircularQueue_Remove+0x13a>
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	685a      	ldr	r2, [r3, #4]
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	68db      	ldr	r3, [r3, #12]
 801a7ba:	1ad3      	subs	r3, r2, r3
 801a7bc:	687a      	ldr	r2, [r7, #4]
 801a7be:	8912      	ldrh	r2, [r2, #8]
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d234      	bcs.n	801a82e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	695a      	ldr	r2, [r3, #20]
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	68d9      	ldr	r1, [r3, #12]
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	685b      	ldr	r3, [r3, #4]
 801a7d0:	1acb      	subs	r3, r1, r3
 801a7d2:	441a      	add	r2, r3
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2200      	movs	r2, #0
 801a7dc:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	891b      	ldrh	r3, [r3, #8]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d120      	bne.n	801a828 <CircularQueue_Remove+0x134>
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	681a      	ldr	r2, [r3, #0]
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	68db      	ldr	r3, [r3, #12]
 801a7ee:	4413      	add	r3, r2
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681a      	ldr	r2, [r3, #0]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	68db      	ldr	r3, [r3, #12]
 801a7fc:	1c59      	adds	r1, r3, #1
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	685b      	ldr	r3, [r3, #4]
 801a802:	4299      	cmp	r1, r3
 801a804:	d306      	bcc.n	801a814 <CircularQueue_Remove+0x120>
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	68d9      	ldr	r1, [r3, #12]
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	685b      	ldr	r3, [r3, #4]
 801a80e:	1acb      	subs	r3, r1, r3
 801a810:	3301      	adds	r3, #1
 801a812:	e002      	b.n	801a81a <CircularQueue_Remove+0x126>
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	68db      	ldr	r3, [r3, #12]
 801a818:	3301      	adds	r3, #1
 801a81a:	4413      	add	r3, r2
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	021b      	lsls	r3, r3, #8
 801a820:	b29b      	uxth	r3, r3
 801a822:	4403      	add	r3, r0
 801a824:	b29b      	uxth	r3, r3
 801a826:	e001      	b.n	801a82c <CircularQueue_Remove+0x138>
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	891b      	ldrh	r3, [r3, #8]
 801a82c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	681a      	ldr	r2, [r3, #0]
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	68d9      	ldr	r1, [r3, #12]
 801a836:	7a7b      	ldrb	r3, [r7, #9]
 801a838:	4419      	add	r1, r3
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	685b      	ldr	r3, [r3, #4]
 801a83e:	4299      	cmp	r1, r3
 801a840:	d307      	bcc.n	801a852 <CircularQueue_Remove+0x15e>
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	68d9      	ldr	r1, [r3, #12]
 801a846:	7a7b      	ldrb	r3, [r7, #9]
 801a848:	4419      	add	r1, r3
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	685b      	ldr	r3, [r3, #4]
 801a84e:	1acb      	subs	r3, r1, r3
 801a850:	e003      	b.n	801a85a <CircularQueue_Remove+0x166>
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	68d9      	ldr	r1, [r3, #12]
 801a856:	7a7b      	ldrb	r3, [r7, #9]
 801a858:	440b      	add	r3, r1
 801a85a:	4413      	add	r3, r2
 801a85c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	695b      	ldr	r3, [r3, #20]
 801a862:	8979      	ldrh	r1, [r7, #10]
 801a864:	7a7a      	ldrb	r2, [r7, #9]
 801a866:	440a      	add	r2, r1
 801a868:	1a9a      	subs	r2, r3, r2
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	695b      	ldr	r3, [r3, #20]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d01b      	beq.n	801a8ae <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	68da      	ldr	r2, [r3, #12]
 801a87a:	897b      	ldrh	r3, [r7, #10]
 801a87c:	441a      	add	r2, r3
 801a87e:	7a7b      	ldrb	r3, [r7, #9]
 801a880:	441a      	add	r2, r3
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	685b      	ldr	r3, [r3, #4]
 801a886:	429a      	cmp	r2, r3
 801a888:	d309      	bcc.n	801a89e <CircularQueue_Remove+0x1aa>
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	68da      	ldr	r2, [r3, #12]
 801a88e:	897b      	ldrh	r3, [r7, #10]
 801a890:	441a      	add	r2, r3
 801a892:	7a7b      	ldrb	r3, [r7, #9]
 801a894:	441a      	add	r2, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	685b      	ldr	r3, [r3, #4]
 801a89a:	1ad3      	subs	r3, r2, r3
 801a89c:	e005      	b.n	801a8aa <CircularQueue_Remove+0x1b6>
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	68da      	ldr	r2, [r3, #12]
 801a8a2:	897b      	ldrh	r3, [r7, #10]
 801a8a4:	441a      	add	r2, r3
 801a8a6:	7a7b      	ldrb	r3, [r7, #9]
 801a8a8:	4413      	add	r3, r2
 801a8aa:	687a      	ldr	r2, [r7, #4]
 801a8ac:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	699b      	ldr	r3, [r3, #24]
 801a8b2:	1e5a      	subs	r2, r3, #1
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d002      	beq.n	801a8c4 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	897a      	ldrh	r2, [r7, #10]
 801a8c2:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801a8c4:	68fb      	ldr	r3, [r7, #12]
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3714      	adds	r7, #20
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d0:	4770      	bx	lr

0801a8d2 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801a8d2:	b480      	push	{r7}
 801a8d4:	b087      	sub	sp, #28
 801a8d6:	af00      	add	r7, sp, #0
 801a8d8:	6078      	str	r0, [r7, #4]
 801a8da:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 801a8dc:	2300      	movs	r3, #0
 801a8de:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	891b      	ldrh	r3, [r3, #8]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d101      	bne.n	801a8f0 <CircularQueue_Sense+0x1e>
 801a8ec:	2302      	movs	r3, #2
 801a8ee:	e000      	b.n	801a8f2 <CircularQueue_Sense+0x20>
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	695b      	ldr	r3, [r3, #20]
 801a900:	2b00      	cmp	r3, #0
 801a902:	f000 808e 	beq.w	801aa22 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	68db      	ldr	r3, [r3, #12]
 801a90a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	891b      	ldrh	r3, [r3, #8]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d120      	bne.n	801a956 <CircularQueue_Sense+0x84>
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	681a      	ldr	r2, [r3, #0]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	68db      	ldr	r3, [r3, #12]
 801a91c:	4413      	add	r3, r2
 801a91e:	781b      	ldrb	r3, [r3, #0]
 801a920:	4618      	mov	r0, r3
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681a      	ldr	r2, [r3, #0]
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	68db      	ldr	r3, [r3, #12]
 801a92a:	1c59      	adds	r1, r3, #1
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	685b      	ldr	r3, [r3, #4]
 801a930:	4299      	cmp	r1, r3
 801a932:	d306      	bcc.n	801a942 <CircularQueue_Sense+0x70>
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	68d9      	ldr	r1, [r3, #12]
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	1acb      	subs	r3, r1, r3
 801a93e:	3301      	adds	r3, #1
 801a940:	e002      	b.n	801a948 <CircularQueue_Sense+0x76>
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	68db      	ldr	r3, [r3, #12]
 801a946:	3301      	adds	r3, #1
 801a948:	4413      	add	r3, r2
 801a94a:	781b      	ldrb	r3, [r3, #0]
 801a94c:	021b      	lsls	r3, r3, #8
 801a94e:	b29b      	uxth	r3, r3
 801a950:	4403      	add	r3, r0
 801a952:	b29b      	uxth	r3, r3
 801a954:	e001      	b.n	801a95a <CircularQueue_Sense+0x88>
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	891b      	ldrh	r3, [r3, #8]
 801a95a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	7f1b      	ldrb	r3, [r3, #28]
 801a960:	f003 0301 	and.w	r3, r3, #1
 801a964:	2b00      	cmp	r3, #0
 801a966:	d047      	beq.n	801a9f8 <CircularQueue_Sense+0x126>
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	7f1b      	ldrb	r3, [r3, #28]
 801a96c:	f003 0302 	and.w	r3, r3, #2
 801a970:	2b00      	cmp	r3, #0
 801a972:	d141      	bne.n	801a9f8 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801a974:	8a7b      	ldrh	r3, [r7, #18]
 801a976:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a97a:	4293      	cmp	r3, r2
 801a97c:	d103      	bne.n	801a986 <CircularQueue_Sense+0xb4>
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	891b      	ldrh	r3, [r3, #8]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d012      	beq.n	801a9ac <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	68da      	ldr	r2, [r3, #12]
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801a98e:	429a      	cmp	r2, r3
 801a990:	d932      	bls.n	801a9f8 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	891b      	ldrh	r3, [r3, #8]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d02e      	beq.n	801a9f8 <CircularQueue_Sense+0x126>
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	685a      	ldr	r2, [r3, #4]
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	68db      	ldr	r3, [r3, #12]
 801a9a2:	1ad3      	subs	r3, r2, r3
 801a9a4:	687a      	ldr	r2, [r7, #4]
 801a9a6:	8912      	ldrh	r2, [r2, #8]
 801a9a8:	4293      	cmp	r3, r2
 801a9aa:	d225      	bcs.n	801a9f8 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	891b      	ldrh	r3, [r3, #8]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d11c      	bne.n	801a9f2 <CircularQueue_Sense+0x120>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681a      	ldr	r2, [r3, #0]
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	4413      	add	r3, r2
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	681a      	ldr	r2, [r3, #0]
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	1c59      	adds	r1, r3, #1
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	4299      	cmp	r1, r3
 801a9d2:	d305      	bcc.n	801a9e0 <CircularQueue_Sense+0x10e>
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	685b      	ldr	r3, [r3, #4]
 801a9d8:	68f9      	ldr	r1, [r7, #12]
 801a9da:	1acb      	subs	r3, r1, r3
 801a9dc:	3301      	adds	r3, #1
 801a9de:	e001      	b.n	801a9e4 <CircularQueue_Sense+0x112>
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	3301      	adds	r3, #1
 801a9e4:	4413      	add	r3, r2
 801a9e6:	781b      	ldrb	r3, [r3, #0]
 801a9e8:	021b      	lsls	r3, r3, #8
 801a9ea:	b29b      	uxth	r3, r3
 801a9ec:	4403      	add	r3, r0
 801a9ee:	b29b      	uxth	r3, r3
 801a9f0:	e001      	b.n	801a9f6 <CircularQueue_Sense+0x124>
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	891b      	ldrh	r3, [r3, #8]
 801a9f6:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681a      	ldr	r2, [r3, #0]
 801a9fc:	7af9      	ldrb	r1, [r7, #11]
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	4419      	add	r1, r3
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	685b      	ldr	r3, [r3, #4]
 801aa06:	4299      	cmp	r1, r3
 801aa08:	d306      	bcc.n	801aa18 <CircularQueue_Sense+0x146>
 801aa0a:	7af9      	ldrb	r1, [r7, #11]
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	4419      	add	r1, r3
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	685b      	ldr	r3, [r3, #4]
 801aa14:	1acb      	subs	r3, r1, r3
 801aa16:	e002      	b.n	801aa1e <CircularQueue_Sense+0x14c>
 801aa18:	7af9      	ldrb	r1, [r7, #11]
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	440b      	add	r3, r1
 801aa1e:	4413      	add	r3, r2
 801aa20:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d002      	beq.n	801aa2e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 801aa28:	683b      	ldr	r3, [r7, #0]
 801aa2a:	8a7a      	ldrh	r2, [r7, #18]
 801aa2c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 801aa2e:	697b      	ldr	r3, [r7, #20]
}
 801aa30:	4618      	mov	r0, r3
 801aa32:	371c      	adds	r7, #28
 801aa34:	46bd      	mov	sp, r7
 801aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3a:	4770      	bx	lr

0801aa3c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 801aa3c:	b480      	push	{r7}
 801aa3e:	af00      	add	r7, sp, #0
  return;
 801aa40:	bf00      	nop
}
 801aa42:	46bd      	mov	sp, r7
 801aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa48:	4770      	bx	lr

0801aa4a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 801aa4a:	b480      	push	{r7}
 801aa4c:	af00      	add	r7, sp, #0
  return;
 801aa4e:	bf00      	nop
}
 801aa50:	46bd      	mov	sp, r7
 801aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa56:	4770      	bx	lr

0801aa58 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801aa58:	b480      	push	{r7}
 801aa5a:	af00      	add	r7, sp, #0
  return;
 801aa5c:	bf00      	nop
}
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa64:	4770      	bx	lr

0801aa66 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 801aa66:	b480      	push	{r7}
 801aa68:	af00      	add	r7, sp, #0
  return;
 801aa6a:	bf00      	nop
}
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa72:	4770      	bx	lr

0801aa74 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801aa74:	b480      	push	{r7}
 801aa76:	af00      	add	r7, sp, #0
  return;
 801aa78:	bf00      	nop
}
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa80:	4770      	bx	lr

0801aa82 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 801aa82:	b480      	push	{r7}
 801aa84:	af00      	add	r7, sp, #0
  return;
 801aa86:	bf00      	nop
}
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa8e:	4770      	bx	lr

0801aa90 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 801aa90:	b480      	push	{r7}
 801aa92:	af00      	add	r7, sp, #0
  return;
 801aa94:	bf00      	nop
}
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr

0801aa9e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 801aa9e:	b480      	push	{r7}
 801aaa0:	af00      	add	r7, sp, #0
  return;
 801aaa2:	bf00      	nop
}
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaaa:	4770      	bx	lr

0801aaac <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801aaac:	b480      	push	{r7}
 801aaae:	af00      	add	r7, sp, #0
  return;
 801aab0:	bf00      	nop
}
 801aab2:	46bd      	mov	sp, r7
 801aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab8:	4770      	bx	lr

0801aaba <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801aaba:	b480      	push	{r7}
 801aabc:	af00      	add	r7, sp, #0
  return;
 801aabe:	bf00      	nop
}
 801aac0:	46bd      	mov	sp, r7
 801aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac6:	4770      	bx	lr

0801aac8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 801aac8:	b480      	push	{r7}
 801aaca:	af00      	add	r7, sp, #0
  return;
 801aacc:	bf00      	nop
}
 801aace:	46bd      	mov	sp, r7
 801aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad4:	4770      	bx	lr

0801aad6 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 801aad6:	b480      	push	{r7}
 801aad8:	af00      	add	r7, sp, #0
  return;
 801aada:	bf00      	nop
}
 801aadc:	46bd      	mov	sp, r7
 801aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae2:	4770      	bx	lr

0801aae4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 801aae4:	b480      	push	{r7}
 801aae6:	af00      	add	r7, sp, #0
  return;
 801aae8:	bf00      	nop
}
 801aaea:	46bd      	mov	sp, r7
 801aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf0:	4770      	bx	lr

0801aaf2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 801aaf2:	b480      	push	{r7}
 801aaf4:	af00      	add	r7, sp, #0
  return;
 801aaf6:	bf00      	nop
}
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafe:	4770      	bx	lr

0801ab00 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 801ab00:	b480      	push	{r7}
 801ab02:	af00      	add	r7, sp, #0
  return;
 801ab04:	bf00      	nop
}
 801ab06:	46bd      	mov	sp, r7
 801ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0c:	4770      	bx	lr

0801ab0e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 801ab0e:	b480      	push	{r7}
 801ab10:	af00      	add	r7, sp, #0
  return;
 801ab12:	bf00      	nop
}
 801ab14:	46bd      	mov	sp, r7
 801ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1a:	4770      	bx	lr

0801ab1c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 801ab20:	4b04      	ldr	r3, [pc, #16]	@ (801ab34 <SVCCTL_Init+0x18>)
 801ab22:	2200      	movs	r2, #0
 801ab24:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801ab26:	4b04      	ldr	r3, [pc, #16]	@ (801ab38 <SVCCTL_Init+0x1c>)
 801ab28:	2200      	movs	r2, #0
 801ab2a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 801ab2c:	f000 f806 	bl	801ab3c <SVCCTL_SvcInit>

  return;
 801ab30:	bf00      	nop
}
 801ab32:	bd80      	pop	{r7, pc}
 801ab34:	20000780 	.word	0x20000780
 801ab38:	200007a0 	.word	0x200007a0

0801ab3c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	af00      	add	r7, sp, #0
  BAS_Init();
 801ab40:	f7ff ff7c 	bl	801aa3c <BAS_Init>

  BLS_Init();
 801ab44:	f7ff ff81 	bl	801aa4a <BLS_Init>

  CRS_STM_Init();
 801ab48:	f7ff ff86 	bl	801aa58 <CRS_STM_Init>

  DIS_Init();
 801ab4c:	f7ff ff8b 	bl	801aa66 <DIS_Init>

  EDS_STM_Init();
 801ab50:	f7ff ff90 	bl	801aa74 <EDS_STM_Init>

  HIDS_Init();
 801ab54:	f7ff ff95 	bl	801aa82 <HIDS_Init>

  HRS_Init();
 801ab58:	f7ff ff9a 	bl	801aa90 <HRS_Init>

  HTS_Init();
 801ab5c:	f7ff ff9f 	bl	801aa9e <HTS_Init>

  IAS_Init();
 801ab60:	f7ff ffa4 	bl	801aaac <IAS_Init>

  LLS_Init();
 801ab64:	f7ff ffa9 	bl	801aaba <LLS_Init>

  TPS_Init();
 801ab68:	f7ff ffae 	bl	801aac8 <TPS_Init>

  MOTENV_STM_Init();
 801ab6c:	f7ef fa30 	bl	8009fd0 <MOTENV_STM_Init>

  P2PS_STM_Init();
 801ab70:	f7fe ffbe 	bl	8019af0 <P2PS_STM_Init>

  ZDD_STM_Init();
 801ab74:	f7ff ffaf 	bl	801aad6 <ZDD_STM_Init>

  OTAS_STM_Init();
 801ab78:	f7ff ffb4 	bl	801aae4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 801ab7c:	f7ff ffc0 	bl	801ab00 <BVOPUS_STM_Init>

  MESH_Init();
 801ab80:	f7ff ffb7 	bl	801aaf2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 801ab84:	f7ff ffc3 	bl	801ab0e <SVCCTL_InitCustomSvc>
  
  return;
 801ab88:	bf00      	nop
}
 801ab8a:	bd80      	pop	{r7, pc}

0801ab8c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b083      	sub	sp, #12
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 801ab94:	4b09      	ldr	r3, [pc, #36]	@ (801abbc <SVCCTL_RegisterSvcHandler+0x30>)
 801ab96:	7f1b      	ldrb	r3, [r3, #28]
 801ab98:	4619      	mov	r1, r3
 801ab9a:	4a08      	ldr	r2, [pc, #32]	@ (801abbc <SVCCTL_RegisterSvcHandler+0x30>)
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801aba2:	4b06      	ldr	r3, [pc, #24]	@ (801abbc <SVCCTL_RegisterSvcHandler+0x30>)
 801aba4:	7f1b      	ldrb	r3, [r3, #28]
 801aba6:	3301      	adds	r3, #1
 801aba8:	b2da      	uxtb	r2, r3
 801abaa:	4b04      	ldr	r3, [pc, #16]	@ (801abbc <SVCCTL_RegisterSvcHandler+0x30>)
 801abac:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801abae:	bf00      	nop
}
 801abb0:	370c      	adds	r7, #12
 801abb2:	46bd      	mov	sp, r7
 801abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb8:	4770      	bx	lr
 801abba:	bf00      	nop
 801abbc:	20000780 	.word	0x20000780

0801abc0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b086      	sub	sp, #24
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	3301      	adds	r3, #1
 801abcc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801abce:	2300      	movs	r3, #0
 801abd0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801abd2:	693b      	ldr	r3, [r7, #16]
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	2bff      	cmp	r3, #255	@ 0xff
 801abd8:	d125      	bne.n	801ac26 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801abda:	693b      	ldr	r3, [r7, #16]
 801abdc:	3302      	adds	r3, #2
 801abde:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	881b      	ldrh	r3, [r3, #0]
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801abea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801abee:	d118      	bne.n	801ac22 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801abf0:	2300      	movs	r3, #0
 801abf2:	757b      	strb	r3, [r7, #21]
 801abf4:	e00d      	b.n	801ac12 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801abf6:	7d7b      	ldrb	r3, [r7, #21]
 801abf8:	4a1a      	ldr	r2, [pc, #104]	@ (801ac64 <SVCCTL_UserEvtRx+0xa4>)
 801abfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801abfe:	6878      	ldr	r0, [r7, #4]
 801ac00:	4798      	blx	r3
 801ac02:	4603      	mov	r3, r0
 801ac04:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801ac06:	7dfb      	ldrb	r3, [r7, #23]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d108      	bne.n	801ac1e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801ac0c:	7d7b      	ldrb	r3, [r7, #21]
 801ac0e:	3301      	adds	r3, #1
 801ac10:	757b      	strb	r3, [r7, #21]
 801ac12:	4b14      	ldr	r3, [pc, #80]	@ (801ac64 <SVCCTL_UserEvtRx+0xa4>)
 801ac14:	7f1b      	ldrb	r3, [r3, #28]
 801ac16:	7d7a      	ldrb	r2, [r7, #21]
 801ac18:	429a      	cmp	r2, r3
 801ac1a:	d3ec      	bcc.n	801abf6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 801ac1c:	e002      	b.n	801ac24 <SVCCTL_UserEvtRx+0x64>
              break;
 801ac1e:	bf00      	nop
          break;
 801ac20:	e000      	b.n	801ac24 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801ac22:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801ac24:	e000      	b.n	801ac28 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801ac26:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 801ac28:	7dfb      	ldrb	r3, [r7, #23]
 801ac2a:	2b02      	cmp	r3, #2
 801ac2c:	d00f      	beq.n	801ac4e <SVCCTL_UserEvtRx+0x8e>
 801ac2e:	2b02      	cmp	r3, #2
 801ac30:	dc10      	bgt.n	801ac54 <SVCCTL_UserEvtRx+0x94>
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d002      	beq.n	801ac3c <SVCCTL_UserEvtRx+0x7c>
 801ac36:	2b01      	cmp	r3, #1
 801ac38:	d006      	beq.n	801ac48 <SVCCTL_UserEvtRx+0x88>
 801ac3a:	e00b      	b.n	801ac54 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 801ac3c:	6878      	ldr	r0, [r7, #4]
 801ac3e:	f7ed ff03 	bl	8008a48 <SVCCTL_App_Notification>
 801ac42:	4603      	mov	r3, r0
 801ac44:	75bb      	strb	r3, [r7, #22]
      break;
 801ac46:	e008      	b.n	801ac5a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 801ac48:	2301      	movs	r3, #1
 801ac4a:	75bb      	strb	r3, [r7, #22]
      break;
 801ac4c:	e005      	b.n	801ac5a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 801ac4e:	2300      	movs	r3, #0
 801ac50:	75bb      	strb	r3, [r7, #22]
      break;
 801ac52:	e002      	b.n	801ac5a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801ac54:	2301      	movs	r3, #1
 801ac56:	75bb      	strb	r3, [r7, #22]
      break;
 801ac58:	bf00      	nop
  }

  return (return_status);
 801ac5a:	7dbb      	ldrb	r3, [r7, #22]
}
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	3718      	adds	r7, #24
 801ac60:	46bd      	mov	sp, r7
 801ac62:	bd80      	pop	{r7, pc}
 801ac64:	20000780 	.word	0x20000780

0801ac68 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 801ac6c:	f7ef fbfc 	bl	800a468 <HW_IPCC_Enable>

  return;
 801ac70:	bf00      	nop
}
 801ac72:	bd80      	pop	{r7, pc}

0801ac74 <TL_Init>:


void TL_Init( void )
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 801ac78:	4b10      	ldr	r3, [pc, #64]	@ (801acbc <TL_Init+0x48>)
 801ac7a:	4a11      	ldr	r2, [pc, #68]	@ (801acc0 <TL_Init+0x4c>)
 801ac7c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801ac7e:	4b0f      	ldr	r3, [pc, #60]	@ (801acbc <TL_Init+0x48>)
 801ac80:	4a10      	ldr	r2, [pc, #64]	@ (801acc4 <TL_Init+0x50>)
 801ac82:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 801ac84:	4b0d      	ldr	r3, [pc, #52]	@ (801acbc <TL_Init+0x48>)
 801ac86:	4a10      	ldr	r2, [pc, #64]	@ (801acc8 <TL_Init+0x54>)
 801ac88:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801ac8a:	4b0c      	ldr	r3, [pc, #48]	@ (801acbc <TL_Init+0x48>)
 801ac8c:	4a0f      	ldr	r2, [pc, #60]	@ (801accc <TL_Init+0x58>)
 801ac8e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801ac90:	4b0a      	ldr	r3, [pc, #40]	@ (801acbc <TL_Init+0x48>)
 801ac92:	4a0f      	ldr	r2, [pc, #60]	@ (801acd0 <TL_Init+0x5c>)
 801ac94:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801ac96:	4b09      	ldr	r3, [pc, #36]	@ (801acbc <TL_Init+0x48>)
 801ac98:	4a0e      	ldr	r2, [pc, #56]	@ (801acd4 <TL_Init+0x60>)
 801ac9a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801ac9c:	4b07      	ldr	r3, [pc, #28]	@ (801acbc <TL_Init+0x48>)
 801ac9e:	4a0e      	ldr	r2, [pc, #56]	@ (801acd8 <TL_Init+0x64>)
 801aca0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801aca2:	4b06      	ldr	r3, [pc, #24]	@ (801acbc <TL_Init+0x48>)
 801aca4:	4a0d      	ldr	r2, [pc, #52]	@ (801acdc <TL_Init+0x68>)
 801aca6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801aca8:	4b04      	ldr	r3, [pc, #16]	@ (801acbc <TL_Init+0x48>)
 801acaa:	4a0d      	ldr	r2, [pc, #52]	@ (801ace0 <TL_Init+0x6c>)
 801acac:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801acae:	4b03      	ldr	r3, [pc, #12]	@ (801acbc <TL_Init+0x48>)
 801acb0:	4a0c      	ldr	r2, [pc, #48]	@ (801ace4 <TL_Init+0x70>)
 801acb2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 801acb4:	f7ef fbec 	bl	800a490 <HW_IPCC_Init>

  return;
 801acb8:	bf00      	nop
}
 801acba:	bd80      	pop	{r7, pc}
 801acbc:	20030000 	.word	0x20030000
 801acc0:	20030134 	.word	0x20030134
 801acc4:	20030154 	.word	0x20030154
 801acc8:	20030164 	.word	0x20030164
 801accc:	20030174 	.word	0x20030174
 801acd0:	2003017c 	.word	0x2003017c
 801acd4:	20030184 	.word	0x20030184
 801acd8:	2003018c 	.word	0x2003018c
 801acdc:	200301a8 	.word	0x200301a8
 801ace0:	200301ac 	.word	0x200301ac
 801ace4:	200301b8 	.word	0x200301b8

0801ace8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b084      	sub	sp, #16
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 801acf4:	4811      	ldr	r0, [pc, #68]	@ (801ad3c <TL_BLE_Init+0x54>)
 801acf6:	f7ff f9e7 	bl	801a0c8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801acfa:	4b11      	ldr	r3, [pc, #68]	@ (801ad40 <TL_BLE_Init+0x58>)
 801acfc:	685b      	ldr	r3, [r3, #4]
 801acfe:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	689a      	ldr	r2, [r3, #8]
 801ad04:	68bb      	ldr	r3, [r7, #8]
 801ad06:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	68da      	ldr	r2, [r3, #12]
 801ad0c:	68bb      	ldr	r3, [r7, #8]
 801ad0e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	4a0c      	ldr	r2, [pc, #48]	@ (801ad44 <TL_BLE_Init+0x5c>)
 801ad14:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801ad16:	68bb      	ldr	r3, [r7, #8]
 801ad18:	4a08      	ldr	r2, [pc, #32]	@ (801ad3c <TL_BLE_Init+0x54>)
 801ad1a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 801ad1c:	f7ef fbce 	bl	800a4bc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	4a08      	ldr	r2, [pc, #32]	@ (801ad48 <TL_BLE_Init+0x60>)
 801ad26:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	685b      	ldr	r3, [r3, #4]
 801ad2c:	4a07      	ldr	r2, [pc, #28]	@ (801ad4c <TL_BLE_Init+0x64>)
 801ad2e:	6013      	str	r3, [r2, #0]

  return 0;
 801ad30:	2300      	movs	r3, #0
}
 801ad32:	4618      	mov	r0, r3
 801ad34:	3710      	adds	r7, #16
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd80      	pop	{r7, pc}
 801ad3a:	bf00      	nop
 801ad3c:	200301d4 	.word	0x200301d4
 801ad40:	20030000 	.word	0x20030000
 801ad44:	20030a58 	.word	0x20030a58
 801ad48:	20002ca4 	.word	0x20002ca4
 801ad4c:	20002ca8 	.word	0x20002ca8

0801ad50 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b082      	sub	sp, #8
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
 801ad58:	460b      	mov	r3, r1
 801ad5a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 801ad5c:	4b09      	ldr	r3, [pc, #36]	@ (801ad84 <TL_BLE_SendCmd+0x34>)
 801ad5e:	685b      	ldr	r3, [r3, #4]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	2201      	movs	r2, #1
 801ad64:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801ad66:	4b07      	ldr	r3, [pc, #28]	@ (801ad84 <TL_BLE_SendCmd+0x34>)
 801ad68:	685b      	ldr	r3, [r3, #4]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	4619      	mov	r1, r3
 801ad6e:	2001      	movs	r0, #1
 801ad70:	f000 f96c 	bl	801b04c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 801ad74:	f7ef fbac 	bl	800a4d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 801ad78:	2300      	movs	r3, #0
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3708      	adds	r7, #8
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	20030000 	.word	0x20030000

0801ad88 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b082      	sub	sp, #8
 801ad8c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801ad8e:	e01c      	b.n	801adca <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801ad90:	1d3b      	adds	r3, r7, #4
 801ad92:	4619      	mov	r1, r3
 801ad94:	4812      	ldr	r0, [pc, #72]	@ (801ade0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801ad96:	f7ff fa36 	bl	801a206 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	7a5b      	ldrb	r3, [r3, #9]
 801ad9e:	2b0f      	cmp	r3, #15
 801ada0:	d003      	beq.n	801adaa <HW_IPCC_BLE_RxEvtNot+0x22>
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	7a5b      	ldrb	r3, [r3, #9]
 801ada6:	2b0e      	cmp	r3, #14
 801ada8:	d105      	bne.n	801adb6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	4619      	mov	r1, r3
 801adae:	2002      	movs	r0, #2
 801adb0:	f000 f94c 	bl	801b04c <OutputDbgTrace>
 801adb4:	e004      	b.n	801adc0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	4619      	mov	r1, r3
 801adba:	2003      	movs	r0, #3
 801adbc:	f000 f946 	bl	801b04c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801adc0:	4b08      	ldr	r3, [pc, #32]	@ (801ade4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	687a      	ldr	r2, [r7, #4]
 801adc6:	4610      	mov	r0, r2
 801adc8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801adca:	4805      	ldr	r0, [pc, #20]	@ (801ade0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801adcc:	f7ff f98c 	bl	801a0e8 <LST_is_empty>
 801add0:	4603      	mov	r3, r0
 801add2:	2b00      	cmp	r3, #0
 801add4:	d0dc      	beq.n	801ad90 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801add6:	bf00      	nop
}
 801add8:	3708      	adds	r7, #8
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}
 801adde:	bf00      	nop
 801ade0:	200301d4 	.word	0x200301d4
 801ade4:	20002ca4 	.word	0x20002ca4

0801ade8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 801adec:	4b02      	ldr	r3, [pc, #8]	@ (801adf8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	4798      	blx	r3

  return;
 801adf2:	bf00      	nop
}
 801adf4:	bd80      	pop	{r7, pc}
 801adf6:	bf00      	nop
 801adf8:	20002ca8 	.word	0x20002ca8

0801adfc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b084      	sub	sp, #16
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 801ae08:	480d      	ldr	r0, [pc, #52]	@ (801ae40 <TL_SYS_Init+0x44>)
 801ae0a:	f7ff f95d 	bl	801a0c8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801ae0e:	4b0d      	ldr	r3, [pc, #52]	@ (801ae44 <TL_SYS_Init+0x48>)
 801ae10:	68db      	ldr	r3, [r3, #12]
 801ae12:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	689a      	ldr	r2, [r3, #8]
 801ae18:	68bb      	ldr	r3, [r7, #8]
 801ae1a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	4a08      	ldr	r2, [pc, #32]	@ (801ae40 <TL_SYS_Init+0x44>)
 801ae20:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801ae22:	f7ef fb77 	bl	800a514 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a07      	ldr	r2, [pc, #28]	@ (801ae48 <TL_SYS_Init+0x4c>)
 801ae2c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	4a06      	ldr	r2, [pc, #24]	@ (801ae4c <TL_SYS_Init+0x50>)
 801ae34:	6013      	str	r3, [r2, #0]

  return 0;
 801ae36:	2300      	movs	r3, #0
}
 801ae38:	4618      	mov	r0, r3
 801ae3a:	3710      	adds	r7, #16
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd80      	pop	{r7, pc}
 801ae40:	200301dc 	.word	0x200301dc
 801ae44:	20030000 	.word	0x20030000
 801ae48:	20002cac 	.word	0x20002cac
 801ae4c:	20002cb0 	.word	0x20002cb0

0801ae50 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b082      	sub	sp, #8
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	460b      	mov	r3, r1
 801ae5a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 801ae5c:	4b09      	ldr	r3, [pc, #36]	@ (801ae84 <TL_SYS_SendCmd+0x34>)
 801ae5e:	68db      	ldr	r3, [r3, #12]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	2210      	movs	r2, #16
 801ae64:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801ae66:	4b07      	ldr	r3, [pc, #28]	@ (801ae84 <TL_SYS_SendCmd+0x34>)
 801ae68:	68db      	ldr	r3, [r3, #12]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	2004      	movs	r0, #4
 801ae70:	f000 f8ec 	bl	801b04c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 801ae74:	f7ef fb58 	bl	800a528 <HW_IPCC_SYS_SendCmd>

  return 0;
 801ae78:	2300      	movs	r3, #0
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3708      	adds	r7, #8
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
 801ae82:	bf00      	nop
 801ae84:	20030000 	.word	0x20030000

0801ae88 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801ae8c:	4b07      	ldr	r3, [pc, #28]	@ (801aeac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801ae8e:	68db      	ldr	r3, [r3, #12]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	4619      	mov	r1, r3
 801ae94:	2005      	movs	r0, #5
 801ae96:	f000 f8d9 	bl	801b04c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801ae9a:	4b05      	ldr	r3, [pc, #20]	@ (801aeb0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	4a03      	ldr	r2, [pc, #12]	@ (801aeac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801aea0:	68d2      	ldr	r2, [r2, #12]
 801aea2:	6812      	ldr	r2, [r2, #0]
 801aea4:	4610      	mov	r0, r2
 801aea6:	4798      	blx	r3

  return;
 801aea8:	bf00      	nop
}
 801aeaa:	bd80      	pop	{r7, pc}
 801aeac:	20030000 	.word	0x20030000
 801aeb0:	20002cac 	.word	0x20002cac

0801aeb4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b082      	sub	sp, #8
 801aeb8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801aeba:	e00e      	b.n	801aeda <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 801aebc:	1d3b      	adds	r3, r7, #4
 801aebe:	4619      	mov	r1, r3
 801aec0:	480b      	ldr	r0, [pc, #44]	@ (801aef0 <HW_IPCC_SYS_EvtNot+0x3c>)
 801aec2:	f7ff f9a0 	bl	801a206 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	4619      	mov	r1, r3
 801aeca:	2006      	movs	r0, #6
 801aecc:	f000 f8be 	bl	801b04c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801aed0:	4b08      	ldr	r3, [pc, #32]	@ (801aef4 <HW_IPCC_SYS_EvtNot+0x40>)
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	687a      	ldr	r2, [r7, #4]
 801aed6:	4610      	mov	r0, r2
 801aed8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801aeda:	4805      	ldr	r0, [pc, #20]	@ (801aef0 <HW_IPCC_SYS_EvtNot+0x3c>)
 801aedc:	f7ff f904 	bl	801a0e8 <LST_is_empty>
 801aee0:	4603      	mov	r3, r0
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d0ea      	beq.n	801aebc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801aee6:	bf00      	nop
}
 801aee8:	3708      	adds	r7, #8
 801aeea:	46bd      	mov	sp, r7
 801aeec:	bd80      	pop	{r7, pc}
 801aeee:	bf00      	nop
 801aef0:	200301dc 	.word	0x200301dc
 801aef4:	20002cb0 	.word	0x20002cb0

0801aef8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b082      	sub	sp, #8
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801af00:	4817      	ldr	r0, [pc, #92]	@ (801af60 <TL_MM_Init+0x68>)
 801af02:	f7ff f8e1 	bl	801a0c8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801af06:	4817      	ldr	r0, [pc, #92]	@ (801af64 <TL_MM_Init+0x6c>)
 801af08:	f7ff f8de 	bl	801a0c8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801af0c:	4b16      	ldr	r3, [pc, #88]	@ (801af68 <TL_MM_Init+0x70>)
 801af0e:	691b      	ldr	r3, [r3, #16]
 801af10:	4a16      	ldr	r2, [pc, #88]	@ (801af6c <TL_MM_Init+0x74>)
 801af12:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801af14:	4b15      	ldr	r3, [pc, #84]	@ (801af6c <TL_MM_Init+0x74>)
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	687a      	ldr	r2, [r7, #4]
 801af1a:	6892      	ldr	r2, [r2, #8]
 801af1c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801af1e:	4b13      	ldr	r3, [pc, #76]	@ (801af6c <TL_MM_Init+0x74>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	687a      	ldr	r2, [r7, #4]
 801af24:	68d2      	ldr	r2, [r2, #12]
 801af26:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 801af28:	4b10      	ldr	r3, [pc, #64]	@ (801af6c <TL_MM_Init+0x74>)
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	4a0c      	ldr	r2, [pc, #48]	@ (801af60 <TL_MM_Init+0x68>)
 801af2e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801af30:	4b0e      	ldr	r3, [pc, #56]	@ (801af6c <TL_MM_Init+0x74>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	687a      	ldr	r2, [r7, #4]
 801af36:	6812      	ldr	r2, [r2, #0]
 801af38:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801af3a:	4b0c      	ldr	r3, [pc, #48]	@ (801af6c <TL_MM_Init+0x74>)
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	687a      	ldr	r2, [r7, #4]
 801af40:	6852      	ldr	r2, [r2, #4]
 801af42:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801af44:	4b09      	ldr	r3, [pc, #36]	@ (801af6c <TL_MM_Init+0x74>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	687a      	ldr	r2, [r7, #4]
 801af4a:	6912      	ldr	r2, [r2, #16]
 801af4c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801af4e:	4b07      	ldr	r3, [pc, #28]	@ (801af6c <TL_MM_Init+0x74>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	687a      	ldr	r2, [r7, #4]
 801af54:	6952      	ldr	r2, [r2, #20]
 801af56:	619a      	str	r2, [r3, #24]

  return;
 801af58:	bf00      	nop
}
 801af5a:	3708      	adds	r7, #8
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	200301c4 	.word	0x200301c4
 801af64:	20002c9c 	.word	0x20002c9c
 801af68:	20030000 	.word	0x20030000
 801af6c:	20002cb4 	.word	0x20002cb4

0801af70 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b082      	sub	sp, #8
 801af74:	af00      	add	r7, sp, #0
 801af76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 801af78:	6879      	ldr	r1, [r7, #4]
 801af7a:	4807      	ldr	r0, [pc, #28]	@ (801af98 <TL_MM_EvtDone+0x28>)
 801af7c:	f7ff f8fc 	bl	801a178 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 801af80:	6879      	ldr	r1, [r7, #4]
 801af82:	2000      	movs	r0, #0
 801af84:	f000 f862 	bl	801b04c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 801af88:	4804      	ldr	r0, [pc, #16]	@ (801af9c <TL_MM_EvtDone+0x2c>)
 801af8a:	f7ef faf3 	bl	800a574 <HW_IPCC_MM_SendFreeBuf>

  return;
 801af8e:	bf00      	nop
}
 801af90:	3708      	adds	r7, #8
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	20002c9c 	.word	0x20002c9c
 801af9c:	0801afa1 	.word	0x0801afa1

0801afa0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801afa6:	e00c      	b.n	801afc2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801afa8:	1d3b      	adds	r3, r7, #4
 801afaa:	4619      	mov	r1, r3
 801afac:	480a      	ldr	r0, [pc, #40]	@ (801afd8 <SendFreeBuf+0x38>)
 801afae:	f7ff f92a 	bl	801a206 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801afb2:	4b0a      	ldr	r3, [pc, #40]	@ (801afdc <SendFreeBuf+0x3c>)
 801afb4:	691b      	ldr	r3, [r3, #16]
 801afb6:	691b      	ldr	r3, [r3, #16]
 801afb8:	687a      	ldr	r2, [r7, #4]
 801afba:	4611      	mov	r1, r2
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7ff f8db 	bl	801a178 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801afc2:	4805      	ldr	r0, [pc, #20]	@ (801afd8 <SendFreeBuf+0x38>)
 801afc4:	f7ff f890 	bl	801a0e8 <LST_is_empty>
 801afc8:	4603      	mov	r3, r0
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d0ec      	beq.n	801afa8 <SendFreeBuf+0x8>
  }

  return;
 801afce:	bf00      	nop
}
 801afd0:	3708      	adds	r7, #8
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}
 801afd6:	bf00      	nop
 801afd8:	20002c9c 	.word	0x20002c9c
 801afdc:	20030000 	.word	0x20030000

0801afe0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801afe4:	4805      	ldr	r0, [pc, #20]	@ (801affc <TL_TRACES_Init+0x1c>)
 801afe6:	f7ff f86f 	bl	801a0c8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801afea:	4b05      	ldr	r3, [pc, #20]	@ (801b000 <TL_TRACES_Init+0x20>)
 801afec:	695b      	ldr	r3, [r3, #20]
 801afee:	4a03      	ldr	r2, [pc, #12]	@ (801affc <TL_TRACES_Init+0x1c>)
 801aff0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801aff2:	f7ef faf5 	bl	800a5e0 <HW_IPCC_TRACES_Init>

  return;
 801aff6:	bf00      	nop
}
 801aff8:	bd80      	pop	{r7, pc}
 801affa:	bf00      	nop
 801affc:	200301cc 	.word	0x200301cc
 801b000:	20030000 	.word	0x20030000

0801b004 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b082      	sub	sp, #8
 801b008:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801b00a:	e008      	b.n	801b01e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801b00c:	1d3b      	adds	r3, r7, #4
 801b00e:	4619      	mov	r1, r3
 801b010:	4808      	ldr	r0, [pc, #32]	@ (801b034 <HW_IPCC_TRACES_EvtNot+0x30>)
 801b012:	f7ff f8f8 	bl	801a206 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	4618      	mov	r0, r3
 801b01a:	f000 f80d 	bl	801b038 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801b01e:	4805      	ldr	r0, [pc, #20]	@ (801b034 <HW_IPCC_TRACES_EvtNot+0x30>)
 801b020:	f7ff f862 	bl	801a0e8 <LST_is_empty>
 801b024:	4603      	mov	r3, r0
 801b026:	2b00      	cmp	r3, #0
 801b028:	d0f0      	beq.n	801b00c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801b02a:	bf00      	nop
}
 801b02c:	3708      	adds	r7, #8
 801b02e:	46bd      	mov	sp, r7
 801b030:	bd80      	pop	{r7, pc}
 801b032:	bf00      	nop
 801b034:	200301cc 	.word	0x200301cc

0801b038 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 801b038:	b480      	push	{r7}
 801b03a:	b083      	sub	sp, #12
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 801b040:	bf00      	nop
 801b042:	370c      	adds	r7, #12
 801b044:	46bd      	mov	sp, r7
 801b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b04a:	4770      	bx	lr

0801b04c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 801b04c:	b480      	push	{r7}
 801b04e:	b087      	sub	sp, #28
 801b050:	af00      	add	r7, sp, #0
 801b052:	4603      	mov	r3, r0
 801b054:	6039      	str	r1, [r7, #0]
 801b056:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 801b058:	79fb      	ldrb	r3, [r7, #7]
 801b05a:	2b06      	cmp	r3, #6
 801b05c:	d845      	bhi.n	801b0ea <OutputDbgTrace+0x9e>
 801b05e:	a201      	add	r2, pc, #4	@ (adr r2, 801b064 <OutputDbgTrace+0x18>)
 801b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b064:	0801b081 	.word	0x0801b081
 801b068:	0801b0a5 	.word	0x0801b0a5
 801b06c:	0801b0ab 	.word	0x0801b0ab
 801b070:	0801b0bf 	.word	0x0801b0bf
 801b074:	0801b0cb 	.word	0x0801b0cb
 801b078:	0801b0d1 	.word	0x0801b0d1
 801b07c:	0801b0df 	.word	0x0801b0df
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801b080:	683b      	ldr	r3, [r7, #0]
 801b082:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	7a5b      	ldrb	r3, [r3, #9]
 801b088:	2bff      	cmp	r3, #255	@ 0xff
 801b08a:	d005      	beq.n	801b098 <OutputDbgTrace+0x4c>
 801b08c:	2bff      	cmp	r3, #255	@ 0xff
 801b08e:	dc05      	bgt.n	801b09c <OutputDbgTrace+0x50>
 801b090:	2b0e      	cmp	r3, #14
 801b092:	d005      	beq.n	801b0a0 <OutputDbgTrace+0x54>
 801b094:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801b096:	e001      	b.n	801b09c <OutputDbgTrace+0x50>
          break;
 801b098:	bf00      	nop
 801b09a:	e027      	b.n	801b0ec <OutputDbgTrace+0xa0>
          break;
 801b09c:	bf00      	nop
 801b09e:	e025      	b.n	801b0ec <OutputDbgTrace+0xa0>
          break;
 801b0a0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801b0a2:	e023      	b.n	801b0ec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801b0a8:	e020      	b.n	801b0ec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801b0aa:	683b      	ldr	r3, [r7, #0]
 801b0ac:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801b0ae:	697b      	ldr	r3, [r7, #20]
 801b0b0:	7a5b      	ldrb	r3, [r3, #9]
 801b0b2:	2b0e      	cmp	r3, #14
 801b0b4:	d001      	beq.n	801b0ba <OutputDbgTrace+0x6e>
 801b0b6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801b0b8:	e000      	b.n	801b0bc <OutputDbgTrace+0x70>
          break;
 801b0ba:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801b0bc:	e016      	b.n	801b0ec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801b0be:	683b      	ldr	r3, [r7, #0]
 801b0c0:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801b0c2:	697b      	ldr	r3, [r7, #20]
 801b0c4:	7a5b      	ldrb	r3, [r3, #9]
 801b0c6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801b0c8:	e010      	b.n	801b0ec <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801b0ce:	e00d      	b.n	801b0ec <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 801b0d0:	683b      	ldr	r3, [r7, #0]
 801b0d2:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 801b0d4:	693b      	ldr	r3, [r7, #16]
 801b0d6:	785b      	ldrb	r3, [r3, #1]
 801b0d8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 801b0da:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 801b0dc:	e006      	b.n	801b0ec <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801b0de:	683b      	ldr	r3, [r7, #0]
 801b0e0:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	7a5b      	ldrb	r3, [r3, #9]
 801b0e6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801b0e8:	e000      	b.n	801b0ec <OutputDbgTrace+0xa0>

    default:
      break;
 801b0ea:	bf00      	nop
  }

  return;
 801b0ec:	bf00      	nop
}
 801b0ee:	371c      	adds	r7, #28
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f6:	4770      	bx	lr

0801b0f8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b082      	sub	sp, #8
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	4a22      	ldr	r2, [pc, #136]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b106:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	685b      	ldr	r3, [r3, #4]
 801b10c:	4a20      	ldr	r2, [pc, #128]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b10e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	689b      	ldr	r3, [r3, #8]
 801b114:	4a1e      	ldr	r2, [pc, #120]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b116:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	4a1c      	ldr	r2, [pc, #112]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b11e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	691b      	ldr	r3, [r3, #16]
 801b124:	4a1a      	ldr	r2, [pc, #104]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b126:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	695b      	ldr	r3, [r3, #20]
 801b12c:	4a18      	ldr	r2, [pc, #96]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b12e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	699b      	ldr	r3, [r3, #24]
 801b134:	4a16      	ldr	r2, [pc, #88]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b136:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	69db      	ldr	r3, [r3, #28]
 801b13c:	4a14      	ldr	r2, [pc, #80]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b13e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	6a1b      	ldr	r3, [r3, #32]
 801b144:	4a12      	ldr	r2, [pc, #72]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b146:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b14c:	4a10      	ldr	r2, [pc, #64]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b14e:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b154:	4a0e      	ldr	r2, [pc, #56]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b156:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 801b158:	4b0e      	ldr	r3, [pc, #56]	@ (801b194 <UTIL_LCD_SetFuncDriver+0x9c>)
 801b15a:	2200      	movs	r2, #0
 801b15c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 801b15e:	4b0d      	ldr	r3, [pc, #52]	@ (801b194 <UTIL_LCD_SetFuncDriver+0x9c>)
 801b160:	2200      	movs	r2, #0
 801b162:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801b164:	4b0a      	ldr	r3, [pc, #40]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b166:	69db      	ldr	r3, [r3, #28]
 801b168:	4a0b      	ldr	r2, [pc, #44]	@ (801b198 <UTIL_LCD_SetFuncDriver+0xa0>)
 801b16a:	4611      	mov	r1, r2
 801b16c:	2000      	movs	r0, #0
 801b16e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801b170:	4b07      	ldr	r3, [pc, #28]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b172:	6a1b      	ldr	r3, [r3, #32]
 801b174:	4a09      	ldr	r2, [pc, #36]	@ (801b19c <UTIL_LCD_SetFuncDriver+0xa4>)
 801b176:	4611      	mov	r1, r2
 801b178:	2000      	movs	r0, #0
 801b17a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801b17c:	4b04      	ldr	r3, [pc, #16]	@ (801b190 <UTIL_LCD_SetFuncDriver+0x98>)
 801b17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b180:	4a07      	ldr	r2, [pc, #28]	@ (801b1a0 <UTIL_LCD_SetFuncDriver+0xa8>)
 801b182:	4611      	mov	r1, r2
 801b184:	2000      	movs	r0, #0
 801b186:	4798      	blx	r3
}
 801b188:	bf00      	nop
 801b18a:	3708      	adds	r7, #8
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bd80      	pop	{r7, pc}
 801b190:	20002cf8 	.word	0x20002cf8
 801b194:	20002cb8 	.word	0x20002cb8
 801b198:	20002ccc 	.word	0x20002ccc
 801b19c:	20002cd0 	.word	0x20002cd0
 801b1a0:	20002cd4 	.word	0x20002cd4

0801b1a4 <UTIL_LCD_SetDevice>:
/**
  * @brief  Set the LCD instance to be used.
  * @param  Device  LCD instance
  */
void UTIL_LCD_SetDevice(uint32_t Device)
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b082      	sub	sp, #8
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
  DrawProp->LcdDevice = Device;
 801b1ac:	4a09      	ldr	r2, [pc, #36]	@ (801b1d4 <UTIL_LCD_SetDevice+0x30>)
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	6113      	str	r3, [r2, #16]
  FuncDriver.GetXSize(Device, &DrawProp->LcdXsize);
 801b1b2:	4b09      	ldr	r3, [pc, #36]	@ (801b1d8 <UTIL_LCD_SetDevice+0x34>)
 801b1b4:	69db      	ldr	r3, [r3, #28]
 801b1b6:	4a09      	ldr	r2, [pc, #36]	@ (801b1dc <UTIL_LCD_SetDevice+0x38>)
 801b1b8:	4611      	mov	r1, r2
 801b1ba:	6878      	ldr	r0, [r7, #4]
 801b1bc:	4798      	blx	r3
  FuncDriver.GetYSize(Device, &DrawProp->LcdYsize);
 801b1be:	4b06      	ldr	r3, [pc, #24]	@ (801b1d8 <UTIL_LCD_SetDevice+0x34>)
 801b1c0:	6a1b      	ldr	r3, [r3, #32]
 801b1c2:	4a07      	ldr	r2, [pc, #28]	@ (801b1e0 <UTIL_LCD_SetDevice+0x3c>)
 801b1c4:	4611      	mov	r1, r2
 801b1c6:	6878      	ldr	r0, [r7, #4]
 801b1c8:	4798      	blx	r3
}
 801b1ca:	bf00      	nop
 801b1cc:	3708      	adds	r7, #8
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	bd80      	pop	{r7, pc}
 801b1d2:	bf00      	nop
 801b1d4:	20002cb8 	.word	0x20002cb8
 801b1d8:	20002cf8 	.word	0x20002cf8
 801b1dc:	20002ccc 	.word	0x20002ccc
 801b1e0:	20002cd0 	.word	0x20002cd0

0801b1e4 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 801b1e4:	b480      	push	{r7}
 801b1e6:	b083      	sub	sp, #12
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801b1ec:	4b06      	ldr	r3, [pc, #24]	@ (801b208 <UTIL_LCD_SetTextColor+0x24>)
 801b1ee:	68db      	ldr	r3, [r3, #12]
 801b1f0:	4a05      	ldr	r2, [pc, #20]	@ (801b208 <UTIL_LCD_SetTextColor+0x24>)
 801b1f2:	015b      	lsls	r3, r3, #5
 801b1f4:	4413      	add	r3, r2
 801b1f6:	687a      	ldr	r2, [r7, #4]
 801b1f8:	601a      	str	r2, [r3, #0]
}
 801b1fa:	bf00      	nop
 801b1fc:	370c      	adds	r7, #12
 801b1fe:	46bd      	mov	sp, r7
 801b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b204:	4770      	bx	lr
 801b206:	bf00      	nop
 801b208:	20002cb8 	.word	0x20002cb8

0801b20c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 801b20c:	b480      	push	{r7}
 801b20e:	b083      	sub	sp, #12
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801b214:	4b06      	ldr	r3, [pc, #24]	@ (801b230 <UTIL_LCD_SetBackColor+0x24>)
 801b216:	68db      	ldr	r3, [r3, #12]
 801b218:	4a05      	ldr	r2, [pc, #20]	@ (801b230 <UTIL_LCD_SetBackColor+0x24>)
 801b21a:	015b      	lsls	r3, r3, #5
 801b21c:	4413      	add	r3, r2
 801b21e:	3304      	adds	r3, #4
 801b220:	687a      	ldr	r2, [r7, #4]
 801b222:	601a      	str	r2, [r3, #0]
}
 801b224:	bf00      	nop
 801b226:	370c      	adds	r7, #12
 801b228:	46bd      	mov	sp, r7
 801b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22e:	4770      	bx	lr
 801b230:	20002cb8 	.word	0x20002cb8

0801b234 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 801b234:	b480      	push	{r7}
 801b236:	b083      	sub	sp, #12
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801b23c:	4b06      	ldr	r3, [pc, #24]	@ (801b258 <UTIL_LCD_SetFont+0x24>)
 801b23e:	68db      	ldr	r3, [r3, #12]
 801b240:	4a05      	ldr	r2, [pc, #20]	@ (801b258 <UTIL_LCD_SetFont+0x24>)
 801b242:	015b      	lsls	r3, r3, #5
 801b244:	4413      	add	r3, r2
 801b246:	3308      	adds	r3, #8
 801b248:	687a      	ldr	r2, [r7, #4]
 801b24a:	601a      	str	r2, [r3, #0]
}
 801b24c:	bf00      	nop
 801b24e:	370c      	adds	r7, #12
 801b250:	46bd      	mov	sp, r7
 801b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b256:	4770      	bx	lr
 801b258:	20002cb8 	.word	0x20002cb8

0801b25c <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 801b25c:	b480      	push	{r7}
 801b25e:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 801b260:	4b05      	ldr	r3, [pc, #20]	@ (801b278 <UTIL_LCD_GetFont+0x1c>)
 801b262:	68db      	ldr	r3, [r3, #12]
 801b264:	4a04      	ldr	r2, [pc, #16]	@ (801b278 <UTIL_LCD_GetFont+0x1c>)
 801b266:	015b      	lsls	r3, r3, #5
 801b268:	4413      	add	r3, r2
 801b26a:	3308      	adds	r3, #8
 801b26c:	681b      	ldr	r3, [r3, #0]
}
 801b26e:	4618      	mov	r0, r3
 801b270:	46bd      	mov	sp, r7
 801b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b276:	4770      	bx	lr
 801b278:	20002cb8 	.word	0x20002cb8

0801b27c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 801b27c:	b590      	push	{r4, r7, lr}
 801b27e:	b087      	sub	sp, #28
 801b280:	af02      	add	r7, sp, #8
 801b282:	60f8      	str	r0, [r7, #12]
 801b284:	60b9      	str	r1, [r7, #8]
 801b286:	607a      	str	r2, [r7, #4]
 801b288:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801b28a:	4b08      	ldr	r3, [pc, #32]	@ (801b2ac <UTIL_LCD_FillRGBRect+0x30>)
 801b28c:	685c      	ldr	r4, [r3, #4]
 801b28e:	4b08      	ldr	r3, [pc, #32]	@ (801b2b0 <UTIL_LCD_FillRGBRect+0x34>)
 801b290:	6918      	ldr	r0, [r3, #16]
 801b292:	6a3b      	ldr	r3, [r7, #32]
 801b294:	9301      	str	r3, [sp, #4]
 801b296:	683b      	ldr	r3, [r7, #0]
 801b298:	9300      	str	r3, [sp, #0]
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	68ba      	ldr	r2, [r7, #8]
 801b29e:	68f9      	ldr	r1, [r7, #12]
 801b2a0:	47a0      	blx	r4
}
 801b2a2:	bf00      	nop
 801b2a4:	3714      	adds	r7, #20
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	bd90      	pop	{r4, r7, pc}
 801b2aa:	bf00      	nop
 801b2ac:	20002cf8 	.word	0x20002cf8
 801b2b0:	20002cb8 	.word	0x20002cb8

0801b2b4 <UTIL_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line  Line to be cleared
  */
void UTIL_LCD_ClearStringLine(uint32_t Line)
{
 801b2b4:	b590      	push	{r4, r7, lr}
 801b2b6:	b085      	sub	sp, #20
 801b2b8:	af02      	add	r7, sp, #8
 801b2ba:	6078      	str	r0, [r7, #4]
  /* Draw rectangle with background color */
  UTIL_LCD_FillRect(0, (Line * DrawProp[DrawProp->LcdLayer].pFont->Height), DrawProp->LcdXsize, DrawProp[DrawProp->LcdLayer].pFont->Height, DrawProp[DrawProp->LcdLayer].BackColor);
 801b2bc:	4b13      	ldr	r3, [pc, #76]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2be:	68db      	ldr	r3, [r3, #12]
 801b2c0:	4a12      	ldr	r2, [pc, #72]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2c2:	015b      	lsls	r3, r3, #5
 801b2c4:	4413      	add	r3, r2
 801b2c6:	3308      	adds	r3, #8
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	88db      	ldrh	r3, [r3, #6]
 801b2cc:	461a      	mov	r2, r3
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	fb03 f102 	mul.w	r1, r3, r2
 801b2d4:	4b0d      	ldr	r3, [pc, #52]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2d6:	695a      	ldr	r2, [r3, #20]
 801b2d8:	4b0c      	ldr	r3, [pc, #48]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2da:	68db      	ldr	r3, [r3, #12]
 801b2dc:	480b      	ldr	r0, [pc, #44]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2de:	015b      	lsls	r3, r3, #5
 801b2e0:	4403      	add	r3, r0
 801b2e2:	3308      	adds	r3, #8
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	88db      	ldrh	r3, [r3, #6]
 801b2e8:	461c      	mov	r4, r3
 801b2ea:	4b08      	ldr	r3, [pc, #32]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2ec:	68db      	ldr	r3, [r3, #12]
 801b2ee:	4807      	ldr	r0, [pc, #28]	@ (801b30c <UTIL_LCD_ClearStringLine+0x58>)
 801b2f0:	015b      	lsls	r3, r3, #5
 801b2f2:	4403      	add	r3, r0
 801b2f4:	3304      	adds	r3, #4
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	9300      	str	r3, [sp, #0]
 801b2fa:	4623      	mov	r3, r4
 801b2fc:	2000      	movs	r0, #0
 801b2fe:	f000 f901 	bl	801b504 <UTIL_LCD_FillRect>
}
 801b302:	bf00      	nop
 801b304:	370c      	adds	r7, #12
 801b306:	46bd      	mov	sp, r7
 801b308:	bd90      	pop	{r4, r7, pc}
 801b30a:	bf00      	nop
 801b30c:	20002cb8 	.word	0x20002cb8

0801b310 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 801b310:	b580      	push	{r7, lr}
 801b312:	b084      	sub	sp, #16
 801b314:	af00      	add	r7, sp, #0
 801b316:	60f8      	str	r0, [r7, #12]
 801b318:	60b9      	str	r1, [r7, #8]
 801b31a:	4613      	mov	r3, r2
 801b31c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801b31e:	4b16      	ldr	r3, [pc, #88]	@ (801b378 <UTIL_LCD_DisplayChar+0x68>)
 801b320:	68db      	ldr	r3, [r3, #12]
 801b322:	4a15      	ldr	r2, [pc, #84]	@ (801b378 <UTIL_LCD_DisplayChar+0x68>)
 801b324:	015b      	lsls	r3, r3, #5
 801b326:	4413      	add	r3, r2
 801b328:	3308      	adds	r3, #8
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	681a      	ldr	r2, [r3, #0]
 801b32e:	79fb      	ldrb	r3, [r7, #7]
 801b330:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801b332:	4911      	ldr	r1, [pc, #68]	@ (801b378 <UTIL_LCD_DisplayChar+0x68>)
 801b334:	68c9      	ldr	r1, [r1, #12]
 801b336:	4810      	ldr	r0, [pc, #64]	@ (801b378 <UTIL_LCD_DisplayChar+0x68>)
 801b338:	0149      	lsls	r1, r1, #5
 801b33a:	4401      	add	r1, r0
 801b33c:	3108      	adds	r1, #8
 801b33e:	6809      	ldr	r1, [r1, #0]
 801b340:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801b342:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801b346:	4b0c      	ldr	r3, [pc, #48]	@ (801b378 <UTIL_LCD_DisplayChar+0x68>)
 801b348:	68db      	ldr	r3, [r3, #12]
 801b34a:	480b      	ldr	r0, [pc, #44]	@ (801b378 <UTIL_LCD_DisplayChar+0x68>)
 801b34c:	015b      	lsls	r3, r3, #5
 801b34e:	4403      	add	r3, r0
 801b350:	3308      	adds	r3, #8
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	889b      	ldrh	r3, [r3, #4]
 801b356:	3307      	adds	r3, #7
 801b358:	2b00      	cmp	r3, #0
 801b35a:	da00      	bge.n	801b35e <UTIL_LCD_DisplayChar+0x4e>
 801b35c:	3307      	adds	r3, #7
 801b35e:	10db      	asrs	r3, r3, #3
 801b360:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801b364:	4413      	add	r3, r2
 801b366:	461a      	mov	r2, r3
 801b368:	68b9      	ldr	r1, [r7, #8]
 801b36a:	68f8      	ldr	r0, [r7, #12]
 801b36c:	f000 f904 	bl	801b578 <DrawChar>
}
 801b370:	bf00      	nop
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}
 801b378:	20002cb8 	.word	0x20002cb8

0801b37c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b08a      	sub	sp, #40	@ 0x28
 801b380:	af00      	add	r7, sp, #0
 801b382:	60f8      	str	r0, [r7, #12]
 801b384:	60b9      	str	r1, [r7, #8]
 801b386:	607a      	str	r2, [r7, #4]
 801b388:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 801b38a:	2301      	movs	r3, #1
 801b38c:	627b      	str	r3, [r7, #36]	@ 0x24
 801b38e:	2300      	movs	r3, #0
 801b390:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 801b392:	2300      	movs	r3, #0
 801b394:	61fb      	str	r3, [r7, #28]
 801b396:	2300      	movs	r3, #0
 801b398:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 801b39e:	e002      	b.n	801b3a6 <UTIL_LCD_DisplayStringAt+0x2a>
 801b3a0:	69fb      	ldr	r3, [r7, #28]
 801b3a2:	3301      	adds	r3, #1
 801b3a4:	61fb      	str	r3, [r7, #28]
 801b3a6:	69bb      	ldr	r3, [r7, #24]
 801b3a8:	1c5a      	adds	r2, r3, #1
 801b3aa:	61ba      	str	r2, [r7, #24]
 801b3ac:	781b      	ldrb	r3, [r3, #0]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d1f6      	bne.n	801b3a0 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801b3b2:	4b48      	ldr	r3, [pc, #288]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b3b4:	695b      	ldr	r3, [r3, #20]
 801b3b6:	4a47      	ldr	r2, [pc, #284]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b3b8:	68d2      	ldr	r2, [r2, #12]
 801b3ba:	4946      	ldr	r1, [pc, #280]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b3bc:	0152      	lsls	r2, r2, #5
 801b3be:	440a      	add	r2, r1
 801b3c0:	3208      	adds	r2, #8
 801b3c2:	6812      	ldr	r2, [r2, #0]
 801b3c4:	8892      	ldrh	r2, [r2, #4]
 801b3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 801b3ca:	617b      	str	r3, [r7, #20]

  switch (Mode)
 801b3cc:	78fb      	ldrb	r3, [r7, #3]
 801b3ce:	2b03      	cmp	r3, #3
 801b3d0:	d018      	beq.n	801b404 <UTIL_LCD_DisplayStringAt+0x88>
 801b3d2:	2b03      	cmp	r3, #3
 801b3d4:	dc2a      	bgt.n	801b42c <UTIL_LCD_DisplayStringAt+0xb0>
 801b3d6:	2b01      	cmp	r3, #1
 801b3d8:	d002      	beq.n	801b3e0 <UTIL_LCD_DisplayStringAt+0x64>
 801b3da:	2b02      	cmp	r3, #2
 801b3dc:	d015      	beq.n	801b40a <UTIL_LCD_DisplayStringAt+0x8e>
 801b3de:	e025      	b.n	801b42c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801b3e0:	697a      	ldr	r2, [r7, #20]
 801b3e2:	69fb      	ldr	r3, [r7, #28]
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	4a3b      	ldr	r2, [pc, #236]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b3e8:	68d2      	ldr	r2, [r2, #12]
 801b3ea:	493a      	ldr	r1, [pc, #232]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b3ec:	0152      	lsls	r2, r2, #5
 801b3ee:	440a      	add	r2, r1
 801b3f0:	3208      	adds	r2, #8
 801b3f2:	6812      	ldr	r2, [r2, #0]
 801b3f4:	8892      	ldrh	r2, [r2, #4]
 801b3f6:	fb02 f303 	mul.w	r3, r2, r3
 801b3fa:	085b      	lsrs	r3, r3, #1
 801b3fc:	68fa      	ldr	r2, [r7, #12]
 801b3fe:	4413      	add	r3, r2
 801b400:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801b402:	e016      	b.n	801b432 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801b408:	e013      	b.n	801b432 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801b40a:	697a      	ldr	r2, [r7, #20]
 801b40c:	69fb      	ldr	r3, [r7, #28]
 801b40e:	1ad3      	subs	r3, r2, r3
 801b410:	4a30      	ldr	r2, [pc, #192]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b412:	68d2      	ldr	r2, [r2, #12]
 801b414:	492f      	ldr	r1, [pc, #188]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b416:	0152      	lsls	r2, r2, #5
 801b418:	440a      	add	r2, r1
 801b41a:	3208      	adds	r2, #8
 801b41c:	6812      	ldr	r2, [r2, #0]
 801b41e:	8892      	ldrh	r2, [r2, #4]
 801b420:	fb03 f202 	mul.w	r2, r3, r2
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	1ad3      	subs	r3, r2, r3
 801b428:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801b42a:	e002      	b.n	801b432 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801b430:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801b432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b434:	2b00      	cmp	r3, #0
 801b436:	d003      	beq.n	801b440 <UTIL_LCD_DisplayStringAt+0xc4>
 801b438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b43a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b43e:	d31b      	bcc.n	801b478 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 801b440:	2301      	movs	r3, #1
 801b442:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b444:	e018      	b.n	801b478 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	461a      	mov	r2, r3
 801b44c:	68b9      	ldr	r1, [r7, #8]
 801b44e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b450:	f7ff ff5e 	bl	801b310 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801b454:	4b1f      	ldr	r3, [pc, #124]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b456:	68db      	ldr	r3, [r3, #12]
 801b458:	4a1e      	ldr	r2, [pc, #120]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b45a:	015b      	lsls	r3, r3, #5
 801b45c:	4413      	add	r3, r2
 801b45e:	3308      	adds	r3, #8
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	889b      	ldrh	r3, [r3, #4]
 801b464:	461a      	mov	r2, r3
 801b466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b468:	4413      	add	r3, r2
 801b46a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	3301      	adds	r3, #1
 801b470:	607b      	str	r3, [r7, #4]
    i++;
 801b472:	6a3b      	ldr	r3, [r7, #32]
 801b474:	3301      	adds	r3, #1
 801b476:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	781b      	ldrb	r3, [r3, #0]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	bf14      	ite	ne
 801b480:	2301      	movne	r3, #1
 801b482:	2300      	moveq	r3, #0
 801b484:	b2da      	uxtb	r2, r3
 801b486:	4b13      	ldr	r3, [pc, #76]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b488:	6959      	ldr	r1, [r3, #20]
 801b48a:	4b12      	ldr	r3, [pc, #72]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b48c:	68db      	ldr	r3, [r3, #12]
 801b48e:	4811      	ldr	r0, [pc, #68]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b490:	015b      	lsls	r3, r3, #5
 801b492:	4403      	add	r3, r0
 801b494:	3308      	adds	r3, #8
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	889b      	ldrh	r3, [r3, #4]
 801b49a:	4618      	mov	r0, r3
 801b49c:	6a3b      	ldr	r3, [r7, #32]
 801b49e:	fb00 f303 	mul.w	r3, r0, r3
 801b4a2:	1acb      	subs	r3, r1, r3
 801b4a4:	b29b      	uxth	r3, r3
 801b4a6:	490b      	ldr	r1, [pc, #44]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b4a8:	68c9      	ldr	r1, [r1, #12]
 801b4aa:	480a      	ldr	r0, [pc, #40]	@ (801b4d4 <UTIL_LCD_DisplayStringAt+0x158>)
 801b4ac:	0149      	lsls	r1, r1, #5
 801b4ae:	4401      	add	r1, r0
 801b4b0:	3108      	adds	r1, #8
 801b4b2:	6809      	ldr	r1, [r1, #0]
 801b4b4:	8889      	ldrh	r1, [r1, #4]
 801b4b6:	428b      	cmp	r3, r1
 801b4b8:	bf2c      	ite	cs
 801b4ba:	2301      	movcs	r3, #1
 801b4bc:	2300      	movcc	r3, #0
 801b4be:	b2db      	uxtb	r3, r3
 801b4c0:	4013      	ands	r3, r2
 801b4c2:	b2db      	uxtb	r3, r3
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d1be      	bne.n	801b446 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 801b4c8:	bf00      	nop
 801b4ca:	bf00      	nop
 801b4cc:	3728      	adds	r7, #40	@ 0x28
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bd80      	pop	{r7, pc}
 801b4d2:	bf00      	nop
 801b4d4:	20002cb8 	.word	0x20002cb8

0801b4d8 <UTIL_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b082      	sub	sp, #8
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
 801b4e0:	6039      	str	r1, [r7, #0]
  UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 801b4e2:	f7ff febb 	bl	801b25c <UTIL_LCD_GetFont>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	88db      	ldrh	r3, [r3, #6]
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	fb03 f102 	mul.w	r1, r3, r2
 801b4f2:	2303      	movs	r3, #3
 801b4f4:	683a      	ldr	r2, [r7, #0]
 801b4f6:	2000      	movs	r0, #0
 801b4f8:	f7ff ff40 	bl	801b37c <UTIL_LCD_DisplayStringAt>
}
 801b4fc:	bf00      	nop
 801b4fe:	3708      	adds	r7, #8
 801b500:	46bd      	mov	sp, r7
 801b502:	bd80      	pop	{r7, pc}

0801b504 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 801b504:	b590      	push	{r4, r7, lr}
 801b506:	b087      	sub	sp, #28
 801b508:	af02      	add	r7, sp, #8
 801b50a:	60f8      	str	r0, [r7, #12]
 801b50c:	60b9      	str	r1, [r7, #8]
 801b50e:	607a      	str	r2, [r7, #4]
 801b510:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b512:	4b17      	ldr	r3, [pc, #92]	@ (801b570 <UTIL_LCD_FillRect+0x6c>)
 801b514:	69db      	ldr	r3, [r3, #28]
 801b516:	2b02      	cmp	r3, #2
 801b518:	d11a      	bne.n	801b550 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801b51a:	4b16      	ldr	r3, [pc, #88]	@ (801b574 <UTIL_LCD_FillRect+0x70>)
 801b51c:	691c      	ldr	r4, [r3, #16]
 801b51e:	4b14      	ldr	r3, [pc, #80]	@ (801b570 <UTIL_LCD_FillRect+0x6c>)
 801b520:	6918      	ldr	r0, [r3, #16]
 801b522:	6a3b      	ldr	r3, [r7, #32]
 801b524:	08db      	lsrs	r3, r3, #3
 801b526:	f003 021f 	and.w	r2, r3, #31
 801b52a:	6a3b      	ldr	r3, [r7, #32]
 801b52c:	0a9b      	lsrs	r3, r3, #10
 801b52e:	015b      	lsls	r3, r3, #5
 801b530:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b534:	431a      	orrs	r2, r3
 801b536:	6a3b      	ldr	r3, [r7, #32]
 801b538:	0cdb      	lsrs	r3, r3, #19
 801b53a:	02db      	lsls	r3, r3, #11
 801b53c:	b29b      	uxth	r3, r3
 801b53e:	4313      	orrs	r3, r2
 801b540:	9301      	str	r3, [sp, #4]
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	9300      	str	r3, [sp, #0]
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	68ba      	ldr	r2, [r7, #8]
 801b54a:	68f9      	ldr	r1, [r7, #12]
 801b54c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 801b54e:	e00b      	b.n	801b568 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801b550:	4b08      	ldr	r3, [pc, #32]	@ (801b574 <UTIL_LCD_FillRect+0x70>)
 801b552:	691c      	ldr	r4, [r3, #16]
 801b554:	4b06      	ldr	r3, [pc, #24]	@ (801b570 <UTIL_LCD_FillRect+0x6c>)
 801b556:	6918      	ldr	r0, [r3, #16]
 801b558:	6a3b      	ldr	r3, [r7, #32]
 801b55a:	9301      	str	r3, [sp, #4]
 801b55c:	683b      	ldr	r3, [r7, #0]
 801b55e:	9300      	str	r3, [sp, #0]
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	68ba      	ldr	r2, [r7, #8]
 801b564:	68f9      	ldr	r1, [r7, #12]
 801b566:	47a0      	blx	r4
}
 801b568:	bf00      	nop
 801b56a:	3714      	adds	r7, #20
 801b56c:	46bd      	mov	sp, r7
 801b56e:	bd90      	pop	{r4, r7, pc}
 801b570:	20002cb8 	.word	0x20002cb8
 801b574:	20002cf8 	.word	0x20002cf8

0801b578 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b0b2      	sub	sp, #200	@ 0xc8
 801b57c:	af02      	add	r7, sp, #8
 801b57e:	60f8      	str	r0, [r7, #12]
 801b580:	60b9      	str	r1, [r7, #8]
 801b582:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 801b584:	2300      	movs	r3, #0
 801b586:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801b58a:	2300      	movs	r3, #0
 801b58c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 801b590:	4ba5      	ldr	r3, [pc, #660]	@ (801b828 <DrawChar+0x2b0>)
 801b592:	68db      	ldr	r3, [r3, #12]
 801b594:	4aa4      	ldr	r2, [pc, #656]	@ (801b828 <DrawChar+0x2b0>)
 801b596:	015b      	lsls	r3, r3, #5
 801b598:	4413      	add	r3, r2
 801b59a:	3308      	adds	r3, #8
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	88db      	ldrh	r3, [r3, #6]
 801b5a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 801b5a4:	4ba0      	ldr	r3, [pc, #640]	@ (801b828 <DrawChar+0x2b0>)
 801b5a6:	68db      	ldr	r3, [r3, #12]
 801b5a8:	4a9f      	ldr	r2, [pc, #636]	@ (801b828 <DrawChar+0x2b0>)
 801b5aa:	015b      	lsls	r3, r3, #5
 801b5ac:	4413      	add	r3, r2
 801b5ae:	3308      	adds	r3, #8
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	889b      	ldrh	r3, [r3, #4]
 801b5b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801b5b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5bc:	3307      	adds	r3, #7
 801b5be:	f023 0207 	bic.w	r2, r3, #7
 801b5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5c6:	1ad3      	subs	r3, r2, r3
 801b5c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801b5d2:	e11c      	b.n	801b80e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801b5d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5d8:	3307      	adds	r3, #7
 801b5da:	08db      	lsrs	r3, r3, #3
 801b5dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b5e0:	fb02 f303 	mul.w	r3, r2, r3
 801b5e4:	687a      	ldr	r2, [r7, #4]
 801b5e6:	4413      	add	r3, r2
 801b5e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 801b5ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5f0:	3307      	adds	r3, #7
 801b5f2:	08db      	lsrs	r3, r3, #3
 801b5f4:	2b01      	cmp	r3, #1
 801b5f6:	d002      	beq.n	801b5fe <DrawChar+0x86>
 801b5f8:	2b02      	cmp	r3, #2
 801b5fa:	d006      	beq.n	801b60a <DrawChar+0x92>
 801b5fc:	e011      	b.n	801b622 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 801b5fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b602:	781b      	ldrb	r3, [r3, #0]
 801b604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 801b608:	e01d      	b.n	801b646 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 801b60a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	021b      	lsls	r3, r3, #8
 801b612:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b616:	3201      	adds	r2, #1
 801b618:	7812      	ldrb	r2, [r2, #0]
 801b61a:	4313      	orrs	r3, r2
 801b61c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 801b620:	e011      	b.n	801b646 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801b622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	041a      	lsls	r2, r3, #16
 801b62a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b62e:	3301      	adds	r3, #1
 801b630:	781b      	ldrb	r3, [r3, #0]
 801b632:	021b      	lsls	r3, r3, #8
 801b634:	4313      	orrs	r3, r2
 801b636:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b63a:	3202      	adds	r2, #2
 801b63c:	7812      	ldrb	r2, [r2, #0]
 801b63e:	4313      	orrs	r3, r2
 801b640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 801b644:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801b646:	4b78      	ldr	r3, [pc, #480]	@ (801b828 <DrawChar+0x2b0>)
 801b648:	68db      	ldr	r3, [r3, #12]
 801b64a:	4a77      	ldr	r2, [pc, #476]	@ (801b828 <DrawChar+0x2b0>)
 801b64c:	015b      	lsls	r3, r3, #5
 801b64e:	4413      	add	r3, r2
 801b650:	331c      	adds	r3, #28
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	2b02      	cmp	r3, #2
 801b656:	f040 808c 	bne.w	801b772 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 801b65a:	2300      	movs	r3, #0
 801b65c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b660:	e074      	b.n	801b74c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 801b662:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801b666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b66a:	1ad2      	subs	r2, r2, r3
 801b66c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b670:	4413      	add	r3, r2
 801b672:	3b01      	subs	r3, #1
 801b674:	2201      	movs	r2, #1
 801b676:	fa02 f303 	lsl.w	r3, r2, r3
 801b67a:	461a      	mov	r2, r3
 801b67c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b680:	4013      	ands	r3, r2
 801b682:	2b00      	cmp	r3, #0
 801b684:	d02d      	beq.n	801b6e2 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801b686:	4b68      	ldr	r3, [pc, #416]	@ (801b828 <DrawChar+0x2b0>)
 801b688:	68db      	ldr	r3, [r3, #12]
 801b68a:	4a67      	ldr	r2, [pc, #412]	@ (801b828 <DrawChar+0x2b0>)
 801b68c:	015b      	lsls	r3, r3, #5
 801b68e:	4413      	add	r3, r2
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	08db      	lsrs	r3, r3, #3
 801b694:	b29b      	uxth	r3, r3
 801b696:	f003 031f 	and.w	r3, r3, #31
 801b69a:	b29a      	uxth	r2, r3
 801b69c:	4b62      	ldr	r3, [pc, #392]	@ (801b828 <DrawChar+0x2b0>)
 801b69e:	68db      	ldr	r3, [r3, #12]
 801b6a0:	4961      	ldr	r1, [pc, #388]	@ (801b828 <DrawChar+0x2b0>)
 801b6a2:	015b      	lsls	r3, r3, #5
 801b6a4:	440b      	add	r3, r1
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	0a9b      	lsrs	r3, r3, #10
 801b6aa:	b29b      	uxth	r3, r3
 801b6ac:	015b      	lsls	r3, r3, #5
 801b6ae:	b29b      	uxth	r3, r3
 801b6b0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	4313      	orrs	r3, r2
 801b6b8:	b29a      	uxth	r2, r3
 801b6ba:	4b5b      	ldr	r3, [pc, #364]	@ (801b828 <DrawChar+0x2b0>)
 801b6bc:	68db      	ldr	r3, [r3, #12]
 801b6be:	495a      	ldr	r1, [pc, #360]	@ (801b828 <DrawChar+0x2b0>)
 801b6c0:	015b      	lsls	r3, r3, #5
 801b6c2:	440b      	add	r3, r1
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	0cdb      	lsrs	r3, r3, #19
 801b6c8:	b29b      	uxth	r3, r3
 801b6ca:	02db      	lsls	r3, r3, #11
 801b6cc:	b29b      	uxth	r3, r3
 801b6ce:	4313      	orrs	r3, r2
 801b6d0:	b29a      	uxth	r2, r3
 801b6d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b6d6:	005b      	lsls	r3, r3, #1
 801b6d8:	33c0      	adds	r3, #192	@ 0xc0
 801b6da:	443b      	add	r3, r7
 801b6dc:	f823 2c4c 	strh.w	r2, [r3, #-76]
 801b6e0:	e02f      	b.n	801b742 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801b6e2:	4b51      	ldr	r3, [pc, #324]	@ (801b828 <DrawChar+0x2b0>)
 801b6e4:	68db      	ldr	r3, [r3, #12]
 801b6e6:	4a50      	ldr	r2, [pc, #320]	@ (801b828 <DrawChar+0x2b0>)
 801b6e8:	015b      	lsls	r3, r3, #5
 801b6ea:	4413      	add	r3, r2
 801b6ec:	3304      	adds	r3, #4
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	08db      	lsrs	r3, r3, #3
 801b6f2:	b29b      	uxth	r3, r3
 801b6f4:	f003 031f 	and.w	r3, r3, #31
 801b6f8:	b29a      	uxth	r2, r3
 801b6fa:	4b4b      	ldr	r3, [pc, #300]	@ (801b828 <DrawChar+0x2b0>)
 801b6fc:	68db      	ldr	r3, [r3, #12]
 801b6fe:	494a      	ldr	r1, [pc, #296]	@ (801b828 <DrawChar+0x2b0>)
 801b700:	015b      	lsls	r3, r3, #5
 801b702:	440b      	add	r3, r1
 801b704:	3304      	adds	r3, #4
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	0a9b      	lsrs	r3, r3, #10
 801b70a:	b29b      	uxth	r3, r3
 801b70c:	015b      	lsls	r3, r3, #5
 801b70e:	b29b      	uxth	r3, r3
 801b710:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b714:	b29b      	uxth	r3, r3
 801b716:	4313      	orrs	r3, r2
 801b718:	b29a      	uxth	r2, r3
 801b71a:	4b43      	ldr	r3, [pc, #268]	@ (801b828 <DrawChar+0x2b0>)
 801b71c:	68db      	ldr	r3, [r3, #12]
 801b71e:	4942      	ldr	r1, [pc, #264]	@ (801b828 <DrawChar+0x2b0>)
 801b720:	015b      	lsls	r3, r3, #5
 801b722:	440b      	add	r3, r1
 801b724:	3304      	adds	r3, #4
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	0cdb      	lsrs	r3, r3, #19
 801b72a:	b29b      	uxth	r3, r3
 801b72c:	02db      	lsls	r3, r3, #11
 801b72e:	b29b      	uxth	r3, r3
 801b730:	4313      	orrs	r3, r2
 801b732:	b29a      	uxth	r2, r3
 801b734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b738:	005b      	lsls	r3, r3, #1
 801b73a:	33c0      	adds	r3, #192	@ 0xc0
 801b73c:	443b      	add	r3, r7
 801b73e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 801b742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b746:	3301      	adds	r3, #1
 801b748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b74c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b754:	429a      	cmp	r2, r3
 801b756:	d384      	bcc.n	801b662 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 801b758:	68b9      	ldr	r1, [r7, #8]
 801b75a:	1c4b      	adds	r3, r1, #1
 801b75c:	60bb      	str	r3, [r7, #8]
 801b75e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801b762:	2301      	movs	r3, #1
 801b764:	9300      	str	r3, [sp, #0]
 801b766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b76a:	68f8      	ldr	r0, [r7, #12]
 801b76c:	f7ff fd86 	bl	801b27c <UTIL_LCD_FillRGBRect>
 801b770:	e048      	b.n	801b804 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 801b772:	2300      	movs	r3, #0
 801b774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b778:	e032      	b.n	801b7e0 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 801b77a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801b77e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b782:	1ad2      	subs	r2, r2, r3
 801b784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b788:	4413      	add	r3, r2
 801b78a:	3b01      	subs	r3, #1
 801b78c:	2201      	movs	r2, #1
 801b78e:	fa02 f303 	lsl.w	r3, r2, r3
 801b792:	461a      	mov	r2, r3
 801b794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b798:	4013      	ands	r3, r2
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d00d      	beq.n	801b7ba <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801b79e:	4b22      	ldr	r3, [pc, #136]	@ (801b828 <DrawChar+0x2b0>)
 801b7a0:	68db      	ldr	r3, [r3, #12]
 801b7a2:	4a21      	ldr	r2, [pc, #132]	@ (801b828 <DrawChar+0x2b0>)
 801b7a4:	015b      	lsls	r3, r3, #5
 801b7a6:	4413      	add	r3, r2
 801b7a8:	681a      	ldr	r2, [r3, #0]
 801b7aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b7ae:	009b      	lsls	r3, r3, #2
 801b7b0:	33c0      	adds	r3, #192	@ 0xc0
 801b7b2:	443b      	add	r3, r7
 801b7b4:	f843 2cac 	str.w	r2, [r3, #-172]
 801b7b8:	e00d      	b.n	801b7d6 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801b7ba:	4b1b      	ldr	r3, [pc, #108]	@ (801b828 <DrawChar+0x2b0>)
 801b7bc:	68db      	ldr	r3, [r3, #12]
 801b7be:	4a1a      	ldr	r2, [pc, #104]	@ (801b828 <DrawChar+0x2b0>)
 801b7c0:	015b      	lsls	r3, r3, #5
 801b7c2:	4413      	add	r3, r2
 801b7c4:	3304      	adds	r3, #4
 801b7c6:	681a      	ldr	r2, [r3, #0]
 801b7c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b7cc:	009b      	lsls	r3, r3, #2
 801b7ce:	33c0      	adds	r3, #192	@ 0xc0
 801b7d0:	443b      	add	r3, r7
 801b7d2:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 801b7d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b7da:	3301      	adds	r3, #1
 801b7dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801b7e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b7e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	d3c6      	bcc.n	801b77a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 801b7ec:	68b9      	ldr	r1, [r7, #8]
 801b7ee:	1c4b      	adds	r3, r1, #1
 801b7f0:	60bb      	str	r3, [r7, #8]
 801b7f2:	f107 0214 	add.w	r2, r7, #20
 801b7f6:	2301      	movs	r3, #1
 801b7f8:	9300      	str	r3, [sp, #0]
 801b7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b7fe:	68f8      	ldr	r0, [r7, #12]
 801b800:	f7ff fd3c 	bl	801b27c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 801b804:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b808:	3301      	adds	r3, #1
 801b80a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801b80e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b812:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b816:	429a      	cmp	r2, r3
 801b818:	f4ff aedc 	bcc.w	801b5d4 <DrawChar+0x5c>
    }
  }
}
 801b81c:	bf00      	nop
 801b81e:	bf00      	nop
 801b820:	37c0      	adds	r7, #192	@ 0xc0
 801b822:	46bd      	mov	sp, r7
 801b824:	bd80      	pop	{r7, pc}
 801b826:	bf00      	nop
 801b828:	20002cb8 	.word	0x20002cb8

0801b82c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b82c:	b480      	push	{r7}
 801b82e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b830:	4b05      	ldr	r3, [pc, #20]	@ (801b848 <UTIL_LPM_Init+0x1c>)
 801b832:	2200      	movs	r2, #0
 801b834:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b836:	4b05      	ldr	r3, [pc, #20]	@ (801b84c <UTIL_LPM_Init+0x20>)
 801b838:	2200      	movs	r2, #0
 801b83a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b83c:	bf00      	nop
 801b83e:	46bd      	mov	sp, r7
 801b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	20002d24 	.word	0x20002d24
 801b84c:	20002d28 	.word	0x20002d28

0801b850 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b850:	b480      	push	{r7}
 801b852:	b087      	sub	sp, #28
 801b854:	af00      	add	r7, sp, #0
 801b856:	6078      	str	r0, [r7, #4]
 801b858:	460b      	mov	r3, r1
 801b85a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b85c:	f3ef 8310 	mrs	r3, PRIMASK
 801b860:	613b      	str	r3, [r7, #16]
  return(result);
 801b862:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b866:	b672      	cpsid	i
}
 801b868:	bf00      	nop
  
  switch(state)
 801b86a:	78fb      	ldrb	r3, [r7, #3]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d008      	beq.n	801b882 <UTIL_LPM_SetOffMode+0x32>
 801b870:	2b01      	cmp	r3, #1
 801b872:	d10e      	bne.n	801b892 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b874:	4b0d      	ldr	r3, [pc, #52]	@ (801b8ac <UTIL_LPM_SetOffMode+0x5c>)
 801b876:	681a      	ldr	r2, [r3, #0]
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	4313      	orrs	r3, r2
 801b87c:	4a0b      	ldr	r2, [pc, #44]	@ (801b8ac <UTIL_LPM_SetOffMode+0x5c>)
 801b87e:	6013      	str	r3, [r2, #0]
      break;
 801b880:	e008      	b.n	801b894 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	43da      	mvns	r2, r3
 801b886:	4b09      	ldr	r3, [pc, #36]	@ (801b8ac <UTIL_LPM_SetOffMode+0x5c>)
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	4013      	ands	r3, r2
 801b88c:	4a07      	ldr	r2, [pc, #28]	@ (801b8ac <UTIL_LPM_SetOffMode+0x5c>)
 801b88e:	6013      	str	r3, [r2, #0]
      break;
 801b890:	e000      	b.n	801b894 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b892:	bf00      	nop
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	f383 8810 	msr	PRIMASK, r3
}
 801b89e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b8a0:	bf00      	nop
 801b8a2:	371c      	adds	r7, #28
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8aa:	4770      	bx	lr
 801b8ac:	20002d28 	.word	0x20002d28

0801b8b0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b090      	sub	sp, #64	@ 0x40
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b8b8:	4b73      	ldr	r3, [pc, #460]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b8be:	4b72      	ldr	r3, [pc, #456]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801b8c0:	681a      	ldr	r2, [r3, #0]
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	4013      	ands	r3, r2
 801b8c6:	4a70      	ldr	r2, [pc, #448]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801b8c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b8ca:	4b70      	ldr	r3, [pc, #448]	@ (801ba8c <UTIL_SEQ_Run+0x1dc>)
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b8d0:	4b6f      	ldr	r3, [pc, #444]	@ (801ba90 <UTIL_SEQ_Run+0x1e0>)
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b8d6:	4b6f      	ldr	r3, [pc, #444]	@ (801ba94 <UTIL_SEQ_Run+0x1e4>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801b8dc:	4b6e      	ldr	r3, [pc, #440]	@ (801ba98 <UTIL_SEQ_Run+0x1e8>)
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b8e2:	e08d      	b.n	801ba00 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b8e8:	e002      	b.n	801b8f0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b8ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8ec:	3301      	adds	r3, #1
 801b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b8f0:	4a6a      	ldr	r2, [pc, #424]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8fa:	401a      	ands	r2, r3
 801b8fc:	4b62      	ldr	r3, [pc, #392]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	4013      	ands	r3, r2
 801b902:	2b00      	cmp	r3, #0
 801b904:	d0f1      	beq.n	801b8ea <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b906:	4a65      	ldr	r2, [pc, #404]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b90a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b910:	401a      	ands	r2, r3
 801b912:	4b5d      	ldr	r3, [pc, #372]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4013      	ands	r3, r2
 801b918:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b91a:	4a60      	ldr	r2, [pc, #384]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b91e:	00db      	lsls	r3, r3, #3
 801b920:	4413      	add	r3, r2
 801b922:	685a      	ldr	r2, [r3, #4]
 801b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b926:	4013      	ands	r3, r2
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d106      	bne.n	801b93a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b92c:	4a5b      	ldr	r2, [pc, #364]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b930:	00db      	lsls	r3, r3, #3
 801b932:	4413      	add	r3, r2
 801b934:	f04f 32ff 	mov.w	r2, #4294967295
 801b938:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b93a:	4a58      	ldr	r2, [pc, #352]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b93e:	00db      	lsls	r3, r3, #3
 801b940:	4413      	add	r3, r2
 801b942:	685a      	ldr	r2, [r3, #4]
 801b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b946:	4013      	ands	r3, r2
 801b948:	4618      	mov	r0, r3
 801b94a:	f000 f9b3 	bl	801bcb4 <SEQ_BitPosition>
 801b94e:	4603      	mov	r3, r0
 801b950:	461a      	mov	r2, r3
 801b952:	4b53      	ldr	r3, [pc, #332]	@ (801baa0 <UTIL_SEQ_Run+0x1f0>)
 801b954:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b956:	4a51      	ldr	r2, [pc, #324]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b95a:	00db      	lsls	r3, r3, #3
 801b95c:	4413      	add	r3, r2
 801b95e:	685a      	ldr	r2, [r3, #4]
 801b960:	4b4f      	ldr	r3, [pc, #316]	@ (801baa0 <UTIL_SEQ_Run+0x1f0>)
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	2101      	movs	r1, #1
 801b966:	fa01 f303 	lsl.w	r3, r1, r3
 801b96a:	43db      	mvns	r3, r3
 801b96c:	401a      	ands	r2, r3
 801b96e:	494b      	ldr	r1, [pc, #300]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b972:	00db      	lsls	r3, r3, #3
 801b974:	440b      	add	r3, r1
 801b976:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b978:	f3ef 8310 	mrs	r3, PRIMASK
 801b97c:	61bb      	str	r3, [r7, #24]
  return(result);
 801b97e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b980:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b982:	b672      	cpsid	i
}
 801b984:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b986:	4b46      	ldr	r3, [pc, #280]	@ (801baa0 <UTIL_SEQ_Run+0x1f0>)
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	2201      	movs	r2, #1
 801b98c:	fa02 f303 	lsl.w	r3, r2, r3
 801b990:	43da      	mvns	r2, r3
 801b992:	4b3e      	ldr	r3, [pc, #248]	@ (801ba8c <UTIL_SEQ_Run+0x1dc>)
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4013      	ands	r3, r2
 801b998:	4a3c      	ldr	r2, [pc, #240]	@ (801ba8c <UTIL_SEQ_Run+0x1dc>)
 801b99a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b99c:	2301      	movs	r3, #1
 801b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b9a0:	e013      	b.n	801b9ca <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9a4:	3b01      	subs	r3, #1
 801b9a6:	4a3d      	ldr	r2, [pc, #244]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b9a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b9ac:	4b3c      	ldr	r3, [pc, #240]	@ (801baa0 <UTIL_SEQ_Run+0x1f0>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	2201      	movs	r2, #1
 801b9b2:	fa02 f303 	lsl.w	r3, r2, r3
 801b9b6:	43da      	mvns	r2, r3
 801b9b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9ba:	3b01      	subs	r3, #1
 801b9bc:	400a      	ands	r2, r1
 801b9be:	4937      	ldr	r1, [pc, #220]	@ (801ba9c <UTIL_SEQ_Run+0x1ec>)
 801b9c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b9c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9c6:	3b01      	subs	r3, #1
 801b9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d1e8      	bne.n	801b9a2 <UTIL_SEQ_Run+0xf2>
 801b9d0:	6a3b      	ldr	r3, [r7, #32]
 801b9d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9d4:	697b      	ldr	r3, [r7, #20]
 801b9d6:	f383 8810 	msr	PRIMASK, r3
}
 801b9da:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b9dc:	4b30      	ldr	r3, [pc, #192]	@ (801baa0 <UTIL_SEQ_Run+0x1f0>)
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	4a30      	ldr	r2, [pc, #192]	@ (801baa4 <UTIL_SEQ_Run+0x1f4>)
 801b9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b9e6:	4798      	blx	r3

    local_taskset = TaskSet;
 801b9e8:	4b28      	ldr	r3, [pc, #160]	@ (801ba8c <UTIL_SEQ_Run+0x1dc>)
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b9ee:	4b28      	ldr	r3, [pc, #160]	@ (801ba90 <UTIL_SEQ_Run+0x1e0>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b9f4:	4b27      	ldr	r3, [pc, #156]	@ (801ba94 <UTIL_SEQ_Run+0x1e4>)
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b9fa:	4b27      	ldr	r3, [pc, #156]	@ (801ba98 <UTIL_SEQ_Run+0x1e8>)
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ba00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba04:	401a      	ands	r2, r3
 801ba06:	4b20      	ldr	r3, [pc, #128]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	4013      	ands	r3, r2
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d005      	beq.n	801ba1c <UTIL_SEQ_Run+0x16c>
 801ba10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ba12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba14:	4013      	ands	r3, r2
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	f43f af64 	beq.w	801b8e4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ba1c:	4b20      	ldr	r3, [pc, #128]	@ (801baa0 <UTIL_SEQ_Run+0x1f0>)
 801ba1e:	f04f 32ff 	mov.w	r2, #4294967295
 801ba22:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ba24:	f000 f938 	bl	801bc98 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba28:	f3ef 8310 	mrs	r3, PRIMASK
 801ba2c:	613b      	str	r3, [r7, #16]
  return(result);
 801ba2e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ba30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba32:	b672      	cpsid	i
}
 801ba34:	bf00      	nop
  local_taskset = TaskSet;
 801ba36:	4b15      	ldr	r3, [pc, #84]	@ (801ba8c <UTIL_SEQ_Run+0x1dc>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801ba3c:	4b14      	ldr	r3, [pc, #80]	@ (801ba90 <UTIL_SEQ_Run+0x1e0>)
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801ba42:	4b14      	ldr	r3, [pc, #80]	@ (801ba94 <UTIL_SEQ_Run+0x1e4>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801ba48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba4c:	401a      	ands	r2, r3
 801ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	4013      	ands	r3, r2
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d107      	bne.n	801ba68 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801ba58:	4b0f      	ldr	r3, [pc, #60]	@ (801ba98 <UTIL_SEQ_Run+0x1e8>)
 801ba5a:	681a      	ldr	r2, [r3, #0]
 801ba5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ba5e:	4013      	ands	r3, r2
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d101      	bne.n	801ba68 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801ba64:	f7e5 fef5 	bl	8001852 <UTIL_SEQ_Idle>
 801ba68:	69fb      	ldr	r3, [r7, #28]
 801ba6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	f383 8810 	msr	PRIMASK, r3
}
 801ba72:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801ba74:	f000 f917 	bl	801bca6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801ba78:	4a03      	ldr	r2, [pc, #12]	@ (801ba88 <UTIL_SEQ_Run+0x1d8>)
 801ba7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba7c:	6013      	str	r3, [r2, #0]

  return;
 801ba7e:	bf00      	nop
}
 801ba80:	3740      	adds	r7, #64	@ 0x40
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}
 801ba86:	bf00      	nop
 801ba88:	20000598 	.word	0x20000598
 801ba8c:	20002d2c 	.word	0x20002d2c
 801ba90:	20002d30 	.word	0x20002d30
 801ba94:	20000594 	.word	0x20000594
 801ba98:	20002d34 	.word	0x20002d34
 801ba9c:	20002dbc 	.word	0x20002dbc
 801baa0:	20002d38 	.word	0x20002d38
 801baa4:	20002d3c 	.word	0x20002d3c

0801baa8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b088      	sub	sp, #32
 801baac:	af00      	add	r7, sp, #0
 801baae:	60f8      	str	r0, [r7, #12]
 801bab0:	60b9      	str	r1, [r7, #8]
 801bab2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bab4:	f3ef 8310 	mrs	r3, PRIMASK
 801bab8:	617b      	str	r3, [r7, #20]
  return(result);
 801baba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801babc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801babe:	b672      	cpsid	i
}
 801bac0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801bac2:	68f8      	ldr	r0, [r7, #12]
 801bac4:	f000 f8f6 	bl	801bcb4 <SEQ_BitPosition>
 801bac8:	4603      	mov	r3, r0
 801baca:	4619      	mov	r1, r3
 801bacc:	4a06      	ldr	r2, [pc, #24]	@ (801bae8 <UTIL_SEQ_RegTask+0x40>)
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801bad4:	69fb      	ldr	r3, [r7, #28]
 801bad6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bad8:	69bb      	ldr	r3, [r7, #24]
 801bada:	f383 8810 	msr	PRIMASK, r3
}
 801bade:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801bae0:	bf00      	nop
}
 801bae2:	3720      	adds	r7, #32
 801bae4:	46bd      	mov	sp, r7
 801bae6:	bd80      	pop	{r7, pc}
 801bae8:	20002d3c 	.word	0x20002d3c

0801baec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801baec:	b480      	push	{r7}
 801baee:	b087      	sub	sp, #28
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
 801baf4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801baf6:	f3ef 8310 	mrs	r3, PRIMASK
 801bafa:	60fb      	str	r3, [r7, #12]
  return(result);
 801bafc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bafe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb00:	b672      	cpsid	i
}
 801bb02:	bf00      	nop

  TaskSet |= TaskId_bm;
 801bb04:	4b0d      	ldr	r3, [pc, #52]	@ (801bb3c <UTIL_SEQ_SetTask+0x50>)
 801bb06:	681a      	ldr	r2, [r3, #0]
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	4313      	orrs	r3, r2
 801bb0c:	4a0b      	ldr	r2, [pc, #44]	@ (801bb3c <UTIL_SEQ_SetTask+0x50>)
 801bb0e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801bb10:	4a0b      	ldr	r2, [pc, #44]	@ (801bb40 <UTIL_SEQ_SetTask+0x54>)
 801bb12:	683b      	ldr	r3, [r7, #0]
 801bb14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	431a      	orrs	r2, r3
 801bb1c:	4908      	ldr	r1, [pc, #32]	@ (801bb40 <UTIL_SEQ_SetTask+0x54>)
 801bb1e:	683b      	ldr	r3, [r7, #0]
 801bb20:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801bb24:	697b      	ldr	r3, [r7, #20]
 801bb26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb28:	693b      	ldr	r3, [r7, #16]
 801bb2a:	f383 8810 	msr	PRIMASK, r3
}
 801bb2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bb30:	bf00      	nop
}
 801bb32:	371c      	adds	r7, #28
 801bb34:	46bd      	mov	sp, r7
 801bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb3a:	4770      	bx	lr
 801bb3c:	20002d2c 	.word	0x20002d2c
 801bb40:	20002dbc 	.word	0x20002dbc

0801bb44 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801bb44:	b480      	push	{r7}
 801bb46:	b087      	sub	sp, #28
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb4c:	f3ef 8310 	mrs	r3, PRIMASK
 801bb50:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bb54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb56:	b672      	cpsid	i
}
 801bb58:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	43da      	mvns	r2, r3
 801bb5e:	4b08      	ldr	r3, [pc, #32]	@ (801bb80 <UTIL_SEQ_PauseTask+0x3c>)
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	4013      	ands	r3, r2
 801bb64:	4a06      	ldr	r2, [pc, #24]	@ (801bb80 <UTIL_SEQ_PauseTask+0x3c>)
 801bb66:	6013      	str	r3, [r2, #0]
 801bb68:	697b      	ldr	r3, [r7, #20]
 801bb6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb6c:	693b      	ldr	r3, [r7, #16]
 801bb6e:	f383 8810 	msr	PRIMASK, r3
}
 801bb72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bb74:	bf00      	nop
}
 801bb76:	371c      	adds	r7, #28
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7e:	4770      	bx	lr
 801bb80:	20000594 	.word	0x20000594

0801bb84 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801bb84:	b480      	push	{r7}
 801bb86:	b087      	sub	sp, #28
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb8c:	f3ef 8310 	mrs	r3, PRIMASK
 801bb90:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb92:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bb94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb96:	b672      	cpsid	i
}
 801bb98:	bf00      	nop

  TaskMask |= TaskId_bm;
 801bb9a:	4b09      	ldr	r3, [pc, #36]	@ (801bbc0 <UTIL_SEQ_ResumeTask+0x3c>)
 801bb9c:	681a      	ldr	r2, [r3, #0]
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	4313      	orrs	r3, r2
 801bba2:	4a07      	ldr	r2, [pc, #28]	@ (801bbc0 <UTIL_SEQ_ResumeTask+0x3c>)
 801bba4:	6013      	str	r3, [r2, #0]
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbaa:	693b      	ldr	r3, [r7, #16]
 801bbac:	f383 8810 	msr	PRIMASK, r3
}
 801bbb0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bbb2:	bf00      	nop
}
 801bbb4:	371c      	adds	r7, #28
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbbc:	4770      	bx	lr
 801bbbe:	bf00      	nop
 801bbc0:	20000594 	.word	0x20000594

0801bbc4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801bbc4:	b480      	push	{r7}
 801bbc6:	b087      	sub	sp, #28
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbcc:	f3ef 8310 	mrs	r3, PRIMASK
 801bbd0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbd2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bbd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbd6:	b672      	cpsid	i
}
 801bbd8:	bf00      	nop

  EvtSet |= EvtId_bm;
 801bbda:	4b09      	ldr	r3, [pc, #36]	@ (801bc00 <UTIL_SEQ_SetEvt+0x3c>)
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	4313      	orrs	r3, r2
 801bbe2:	4a07      	ldr	r2, [pc, #28]	@ (801bc00 <UTIL_SEQ_SetEvt+0x3c>)
 801bbe4:	6013      	str	r3, [r2, #0]
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbea:	693b      	ldr	r3, [r7, #16]
 801bbec:	f383 8810 	msr	PRIMASK, r3
}
 801bbf0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bbf2:	bf00      	nop
}
 801bbf4:	371c      	adds	r7, #28
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbfc:	4770      	bx	lr
 801bbfe:	bf00      	nop
 801bc00:	20002d30 	.word	0x20002d30

0801bc04 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b088      	sub	sp, #32
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801bc0c:	4b1f      	ldr	r3, [pc, #124]	@ (801bc8c <UTIL_SEQ_WaitEvt+0x88>)
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801bc12:	4b1e      	ldr	r3, [pc, #120]	@ (801bc8c <UTIL_SEQ_WaitEvt+0x88>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc1a:	d102      	bne.n	801bc22 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	61fb      	str	r3, [r7, #28]
 801bc20:	e005      	b.n	801bc2e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801bc22:	4b1a      	ldr	r3, [pc, #104]	@ (801bc8c <UTIL_SEQ_WaitEvt+0x88>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	2201      	movs	r2, #1
 801bc28:	fa02 f303 	lsl.w	r3, r2, r3
 801bc2c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801bc2e:	4b18      	ldr	r3, [pc, #96]	@ (801bc90 <UTIL_SEQ_WaitEvt+0x8c>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801bc34:	4a16      	ldr	r2, [pc, #88]	@ (801bc90 <UTIL_SEQ_WaitEvt+0x8c>)
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801bc3a:	e003      	b.n	801bc44 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801bc3c:	6879      	ldr	r1, [r7, #4]
 801bc3e:	69f8      	ldr	r0, [r7, #28]
 801bc40:	f7e5 fe0e 	bl	8001860 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801bc44:	4b13      	ldr	r3, [pc, #76]	@ (801bc94 <UTIL_SEQ_WaitEvt+0x90>)
 801bc46:	681a      	ldr	r2, [r3, #0]
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	4013      	ands	r3, r2
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d0f5      	beq.n	801bc3c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801bc50:	4a0e      	ldr	r2, [pc, #56]	@ (801bc8c <UTIL_SEQ_WaitEvt+0x88>)
 801bc52:	69bb      	ldr	r3, [r7, #24]
 801bc54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc56:	f3ef 8310 	mrs	r3, PRIMASK
 801bc5a:	60bb      	str	r3, [r7, #8]
  return(result);
 801bc5c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bc5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc60:	b672      	cpsid	i
}
 801bc62:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	43da      	mvns	r2, r3
 801bc68:	4b0a      	ldr	r3, [pc, #40]	@ (801bc94 <UTIL_SEQ_WaitEvt+0x90>)
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	4013      	ands	r3, r2
 801bc6e:	4a09      	ldr	r2, [pc, #36]	@ (801bc94 <UTIL_SEQ_WaitEvt+0x90>)
 801bc70:	6013      	str	r3, [r2, #0]
 801bc72:	693b      	ldr	r3, [r7, #16]
 801bc74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	f383 8810 	msr	PRIMASK, r3
}
 801bc7c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801bc7e:	4a04      	ldr	r2, [pc, #16]	@ (801bc90 <UTIL_SEQ_WaitEvt+0x8c>)
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	6013      	str	r3, [r2, #0]
  return;
 801bc84:	bf00      	nop
}
 801bc86:	3720      	adds	r7, #32
 801bc88:	46bd      	mov	sp, r7
 801bc8a:	bd80      	pop	{r7, pc}
 801bc8c:	20002d38 	.word	0x20002d38
 801bc90:	20002d34 	.word	0x20002d34
 801bc94:	20002d30 	.word	0x20002d30

0801bc98 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801bc98:	b480      	push	{r7}
 801bc9a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bc9c:	bf00      	nop
}
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bca4:	4770      	bx	lr

0801bca6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801bca6:	b480      	push	{r7}
 801bca8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bcaa:	bf00      	nop
}
 801bcac:	46bd      	mov	sp, r7
 801bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb2:	4770      	bx	lr

0801bcb4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801bcb4:	b480      	push	{r7}
 801bcb6:	b085      	sub	sp, #20
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d101      	bne.n	801bcca <SEQ_BitPosition+0x16>
    return 32U;
 801bcc6:	2320      	movs	r3, #32
 801bcc8:	e003      	b.n	801bcd2 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	fab3 f383 	clz	r3, r3
 801bcd0:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801bcd2:	f1c3 031f 	rsb	r3, r3, #31
 801bcd6:	b2db      	uxtb	r3, r3
}
 801bcd8:	4618      	mov	r0, r3
 801bcda:	3714      	adds	r7, #20
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce2:	4770      	bx	lr

0801bce4 <__cvt>:
 801bce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bce8:	ec57 6b10 	vmov	r6, r7, d0
 801bcec:	2f00      	cmp	r7, #0
 801bcee:	460c      	mov	r4, r1
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	463b      	mov	r3, r7
 801bcf4:	bfbb      	ittet	lt
 801bcf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801bcfa:	461f      	movlt	r7, r3
 801bcfc:	2300      	movge	r3, #0
 801bcfe:	232d      	movlt	r3, #45	@ 0x2d
 801bd00:	700b      	strb	r3, [r1, #0]
 801bd02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bd04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801bd08:	4691      	mov	r9, r2
 801bd0a:	f023 0820 	bic.w	r8, r3, #32
 801bd0e:	bfbc      	itt	lt
 801bd10:	4632      	movlt	r2, r6
 801bd12:	4616      	movlt	r6, r2
 801bd14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bd18:	d005      	beq.n	801bd26 <__cvt+0x42>
 801bd1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801bd1e:	d100      	bne.n	801bd22 <__cvt+0x3e>
 801bd20:	3401      	adds	r4, #1
 801bd22:	2102      	movs	r1, #2
 801bd24:	e000      	b.n	801bd28 <__cvt+0x44>
 801bd26:	2103      	movs	r1, #3
 801bd28:	ab03      	add	r3, sp, #12
 801bd2a:	9301      	str	r3, [sp, #4]
 801bd2c:	ab02      	add	r3, sp, #8
 801bd2e:	9300      	str	r3, [sp, #0]
 801bd30:	ec47 6b10 	vmov	d0, r6, r7
 801bd34:	4653      	mov	r3, sl
 801bd36:	4622      	mov	r2, r4
 801bd38:	f000 ff76 	bl	801cc28 <_dtoa_r>
 801bd3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801bd40:	4605      	mov	r5, r0
 801bd42:	d119      	bne.n	801bd78 <__cvt+0x94>
 801bd44:	f019 0f01 	tst.w	r9, #1
 801bd48:	d00e      	beq.n	801bd68 <__cvt+0x84>
 801bd4a:	eb00 0904 	add.w	r9, r0, r4
 801bd4e:	2200      	movs	r2, #0
 801bd50:	2300      	movs	r3, #0
 801bd52:	4630      	mov	r0, r6
 801bd54:	4639      	mov	r1, r7
 801bd56:	f7e4 fe9f 	bl	8000a98 <__aeabi_dcmpeq>
 801bd5a:	b108      	cbz	r0, 801bd60 <__cvt+0x7c>
 801bd5c:	f8cd 900c 	str.w	r9, [sp, #12]
 801bd60:	2230      	movs	r2, #48	@ 0x30
 801bd62:	9b03      	ldr	r3, [sp, #12]
 801bd64:	454b      	cmp	r3, r9
 801bd66:	d31e      	bcc.n	801bda6 <__cvt+0xc2>
 801bd68:	9b03      	ldr	r3, [sp, #12]
 801bd6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bd6c:	1b5b      	subs	r3, r3, r5
 801bd6e:	4628      	mov	r0, r5
 801bd70:	6013      	str	r3, [r2, #0]
 801bd72:	b004      	add	sp, #16
 801bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bd7c:	eb00 0904 	add.w	r9, r0, r4
 801bd80:	d1e5      	bne.n	801bd4e <__cvt+0x6a>
 801bd82:	7803      	ldrb	r3, [r0, #0]
 801bd84:	2b30      	cmp	r3, #48	@ 0x30
 801bd86:	d10a      	bne.n	801bd9e <__cvt+0xba>
 801bd88:	2200      	movs	r2, #0
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	4639      	mov	r1, r7
 801bd90:	f7e4 fe82 	bl	8000a98 <__aeabi_dcmpeq>
 801bd94:	b918      	cbnz	r0, 801bd9e <__cvt+0xba>
 801bd96:	f1c4 0401 	rsb	r4, r4, #1
 801bd9a:	f8ca 4000 	str.w	r4, [sl]
 801bd9e:	f8da 3000 	ldr.w	r3, [sl]
 801bda2:	4499      	add	r9, r3
 801bda4:	e7d3      	b.n	801bd4e <__cvt+0x6a>
 801bda6:	1c59      	adds	r1, r3, #1
 801bda8:	9103      	str	r1, [sp, #12]
 801bdaa:	701a      	strb	r2, [r3, #0]
 801bdac:	e7d9      	b.n	801bd62 <__cvt+0x7e>

0801bdae <__exponent>:
 801bdae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bdb0:	2900      	cmp	r1, #0
 801bdb2:	bfba      	itte	lt
 801bdb4:	4249      	neglt	r1, r1
 801bdb6:	232d      	movlt	r3, #45	@ 0x2d
 801bdb8:	232b      	movge	r3, #43	@ 0x2b
 801bdba:	2909      	cmp	r1, #9
 801bdbc:	7002      	strb	r2, [r0, #0]
 801bdbe:	7043      	strb	r3, [r0, #1]
 801bdc0:	dd29      	ble.n	801be16 <__exponent+0x68>
 801bdc2:	f10d 0307 	add.w	r3, sp, #7
 801bdc6:	461d      	mov	r5, r3
 801bdc8:	270a      	movs	r7, #10
 801bdca:	461a      	mov	r2, r3
 801bdcc:	fbb1 f6f7 	udiv	r6, r1, r7
 801bdd0:	fb07 1416 	mls	r4, r7, r6, r1
 801bdd4:	3430      	adds	r4, #48	@ 0x30
 801bdd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 801bdda:	460c      	mov	r4, r1
 801bddc:	2c63      	cmp	r4, #99	@ 0x63
 801bdde:	f103 33ff 	add.w	r3, r3, #4294967295
 801bde2:	4631      	mov	r1, r6
 801bde4:	dcf1      	bgt.n	801bdca <__exponent+0x1c>
 801bde6:	3130      	adds	r1, #48	@ 0x30
 801bde8:	1e94      	subs	r4, r2, #2
 801bdea:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bdee:	1c41      	adds	r1, r0, #1
 801bdf0:	4623      	mov	r3, r4
 801bdf2:	42ab      	cmp	r3, r5
 801bdf4:	d30a      	bcc.n	801be0c <__exponent+0x5e>
 801bdf6:	f10d 0309 	add.w	r3, sp, #9
 801bdfa:	1a9b      	subs	r3, r3, r2
 801bdfc:	42ac      	cmp	r4, r5
 801bdfe:	bf88      	it	hi
 801be00:	2300      	movhi	r3, #0
 801be02:	3302      	adds	r3, #2
 801be04:	4403      	add	r3, r0
 801be06:	1a18      	subs	r0, r3, r0
 801be08:	b003      	add	sp, #12
 801be0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801be10:	f801 6f01 	strb.w	r6, [r1, #1]!
 801be14:	e7ed      	b.n	801bdf2 <__exponent+0x44>
 801be16:	2330      	movs	r3, #48	@ 0x30
 801be18:	3130      	adds	r1, #48	@ 0x30
 801be1a:	7083      	strb	r3, [r0, #2]
 801be1c:	70c1      	strb	r1, [r0, #3]
 801be1e:	1d03      	adds	r3, r0, #4
 801be20:	e7f1      	b.n	801be06 <__exponent+0x58>
	...

0801be24 <_printf_float>:
 801be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be28:	b08d      	sub	sp, #52	@ 0x34
 801be2a:	460c      	mov	r4, r1
 801be2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801be30:	4616      	mov	r6, r2
 801be32:	461f      	mov	r7, r3
 801be34:	4605      	mov	r5, r0
 801be36:	f000 fddf 	bl	801c9f8 <_localeconv_r>
 801be3a:	6803      	ldr	r3, [r0, #0]
 801be3c:	9304      	str	r3, [sp, #16]
 801be3e:	4618      	mov	r0, r3
 801be40:	f7e4 f9fe 	bl	8000240 <strlen>
 801be44:	2300      	movs	r3, #0
 801be46:	930a      	str	r3, [sp, #40]	@ 0x28
 801be48:	f8d8 3000 	ldr.w	r3, [r8]
 801be4c:	9005      	str	r0, [sp, #20]
 801be4e:	3307      	adds	r3, #7
 801be50:	f023 0307 	bic.w	r3, r3, #7
 801be54:	f103 0208 	add.w	r2, r3, #8
 801be58:	f894 a018 	ldrb.w	sl, [r4, #24]
 801be5c:	f8d4 b000 	ldr.w	fp, [r4]
 801be60:	f8c8 2000 	str.w	r2, [r8]
 801be64:	e9d3 8900 	ldrd	r8, r9, [r3]
 801be68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801be6c:	9307      	str	r3, [sp, #28]
 801be6e:	f8cd 8018 	str.w	r8, [sp, #24]
 801be72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801be76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801be7a:	4b9c      	ldr	r3, [pc, #624]	@ (801c0ec <_printf_float+0x2c8>)
 801be7c:	f04f 32ff 	mov.w	r2, #4294967295
 801be80:	f7e4 fe3c 	bl	8000afc <__aeabi_dcmpun>
 801be84:	bb70      	cbnz	r0, 801bee4 <_printf_float+0xc0>
 801be86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801be8a:	4b98      	ldr	r3, [pc, #608]	@ (801c0ec <_printf_float+0x2c8>)
 801be8c:	f04f 32ff 	mov.w	r2, #4294967295
 801be90:	f7e4 fe16 	bl	8000ac0 <__aeabi_dcmple>
 801be94:	bb30      	cbnz	r0, 801bee4 <_printf_float+0xc0>
 801be96:	2200      	movs	r2, #0
 801be98:	2300      	movs	r3, #0
 801be9a:	4640      	mov	r0, r8
 801be9c:	4649      	mov	r1, r9
 801be9e:	f7e4 fe05 	bl	8000aac <__aeabi_dcmplt>
 801bea2:	b110      	cbz	r0, 801beaa <_printf_float+0x86>
 801bea4:	232d      	movs	r3, #45	@ 0x2d
 801bea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801beaa:	4a91      	ldr	r2, [pc, #580]	@ (801c0f0 <_printf_float+0x2cc>)
 801beac:	4b91      	ldr	r3, [pc, #580]	@ (801c0f4 <_printf_float+0x2d0>)
 801beae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801beb2:	bf94      	ite	ls
 801beb4:	4690      	movls	r8, r2
 801beb6:	4698      	movhi	r8, r3
 801beb8:	2303      	movs	r3, #3
 801beba:	6123      	str	r3, [r4, #16]
 801bebc:	f02b 0304 	bic.w	r3, fp, #4
 801bec0:	6023      	str	r3, [r4, #0]
 801bec2:	f04f 0900 	mov.w	r9, #0
 801bec6:	9700      	str	r7, [sp, #0]
 801bec8:	4633      	mov	r3, r6
 801beca:	aa0b      	add	r2, sp, #44	@ 0x2c
 801becc:	4621      	mov	r1, r4
 801bece:	4628      	mov	r0, r5
 801bed0:	f000 f9d2 	bl	801c278 <_printf_common>
 801bed4:	3001      	adds	r0, #1
 801bed6:	f040 808d 	bne.w	801bff4 <_printf_float+0x1d0>
 801beda:	f04f 30ff 	mov.w	r0, #4294967295
 801bede:	b00d      	add	sp, #52	@ 0x34
 801bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bee4:	4642      	mov	r2, r8
 801bee6:	464b      	mov	r3, r9
 801bee8:	4640      	mov	r0, r8
 801beea:	4649      	mov	r1, r9
 801beec:	f7e4 fe06 	bl	8000afc <__aeabi_dcmpun>
 801bef0:	b140      	cbz	r0, 801bf04 <_printf_float+0xe0>
 801bef2:	464b      	mov	r3, r9
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	bfbc      	itt	lt
 801bef8:	232d      	movlt	r3, #45	@ 0x2d
 801befa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801befe:	4a7e      	ldr	r2, [pc, #504]	@ (801c0f8 <_printf_float+0x2d4>)
 801bf00:	4b7e      	ldr	r3, [pc, #504]	@ (801c0fc <_printf_float+0x2d8>)
 801bf02:	e7d4      	b.n	801beae <_printf_float+0x8a>
 801bf04:	6863      	ldr	r3, [r4, #4]
 801bf06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801bf0a:	9206      	str	r2, [sp, #24]
 801bf0c:	1c5a      	adds	r2, r3, #1
 801bf0e:	d13b      	bne.n	801bf88 <_printf_float+0x164>
 801bf10:	2306      	movs	r3, #6
 801bf12:	6063      	str	r3, [r4, #4]
 801bf14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801bf18:	2300      	movs	r3, #0
 801bf1a:	6022      	str	r2, [r4, #0]
 801bf1c:	9303      	str	r3, [sp, #12]
 801bf1e:	ab0a      	add	r3, sp, #40	@ 0x28
 801bf20:	e9cd a301 	strd	sl, r3, [sp, #4]
 801bf24:	ab09      	add	r3, sp, #36	@ 0x24
 801bf26:	9300      	str	r3, [sp, #0]
 801bf28:	6861      	ldr	r1, [r4, #4]
 801bf2a:	ec49 8b10 	vmov	d0, r8, r9
 801bf2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801bf32:	4628      	mov	r0, r5
 801bf34:	f7ff fed6 	bl	801bce4 <__cvt>
 801bf38:	9b06      	ldr	r3, [sp, #24]
 801bf3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bf3c:	2b47      	cmp	r3, #71	@ 0x47
 801bf3e:	4680      	mov	r8, r0
 801bf40:	d129      	bne.n	801bf96 <_printf_float+0x172>
 801bf42:	1cc8      	adds	r0, r1, #3
 801bf44:	db02      	blt.n	801bf4c <_printf_float+0x128>
 801bf46:	6863      	ldr	r3, [r4, #4]
 801bf48:	4299      	cmp	r1, r3
 801bf4a:	dd41      	ble.n	801bfd0 <_printf_float+0x1ac>
 801bf4c:	f1aa 0a02 	sub.w	sl, sl, #2
 801bf50:	fa5f fa8a 	uxtb.w	sl, sl
 801bf54:	3901      	subs	r1, #1
 801bf56:	4652      	mov	r2, sl
 801bf58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801bf5c:	9109      	str	r1, [sp, #36]	@ 0x24
 801bf5e:	f7ff ff26 	bl	801bdae <__exponent>
 801bf62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf64:	1813      	adds	r3, r2, r0
 801bf66:	2a01      	cmp	r2, #1
 801bf68:	4681      	mov	r9, r0
 801bf6a:	6123      	str	r3, [r4, #16]
 801bf6c:	dc02      	bgt.n	801bf74 <_printf_float+0x150>
 801bf6e:	6822      	ldr	r2, [r4, #0]
 801bf70:	07d2      	lsls	r2, r2, #31
 801bf72:	d501      	bpl.n	801bf78 <_printf_float+0x154>
 801bf74:	3301      	adds	r3, #1
 801bf76:	6123      	str	r3, [r4, #16]
 801bf78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d0a2      	beq.n	801bec6 <_printf_float+0xa2>
 801bf80:	232d      	movs	r3, #45	@ 0x2d
 801bf82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf86:	e79e      	b.n	801bec6 <_printf_float+0xa2>
 801bf88:	9a06      	ldr	r2, [sp, #24]
 801bf8a:	2a47      	cmp	r2, #71	@ 0x47
 801bf8c:	d1c2      	bne.n	801bf14 <_printf_float+0xf0>
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d1c0      	bne.n	801bf14 <_printf_float+0xf0>
 801bf92:	2301      	movs	r3, #1
 801bf94:	e7bd      	b.n	801bf12 <_printf_float+0xee>
 801bf96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801bf9a:	d9db      	bls.n	801bf54 <_printf_float+0x130>
 801bf9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801bfa0:	d118      	bne.n	801bfd4 <_printf_float+0x1b0>
 801bfa2:	2900      	cmp	r1, #0
 801bfa4:	6863      	ldr	r3, [r4, #4]
 801bfa6:	dd0b      	ble.n	801bfc0 <_printf_float+0x19c>
 801bfa8:	6121      	str	r1, [r4, #16]
 801bfaa:	b913      	cbnz	r3, 801bfb2 <_printf_float+0x18e>
 801bfac:	6822      	ldr	r2, [r4, #0]
 801bfae:	07d0      	lsls	r0, r2, #31
 801bfb0:	d502      	bpl.n	801bfb8 <_printf_float+0x194>
 801bfb2:	3301      	adds	r3, #1
 801bfb4:	440b      	add	r3, r1
 801bfb6:	6123      	str	r3, [r4, #16]
 801bfb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801bfba:	f04f 0900 	mov.w	r9, #0
 801bfbe:	e7db      	b.n	801bf78 <_printf_float+0x154>
 801bfc0:	b913      	cbnz	r3, 801bfc8 <_printf_float+0x1a4>
 801bfc2:	6822      	ldr	r2, [r4, #0]
 801bfc4:	07d2      	lsls	r2, r2, #31
 801bfc6:	d501      	bpl.n	801bfcc <_printf_float+0x1a8>
 801bfc8:	3302      	adds	r3, #2
 801bfca:	e7f4      	b.n	801bfb6 <_printf_float+0x192>
 801bfcc:	2301      	movs	r3, #1
 801bfce:	e7f2      	b.n	801bfb6 <_printf_float+0x192>
 801bfd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801bfd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bfd6:	4299      	cmp	r1, r3
 801bfd8:	db05      	blt.n	801bfe6 <_printf_float+0x1c2>
 801bfda:	6823      	ldr	r3, [r4, #0]
 801bfdc:	6121      	str	r1, [r4, #16]
 801bfde:	07d8      	lsls	r0, r3, #31
 801bfe0:	d5ea      	bpl.n	801bfb8 <_printf_float+0x194>
 801bfe2:	1c4b      	adds	r3, r1, #1
 801bfe4:	e7e7      	b.n	801bfb6 <_printf_float+0x192>
 801bfe6:	2900      	cmp	r1, #0
 801bfe8:	bfd4      	ite	le
 801bfea:	f1c1 0202 	rsble	r2, r1, #2
 801bfee:	2201      	movgt	r2, #1
 801bff0:	4413      	add	r3, r2
 801bff2:	e7e0      	b.n	801bfb6 <_printf_float+0x192>
 801bff4:	6823      	ldr	r3, [r4, #0]
 801bff6:	055a      	lsls	r2, r3, #21
 801bff8:	d407      	bmi.n	801c00a <_printf_float+0x1e6>
 801bffa:	6923      	ldr	r3, [r4, #16]
 801bffc:	4642      	mov	r2, r8
 801bffe:	4631      	mov	r1, r6
 801c000:	4628      	mov	r0, r5
 801c002:	47b8      	blx	r7
 801c004:	3001      	adds	r0, #1
 801c006:	d12b      	bne.n	801c060 <_printf_float+0x23c>
 801c008:	e767      	b.n	801beda <_printf_float+0xb6>
 801c00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c00e:	f240 80dd 	bls.w	801c1cc <_printf_float+0x3a8>
 801c012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c016:	2200      	movs	r2, #0
 801c018:	2300      	movs	r3, #0
 801c01a:	f7e4 fd3d 	bl	8000a98 <__aeabi_dcmpeq>
 801c01e:	2800      	cmp	r0, #0
 801c020:	d033      	beq.n	801c08a <_printf_float+0x266>
 801c022:	4a37      	ldr	r2, [pc, #220]	@ (801c100 <_printf_float+0x2dc>)
 801c024:	2301      	movs	r3, #1
 801c026:	4631      	mov	r1, r6
 801c028:	4628      	mov	r0, r5
 801c02a:	47b8      	blx	r7
 801c02c:	3001      	adds	r0, #1
 801c02e:	f43f af54 	beq.w	801beda <_printf_float+0xb6>
 801c032:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801c036:	4543      	cmp	r3, r8
 801c038:	db02      	blt.n	801c040 <_printf_float+0x21c>
 801c03a:	6823      	ldr	r3, [r4, #0]
 801c03c:	07d8      	lsls	r0, r3, #31
 801c03e:	d50f      	bpl.n	801c060 <_printf_float+0x23c>
 801c040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c044:	4631      	mov	r1, r6
 801c046:	4628      	mov	r0, r5
 801c048:	47b8      	blx	r7
 801c04a:	3001      	adds	r0, #1
 801c04c:	f43f af45 	beq.w	801beda <_printf_float+0xb6>
 801c050:	f04f 0900 	mov.w	r9, #0
 801c054:	f108 38ff 	add.w	r8, r8, #4294967295
 801c058:	f104 0a1a 	add.w	sl, r4, #26
 801c05c:	45c8      	cmp	r8, r9
 801c05e:	dc09      	bgt.n	801c074 <_printf_float+0x250>
 801c060:	6823      	ldr	r3, [r4, #0]
 801c062:	079b      	lsls	r3, r3, #30
 801c064:	f100 8103 	bmi.w	801c26e <_printf_float+0x44a>
 801c068:	68e0      	ldr	r0, [r4, #12]
 801c06a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c06c:	4298      	cmp	r0, r3
 801c06e:	bfb8      	it	lt
 801c070:	4618      	movlt	r0, r3
 801c072:	e734      	b.n	801bede <_printf_float+0xba>
 801c074:	2301      	movs	r3, #1
 801c076:	4652      	mov	r2, sl
 801c078:	4631      	mov	r1, r6
 801c07a:	4628      	mov	r0, r5
 801c07c:	47b8      	blx	r7
 801c07e:	3001      	adds	r0, #1
 801c080:	f43f af2b 	beq.w	801beda <_printf_float+0xb6>
 801c084:	f109 0901 	add.w	r9, r9, #1
 801c088:	e7e8      	b.n	801c05c <_printf_float+0x238>
 801c08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	dc39      	bgt.n	801c104 <_printf_float+0x2e0>
 801c090:	4a1b      	ldr	r2, [pc, #108]	@ (801c100 <_printf_float+0x2dc>)
 801c092:	2301      	movs	r3, #1
 801c094:	4631      	mov	r1, r6
 801c096:	4628      	mov	r0, r5
 801c098:	47b8      	blx	r7
 801c09a:	3001      	adds	r0, #1
 801c09c:	f43f af1d 	beq.w	801beda <_printf_float+0xb6>
 801c0a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801c0a4:	ea59 0303 	orrs.w	r3, r9, r3
 801c0a8:	d102      	bne.n	801c0b0 <_printf_float+0x28c>
 801c0aa:	6823      	ldr	r3, [r4, #0]
 801c0ac:	07d9      	lsls	r1, r3, #31
 801c0ae:	d5d7      	bpl.n	801c060 <_printf_float+0x23c>
 801c0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c0b4:	4631      	mov	r1, r6
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	47b8      	blx	r7
 801c0ba:	3001      	adds	r0, #1
 801c0bc:	f43f af0d 	beq.w	801beda <_printf_float+0xb6>
 801c0c0:	f04f 0a00 	mov.w	sl, #0
 801c0c4:	f104 0b1a 	add.w	fp, r4, #26
 801c0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0ca:	425b      	negs	r3, r3
 801c0cc:	4553      	cmp	r3, sl
 801c0ce:	dc01      	bgt.n	801c0d4 <_printf_float+0x2b0>
 801c0d0:	464b      	mov	r3, r9
 801c0d2:	e793      	b.n	801bffc <_printf_float+0x1d8>
 801c0d4:	2301      	movs	r3, #1
 801c0d6:	465a      	mov	r2, fp
 801c0d8:	4631      	mov	r1, r6
 801c0da:	4628      	mov	r0, r5
 801c0dc:	47b8      	blx	r7
 801c0de:	3001      	adds	r0, #1
 801c0e0:	f43f aefb 	beq.w	801beda <_printf_float+0xb6>
 801c0e4:	f10a 0a01 	add.w	sl, sl, #1
 801c0e8:	e7ee      	b.n	801c0c8 <_printf_float+0x2a4>
 801c0ea:	bf00      	nop
 801c0ec:	7fefffff 	.word	0x7fefffff
 801c0f0:	08020c68 	.word	0x08020c68
 801c0f4:	08020c6c 	.word	0x08020c6c
 801c0f8:	08020c70 	.word	0x08020c70
 801c0fc:	08020c74 	.word	0x08020c74
 801c100:	08020c78 	.word	0x08020c78
 801c104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c106:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c10a:	4553      	cmp	r3, sl
 801c10c:	bfa8      	it	ge
 801c10e:	4653      	movge	r3, sl
 801c110:	2b00      	cmp	r3, #0
 801c112:	4699      	mov	r9, r3
 801c114:	dc36      	bgt.n	801c184 <_printf_float+0x360>
 801c116:	f04f 0b00 	mov.w	fp, #0
 801c11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c11e:	f104 021a 	add.w	r2, r4, #26
 801c122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c124:	9306      	str	r3, [sp, #24]
 801c126:	eba3 0309 	sub.w	r3, r3, r9
 801c12a:	455b      	cmp	r3, fp
 801c12c:	dc31      	bgt.n	801c192 <_printf_float+0x36e>
 801c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c130:	459a      	cmp	sl, r3
 801c132:	dc3a      	bgt.n	801c1aa <_printf_float+0x386>
 801c134:	6823      	ldr	r3, [r4, #0]
 801c136:	07da      	lsls	r2, r3, #31
 801c138:	d437      	bmi.n	801c1aa <_printf_float+0x386>
 801c13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c13c:	ebaa 0903 	sub.w	r9, sl, r3
 801c140:	9b06      	ldr	r3, [sp, #24]
 801c142:	ebaa 0303 	sub.w	r3, sl, r3
 801c146:	4599      	cmp	r9, r3
 801c148:	bfa8      	it	ge
 801c14a:	4699      	movge	r9, r3
 801c14c:	f1b9 0f00 	cmp.w	r9, #0
 801c150:	dc33      	bgt.n	801c1ba <_printf_float+0x396>
 801c152:	f04f 0800 	mov.w	r8, #0
 801c156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c15a:	f104 0b1a 	add.w	fp, r4, #26
 801c15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c160:	ebaa 0303 	sub.w	r3, sl, r3
 801c164:	eba3 0309 	sub.w	r3, r3, r9
 801c168:	4543      	cmp	r3, r8
 801c16a:	f77f af79 	ble.w	801c060 <_printf_float+0x23c>
 801c16e:	2301      	movs	r3, #1
 801c170:	465a      	mov	r2, fp
 801c172:	4631      	mov	r1, r6
 801c174:	4628      	mov	r0, r5
 801c176:	47b8      	blx	r7
 801c178:	3001      	adds	r0, #1
 801c17a:	f43f aeae 	beq.w	801beda <_printf_float+0xb6>
 801c17e:	f108 0801 	add.w	r8, r8, #1
 801c182:	e7ec      	b.n	801c15e <_printf_float+0x33a>
 801c184:	4642      	mov	r2, r8
 801c186:	4631      	mov	r1, r6
 801c188:	4628      	mov	r0, r5
 801c18a:	47b8      	blx	r7
 801c18c:	3001      	adds	r0, #1
 801c18e:	d1c2      	bne.n	801c116 <_printf_float+0x2f2>
 801c190:	e6a3      	b.n	801beda <_printf_float+0xb6>
 801c192:	2301      	movs	r3, #1
 801c194:	4631      	mov	r1, r6
 801c196:	4628      	mov	r0, r5
 801c198:	9206      	str	r2, [sp, #24]
 801c19a:	47b8      	blx	r7
 801c19c:	3001      	adds	r0, #1
 801c19e:	f43f ae9c 	beq.w	801beda <_printf_float+0xb6>
 801c1a2:	9a06      	ldr	r2, [sp, #24]
 801c1a4:	f10b 0b01 	add.w	fp, fp, #1
 801c1a8:	e7bb      	b.n	801c122 <_printf_float+0x2fe>
 801c1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1ae:	4631      	mov	r1, r6
 801c1b0:	4628      	mov	r0, r5
 801c1b2:	47b8      	blx	r7
 801c1b4:	3001      	adds	r0, #1
 801c1b6:	d1c0      	bne.n	801c13a <_printf_float+0x316>
 801c1b8:	e68f      	b.n	801beda <_printf_float+0xb6>
 801c1ba:	9a06      	ldr	r2, [sp, #24]
 801c1bc:	464b      	mov	r3, r9
 801c1be:	4442      	add	r2, r8
 801c1c0:	4631      	mov	r1, r6
 801c1c2:	4628      	mov	r0, r5
 801c1c4:	47b8      	blx	r7
 801c1c6:	3001      	adds	r0, #1
 801c1c8:	d1c3      	bne.n	801c152 <_printf_float+0x32e>
 801c1ca:	e686      	b.n	801beda <_printf_float+0xb6>
 801c1cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801c1d0:	f1ba 0f01 	cmp.w	sl, #1
 801c1d4:	dc01      	bgt.n	801c1da <_printf_float+0x3b6>
 801c1d6:	07db      	lsls	r3, r3, #31
 801c1d8:	d536      	bpl.n	801c248 <_printf_float+0x424>
 801c1da:	2301      	movs	r3, #1
 801c1dc:	4642      	mov	r2, r8
 801c1de:	4631      	mov	r1, r6
 801c1e0:	4628      	mov	r0, r5
 801c1e2:	47b8      	blx	r7
 801c1e4:	3001      	adds	r0, #1
 801c1e6:	f43f ae78 	beq.w	801beda <_printf_float+0xb6>
 801c1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1ee:	4631      	mov	r1, r6
 801c1f0:	4628      	mov	r0, r5
 801c1f2:	47b8      	blx	r7
 801c1f4:	3001      	adds	r0, #1
 801c1f6:	f43f ae70 	beq.w	801beda <_printf_float+0xb6>
 801c1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c1fe:	2200      	movs	r2, #0
 801c200:	2300      	movs	r3, #0
 801c202:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c206:	f7e4 fc47 	bl	8000a98 <__aeabi_dcmpeq>
 801c20a:	b9c0      	cbnz	r0, 801c23e <_printf_float+0x41a>
 801c20c:	4653      	mov	r3, sl
 801c20e:	f108 0201 	add.w	r2, r8, #1
 801c212:	4631      	mov	r1, r6
 801c214:	4628      	mov	r0, r5
 801c216:	47b8      	blx	r7
 801c218:	3001      	adds	r0, #1
 801c21a:	d10c      	bne.n	801c236 <_printf_float+0x412>
 801c21c:	e65d      	b.n	801beda <_printf_float+0xb6>
 801c21e:	2301      	movs	r3, #1
 801c220:	465a      	mov	r2, fp
 801c222:	4631      	mov	r1, r6
 801c224:	4628      	mov	r0, r5
 801c226:	47b8      	blx	r7
 801c228:	3001      	adds	r0, #1
 801c22a:	f43f ae56 	beq.w	801beda <_printf_float+0xb6>
 801c22e:	f108 0801 	add.w	r8, r8, #1
 801c232:	45d0      	cmp	r8, sl
 801c234:	dbf3      	blt.n	801c21e <_printf_float+0x3fa>
 801c236:	464b      	mov	r3, r9
 801c238:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c23c:	e6df      	b.n	801bffe <_printf_float+0x1da>
 801c23e:	f04f 0800 	mov.w	r8, #0
 801c242:	f104 0b1a 	add.w	fp, r4, #26
 801c246:	e7f4      	b.n	801c232 <_printf_float+0x40e>
 801c248:	2301      	movs	r3, #1
 801c24a:	4642      	mov	r2, r8
 801c24c:	e7e1      	b.n	801c212 <_printf_float+0x3ee>
 801c24e:	2301      	movs	r3, #1
 801c250:	464a      	mov	r2, r9
 801c252:	4631      	mov	r1, r6
 801c254:	4628      	mov	r0, r5
 801c256:	47b8      	blx	r7
 801c258:	3001      	adds	r0, #1
 801c25a:	f43f ae3e 	beq.w	801beda <_printf_float+0xb6>
 801c25e:	f108 0801 	add.w	r8, r8, #1
 801c262:	68e3      	ldr	r3, [r4, #12]
 801c264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c266:	1a5b      	subs	r3, r3, r1
 801c268:	4543      	cmp	r3, r8
 801c26a:	dcf0      	bgt.n	801c24e <_printf_float+0x42a>
 801c26c:	e6fc      	b.n	801c068 <_printf_float+0x244>
 801c26e:	f04f 0800 	mov.w	r8, #0
 801c272:	f104 0919 	add.w	r9, r4, #25
 801c276:	e7f4      	b.n	801c262 <_printf_float+0x43e>

0801c278 <_printf_common>:
 801c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c27c:	4616      	mov	r6, r2
 801c27e:	4698      	mov	r8, r3
 801c280:	688a      	ldr	r2, [r1, #8]
 801c282:	690b      	ldr	r3, [r1, #16]
 801c284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c288:	4293      	cmp	r3, r2
 801c28a:	bfb8      	it	lt
 801c28c:	4613      	movlt	r3, r2
 801c28e:	6033      	str	r3, [r6, #0]
 801c290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c294:	4607      	mov	r7, r0
 801c296:	460c      	mov	r4, r1
 801c298:	b10a      	cbz	r2, 801c29e <_printf_common+0x26>
 801c29a:	3301      	adds	r3, #1
 801c29c:	6033      	str	r3, [r6, #0]
 801c29e:	6823      	ldr	r3, [r4, #0]
 801c2a0:	0699      	lsls	r1, r3, #26
 801c2a2:	bf42      	ittt	mi
 801c2a4:	6833      	ldrmi	r3, [r6, #0]
 801c2a6:	3302      	addmi	r3, #2
 801c2a8:	6033      	strmi	r3, [r6, #0]
 801c2aa:	6825      	ldr	r5, [r4, #0]
 801c2ac:	f015 0506 	ands.w	r5, r5, #6
 801c2b0:	d106      	bne.n	801c2c0 <_printf_common+0x48>
 801c2b2:	f104 0a19 	add.w	sl, r4, #25
 801c2b6:	68e3      	ldr	r3, [r4, #12]
 801c2b8:	6832      	ldr	r2, [r6, #0]
 801c2ba:	1a9b      	subs	r3, r3, r2
 801c2bc:	42ab      	cmp	r3, r5
 801c2be:	dc26      	bgt.n	801c30e <_printf_common+0x96>
 801c2c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c2c4:	6822      	ldr	r2, [r4, #0]
 801c2c6:	3b00      	subs	r3, #0
 801c2c8:	bf18      	it	ne
 801c2ca:	2301      	movne	r3, #1
 801c2cc:	0692      	lsls	r2, r2, #26
 801c2ce:	d42b      	bmi.n	801c328 <_printf_common+0xb0>
 801c2d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c2d4:	4641      	mov	r1, r8
 801c2d6:	4638      	mov	r0, r7
 801c2d8:	47c8      	blx	r9
 801c2da:	3001      	adds	r0, #1
 801c2dc:	d01e      	beq.n	801c31c <_printf_common+0xa4>
 801c2de:	6823      	ldr	r3, [r4, #0]
 801c2e0:	6922      	ldr	r2, [r4, #16]
 801c2e2:	f003 0306 	and.w	r3, r3, #6
 801c2e6:	2b04      	cmp	r3, #4
 801c2e8:	bf02      	ittt	eq
 801c2ea:	68e5      	ldreq	r5, [r4, #12]
 801c2ec:	6833      	ldreq	r3, [r6, #0]
 801c2ee:	1aed      	subeq	r5, r5, r3
 801c2f0:	68a3      	ldr	r3, [r4, #8]
 801c2f2:	bf0c      	ite	eq
 801c2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c2f8:	2500      	movne	r5, #0
 801c2fa:	4293      	cmp	r3, r2
 801c2fc:	bfc4      	itt	gt
 801c2fe:	1a9b      	subgt	r3, r3, r2
 801c300:	18ed      	addgt	r5, r5, r3
 801c302:	2600      	movs	r6, #0
 801c304:	341a      	adds	r4, #26
 801c306:	42b5      	cmp	r5, r6
 801c308:	d11a      	bne.n	801c340 <_printf_common+0xc8>
 801c30a:	2000      	movs	r0, #0
 801c30c:	e008      	b.n	801c320 <_printf_common+0xa8>
 801c30e:	2301      	movs	r3, #1
 801c310:	4652      	mov	r2, sl
 801c312:	4641      	mov	r1, r8
 801c314:	4638      	mov	r0, r7
 801c316:	47c8      	blx	r9
 801c318:	3001      	adds	r0, #1
 801c31a:	d103      	bne.n	801c324 <_printf_common+0xac>
 801c31c:	f04f 30ff 	mov.w	r0, #4294967295
 801c320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c324:	3501      	adds	r5, #1
 801c326:	e7c6      	b.n	801c2b6 <_printf_common+0x3e>
 801c328:	18e1      	adds	r1, r4, r3
 801c32a:	1c5a      	adds	r2, r3, #1
 801c32c:	2030      	movs	r0, #48	@ 0x30
 801c32e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c332:	4422      	add	r2, r4
 801c334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c33c:	3302      	adds	r3, #2
 801c33e:	e7c7      	b.n	801c2d0 <_printf_common+0x58>
 801c340:	2301      	movs	r3, #1
 801c342:	4622      	mov	r2, r4
 801c344:	4641      	mov	r1, r8
 801c346:	4638      	mov	r0, r7
 801c348:	47c8      	blx	r9
 801c34a:	3001      	adds	r0, #1
 801c34c:	d0e6      	beq.n	801c31c <_printf_common+0xa4>
 801c34e:	3601      	adds	r6, #1
 801c350:	e7d9      	b.n	801c306 <_printf_common+0x8e>
	...

0801c354 <_printf_i>:
 801c354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c358:	7e0f      	ldrb	r7, [r1, #24]
 801c35a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c35c:	2f78      	cmp	r7, #120	@ 0x78
 801c35e:	4691      	mov	r9, r2
 801c360:	4680      	mov	r8, r0
 801c362:	460c      	mov	r4, r1
 801c364:	469a      	mov	sl, r3
 801c366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c36a:	d807      	bhi.n	801c37c <_printf_i+0x28>
 801c36c:	2f62      	cmp	r7, #98	@ 0x62
 801c36e:	d80a      	bhi.n	801c386 <_printf_i+0x32>
 801c370:	2f00      	cmp	r7, #0
 801c372:	f000 80d2 	beq.w	801c51a <_printf_i+0x1c6>
 801c376:	2f58      	cmp	r7, #88	@ 0x58
 801c378:	f000 80b9 	beq.w	801c4ee <_printf_i+0x19a>
 801c37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c384:	e03a      	b.n	801c3fc <_printf_i+0xa8>
 801c386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c38a:	2b15      	cmp	r3, #21
 801c38c:	d8f6      	bhi.n	801c37c <_printf_i+0x28>
 801c38e:	a101      	add	r1, pc, #4	@ (adr r1, 801c394 <_printf_i+0x40>)
 801c390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c394:	0801c3ed 	.word	0x0801c3ed
 801c398:	0801c401 	.word	0x0801c401
 801c39c:	0801c37d 	.word	0x0801c37d
 801c3a0:	0801c37d 	.word	0x0801c37d
 801c3a4:	0801c37d 	.word	0x0801c37d
 801c3a8:	0801c37d 	.word	0x0801c37d
 801c3ac:	0801c401 	.word	0x0801c401
 801c3b0:	0801c37d 	.word	0x0801c37d
 801c3b4:	0801c37d 	.word	0x0801c37d
 801c3b8:	0801c37d 	.word	0x0801c37d
 801c3bc:	0801c37d 	.word	0x0801c37d
 801c3c0:	0801c501 	.word	0x0801c501
 801c3c4:	0801c42b 	.word	0x0801c42b
 801c3c8:	0801c4bb 	.word	0x0801c4bb
 801c3cc:	0801c37d 	.word	0x0801c37d
 801c3d0:	0801c37d 	.word	0x0801c37d
 801c3d4:	0801c523 	.word	0x0801c523
 801c3d8:	0801c37d 	.word	0x0801c37d
 801c3dc:	0801c42b 	.word	0x0801c42b
 801c3e0:	0801c37d 	.word	0x0801c37d
 801c3e4:	0801c37d 	.word	0x0801c37d
 801c3e8:	0801c4c3 	.word	0x0801c4c3
 801c3ec:	6833      	ldr	r3, [r6, #0]
 801c3ee:	1d1a      	adds	r2, r3, #4
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	6032      	str	r2, [r6, #0]
 801c3f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c3f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	e09d      	b.n	801c53c <_printf_i+0x1e8>
 801c400:	6833      	ldr	r3, [r6, #0]
 801c402:	6820      	ldr	r0, [r4, #0]
 801c404:	1d19      	adds	r1, r3, #4
 801c406:	6031      	str	r1, [r6, #0]
 801c408:	0606      	lsls	r6, r0, #24
 801c40a:	d501      	bpl.n	801c410 <_printf_i+0xbc>
 801c40c:	681d      	ldr	r5, [r3, #0]
 801c40e:	e003      	b.n	801c418 <_printf_i+0xc4>
 801c410:	0645      	lsls	r5, r0, #25
 801c412:	d5fb      	bpl.n	801c40c <_printf_i+0xb8>
 801c414:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c418:	2d00      	cmp	r5, #0
 801c41a:	da03      	bge.n	801c424 <_printf_i+0xd0>
 801c41c:	232d      	movs	r3, #45	@ 0x2d
 801c41e:	426d      	negs	r5, r5
 801c420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c424:	4859      	ldr	r0, [pc, #356]	@ (801c58c <_printf_i+0x238>)
 801c426:	230a      	movs	r3, #10
 801c428:	e011      	b.n	801c44e <_printf_i+0xfa>
 801c42a:	6821      	ldr	r1, [r4, #0]
 801c42c:	6833      	ldr	r3, [r6, #0]
 801c42e:	0608      	lsls	r0, r1, #24
 801c430:	f853 5b04 	ldr.w	r5, [r3], #4
 801c434:	d402      	bmi.n	801c43c <_printf_i+0xe8>
 801c436:	0649      	lsls	r1, r1, #25
 801c438:	bf48      	it	mi
 801c43a:	b2ad      	uxthmi	r5, r5
 801c43c:	2f6f      	cmp	r7, #111	@ 0x6f
 801c43e:	4853      	ldr	r0, [pc, #332]	@ (801c58c <_printf_i+0x238>)
 801c440:	6033      	str	r3, [r6, #0]
 801c442:	bf14      	ite	ne
 801c444:	230a      	movne	r3, #10
 801c446:	2308      	moveq	r3, #8
 801c448:	2100      	movs	r1, #0
 801c44a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c44e:	6866      	ldr	r6, [r4, #4]
 801c450:	60a6      	str	r6, [r4, #8]
 801c452:	2e00      	cmp	r6, #0
 801c454:	bfa2      	ittt	ge
 801c456:	6821      	ldrge	r1, [r4, #0]
 801c458:	f021 0104 	bicge.w	r1, r1, #4
 801c45c:	6021      	strge	r1, [r4, #0]
 801c45e:	b90d      	cbnz	r5, 801c464 <_printf_i+0x110>
 801c460:	2e00      	cmp	r6, #0
 801c462:	d04b      	beq.n	801c4fc <_printf_i+0x1a8>
 801c464:	4616      	mov	r6, r2
 801c466:	fbb5 f1f3 	udiv	r1, r5, r3
 801c46a:	fb03 5711 	mls	r7, r3, r1, r5
 801c46e:	5dc7      	ldrb	r7, [r0, r7]
 801c470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c474:	462f      	mov	r7, r5
 801c476:	42bb      	cmp	r3, r7
 801c478:	460d      	mov	r5, r1
 801c47a:	d9f4      	bls.n	801c466 <_printf_i+0x112>
 801c47c:	2b08      	cmp	r3, #8
 801c47e:	d10b      	bne.n	801c498 <_printf_i+0x144>
 801c480:	6823      	ldr	r3, [r4, #0]
 801c482:	07df      	lsls	r7, r3, #31
 801c484:	d508      	bpl.n	801c498 <_printf_i+0x144>
 801c486:	6923      	ldr	r3, [r4, #16]
 801c488:	6861      	ldr	r1, [r4, #4]
 801c48a:	4299      	cmp	r1, r3
 801c48c:	bfde      	ittt	le
 801c48e:	2330      	movle	r3, #48	@ 0x30
 801c490:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c494:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c498:	1b92      	subs	r2, r2, r6
 801c49a:	6122      	str	r2, [r4, #16]
 801c49c:	f8cd a000 	str.w	sl, [sp]
 801c4a0:	464b      	mov	r3, r9
 801c4a2:	aa03      	add	r2, sp, #12
 801c4a4:	4621      	mov	r1, r4
 801c4a6:	4640      	mov	r0, r8
 801c4a8:	f7ff fee6 	bl	801c278 <_printf_common>
 801c4ac:	3001      	adds	r0, #1
 801c4ae:	d14a      	bne.n	801c546 <_printf_i+0x1f2>
 801c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 801c4b4:	b004      	add	sp, #16
 801c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4ba:	6823      	ldr	r3, [r4, #0]
 801c4bc:	f043 0320 	orr.w	r3, r3, #32
 801c4c0:	6023      	str	r3, [r4, #0]
 801c4c2:	4833      	ldr	r0, [pc, #204]	@ (801c590 <_printf_i+0x23c>)
 801c4c4:	2778      	movs	r7, #120	@ 0x78
 801c4c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c4ca:	6823      	ldr	r3, [r4, #0]
 801c4cc:	6831      	ldr	r1, [r6, #0]
 801c4ce:	061f      	lsls	r7, r3, #24
 801c4d0:	f851 5b04 	ldr.w	r5, [r1], #4
 801c4d4:	d402      	bmi.n	801c4dc <_printf_i+0x188>
 801c4d6:	065f      	lsls	r7, r3, #25
 801c4d8:	bf48      	it	mi
 801c4da:	b2ad      	uxthmi	r5, r5
 801c4dc:	6031      	str	r1, [r6, #0]
 801c4de:	07d9      	lsls	r1, r3, #31
 801c4e0:	bf44      	itt	mi
 801c4e2:	f043 0320 	orrmi.w	r3, r3, #32
 801c4e6:	6023      	strmi	r3, [r4, #0]
 801c4e8:	b11d      	cbz	r5, 801c4f2 <_printf_i+0x19e>
 801c4ea:	2310      	movs	r3, #16
 801c4ec:	e7ac      	b.n	801c448 <_printf_i+0xf4>
 801c4ee:	4827      	ldr	r0, [pc, #156]	@ (801c58c <_printf_i+0x238>)
 801c4f0:	e7e9      	b.n	801c4c6 <_printf_i+0x172>
 801c4f2:	6823      	ldr	r3, [r4, #0]
 801c4f4:	f023 0320 	bic.w	r3, r3, #32
 801c4f8:	6023      	str	r3, [r4, #0]
 801c4fa:	e7f6      	b.n	801c4ea <_printf_i+0x196>
 801c4fc:	4616      	mov	r6, r2
 801c4fe:	e7bd      	b.n	801c47c <_printf_i+0x128>
 801c500:	6833      	ldr	r3, [r6, #0]
 801c502:	6825      	ldr	r5, [r4, #0]
 801c504:	6961      	ldr	r1, [r4, #20]
 801c506:	1d18      	adds	r0, r3, #4
 801c508:	6030      	str	r0, [r6, #0]
 801c50a:	062e      	lsls	r6, r5, #24
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	d501      	bpl.n	801c514 <_printf_i+0x1c0>
 801c510:	6019      	str	r1, [r3, #0]
 801c512:	e002      	b.n	801c51a <_printf_i+0x1c6>
 801c514:	0668      	lsls	r0, r5, #25
 801c516:	d5fb      	bpl.n	801c510 <_printf_i+0x1bc>
 801c518:	8019      	strh	r1, [r3, #0]
 801c51a:	2300      	movs	r3, #0
 801c51c:	6123      	str	r3, [r4, #16]
 801c51e:	4616      	mov	r6, r2
 801c520:	e7bc      	b.n	801c49c <_printf_i+0x148>
 801c522:	6833      	ldr	r3, [r6, #0]
 801c524:	1d1a      	adds	r2, r3, #4
 801c526:	6032      	str	r2, [r6, #0]
 801c528:	681e      	ldr	r6, [r3, #0]
 801c52a:	6862      	ldr	r2, [r4, #4]
 801c52c:	2100      	movs	r1, #0
 801c52e:	4630      	mov	r0, r6
 801c530:	f7e3 fe36 	bl	80001a0 <memchr>
 801c534:	b108      	cbz	r0, 801c53a <_printf_i+0x1e6>
 801c536:	1b80      	subs	r0, r0, r6
 801c538:	6060      	str	r0, [r4, #4]
 801c53a:	6863      	ldr	r3, [r4, #4]
 801c53c:	6123      	str	r3, [r4, #16]
 801c53e:	2300      	movs	r3, #0
 801c540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c544:	e7aa      	b.n	801c49c <_printf_i+0x148>
 801c546:	6923      	ldr	r3, [r4, #16]
 801c548:	4632      	mov	r2, r6
 801c54a:	4649      	mov	r1, r9
 801c54c:	4640      	mov	r0, r8
 801c54e:	47d0      	blx	sl
 801c550:	3001      	adds	r0, #1
 801c552:	d0ad      	beq.n	801c4b0 <_printf_i+0x15c>
 801c554:	6823      	ldr	r3, [r4, #0]
 801c556:	079b      	lsls	r3, r3, #30
 801c558:	d413      	bmi.n	801c582 <_printf_i+0x22e>
 801c55a:	68e0      	ldr	r0, [r4, #12]
 801c55c:	9b03      	ldr	r3, [sp, #12]
 801c55e:	4298      	cmp	r0, r3
 801c560:	bfb8      	it	lt
 801c562:	4618      	movlt	r0, r3
 801c564:	e7a6      	b.n	801c4b4 <_printf_i+0x160>
 801c566:	2301      	movs	r3, #1
 801c568:	4632      	mov	r2, r6
 801c56a:	4649      	mov	r1, r9
 801c56c:	4640      	mov	r0, r8
 801c56e:	47d0      	blx	sl
 801c570:	3001      	adds	r0, #1
 801c572:	d09d      	beq.n	801c4b0 <_printf_i+0x15c>
 801c574:	3501      	adds	r5, #1
 801c576:	68e3      	ldr	r3, [r4, #12]
 801c578:	9903      	ldr	r1, [sp, #12]
 801c57a:	1a5b      	subs	r3, r3, r1
 801c57c:	42ab      	cmp	r3, r5
 801c57e:	dcf2      	bgt.n	801c566 <_printf_i+0x212>
 801c580:	e7eb      	b.n	801c55a <_printf_i+0x206>
 801c582:	2500      	movs	r5, #0
 801c584:	f104 0619 	add.w	r6, r4, #25
 801c588:	e7f5      	b.n	801c576 <_printf_i+0x222>
 801c58a:	bf00      	nop
 801c58c:	08020c7a 	.word	0x08020c7a
 801c590:	08020c8b 	.word	0x08020c8b

0801c594 <std>:
 801c594:	2300      	movs	r3, #0
 801c596:	b510      	push	{r4, lr}
 801c598:	4604      	mov	r4, r0
 801c59a:	e9c0 3300 	strd	r3, r3, [r0]
 801c59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c5a2:	6083      	str	r3, [r0, #8]
 801c5a4:	8181      	strh	r1, [r0, #12]
 801c5a6:	6643      	str	r3, [r0, #100]	@ 0x64
 801c5a8:	81c2      	strh	r2, [r0, #14]
 801c5aa:	6183      	str	r3, [r0, #24]
 801c5ac:	4619      	mov	r1, r3
 801c5ae:	2208      	movs	r2, #8
 801c5b0:	305c      	adds	r0, #92	@ 0x5c
 801c5b2:	f000 fa19 	bl	801c9e8 <memset>
 801c5b6:	4b0d      	ldr	r3, [pc, #52]	@ (801c5ec <std+0x58>)
 801c5b8:	6263      	str	r3, [r4, #36]	@ 0x24
 801c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (801c5f0 <std+0x5c>)
 801c5bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c5be:	4b0d      	ldr	r3, [pc, #52]	@ (801c5f4 <std+0x60>)
 801c5c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c5c2:	4b0d      	ldr	r3, [pc, #52]	@ (801c5f8 <std+0x64>)
 801c5c4:	6323      	str	r3, [r4, #48]	@ 0x30
 801c5c6:	4b0d      	ldr	r3, [pc, #52]	@ (801c5fc <std+0x68>)
 801c5c8:	6224      	str	r4, [r4, #32]
 801c5ca:	429c      	cmp	r4, r3
 801c5cc:	d006      	beq.n	801c5dc <std+0x48>
 801c5ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c5d2:	4294      	cmp	r4, r2
 801c5d4:	d002      	beq.n	801c5dc <std+0x48>
 801c5d6:	33d0      	adds	r3, #208	@ 0xd0
 801c5d8:	429c      	cmp	r4, r3
 801c5da:	d105      	bne.n	801c5e8 <std+0x54>
 801c5dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5e4:	f000 ba7c 	b.w	801cae0 <__retarget_lock_init_recursive>
 801c5e8:	bd10      	pop	{r4, pc}
 801c5ea:	bf00      	nop
 801c5ec:	0801c839 	.word	0x0801c839
 801c5f0:	0801c85b 	.word	0x0801c85b
 801c5f4:	0801c893 	.word	0x0801c893
 801c5f8:	0801c8b7 	.word	0x0801c8b7
 801c5fc:	20002dc4 	.word	0x20002dc4

0801c600 <stdio_exit_handler>:
 801c600:	4a02      	ldr	r2, [pc, #8]	@ (801c60c <stdio_exit_handler+0xc>)
 801c602:	4903      	ldr	r1, [pc, #12]	@ (801c610 <stdio_exit_handler+0x10>)
 801c604:	4803      	ldr	r0, [pc, #12]	@ (801c614 <stdio_exit_handler+0x14>)
 801c606:	f000 b869 	b.w	801c6dc <_fwalk_sglue>
 801c60a:	bf00      	nop
 801c60c:	2000059c 	.word	0x2000059c
 801c610:	0801e6f1 	.word	0x0801e6f1
 801c614:	200005ac 	.word	0x200005ac

0801c618 <cleanup_stdio>:
 801c618:	6841      	ldr	r1, [r0, #4]
 801c61a:	4b0c      	ldr	r3, [pc, #48]	@ (801c64c <cleanup_stdio+0x34>)
 801c61c:	4299      	cmp	r1, r3
 801c61e:	b510      	push	{r4, lr}
 801c620:	4604      	mov	r4, r0
 801c622:	d001      	beq.n	801c628 <cleanup_stdio+0x10>
 801c624:	f002 f864 	bl	801e6f0 <_fflush_r>
 801c628:	68a1      	ldr	r1, [r4, #8]
 801c62a:	4b09      	ldr	r3, [pc, #36]	@ (801c650 <cleanup_stdio+0x38>)
 801c62c:	4299      	cmp	r1, r3
 801c62e:	d002      	beq.n	801c636 <cleanup_stdio+0x1e>
 801c630:	4620      	mov	r0, r4
 801c632:	f002 f85d 	bl	801e6f0 <_fflush_r>
 801c636:	68e1      	ldr	r1, [r4, #12]
 801c638:	4b06      	ldr	r3, [pc, #24]	@ (801c654 <cleanup_stdio+0x3c>)
 801c63a:	4299      	cmp	r1, r3
 801c63c:	d004      	beq.n	801c648 <cleanup_stdio+0x30>
 801c63e:	4620      	mov	r0, r4
 801c640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c644:	f002 b854 	b.w	801e6f0 <_fflush_r>
 801c648:	bd10      	pop	{r4, pc}
 801c64a:	bf00      	nop
 801c64c:	20002dc4 	.word	0x20002dc4
 801c650:	20002e2c 	.word	0x20002e2c
 801c654:	20002e94 	.word	0x20002e94

0801c658 <global_stdio_init.part.0>:
 801c658:	b510      	push	{r4, lr}
 801c65a:	4b0b      	ldr	r3, [pc, #44]	@ (801c688 <global_stdio_init.part.0+0x30>)
 801c65c:	4c0b      	ldr	r4, [pc, #44]	@ (801c68c <global_stdio_init.part.0+0x34>)
 801c65e:	4a0c      	ldr	r2, [pc, #48]	@ (801c690 <global_stdio_init.part.0+0x38>)
 801c660:	601a      	str	r2, [r3, #0]
 801c662:	4620      	mov	r0, r4
 801c664:	2200      	movs	r2, #0
 801c666:	2104      	movs	r1, #4
 801c668:	f7ff ff94 	bl	801c594 <std>
 801c66c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c670:	2201      	movs	r2, #1
 801c672:	2109      	movs	r1, #9
 801c674:	f7ff ff8e 	bl	801c594 <std>
 801c678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c67c:	2202      	movs	r2, #2
 801c67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c682:	2112      	movs	r1, #18
 801c684:	f7ff bf86 	b.w	801c594 <std>
 801c688:	20002efc 	.word	0x20002efc
 801c68c:	20002dc4 	.word	0x20002dc4
 801c690:	0801c601 	.word	0x0801c601

0801c694 <__sfp_lock_acquire>:
 801c694:	4801      	ldr	r0, [pc, #4]	@ (801c69c <__sfp_lock_acquire+0x8>)
 801c696:	f000 ba24 	b.w	801cae2 <__retarget_lock_acquire_recursive>
 801c69a:	bf00      	nop
 801c69c:	20002f05 	.word	0x20002f05

0801c6a0 <__sfp_lock_release>:
 801c6a0:	4801      	ldr	r0, [pc, #4]	@ (801c6a8 <__sfp_lock_release+0x8>)
 801c6a2:	f000 ba1f 	b.w	801cae4 <__retarget_lock_release_recursive>
 801c6a6:	bf00      	nop
 801c6a8:	20002f05 	.word	0x20002f05

0801c6ac <__sinit>:
 801c6ac:	b510      	push	{r4, lr}
 801c6ae:	4604      	mov	r4, r0
 801c6b0:	f7ff fff0 	bl	801c694 <__sfp_lock_acquire>
 801c6b4:	6a23      	ldr	r3, [r4, #32]
 801c6b6:	b11b      	cbz	r3, 801c6c0 <__sinit+0x14>
 801c6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6bc:	f7ff bff0 	b.w	801c6a0 <__sfp_lock_release>
 801c6c0:	4b04      	ldr	r3, [pc, #16]	@ (801c6d4 <__sinit+0x28>)
 801c6c2:	6223      	str	r3, [r4, #32]
 801c6c4:	4b04      	ldr	r3, [pc, #16]	@ (801c6d8 <__sinit+0x2c>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d1f5      	bne.n	801c6b8 <__sinit+0xc>
 801c6cc:	f7ff ffc4 	bl	801c658 <global_stdio_init.part.0>
 801c6d0:	e7f2      	b.n	801c6b8 <__sinit+0xc>
 801c6d2:	bf00      	nop
 801c6d4:	0801c619 	.word	0x0801c619
 801c6d8:	20002efc 	.word	0x20002efc

0801c6dc <_fwalk_sglue>:
 801c6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6e0:	4607      	mov	r7, r0
 801c6e2:	4688      	mov	r8, r1
 801c6e4:	4614      	mov	r4, r2
 801c6e6:	2600      	movs	r6, #0
 801c6e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c6ec:	f1b9 0901 	subs.w	r9, r9, #1
 801c6f0:	d505      	bpl.n	801c6fe <_fwalk_sglue+0x22>
 801c6f2:	6824      	ldr	r4, [r4, #0]
 801c6f4:	2c00      	cmp	r4, #0
 801c6f6:	d1f7      	bne.n	801c6e8 <_fwalk_sglue+0xc>
 801c6f8:	4630      	mov	r0, r6
 801c6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c6fe:	89ab      	ldrh	r3, [r5, #12]
 801c700:	2b01      	cmp	r3, #1
 801c702:	d907      	bls.n	801c714 <_fwalk_sglue+0x38>
 801c704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c708:	3301      	adds	r3, #1
 801c70a:	d003      	beq.n	801c714 <_fwalk_sglue+0x38>
 801c70c:	4629      	mov	r1, r5
 801c70e:	4638      	mov	r0, r7
 801c710:	47c0      	blx	r8
 801c712:	4306      	orrs	r6, r0
 801c714:	3568      	adds	r5, #104	@ 0x68
 801c716:	e7e9      	b.n	801c6ec <_fwalk_sglue+0x10>

0801c718 <iprintf>:
 801c718:	b40f      	push	{r0, r1, r2, r3}
 801c71a:	b507      	push	{r0, r1, r2, lr}
 801c71c:	4906      	ldr	r1, [pc, #24]	@ (801c738 <iprintf+0x20>)
 801c71e:	ab04      	add	r3, sp, #16
 801c720:	6808      	ldr	r0, [r1, #0]
 801c722:	f853 2b04 	ldr.w	r2, [r3], #4
 801c726:	6881      	ldr	r1, [r0, #8]
 801c728:	9301      	str	r3, [sp, #4]
 801c72a:	f001 fe45 	bl	801e3b8 <_vfiprintf_r>
 801c72e:	b003      	add	sp, #12
 801c730:	f85d eb04 	ldr.w	lr, [sp], #4
 801c734:	b004      	add	sp, #16
 801c736:	4770      	bx	lr
 801c738:	200005a8 	.word	0x200005a8

0801c73c <_puts_r>:
 801c73c:	6a03      	ldr	r3, [r0, #32]
 801c73e:	b570      	push	{r4, r5, r6, lr}
 801c740:	6884      	ldr	r4, [r0, #8]
 801c742:	4605      	mov	r5, r0
 801c744:	460e      	mov	r6, r1
 801c746:	b90b      	cbnz	r3, 801c74c <_puts_r+0x10>
 801c748:	f7ff ffb0 	bl	801c6ac <__sinit>
 801c74c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c74e:	07db      	lsls	r3, r3, #31
 801c750:	d405      	bmi.n	801c75e <_puts_r+0x22>
 801c752:	89a3      	ldrh	r3, [r4, #12]
 801c754:	0598      	lsls	r0, r3, #22
 801c756:	d402      	bmi.n	801c75e <_puts_r+0x22>
 801c758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c75a:	f000 f9c2 	bl	801cae2 <__retarget_lock_acquire_recursive>
 801c75e:	89a3      	ldrh	r3, [r4, #12]
 801c760:	0719      	lsls	r1, r3, #28
 801c762:	d502      	bpl.n	801c76a <_puts_r+0x2e>
 801c764:	6923      	ldr	r3, [r4, #16]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d135      	bne.n	801c7d6 <_puts_r+0x9a>
 801c76a:	4621      	mov	r1, r4
 801c76c:	4628      	mov	r0, r5
 801c76e:	f000 f8e5 	bl	801c93c <__swsetup_r>
 801c772:	b380      	cbz	r0, 801c7d6 <_puts_r+0x9a>
 801c774:	f04f 35ff 	mov.w	r5, #4294967295
 801c778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c77a:	07da      	lsls	r2, r3, #31
 801c77c:	d405      	bmi.n	801c78a <_puts_r+0x4e>
 801c77e:	89a3      	ldrh	r3, [r4, #12]
 801c780:	059b      	lsls	r3, r3, #22
 801c782:	d402      	bmi.n	801c78a <_puts_r+0x4e>
 801c784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c786:	f000 f9ad 	bl	801cae4 <__retarget_lock_release_recursive>
 801c78a:	4628      	mov	r0, r5
 801c78c:	bd70      	pop	{r4, r5, r6, pc}
 801c78e:	2b00      	cmp	r3, #0
 801c790:	da04      	bge.n	801c79c <_puts_r+0x60>
 801c792:	69a2      	ldr	r2, [r4, #24]
 801c794:	429a      	cmp	r2, r3
 801c796:	dc17      	bgt.n	801c7c8 <_puts_r+0x8c>
 801c798:	290a      	cmp	r1, #10
 801c79a:	d015      	beq.n	801c7c8 <_puts_r+0x8c>
 801c79c:	6823      	ldr	r3, [r4, #0]
 801c79e:	1c5a      	adds	r2, r3, #1
 801c7a0:	6022      	str	r2, [r4, #0]
 801c7a2:	7019      	strb	r1, [r3, #0]
 801c7a4:	68a3      	ldr	r3, [r4, #8]
 801c7a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c7aa:	3b01      	subs	r3, #1
 801c7ac:	60a3      	str	r3, [r4, #8]
 801c7ae:	2900      	cmp	r1, #0
 801c7b0:	d1ed      	bne.n	801c78e <_puts_r+0x52>
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	da11      	bge.n	801c7da <_puts_r+0x9e>
 801c7b6:	4622      	mov	r2, r4
 801c7b8:	210a      	movs	r1, #10
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	f000 f87f 	bl	801c8be <__swbuf_r>
 801c7c0:	3001      	adds	r0, #1
 801c7c2:	d0d7      	beq.n	801c774 <_puts_r+0x38>
 801c7c4:	250a      	movs	r5, #10
 801c7c6:	e7d7      	b.n	801c778 <_puts_r+0x3c>
 801c7c8:	4622      	mov	r2, r4
 801c7ca:	4628      	mov	r0, r5
 801c7cc:	f000 f877 	bl	801c8be <__swbuf_r>
 801c7d0:	3001      	adds	r0, #1
 801c7d2:	d1e7      	bne.n	801c7a4 <_puts_r+0x68>
 801c7d4:	e7ce      	b.n	801c774 <_puts_r+0x38>
 801c7d6:	3e01      	subs	r6, #1
 801c7d8:	e7e4      	b.n	801c7a4 <_puts_r+0x68>
 801c7da:	6823      	ldr	r3, [r4, #0]
 801c7dc:	1c5a      	adds	r2, r3, #1
 801c7de:	6022      	str	r2, [r4, #0]
 801c7e0:	220a      	movs	r2, #10
 801c7e2:	701a      	strb	r2, [r3, #0]
 801c7e4:	e7ee      	b.n	801c7c4 <_puts_r+0x88>
	...

0801c7e8 <puts>:
 801c7e8:	4b02      	ldr	r3, [pc, #8]	@ (801c7f4 <puts+0xc>)
 801c7ea:	4601      	mov	r1, r0
 801c7ec:	6818      	ldr	r0, [r3, #0]
 801c7ee:	f7ff bfa5 	b.w	801c73c <_puts_r>
 801c7f2:	bf00      	nop
 801c7f4:	200005a8 	.word	0x200005a8

0801c7f8 <siprintf>:
 801c7f8:	b40e      	push	{r1, r2, r3}
 801c7fa:	b500      	push	{lr}
 801c7fc:	b09c      	sub	sp, #112	@ 0x70
 801c7fe:	ab1d      	add	r3, sp, #116	@ 0x74
 801c800:	9002      	str	r0, [sp, #8]
 801c802:	9006      	str	r0, [sp, #24]
 801c804:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c808:	4809      	ldr	r0, [pc, #36]	@ (801c830 <siprintf+0x38>)
 801c80a:	9107      	str	r1, [sp, #28]
 801c80c:	9104      	str	r1, [sp, #16]
 801c80e:	4909      	ldr	r1, [pc, #36]	@ (801c834 <siprintf+0x3c>)
 801c810:	f853 2b04 	ldr.w	r2, [r3], #4
 801c814:	9105      	str	r1, [sp, #20]
 801c816:	6800      	ldr	r0, [r0, #0]
 801c818:	9301      	str	r3, [sp, #4]
 801c81a:	a902      	add	r1, sp, #8
 801c81c:	f001 fca6 	bl	801e16c <_svfiprintf_r>
 801c820:	9b02      	ldr	r3, [sp, #8]
 801c822:	2200      	movs	r2, #0
 801c824:	701a      	strb	r2, [r3, #0]
 801c826:	b01c      	add	sp, #112	@ 0x70
 801c828:	f85d eb04 	ldr.w	lr, [sp], #4
 801c82c:	b003      	add	sp, #12
 801c82e:	4770      	bx	lr
 801c830:	200005a8 	.word	0x200005a8
 801c834:	ffff0208 	.word	0xffff0208

0801c838 <__sread>:
 801c838:	b510      	push	{r4, lr}
 801c83a:	460c      	mov	r4, r1
 801c83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c840:	f000 f900 	bl	801ca44 <_read_r>
 801c844:	2800      	cmp	r0, #0
 801c846:	bfab      	itete	ge
 801c848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c84a:	89a3      	ldrhlt	r3, [r4, #12]
 801c84c:	181b      	addge	r3, r3, r0
 801c84e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c852:	bfac      	ite	ge
 801c854:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c856:	81a3      	strhlt	r3, [r4, #12]
 801c858:	bd10      	pop	{r4, pc}

0801c85a <__swrite>:
 801c85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c85e:	461f      	mov	r7, r3
 801c860:	898b      	ldrh	r3, [r1, #12]
 801c862:	05db      	lsls	r3, r3, #23
 801c864:	4605      	mov	r5, r0
 801c866:	460c      	mov	r4, r1
 801c868:	4616      	mov	r6, r2
 801c86a:	d505      	bpl.n	801c878 <__swrite+0x1e>
 801c86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c870:	2302      	movs	r3, #2
 801c872:	2200      	movs	r2, #0
 801c874:	f000 f8d4 	bl	801ca20 <_lseek_r>
 801c878:	89a3      	ldrh	r3, [r4, #12]
 801c87a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c87e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c882:	81a3      	strh	r3, [r4, #12]
 801c884:	4632      	mov	r2, r6
 801c886:	463b      	mov	r3, r7
 801c888:	4628      	mov	r0, r5
 801c88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c88e:	f000 b8eb 	b.w	801ca68 <_write_r>

0801c892 <__sseek>:
 801c892:	b510      	push	{r4, lr}
 801c894:	460c      	mov	r4, r1
 801c896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c89a:	f000 f8c1 	bl	801ca20 <_lseek_r>
 801c89e:	1c43      	adds	r3, r0, #1
 801c8a0:	89a3      	ldrh	r3, [r4, #12]
 801c8a2:	bf15      	itete	ne
 801c8a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c8a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c8aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c8ae:	81a3      	strheq	r3, [r4, #12]
 801c8b0:	bf18      	it	ne
 801c8b2:	81a3      	strhne	r3, [r4, #12]
 801c8b4:	bd10      	pop	{r4, pc}

0801c8b6 <__sclose>:
 801c8b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8ba:	f000 b8a1 	b.w	801ca00 <_close_r>

0801c8be <__swbuf_r>:
 801c8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8c0:	460e      	mov	r6, r1
 801c8c2:	4614      	mov	r4, r2
 801c8c4:	4605      	mov	r5, r0
 801c8c6:	b118      	cbz	r0, 801c8d0 <__swbuf_r+0x12>
 801c8c8:	6a03      	ldr	r3, [r0, #32]
 801c8ca:	b90b      	cbnz	r3, 801c8d0 <__swbuf_r+0x12>
 801c8cc:	f7ff feee 	bl	801c6ac <__sinit>
 801c8d0:	69a3      	ldr	r3, [r4, #24]
 801c8d2:	60a3      	str	r3, [r4, #8]
 801c8d4:	89a3      	ldrh	r3, [r4, #12]
 801c8d6:	071a      	lsls	r2, r3, #28
 801c8d8:	d501      	bpl.n	801c8de <__swbuf_r+0x20>
 801c8da:	6923      	ldr	r3, [r4, #16]
 801c8dc:	b943      	cbnz	r3, 801c8f0 <__swbuf_r+0x32>
 801c8de:	4621      	mov	r1, r4
 801c8e0:	4628      	mov	r0, r5
 801c8e2:	f000 f82b 	bl	801c93c <__swsetup_r>
 801c8e6:	b118      	cbz	r0, 801c8f0 <__swbuf_r+0x32>
 801c8e8:	f04f 37ff 	mov.w	r7, #4294967295
 801c8ec:	4638      	mov	r0, r7
 801c8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8f0:	6823      	ldr	r3, [r4, #0]
 801c8f2:	6922      	ldr	r2, [r4, #16]
 801c8f4:	1a98      	subs	r0, r3, r2
 801c8f6:	6963      	ldr	r3, [r4, #20]
 801c8f8:	b2f6      	uxtb	r6, r6
 801c8fa:	4283      	cmp	r3, r0
 801c8fc:	4637      	mov	r7, r6
 801c8fe:	dc05      	bgt.n	801c90c <__swbuf_r+0x4e>
 801c900:	4621      	mov	r1, r4
 801c902:	4628      	mov	r0, r5
 801c904:	f001 fef4 	bl	801e6f0 <_fflush_r>
 801c908:	2800      	cmp	r0, #0
 801c90a:	d1ed      	bne.n	801c8e8 <__swbuf_r+0x2a>
 801c90c:	68a3      	ldr	r3, [r4, #8]
 801c90e:	3b01      	subs	r3, #1
 801c910:	60a3      	str	r3, [r4, #8]
 801c912:	6823      	ldr	r3, [r4, #0]
 801c914:	1c5a      	adds	r2, r3, #1
 801c916:	6022      	str	r2, [r4, #0]
 801c918:	701e      	strb	r6, [r3, #0]
 801c91a:	6962      	ldr	r2, [r4, #20]
 801c91c:	1c43      	adds	r3, r0, #1
 801c91e:	429a      	cmp	r2, r3
 801c920:	d004      	beq.n	801c92c <__swbuf_r+0x6e>
 801c922:	89a3      	ldrh	r3, [r4, #12]
 801c924:	07db      	lsls	r3, r3, #31
 801c926:	d5e1      	bpl.n	801c8ec <__swbuf_r+0x2e>
 801c928:	2e0a      	cmp	r6, #10
 801c92a:	d1df      	bne.n	801c8ec <__swbuf_r+0x2e>
 801c92c:	4621      	mov	r1, r4
 801c92e:	4628      	mov	r0, r5
 801c930:	f001 fede 	bl	801e6f0 <_fflush_r>
 801c934:	2800      	cmp	r0, #0
 801c936:	d0d9      	beq.n	801c8ec <__swbuf_r+0x2e>
 801c938:	e7d6      	b.n	801c8e8 <__swbuf_r+0x2a>
	...

0801c93c <__swsetup_r>:
 801c93c:	b538      	push	{r3, r4, r5, lr}
 801c93e:	4b29      	ldr	r3, [pc, #164]	@ (801c9e4 <__swsetup_r+0xa8>)
 801c940:	4605      	mov	r5, r0
 801c942:	6818      	ldr	r0, [r3, #0]
 801c944:	460c      	mov	r4, r1
 801c946:	b118      	cbz	r0, 801c950 <__swsetup_r+0x14>
 801c948:	6a03      	ldr	r3, [r0, #32]
 801c94a:	b90b      	cbnz	r3, 801c950 <__swsetup_r+0x14>
 801c94c:	f7ff feae 	bl	801c6ac <__sinit>
 801c950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c954:	0719      	lsls	r1, r3, #28
 801c956:	d422      	bmi.n	801c99e <__swsetup_r+0x62>
 801c958:	06da      	lsls	r2, r3, #27
 801c95a:	d407      	bmi.n	801c96c <__swsetup_r+0x30>
 801c95c:	2209      	movs	r2, #9
 801c95e:	602a      	str	r2, [r5, #0]
 801c960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c964:	81a3      	strh	r3, [r4, #12]
 801c966:	f04f 30ff 	mov.w	r0, #4294967295
 801c96a:	e033      	b.n	801c9d4 <__swsetup_r+0x98>
 801c96c:	0758      	lsls	r0, r3, #29
 801c96e:	d512      	bpl.n	801c996 <__swsetup_r+0x5a>
 801c970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c972:	b141      	cbz	r1, 801c986 <__swsetup_r+0x4a>
 801c974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c978:	4299      	cmp	r1, r3
 801c97a:	d002      	beq.n	801c982 <__swsetup_r+0x46>
 801c97c:	4628      	mov	r0, r5
 801c97e:	f000 ff17 	bl	801d7b0 <_free_r>
 801c982:	2300      	movs	r3, #0
 801c984:	6363      	str	r3, [r4, #52]	@ 0x34
 801c986:	89a3      	ldrh	r3, [r4, #12]
 801c988:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c98c:	81a3      	strh	r3, [r4, #12]
 801c98e:	2300      	movs	r3, #0
 801c990:	6063      	str	r3, [r4, #4]
 801c992:	6923      	ldr	r3, [r4, #16]
 801c994:	6023      	str	r3, [r4, #0]
 801c996:	89a3      	ldrh	r3, [r4, #12]
 801c998:	f043 0308 	orr.w	r3, r3, #8
 801c99c:	81a3      	strh	r3, [r4, #12]
 801c99e:	6923      	ldr	r3, [r4, #16]
 801c9a0:	b94b      	cbnz	r3, 801c9b6 <__swsetup_r+0x7a>
 801c9a2:	89a3      	ldrh	r3, [r4, #12]
 801c9a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c9a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c9ac:	d003      	beq.n	801c9b6 <__swsetup_r+0x7a>
 801c9ae:	4621      	mov	r1, r4
 801c9b0:	4628      	mov	r0, r5
 801c9b2:	f001 feeb 	bl	801e78c <__smakebuf_r>
 801c9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9ba:	f013 0201 	ands.w	r2, r3, #1
 801c9be:	d00a      	beq.n	801c9d6 <__swsetup_r+0x9a>
 801c9c0:	2200      	movs	r2, #0
 801c9c2:	60a2      	str	r2, [r4, #8]
 801c9c4:	6962      	ldr	r2, [r4, #20]
 801c9c6:	4252      	negs	r2, r2
 801c9c8:	61a2      	str	r2, [r4, #24]
 801c9ca:	6922      	ldr	r2, [r4, #16]
 801c9cc:	b942      	cbnz	r2, 801c9e0 <__swsetup_r+0xa4>
 801c9ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c9d2:	d1c5      	bne.n	801c960 <__swsetup_r+0x24>
 801c9d4:	bd38      	pop	{r3, r4, r5, pc}
 801c9d6:	0799      	lsls	r1, r3, #30
 801c9d8:	bf58      	it	pl
 801c9da:	6962      	ldrpl	r2, [r4, #20]
 801c9dc:	60a2      	str	r2, [r4, #8]
 801c9de:	e7f4      	b.n	801c9ca <__swsetup_r+0x8e>
 801c9e0:	2000      	movs	r0, #0
 801c9e2:	e7f7      	b.n	801c9d4 <__swsetup_r+0x98>
 801c9e4:	200005a8 	.word	0x200005a8

0801c9e8 <memset>:
 801c9e8:	4402      	add	r2, r0
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	4293      	cmp	r3, r2
 801c9ee:	d100      	bne.n	801c9f2 <memset+0xa>
 801c9f0:	4770      	bx	lr
 801c9f2:	f803 1b01 	strb.w	r1, [r3], #1
 801c9f6:	e7f9      	b.n	801c9ec <memset+0x4>

0801c9f8 <_localeconv_r>:
 801c9f8:	4800      	ldr	r0, [pc, #0]	@ (801c9fc <_localeconv_r+0x4>)
 801c9fa:	4770      	bx	lr
 801c9fc:	200006e8 	.word	0x200006e8

0801ca00 <_close_r>:
 801ca00:	b538      	push	{r3, r4, r5, lr}
 801ca02:	4d06      	ldr	r5, [pc, #24]	@ (801ca1c <_close_r+0x1c>)
 801ca04:	2300      	movs	r3, #0
 801ca06:	4604      	mov	r4, r0
 801ca08:	4608      	mov	r0, r1
 801ca0a:	602b      	str	r3, [r5, #0]
 801ca0c:	f7e6 fd4a 	bl	80034a4 <_close>
 801ca10:	1c43      	adds	r3, r0, #1
 801ca12:	d102      	bne.n	801ca1a <_close_r+0x1a>
 801ca14:	682b      	ldr	r3, [r5, #0]
 801ca16:	b103      	cbz	r3, 801ca1a <_close_r+0x1a>
 801ca18:	6023      	str	r3, [r4, #0]
 801ca1a:	bd38      	pop	{r3, r4, r5, pc}
 801ca1c:	20002f00 	.word	0x20002f00

0801ca20 <_lseek_r>:
 801ca20:	b538      	push	{r3, r4, r5, lr}
 801ca22:	4d07      	ldr	r5, [pc, #28]	@ (801ca40 <_lseek_r+0x20>)
 801ca24:	4604      	mov	r4, r0
 801ca26:	4608      	mov	r0, r1
 801ca28:	4611      	mov	r1, r2
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	602a      	str	r2, [r5, #0]
 801ca2e:	461a      	mov	r2, r3
 801ca30:	f7e6 fd5f 	bl	80034f2 <_lseek>
 801ca34:	1c43      	adds	r3, r0, #1
 801ca36:	d102      	bne.n	801ca3e <_lseek_r+0x1e>
 801ca38:	682b      	ldr	r3, [r5, #0]
 801ca3a:	b103      	cbz	r3, 801ca3e <_lseek_r+0x1e>
 801ca3c:	6023      	str	r3, [r4, #0]
 801ca3e:	bd38      	pop	{r3, r4, r5, pc}
 801ca40:	20002f00 	.word	0x20002f00

0801ca44 <_read_r>:
 801ca44:	b538      	push	{r3, r4, r5, lr}
 801ca46:	4d07      	ldr	r5, [pc, #28]	@ (801ca64 <_read_r+0x20>)
 801ca48:	4604      	mov	r4, r0
 801ca4a:	4608      	mov	r0, r1
 801ca4c:	4611      	mov	r1, r2
 801ca4e:	2200      	movs	r2, #0
 801ca50:	602a      	str	r2, [r5, #0]
 801ca52:	461a      	mov	r2, r3
 801ca54:	f7e6 fd09 	bl	800346a <_read>
 801ca58:	1c43      	adds	r3, r0, #1
 801ca5a:	d102      	bne.n	801ca62 <_read_r+0x1e>
 801ca5c:	682b      	ldr	r3, [r5, #0]
 801ca5e:	b103      	cbz	r3, 801ca62 <_read_r+0x1e>
 801ca60:	6023      	str	r3, [r4, #0]
 801ca62:	bd38      	pop	{r3, r4, r5, pc}
 801ca64:	20002f00 	.word	0x20002f00

0801ca68 <_write_r>:
 801ca68:	b538      	push	{r3, r4, r5, lr}
 801ca6a:	4d07      	ldr	r5, [pc, #28]	@ (801ca88 <_write_r+0x20>)
 801ca6c:	4604      	mov	r4, r0
 801ca6e:	4608      	mov	r0, r1
 801ca70:	4611      	mov	r1, r2
 801ca72:	2200      	movs	r2, #0
 801ca74:	602a      	str	r2, [r5, #0]
 801ca76:	461a      	mov	r2, r3
 801ca78:	f7fc fd8a 	bl	8019590 <_write>
 801ca7c:	1c43      	adds	r3, r0, #1
 801ca7e:	d102      	bne.n	801ca86 <_write_r+0x1e>
 801ca80:	682b      	ldr	r3, [r5, #0]
 801ca82:	b103      	cbz	r3, 801ca86 <_write_r+0x1e>
 801ca84:	6023      	str	r3, [r4, #0]
 801ca86:	bd38      	pop	{r3, r4, r5, pc}
 801ca88:	20002f00 	.word	0x20002f00

0801ca8c <__errno>:
 801ca8c:	4b01      	ldr	r3, [pc, #4]	@ (801ca94 <__errno+0x8>)
 801ca8e:	6818      	ldr	r0, [r3, #0]
 801ca90:	4770      	bx	lr
 801ca92:	bf00      	nop
 801ca94:	200005a8 	.word	0x200005a8

0801ca98 <__libc_init_array>:
 801ca98:	b570      	push	{r4, r5, r6, lr}
 801ca9a:	4d0d      	ldr	r5, [pc, #52]	@ (801cad0 <__libc_init_array+0x38>)
 801ca9c:	4c0d      	ldr	r4, [pc, #52]	@ (801cad4 <__libc_init_array+0x3c>)
 801ca9e:	1b64      	subs	r4, r4, r5
 801caa0:	10a4      	asrs	r4, r4, #2
 801caa2:	2600      	movs	r6, #0
 801caa4:	42a6      	cmp	r6, r4
 801caa6:	d109      	bne.n	801cabc <__libc_init_array+0x24>
 801caa8:	4d0b      	ldr	r5, [pc, #44]	@ (801cad8 <__libc_init_array+0x40>)
 801caaa:	4c0c      	ldr	r4, [pc, #48]	@ (801cadc <__libc_init_array+0x44>)
 801caac:	f001 ffdc 	bl	801ea68 <_init>
 801cab0:	1b64      	subs	r4, r4, r5
 801cab2:	10a4      	asrs	r4, r4, #2
 801cab4:	2600      	movs	r6, #0
 801cab6:	42a6      	cmp	r6, r4
 801cab8:	d105      	bne.n	801cac6 <__libc_init_array+0x2e>
 801caba:	bd70      	pop	{r4, r5, r6, pc}
 801cabc:	f855 3b04 	ldr.w	r3, [r5], #4
 801cac0:	4798      	blx	r3
 801cac2:	3601      	adds	r6, #1
 801cac4:	e7ee      	b.n	801caa4 <__libc_init_array+0xc>
 801cac6:	f855 3b04 	ldr.w	r3, [r5], #4
 801caca:	4798      	blx	r3
 801cacc:	3601      	adds	r6, #1
 801cace:	e7f2      	b.n	801cab6 <__libc_init_array+0x1e>
 801cad0:	08020fe0 	.word	0x08020fe0
 801cad4:	08020fe0 	.word	0x08020fe0
 801cad8:	08020fe0 	.word	0x08020fe0
 801cadc:	08020fe4 	.word	0x08020fe4

0801cae0 <__retarget_lock_init_recursive>:
 801cae0:	4770      	bx	lr

0801cae2 <__retarget_lock_acquire_recursive>:
 801cae2:	4770      	bx	lr

0801cae4 <__retarget_lock_release_recursive>:
 801cae4:	4770      	bx	lr

0801cae6 <strcpy>:
 801cae6:	4603      	mov	r3, r0
 801cae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801caec:	f803 2b01 	strb.w	r2, [r3], #1
 801caf0:	2a00      	cmp	r2, #0
 801caf2:	d1f9      	bne.n	801cae8 <strcpy+0x2>
 801caf4:	4770      	bx	lr

0801caf6 <memcpy>:
 801caf6:	440a      	add	r2, r1
 801caf8:	4291      	cmp	r1, r2
 801cafa:	f100 33ff 	add.w	r3, r0, #4294967295
 801cafe:	d100      	bne.n	801cb02 <memcpy+0xc>
 801cb00:	4770      	bx	lr
 801cb02:	b510      	push	{r4, lr}
 801cb04:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cb08:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cb0c:	4291      	cmp	r1, r2
 801cb0e:	d1f9      	bne.n	801cb04 <memcpy+0xe>
 801cb10:	bd10      	pop	{r4, pc}

0801cb12 <quorem>:
 801cb12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb16:	6903      	ldr	r3, [r0, #16]
 801cb18:	690c      	ldr	r4, [r1, #16]
 801cb1a:	42a3      	cmp	r3, r4
 801cb1c:	4607      	mov	r7, r0
 801cb1e:	db7e      	blt.n	801cc1e <quorem+0x10c>
 801cb20:	3c01      	subs	r4, #1
 801cb22:	f101 0814 	add.w	r8, r1, #20
 801cb26:	00a3      	lsls	r3, r4, #2
 801cb28:	f100 0514 	add.w	r5, r0, #20
 801cb2c:	9300      	str	r3, [sp, #0]
 801cb2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cb32:	9301      	str	r3, [sp, #4]
 801cb34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cb38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cb3c:	3301      	adds	r3, #1
 801cb3e:	429a      	cmp	r2, r3
 801cb40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cb44:	fbb2 f6f3 	udiv	r6, r2, r3
 801cb48:	d32e      	bcc.n	801cba8 <quorem+0x96>
 801cb4a:	f04f 0a00 	mov.w	sl, #0
 801cb4e:	46c4      	mov	ip, r8
 801cb50:	46ae      	mov	lr, r5
 801cb52:	46d3      	mov	fp, sl
 801cb54:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cb58:	b298      	uxth	r0, r3
 801cb5a:	fb06 a000 	mla	r0, r6, r0, sl
 801cb5e:	0c02      	lsrs	r2, r0, #16
 801cb60:	0c1b      	lsrs	r3, r3, #16
 801cb62:	fb06 2303 	mla	r3, r6, r3, r2
 801cb66:	f8de 2000 	ldr.w	r2, [lr]
 801cb6a:	b280      	uxth	r0, r0
 801cb6c:	b292      	uxth	r2, r2
 801cb6e:	1a12      	subs	r2, r2, r0
 801cb70:	445a      	add	r2, fp
 801cb72:	f8de 0000 	ldr.w	r0, [lr]
 801cb76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801cb80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801cb84:	b292      	uxth	r2, r2
 801cb86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801cb8a:	45e1      	cmp	r9, ip
 801cb8c:	f84e 2b04 	str.w	r2, [lr], #4
 801cb90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801cb94:	d2de      	bcs.n	801cb54 <quorem+0x42>
 801cb96:	9b00      	ldr	r3, [sp, #0]
 801cb98:	58eb      	ldr	r3, [r5, r3]
 801cb9a:	b92b      	cbnz	r3, 801cba8 <quorem+0x96>
 801cb9c:	9b01      	ldr	r3, [sp, #4]
 801cb9e:	3b04      	subs	r3, #4
 801cba0:	429d      	cmp	r5, r3
 801cba2:	461a      	mov	r2, r3
 801cba4:	d32f      	bcc.n	801cc06 <quorem+0xf4>
 801cba6:	613c      	str	r4, [r7, #16]
 801cba8:	4638      	mov	r0, r7
 801cbaa:	f001 f97b 	bl	801dea4 <__mcmp>
 801cbae:	2800      	cmp	r0, #0
 801cbb0:	db25      	blt.n	801cbfe <quorem+0xec>
 801cbb2:	4629      	mov	r1, r5
 801cbb4:	2000      	movs	r0, #0
 801cbb6:	f858 2b04 	ldr.w	r2, [r8], #4
 801cbba:	f8d1 c000 	ldr.w	ip, [r1]
 801cbbe:	fa1f fe82 	uxth.w	lr, r2
 801cbc2:	fa1f f38c 	uxth.w	r3, ip
 801cbc6:	eba3 030e 	sub.w	r3, r3, lr
 801cbca:	4403      	add	r3, r0
 801cbcc:	0c12      	lsrs	r2, r2, #16
 801cbce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801cbd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801cbd6:	b29b      	uxth	r3, r3
 801cbd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cbdc:	45c1      	cmp	r9, r8
 801cbde:	f841 3b04 	str.w	r3, [r1], #4
 801cbe2:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cbe6:	d2e6      	bcs.n	801cbb6 <quorem+0xa4>
 801cbe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cbec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cbf0:	b922      	cbnz	r2, 801cbfc <quorem+0xea>
 801cbf2:	3b04      	subs	r3, #4
 801cbf4:	429d      	cmp	r5, r3
 801cbf6:	461a      	mov	r2, r3
 801cbf8:	d30b      	bcc.n	801cc12 <quorem+0x100>
 801cbfa:	613c      	str	r4, [r7, #16]
 801cbfc:	3601      	adds	r6, #1
 801cbfe:	4630      	mov	r0, r6
 801cc00:	b003      	add	sp, #12
 801cc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc06:	6812      	ldr	r2, [r2, #0]
 801cc08:	3b04      	subs	r3, #4
 801cc0a:	2a00      	cmp	r2, #0
 801cc0c:	d1cb      	bne.n	801cba6 <quorem+0x94>
 801cc0e:	3c01      	subs	r4, #1
 801cc10:	e7c6      	b.n	801cba0 <quorem+0x8e>
 801cc12:	6812      	ldr	r2, [r2, #0]
 801cc14:	3b04      	subs	r3, #4
 801cc16:	2a00      	cmp	r2, #0
 801cc18:	d1ef      	bne.n	801cbfa <quorem+0xe8>
 801cc1a:	3c01      	subs	r4, #1
 801cc1c:	e7ea      	b.n	801cbf4 <quorem+0xe2>
 801cc1e:	2000      	movs	r0, #0
 801cc20:	e7ee      	b.n	801cc00 <quorem+0xee>
 801cc22:	0000      	movs	r0, r0
 801cc24:	0000      	movs	r0, r0
	...

0801cc28 <_dtoa_r>:
 801cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc2c:	69c7      	ldr	r7, [r0, #28]
 801cc2e:	b099      	sub	sp, #100	@ 0x64
 801cc30:	ed8d 0b02 	vstr	d0, [sp, #8]
 801cc34:	ec55 4b10 	vmov	r4, r5, d0
 801cc38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801cc3a:	9109      	str	r1, [sp, #36]	@ 0x24
 801cc3c:	4683      	mov	fp, r0
 801cc3e:	920e      	str	r2, [sp, #56]	@ 0x38
 801cc40:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cc42:	b97f      	cbnz	r7, 801cc64 <_dtoa_r+0x3c>
 801cc44:	2010      	movs	r0, #16
 801cc46:	f000 fdfd 	bl	801d844 <malloc>
 801cc4a:	4602      	mov	r2, r0
 801cc4c:	f8cb 001c 	str.w	r0, [fp, #28]
 801cc50:	b920      	cbnz	r0, 801cc5c <_dtoa_r+0x34>
 801cc52:	4ba7      	ldr	r3, [pc, #668]	@ (801cef0 <_dtoa_r+0x2c8>)
 801cc54:	21ef      	movs	r1, #239	@ 0xef
 801cc56:	48a7      	ldr	r0, [pc, #668]	@ (801cef4 <_dtoa_r+0x2cc>)
 801cc58:	f001 fe20 	bl	801e89c <__assert_func>
 801cc5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801cc60:	6007      	str	r7, [r0, #0]
 801cc62:	60c7      	str	r7, [r0, #12]
 801cc64:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cc68:	6819      	ldr	r1, [r3, #0]
 801cc6a:	b159      	cbz	r1, 801cc84 <_dtoa_r+0x5c>
 801cc6c:	685a      	ldr	r2, [r3, #4]
 801cc6e:	604a      	str	r2, [r1, #4]
 801cc70:	2301      	movs	r3, #1
 801cc72:	4093      	lsls	r3, r2
 801cc74:	608b      	str	r3, [r1, #8]
 801cc76:	4658      	mov	r0, fp
 801cc78:	f000 feda 	bl	801da30 <_Bfree>
 801cc7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cc80:	2200      	movs	r2, #0
 801cc82:	601a      	str	r2, [r3, #0]
 801cc84:	1e2b      	subs	r3, r5, #0
 801cc86:	bfb9      	ittee	lt
 801cc88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801cc8c:	9303      	strlt	r3, [sp, #12]
 801cc8e:	2300      	movge	r3, #0
 801cc90:	6033      	strge	r3, [r6, #0]
 801cc92:	9f03      	ldr	r7, [sp, #12]
 801cc94:	4b98      	ldr	r3, [pc, #608]	@ (801cef8 <_dtoa_r+0x2d0>)
 801cc96:	bfbc      	itt	lt
 801cc98:	2201      	movlt	r2, #1
 801cc9a:	6032      	strlt	r2, [r6, #0]
 801cc9c:	43bb      	bics	r3, r7
 801cc9e:	d112      	bne.n	801ccc6 <_dtoa_r+0x9e>
 801cca0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cca2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801cca6:	6013      	str	r3, [r2, #0]
 801cca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ccac:	4323      	orrs	r3, r4
 801ccae:	f000 854d 	beq.w	801d74c <_dtoa_r+0xb24>
 801ccb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ccb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801cf0c <_dtoa_r+0x2e4>
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	f000 854f 	beq.w	801d75c <_dtoa_r+0xb34>
 801ccbe:	f10a 0303 	add.w	r3, sl, #3
 801ccc2:	f000 bd49 	b.w	801d758 <_dtoa_r+0xb30>
 801ccc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ccca:	2200      	movs	r2, #0
 801cccc:	ec51 0b17 	vmov	r0, r1, d7
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ccd6:	f7e3 fedf 	bl	8000a98 <__aeabi_dcmpeq>
 801ccda:	4680      	mov	r8, r0
 801ccdc:	b158      	cbz	r0, 801ccf6 <_dtoa_r+0xce>
 801ccde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cce0:	2301      	movs	r3, #1
 801cce2:	6013      	str	r3, [r2, #0]
 801cce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cce6:	b113      	cbz	r3, 801ccee <_dtoa_r+0xc6>
 801cce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ccea:	4b84      	ldr	r3, [pc, #528]	@ (801cefc <_dtoa_r+0x2d4>)
 801ccec:	6013      	str	r3, [r2, #0]
 801ccee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801cf10 <_dtoa_r+0x2e8>
 801ccf2:	f000 bd33 	b.w	801d75c <_dtoa_r+0xb34>
 801ccf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ccfa:	aa16      	add	r2, sp, #88	@ 0x58
 801ccfc:	a917      	add	r1, sp, #92	@ 0x5c
 801ccfe:	4658      	mov	r0, fp
 801cd00:	f001 f980 	bl	801e004 <__d2b>
 801cd04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801cd08:	4681      	mov	r9, r0
 801cd0a:	2e00      	cmp	r6, #0
 801cd0c:	d077      	beq.n	801cdfe <_dtoa_r+0x1d6>
 801cd0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cd10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801cd14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cd18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cd1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801cd20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801cd24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801cd28:	4619      	mov	r1, r3
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	4b74      	ldr	r3, [pc, #464]	@ (801cf00 <_dtoa_r+0x2d8>)
 801cd2e:	f7e3 fa93 	bl	8000258 <__aeabi_dsub>
 801cd32:	a369      	add	r3, pc, #420	@ (adr r3, 801ced8 <_dtoa_r+0x2b0>)
 801cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd38:	f7e3 fc46 	bl	80005c8 <__aeabi_dmul>
 801cd3c:	a368      	add	r3, pc, #416	@ (adr r3, 801cee0 <_dtoa_r+0x2b8>)
 801cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd42:	f7e3 fa8b 	bl	800025c <__adddf3>
 801cd46:	4604      	mov	r4, r0
 801cd48:	4630      	mov	r0, r6
 801cd4a:	460d      	mov	r5, r1
 801cd4c:	f7e3 fbd2 	bl	80004f4 <__aeabi_i2d>
 801cd50:	a365      	add	r3, pc, #404	@ (adr r3, 801cee8 <_dtoa_r+0x2c0>)
 801cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd56:	f7e3 fc37 	bl	80005c8 <__aeabi_dmul>
 801cd5a:	4602      	mov	r2, r0
 801cd5c:	460b      	mov	r3, r1
 801cd5e:	4620      	mov	r0, r4
 801cd60:	4629      	mov	r1, r5
 801cd62:	f7e3 fa7b 	bl	800025c <__adddf3>
 801cd66:	4604      	mov	r4, r0
 801cd68:	460d      	mov	r5, r1
 801cd6a:	f7e3 fedd 	bl	8000b28 <__aeabi_d2iz>
 801cd6e:	2200      	movs	r2, #0
 801cd70:	4607      	mov	r7, r0
 801cd72:	2300      	movs	r3, #0
 801cd74:	4620      	mov	r0, r4
 801cd76:	4629      	mov	r1, r5
 801cd78:	f7e3 fe98 	bl	8000aac <__aeabi_dcmplt>
 801cd7c:	b140      	cbz	r0, 801cd90 <_dtoa_r+0x168>
 801cd7e:	4638      	mov	r0, r7
 801cd80:	f7e3 fbb8 	bl	80004f4 <__aeabi_i2d>
 801cd84:	4622      	mov	r2, r4
 801cd86:	462b      	mov	r3, r5
 801cd88:	f7e3 fe86 	bl	8000a98 <__aeabi_dcmpeq>
 801cd8c:	b900      	cbnz	r0, 801cd90 <_dtoa_r+0x168>
 801cd8e:	3f01      	subs	r7, #1
 801cd90:	2f16      	cmp	r7, #22
 801cd92:	d851      	bhi.n	801ce38 <_dtoa_r+0x210>
 801cd94:	4b5b      	ldr	r3, [pc, #364]	@ (801cf04 <_dtoa_r+0x2dc>)
 801cd96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cda2:	f7e3 fe83 	bl	8000aac <__aeabi_dcmplt>
 801cda6:	2800      	cmp	r0, #0
 801cda8:	d048      	beq.n	801ce3c <_dtoa_r+0x214>
 801cdaa:	3f01      	subs	r7, #1
 801cdac:	2300      	movs	r3, #0
 801cdae:	9312      	str	r3, [sp, #72]	@ 0x48
 801cdb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cdb2:	1b9b      	subs	r3, r3, r6
 801cdb4:	1e5a      	subs	r2, r3, #1
 801cdb6:	bf44      	itt	mi
 801cdb8:	f1c3 0801 	rsbmi	r8, r3, #1
 801cdbc:	2300      	movmi	r3, #0
 801cdbe:	9208      	str	r2, [sp, #32]
 801cdc0:	bf54      	ite	pl
 801cdc2:	f04f 0800 	movpl.w	r8, #0
 801cdc6:	9308      	strmi	r3, [sp, #32]
 801cdc8:	2f00      	cmp	r7, #0
 801cdca:	db39      	blt.n	801ce40 <_dtoa_r+0x218>
 801cdcc:	9b08      	ldr	r3, [sp, #32]
 801cdce:	970f      	str	r7, [sp, #60]	@ 0x3c
 801cdd0:	443b      	add	r3, r7
 801cdd2:	9308      	str	r3, [sp, #32]
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	930a      	str	r3, [sp, #40]	@ 0x28
 801cdd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdda:	2b09      	cmp	r3, #9
 801cddc:	d864      	bhi.n	801cea8 <_dtoa_r+0x280>
 801cdde:	2b05      	cmp	r3, #5
 801cde0:	bfc4      	itt	gt
 801cde2:	3b04      	subgt	r3, #4
 801cde4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801cde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cde8:	f1a3 0302 	sub.w	r3, r3, #2
 801cdec:	bfcc      	ite	gt
 801cdee:	2400      	movgt	r4, #0
 801cdf0:	2401      	movle	r4, #1
 801cdf2:	2b03      	cmp	r3, #3
 801cdf4:	d863      	bhi.n	801cebe <_dtoa_r+0x296>
 801cdf6:	e8df f003 	tbb	[pc, r3]
 801cdfa:	372a      	.short	0x372a
 801cdfc:	5535      	.short	0x5535
 801cdfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ce02:	441e      	add	r6, r3
 801ce04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ce08:	2b20      	cmp	r3, #32
 801ce0a:	bfc1      	itttt	gt
 801ce0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ce10:	409f      	lslgt	r7, r3
 801ce12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ce16:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ce1a:	bfd6      	itet	le
 801ce1c:	f1c3 0320 	rsble	r3, r3, #32
 801ce20:	ea47 0003 	orrgt.w	r0, r7, r3
 801ce24:	fa04 f003 	lslle.w	r0, r4, r3
 801ce28:	f7e3 fb54 	bl	80004d4 <__aeabi_ui2d>
 801ce2c:	2201      	movs	r2, #1
 801ce2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ce32:	3e01      	subs	r6, #1
 801ce34:	9214      	str	r2, [sp, #80]	@ 0x50
 801ce36:	e777      	b.n	801cd28 <_dtoa_r+0x100>
 801ce38:	2301      	movs	r3, #1
 801ce3a:	e7b8      	b.n	801cdae <_dtoa_r+0x186>
 801ce3c:	9012      	str	r0, [sp, #72]	@ 0x48
 801ce3e:	e7b7      	b.n	801cdb0 <_dtoa_r+0x188>
 801ce40:	427b      	negs	r3, r7
 801ce42:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce44:	2300      	movs	r3, #0
 801ce46:	eba8 0807 	sub.w	r8, r8, r7
 801ce4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ce4c:	e7c4      	b.n	801cdd8 <_dtoa_r+0x1b0>
 801ce4e:	2300      	movs	r3, #0
 801ce50:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	dc35      	bgt.n	801cec4 <_dtoa_r+0x29c>
 801ce58:	2301      	movs	r3, #1
 801ce5a:	9300      	str	r3, [sp, #0]
 801ce5c:	9307      	str	r3, [sp, #28]
 801ce5e:	461a      	mov	r2, r3
 801ce60:	920e      	str	r2, [sp, #56]	@ 0x38
 801ce62:	e00b      	b.n	801ce7c <_dtoa_r+0x254>
 801ce64:	2301      	movs	r3, #1
 801ce66:	e7f3      	b.n	801ce50 <_dtoa_r+0x228>
 801ce68:	2300      	movs	r3, #0
 801ce6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce6e:	18fb      	adds	r3, r7, r3
 801ce70:	9300      	str	r3, [sp, #0]
 801ce72:	3301      	adds	r3, #1
 801ce74:	2b01      	cmp	r3, #1
 801ce76:	9307      	str	r3, [sp, #28]
 801ce78:	bfb8      	it	lt
 801ce7a:	2301      	movlt	r3, #1
 801ce7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ce80:	2100      	movs	r1, #0
 801ce82:	2204      	movs	r2, #4
 801ce84:	f102 0514 	add.w	r5, r2, #20
 801ce88:	429d      	cmp	r5, r3
 801ce8a:	d91f      	bls.n	801cecc <_dtoa_r+0x2a4>
 801ce8c:	6041      	str	r1, [r0, #4]
 801ce8e:	4658      	mov	r0, fp
 801ce90:	f000 fd8e 	bl	801d9b0 <_Balloc>
 801ce94:	4682      	mov	sl, r0
 801ce96:	2800      	cmp	r0, #0
 801ce98:	d13c      	bne.n	801cf14 <_dtoa_r+0x2ec>
 801ce9a:	4b1b      	ldr	r3, [pc, #108]	@ (801cf08 <_dtoa_r+0x2e0>)
 801ce9c:	4602      	mov	r2, r0
 801ce9e:	f240 11af 	movw	r1, #431	@ 0x1af
 801cea2:	e6d8      	b.n	801cc56 <_dtoa_r+0x2e>
 801cea4:	2301      	movs	r3, #1
 801cea6:	e7e0      	b.n	801ce6a <_dtoa_r+0x242>
 801cea8:	2401      	movs	r4, #1
 801ceaa:	2300      	movs	r3, #0
 801ceac:	9309      	str	r3, [sp, #36]	@ 0x24
 801ceae:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ceb0:	f04f 33ff 	mov.w	r3, #4294967295
 801ceb4:	9300      	str	r3, [sp, #0]
 801ceb6:	9307      	str	r3, [sp, #28]
 801ceb8:	2200      	movs	r2, #0
 801ceba:	2312      	movs	r3, #18
 801cebc:	e7d0      	b.n	801ce60 <_dtoa_r+0x238>
 801cebe:	2301      	movs	r3, #1
 801cec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cec2:	e7f5      	b.n	801ceb0 <_dtoa_r+0x288>
 801cec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cec6:	9300      	str	r3, [sp, #0]
 801cec8:	9307      	str	r3, [sp, #28]
 801ceca:	e7d7      	b.n	801ce7c <_dtoa_r+0x254>
 801cecc:	3101      	adds	r1, #1
 801cece:	0052      	lsls	r2, r2, #1
 801ced0:	e7d8      	b.n	801ce84 <_dtoa_r+0x25c>
 801ced2:	bf00      	nop
 801ced4:	f3af 8000 	nop.w
 801ced8:	636f4361 	.word	0x636f4361
 801cedc:	3fd287a7 	.word	0x3fd287a7
 801cee0:	8b60c8b3 	.word	0x8b60c8b3
 801cee4:	3fc68a28 	.word	0x3fc68a28
 801cee8:	509f79fb 	.word	0x509f79fb
 801ceec:	3fd34413 	.word	0x3fd34413
 801cef0:	08020ca9 	.word	0x08020ca9
 801cef4:	08020cc0 	.word	0x08020cc0
 801cef8:	7ff00000 	.word	0x7ff00000
 801cefc:	08020c79 	.word	0x08020c79
 801cf00:	3ff80000 	.word	0x3ff80000
 801cf04:	08020db8 	.word	0x08020db8
 801cf08:	08020d18 	.word	0x08020d18
 801cf0c:	08020ca5 	.word	0x08020ca5
 801cf10:	08020c78 	.word	0x08020c78
 801cf14:	f8db 301c 	ldr.w	r3, [fp, #28]
 801cf18:	6018      	str	r0, [r3, #0]
 801cf1a:	9b07      	ldr	r3, [sp, #28]
 801cf1c:	2b0e      	cmp	r3, #14
 801cf1e:	f200 80a4 	bhi.w	801d06a <_dtoa_r+0x442>
 801cf22:	2c00      	cmp	r4, #0
 801cf24:	f000 80a1 	beq.w	801d06a <_dtoa_r+0x442>
 801cf28:	2f00      	cmp	r7, #0
 801cf2a:	dd33      	ble.n	801cf94 <_dtoa_r+0x36c>
 801cf2c:	4bad      	ldr	r3, [pc, #692]	@ (801d1e4 <_dtoa_r+0x5bc>)
 801cf2e:	f007 020f 	and.w	r2, r7, #15
 801cf32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cf36:	ed93 7b00 	vldr	d7, [r3]
 801cf3a:	05f8      	lsls	r0, r7, #23
 801cf3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801cf40:	ea4f 1427 	mov.w	r4, r7, asr #4
 801cf44:	d516      	bpl.n	801cf74 <_dtoa_r+0x34c>
 801cf46:	4ba8      	ldr	r3, [pc, #672]	@ (801d1e8 <_dtoa_r+0x5c0>)
 801cf48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cf4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cf50:	f7e3 fc64 	bl	800081c <__aeabi_ddiv>
 801cf54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf58:	f004 040f 	and.w	r4, r4, #15
 801cf5c:	2603      	movs	r6, #3
 801cf5e:	4da2      	ldr	r5, [pc, #648]	@ (801d1e8 <_dtoa_r+0x5c0>)
 801cf60:	b954      	cbnz	r4, 801cf78 <_dtoa_r+0x350>
 801cf62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf6a:	f7e3 fc57 	bl	800081c <__aeabi_ddiv>
 801cf6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf72:	e028      	b.n	801cfc6 <_dtoa_r+0x39e>
 801cf74:	2602      	movs	r6, #2
 801cf76:	e7f2      	b.n	801cf5e <_dtoa_r+0x336>
 801cf78:	07e1      	lsls	r1, r4, #31
 801cf7a:	d508      	bpl.n	801cf8e <_dtoa_r+0x366>
 801cf7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cf80:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cf84:	f7e3 fb20 	bl	80005c8 <__aeabi_dmul>
 801cf88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cf8c:	3601      	adds	r6, #1
 801cf8e:	1064      	asrs	r4, r4, #1
 801cf90:	3508      	adds	r5, #8
 801cf92:	e7e5      	b.n	801cf60 <_dtoa_r+0x338>
 801cf94:	f000 80d2 	beq.w	801d13c <_dtoa_r+0x514>
 801cf98:	427c      	negs	r4, r7
 801cf9a:	4b92      	ldr	r3, [pc, #584]	@ (801d1e4 <_dtoa_r+0x5bc>)
 801cf9c:	4d92      	ldr	r5, [pc, #584]	@ (801d1e8 <_dtoa_r+0x5c0>)
 801cf9e:	f004 020f 	and.w	r2, r4, #15
 801cfa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cfae:	f7e3 fb0b 	bl	80005c8 <__aeabi_dmul>
 801cfb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cfb6:	1124      	asrs	r4, r4, #4
 801cfb8:	2300      	movs	r3, #0
 801cfba:	2602      	movs	r6, #2
 801cfbc:	2c00      	cmp	r4, #0
 801cfbe:	f040 80b2 	bne.w	801d126 <_dtoa_r+0x4fe>
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d1d3      	bne.n	801cf6e <_dtoa_r+0x346>
 801cfc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cfc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	f000 80b7 	beq.w	801d140 <_dtoa_r+0x518>
 801cfd2:	4b86      	ldr	r3, [pc, #536]	@ (801d1ec <_dtoa_r+0x5c4>)
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	4620      	mov	r0, r4
 801cfd8:	4629      	mov	r1, r5
 801cfda:	f7e3 fd67 	bl	8000aac <__aeabi_dcmplt>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	f000 80ae 	beq.w	801d140 <_dtoa_r+0x518>
 801cfe4:	9b07      	ldr	r3, [sp, #28]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	f000 80aa 	beq.w	801d140 <_dtoa_r+0x518>
 801cfec:	9b00      	ldr	r3, [sp, #0]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	dd37      	ble.n	801d062 <_dtoa_r+0x43a>
 801cff2:	1e7b      	subs	r3, r7, #1
 801cff4:	9304      	str	r3, [sp, #16]
 801cff6:	4620      	mov	r0, r4
 801cff8:	4b7d      	ldr	r3, [pc, #500]	@ (801d1f0 <_dtoa_r+0x5c8>)
 801cffa:	2200      	movs	r2, #0
 801cffc:	4629      	mov	r1, r5
 801cffe:	f7e3 fae3 	bl	80005c8 <__aeabi_dmul>
 801d002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d006:	9c00      	ldr	r4, [sp, #0]
 801d008:	3601      	adds	r6, #1
 801d00a:	4630      	mov	r0, r6
 801d00c:	f7e3 fa72 	bl	80004f4 <__aeabi_i2d>
 801d010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d014:	f7e3 fad8 	bl	80005c8 <__aeabi_dmul>
 801d018:	4b76      	ldr	r3, [pc, #472]	@ (801d1f4 <_dtoa_r+0x5cc>)
 801d01a:	2200      	movs	r2, #0
 801d01c:	f7e3 f91e 	bl	800025c <__adddf3>
 801d020:	4605      	mov	r5, r0
 801d022:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d026:	2c00      	cmp	r4, #0
 801d028:	f040 808d 	bne.w	801d146 <_dtoa_r+0x51e>
 801d02c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d030:	4b71      	ldr	r3, [pc, #452]	@ (801d1f8 <_dtoa_r+0x5d0>)
 801d032:	2200      	movs	r2, #0
 801d034:	f7e3 f910 	bl	8000258 <__aeabi_dsub>
 801d038:	4602      	mov	r2, r0
 801d03a:	460b      	mov	r3, r1
 801d03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d040:	462a      	mov	r2, r5
 801d042:	4633      	mov	r3, r6
 801d044:	f7e3 fd50 	bl	8000ae8 <__aeabi_dcmpgt>
 801d048:	2800      	cmp	r0, #0
 801d04a:	f040 828b 	bne.w	801d564 <_dtoa_r+0x93c>
 801d04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d052:	462a      	mov	r2, r5
 801d054:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d058:	f7e3 fd28 	bl	8000aac <__aeabi_dcmplt>
 801d05c:	2800      	cmp	r0, #0
 801d05e:	f040 8128 	bne.w	801d2b2 <_dtoa_r+0x68a>
 801d062:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d066:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d06a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	f2c0 815a 	blt.w	801d326 <_dtoa_r+0x6fe>
 801d072:	2f0e      	cmp	r7, #14
 801d074:	f300 8157 	bgt.w	801d326 <_dtoa_r+0x6fe>
 801d078:	4b5a      	ldr	r3, [pc, #360]	@ (801d1e4 <_dtoa_r+0x5bc>)
 801d07a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d07e:	ed93 7b00 	vldr	d7, [r3]
 801d082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d084:	2b00      	cmp	r3, #0
 801d086:	ed8d 7b00 	vstr	d7, [sp]
 801d08a:	da03      	bge.n	801d094 <_dtoa_r+0x46c>
 801d08c:	9b07      	ldr	r3, [sp, #28]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	f340 8101 	ble.w	801d296 <_dtoa_r+0x66e>
 801d094:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d098:	4656      	mov	r6, sl
 801d09a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d09e:	4620      	mov	r0, r4
 801d0a0:	4629      	mov	r1, r5
 801d0a2:	f7e3 fbbb 	bl	800081c <__aeabi_ddiv>
 801d0a6:	f7e3 fd3f 	bl	8000b28 <__aeabi_d2iz>
 801d0aa:	4680      	mov	r8, r0
 801d0ac:	f7e3 fa22 	bl	80004f4 <__aeabi_i2d>
 801d0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0b4:	f7e3 fa88 	bl	80005c8 <__aeabi_dmul>
 801d0b8:	4602      	mov	r2, r0
 801d0ba:	460b      	mov	r3, r1
 801d0bc:	4620      	mov	r0, r4
 801d0be:	4629      	mov	r1, r5
 801d0c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d0c4:	f7e3 f8c8 	bl	8000258 <__aeabi_dsub>
 801d0c8:	f806 4b01 	strb.w	r4, [r6], #1
 801d0cc:	9d07      	ldr	r5, [sp, #28]
 801d0ce:	eba6 040a 	sub.w	r4, r6, sl
 801d0d2:	42a5      	cmp	r5, r4
 801d0d4:	4602      	mov	r2, r0
 801d0d6:	460b      	mov	r3, r1
 801d0d8:	f040 8117 	bne.w	801d30a <_dtoa_r+0x6e2>
 801d0dc:	f7e3 f8be 	bl	800025c <__adddf3>
 801d0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0e4:	4604      	mov	r4, r0
 801d0e6:	460d      	mov	r5, r1
 801d0e8:	f7e3 fcfe 	bl	8000ae8 <__aeabi_dcmpgt>
 801d0ec:	2800      	cmp	r0, #0
 801d0ee:	f040 80f9 	bne.w	801d2e4 <_dtoa_r+0x6bc>
 801d0f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d0f6:	4620      	mov	r0, r4
 801d0f8:	4629      	mov	r1, r5
 801d0fa:	f7e3 fccd 	bl	8000a98 <__aeabi_dcmpeq>
 801d0fe:	b118      	cbz	r0, 801d108 <_dtoa_r+0x4e0>
 801d100:	f018 0f01 	tst.w	r8, #1
 801d104:	f040 80ee 	bne.w	801d2e4 <_dtoa_r+0x6bc>
 801d108:	4649      	mov	r1, r9
 801d10a:	4658      	mov	r0, fp
 801d10c:	f000 fc90 	bl	801da30 <_Bfree>
 801d110:	2300      	movs	r3, #0
 801d112:	7033      	strb	r3, [r6, #0]
 801d114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d116:	3701      	adds	r7, #1
 801d118:	601f      	str	r7, [r3, #0]
 801d11a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	f000 831d 	beq.w	801d75c <_dtoa_r+0xb34>
 801d122:	601e      	str	r6, [r3, #0]
 801d124:	e31a      	b.n	801d75c <_dtoa_r+0xb34>
 801d126:	07e2      	lsls	r2, r4, #31
 801d128:	d505      	bpl.n	801d136 <_dtoa_r+0x50e>
 801d12a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d12e:	f7e3 fa4b 	bl	80005c8 <__aeabi_dmul>
 801d132:	3601      	adds	r6, #1
 801d134:	2301      	movs	r3, #1
 801d136:	1064      	asrs	r4, r4, #1
 801d138:	3508      	adds	r5, #8
 801d13a:	e73f      	b.n	801cfbc <_dtoa_r+0x394>
 801d13c:	2602      	movs	r6, #2
 801d13e:	e742      	b.n	801cfc6 <_dtoa_r+0x39e>
 801d140:	9c07      	ldr	r4, [sp, #28]
 801d142:	9704      	str	r7, [sp, #16]
 801d144:	e761      	b.n	801d00a <_dtoa_r+0x3e2>
 801d146:	4b27      	ldr	r3, [pc, #156]	@ (801d1e4 <_dtoa_r+0x5bc>)
 801d148:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d14a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d14e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d152:	4454      	add	r4, sl
 801d154:	2900      	cmp	r1, #0
 801d156:	d053      	beq.n	801d200 <_dtoa_r+0x5d8>
 801d158:	4928      	ldr	r1, [pc, #160]	@ (801d1fc <_dtoa_r+0x5d4>)
 801d15a:	2000      	movs	r0, #0
 801d15c:	f7e3 fb5e 	bl	800081c <__aeabi_ddiv>
 801d160:	4633      	mov	r3, r6
 801d162:	462a      	mov	r2, r5
 801d164:	f7e3 f878 	bl	8000258 <__aeabi_dsub>
 801d168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d16c:	4656      	mov	r6, sl
 801d16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d172:	f7e3 fcd9 	bl	8000b28 <__aeabi_d2iz>
 801d176:	4605      	mov	r5, r0
 801d178:	f7e3 f9bc 	bl	80004f4 <__aeabi_i2d>
 801d17c:	4602      	mov	r2, r0
 801d17e:	460b      	mov	r3, r1
 801d180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d184:	f7e3 f868 	bl	8000258 <__aeabi_dsub>
 801d188:	3530      	adds	r5, #48	@ 0x30
 801d18a:	4602      	mov	r2, r0
 801d18c:	460b      	mov	r3, r1
 801d18e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d192:	f806 5b01 	strb.w	r5, [r6], #1
 801d196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d19a:	f7e3 fc87 	bl	8000aac <__aeabi_dcmplt>
 801d19e:	2800      	cmp	r0, #0
 801d1a0:	d171      	bne.n	801d286 <_dtoa_r+0x65e>
 801d1a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d1a6:	4911      	ldr	r1, [pc, #68]	@ (801d1ec <_dtoa_r+0x5c4>)
 801d1a8:	2000      	movs	r0, #0
 801d1aa:	f7e3 f855 	bl	8000258 <__aeabi_dsub>
 801d1ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d1b2:	f7e3 fc7b 	bl	8000aac <__aeabi_dcmplt>
 801d1b6:	2800      	cmp	r0, #0
 801d1b8:	f040 8095 	bne.w	801d2e6 <_dtoa_r+0x6be>
 801d1bc:	42a6      	cmp	r6, r4
 801d1be:	f43f af50 	beq.w	801d062 <_dtoa_r+0x43a>
 801d1c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d1c6:	4b0a      	ldr	r3, [pc, #40]	@ (801d1f0 <_dtoa_r+0x5c8>)
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	f7e3 f9fd 	bl	80005c8 <__aeabi_dmul>
 801d1ce:	4b08      	ldr	r3, [pc, #32]	@ (801d1f0 <_dtoa_r+0x5c8>)
 801d1d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d1da:	f7e3 f9f5 	bl	80005c8 <__aeabi_dmul>
 801d1de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d1e2:	e7c4      	b.n	801d16e <_dtoa_r+0x546>
 801d1e4:	08020db8 	.word	0x08020db8
 801d1e8:	08020d90 	.word	0x08020d90
 801d1ec:	3ff00000 	.word	0x3ff00000
 801d1f0:	40240000 	.word	0x40240000
 801d1f4:	401c0000 	.word	0x401c0000
 801d1f8:	40140000 	.word	0x40140000
 801d1fc:	3fe00000 	.word	0x3fe00000
 801d200:	4631      	mov	r1, r6
 801d202:	4628      	mov	r0, r5
 801d204:	f7e3 f9e0 	bl	80005c8 <__aeabi_dmul>
 801d208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d20c:	9415      	str	r4, [sp, #84]	@ 0x54
 801d20e:	4656      	mov	r6, sl
 801d210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d214:	f7e3 fc88 	bl	8000b28 <__aeabi_d2iz>
 801d218:	4605      	mov	r5, r0
 801d21a:	f7e3 f96b 	bl	80004f4 <__aeabi_i2d>
 801d21e:	4602      	mov	r2, r0
 801d220:	460b      	mov	r3, r1
 801d222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d226:	f7e3 f817 	bl	8000258 <__aeabi_dsub>
 801d22a:	3530      	adds	r5, #48	@ 0x30
 801d22c:	f806 5b01 	strb.w	r5, [r6], #1
 801d230:	4602      	mov	r2, r0
 801d232:	460b      	mov	r3, r1
 801d234:	42a6      	cmp	r6, r4
 801d236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d23a:	f04f 0200 	mov.w	r2, #0
 801d23e:	d124      	bne.n	801d28a <_dtoa_r+0x662>
 801d240:	4bac      	ldr	r3, [pc, #688]	@ (801d4f4 <_dtoa_r+0x8cc>)
 801d242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d246:	f7e3 f809 	bl	800025c <__adddf3>
 801d24a:	4602      	mov	r2, r0
 801d24c:	460b      	mov	r3, r1
 801d24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d252:	f7e3 fc49 	bl	8000ae8 <__aeabi_dcmpgt>
 801d256:	2800      	cmp	r0, #0
 801d258:	d145      	bne.n	801d2e6 <_dtoa_r+0x6be>
 801d25a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d25e:	49a5      	ldr	r1, [pc, #660]	@ (801d4f4 <_dtoa_r+0x8cc>)
 801d260:	2000      	movs	r0, #0
 801d262:	f7e2 fff9 	bl	8000258 <__aeabi_dsub>
 801d266:	4602      	mov	r2, r0
 801d268:	460b      	mov	r3, r1
 801d26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d26e:	f7e3 fc1d 	bl	8000aac <__aeabi_dcmplt>
 801d272:	2800      	cmp	r0, #0
 801d274:	f43f aef5 	beq.w	801d062 <_dtoa_r+0x43a>
 801d278:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801d27a:	1e73      	subs	r3, r6, #1
 801d27c:	9315      	str	r3, [sp, #84]	@ 0x54
 801d27e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d282:	2b30      	cmp	r3, #48	@ 0x30
 801d284:	d0f8      	beq.n	801d278 <_dtoa_r+0x650>
 801d286:	9f04      	ldr	r7, [sp, #16]
 801d288:	e73e      	b.n	801d108 <_dtoa_r+0x4e0>
 801d28a:	4b9b      	ldr	r3, [pc, #620]	@ (801d4f8 <_dtoa_r+0x8d0>)
 801d28c:	f7e3 f99c 	bl	80005c8 <__aeabi_dmul>
 801d290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d294:	e7bc      	b.n	801d210 <_dtoa_r+0x5e8>
 801d296:	d10c      	bne.n	801d2b2 <_dtoa_r+0x68a>
 801d298:	4b98      	ldr	r3, [pc, #608]	@ (801d4fc <_dtoa_r+0x8d4>)
 801d29a:	2200      	movs	r2, #0
 801d29c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d2a0:	f7e3 f992 	bl	80005c8 <__aeabi_dmul>
 801d2a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d2a8:	f7e3 fc14 	bl	8000ad4 <__aeabi_dcmpge>
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	f000 8157 	beq.w	801d560 <_dtoa_r+0x938>
 801d2b2:	2400      	movs	r4, #0
 801d2b4:	4625      	mov	r5, r4
 801d2b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2b8:	43db      	mvns	r3, r3
 801d2ba:	9304      	str	r3, [sp, #16]
 801d2bc:	4656      	mov	r6, sl
 801d2be:	2700      	movs	r7, #0
 801d2c0:	4621      	mov	r1, r4
 801d2c2:	4658      	mov	r0, fp
 801d2c4:	f000 fbb4 	bl	801da30 <_Bfree>
 801d2c8:	2d00      	cmp	r5, #0
 801d2ca:	d0dc      	beq.n	801d286 <_dtoa_r+0x65e>
 801d2cc:	b12f      	cbz	r7, 801d2da <_dtoa_r+0x6b2>
 801d2ce:	42af      	cmp	r7, r5
 801d2d0:	d003      	beq.n	801d2da <_dtoa_r+0x6b2>
 801d2d2:	4639      	mov	r1, r7
 801d2d4:	4658      	mov	r0, fp
 801d2d6:	f000 fbab 	bl	801da30 <_Bfree>
 801d2da:	4629      	mov	r1, r5
 801d2dc:	4658      	mov	r0, fp
 801d2de:	f000 fba7 	bl	801da30 <_Bfree>
 801d2e2:	e7d0      	b.n	801d286 <_dtoa_r+0x65e>
 801d2e4:	9704      	str	r7, [sp, #16]
 801d2e6:	4633      	mov	r3, r6
 801d2e8:	461e      	mov	r6, r3
 801d2ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d2ee:	2a39      	cmp	r2, #57	@ 0x39
 801d2f0:	d107      	bne.n	801d302 <_dtoa_r+0x6da>
 801d2f2:	459a      	cmp	sl, r3
 801d2f4:	d1f8      	bne.n	801d2e8 <_dtoa_r+0x6c0>
 801d2f6:	9a04      	ldr	r2, [sp, #16]
 801d2f8:	3201      	adds	r2, #1
 801d2fa:	9204      	str	r2, [sp, #16]
 801d2fc:	2230      	movs	r2, #48	@ 0x30
 801d2fe:	f88a 2000 	strb.w	r2, [sl]
 801d302:	781a      	ldrb	r2, [r3, #0]
 801d304:	3201      	adds	r2, #1
 801d306:	701a      	strb	r2, [r3, #0]
 801d308:	e7bd      	b.n	801d286 <_dtoa_r+0x65e>
 801d30a:	4b7b      	ldr	r3, [pc, #492]	@ (801d4f8 <_dtoa_r+0x8d0>)
 801d30c:	2200      	movs	r2, #0
 801d30e:	f7e3 f95b 	bl	80005c8 <__aeabi_dmul>
 801d312:	2200      	movs	r2, #0
 801d314:	2300      	movs	r3, #0
 801d316:	4604      	mov	r4, r0
 801d318:	460d      	mov	r5, r1
 801d31a:	f7e3 fbbd 	bl	8000a98 <__aeabi_dcmpeq>
 801d31e:	2800      	cmp	r0, #0
 801d320:	f43f aebb 	beq.w	801d09a <_dtoa_r+0x472>
 801d324:	e6f0      	b.n	801d108 <_dtoa_r+0x4e0>
 801d326:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d328:	2a00      	cmp	r2, #0
 801d32a:	f000 80db 	beq.w	801d4e4 <_dtoa_r+0x8bc>
 801d32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d330:	2a01      	cmp	r2, #1
 801d332:	f300 80bf 	bgt.w	801d4b4 <_dtoa_r+0x88c>
 801d336:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d338:	2a00      	cmp	r2, #0
 801d33a:	f000 80b7 	beq.w	801d4ac <_dtoa_r+0x884>
 801d33e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d342:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d344:	4646      	mov	r6, r8
 801d346:	9a08      	ldr	r2, [sp, #32]
 801d348:	2101      	movs	r1, #1
 801d34a:	441a      	add	r2, r3
 801d34c:	4658      	mov	r0, fp
 801d34e:	4498      	add	r8, r3
 801d350:	9208      	str	r2, [sp, #32]
 801d352:	f000 fc21 	bl	801db98 <__i2b>
 801d356:	4605      	mov	r5, r0
 801d358:	b15e      	cbz	r6, 801d372 <_dtoa_r+0x74a>
 801d35a:	9b08      	ldr	r3, [sp, #32]
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	dd08      	ble.n	801d372 <_dtoa_r+0x74a>
 801d360:	42b3      	cmp	r3, r6
 801d362:	9a08      	ldr	r2, [sp, #32]
 801d364:	bfa8      	it	ge
 801d366:	4633      	movge	r3, r6
 801d368:	eba8 0803 	sub.w	r8, r8, r3
 801d36c:	1af6      	subs	r6, r6, r3
 801d36e:	1ad3      	subs	r3, r2, r3
 801d370:	9308      	str	r3, [sp, #32]
 801d372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d374:	b1f3      	cbz	r3, 801d3b4 <_dtoa_r+0x78c>
 801d376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d378:	2b00      	cmp	r3, #0
 801d37a:	f000 80b7 	beq.w	801d4ec <_dtoa_r+0x8c4>
 801d37e:	b18c      	cbz	r4, 801d3a4 <_dtoa_r+0x77c>
 801d380:	4629      	mov	r1, r5
 801d382:	4622      	mov	r2, r4
 801d384:	4658      	mov	r0, fp
 801d386:	f000 fcc7 	bl	801dd18 <__pow5mult>
 801d38a:	464a      	mov	r2, r9
 801d38c:	4601      	mov	r1, r0
 801d38e:	4605      	mov	r5, r0
 801d390:	4658      	mov	r0, fp
 801d392:	f000 fc17 	bl	801dbc4 <__multiply>
 801d396:	4649      	mov	r1, r9
 801d398:	9004      	str	r0, [sp, #16]
 801d39a:	4658      	mov	r0, fp
 801d39c:	f000 fb48 	bl	801da30 <_Bfree>
 801d3a0:	9b04      	ldr	r3, [sp, #16]
 801d3a2:	4699      	mov	r9, r3
 801d3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d3a6:	1b1a      	subs	r2, r3, r4
 801d3a8:	d004      	beq.n	801d3b4 <_dtoa_r+0x78c>
 801d3aa:	4649      	mov	r1, r9
 801d3ac:	4658      	mov	r0, fp
 801d3ae:	f000 fcb3 	bl	801dd18 <__pow5mult>
 801d3b2:	4681      	mov	r9, r0
 801d3b4:	2101      	movs	r1, #1
 801d3b6:	4658      	mov	r0, fp
 801d3b8:	f000 fbee 	bl	801db98 <__i2b>
 801d3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d3be:	4604      	mov	r4, r0
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	f000 81cf 	beq.w	801d764 <_dtoa_r+0xb3c>
 801d3c6:	461a      	mov	r2, r3
 801d3c8:	4601      	mov	r1, r0
 801d3ca:	4658      	mov	r0, fp
 801d3cc:	f000 fca4 	bl	801dd18 <__pow5mult>
 801d3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3d2:	2b01      	cmp	r3, #1
 801d3d4:	4604      	mov	r4, r0
 801d3d6:	f300 8095 	bgt.w	801d504 <_dtoa_r+0x8dc>
 801d3da:	9b02      	ldr	r3, [sp, #8]
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	f040 8087 	bne.w	801d4f0 <_dtoa_r+0x8c8>
 801d3e2:	9b03      	ldr	r3, [sp, #12]
 801d3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	f040 8089 	bne.w	801d500 <_dtoa_r+0x8d8>
 801d3ee:	9b03      	ldr	r3, [sp, #12]
 801d3f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d3f4:	0d1b      	lsrs	r3, r3, #20
 801d3f6:	051b      	lsls	r3, r3, #20
 801d3f8:	b12b      	cbz	r3, 801d406 <_dtoa_r+0x7de>
 801d3fa:	9b08      	ldr	r3, [sp, #32]
 801d3fc:	3301      	adds	r3, #1
 801d3fe:	9308      	str	r3, [sp, #32]
 801d400:	f108 0801 	add.w	r8, r8, #1
 801d404:	2301      	movs	r3, #1
 801d406:	930a      	str	r3, [sp, #40]	@ 0x28
 801d408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	f000 81b0 	beq.w	801d770 <_dtoa_r+0xb48>
 801d410:	6923      	ldr	r3, [r4, #16]
 801d412:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d416:	6918      	ldr	r0, [r3, #16]
 801d418:	f000 fb72 	bl	801db00 <__hi0bits>
 801d41c:	f1c0 0020 	rsb	r0, r0, #32
 801d420:	9b08      	ldr	r3, [sp, #32]
 801d422:	4418      	add	r0, r3
 801d424:	f010 001f 	ands.w	r0, r0, #31
 801d428:	d077      	beq.n	801d51a <_dtoa_r+0x8f2>
 801d42a:	f1c0 0320 	rsb	r3, r0, #32
 801d42e:	2b04      	cmp	r3, #4
 801d430:	dd6b      	ble.n	801d50a <_dtoa_r+0x8e2>
 801d432:	9b08      	ldr	r3, [sp, #32]
 801d434:	f1c0 001c 	rsb	r0, r0, #28
 801d438:	4403      	add	r3, r0
 801d43a:	4480      	add	r8, r0
 801d43c:	4406      	add	r6, r0
 801d43e:	9308      	str	r3, [sp, #32]
 801d440:	f1b8 0f00 	cmp.w	r8, #0
 801d444:	dd05      	ble.n	801d452 <_dtoa_r+0x82a>
 801d446:	4649      	mov	r1, r9
 801d448:	4642      	mov	r2, r8
 801d44a:	4658      	mov	r0, fp
 801d44c:	f000 fcbe 	bl	801ddcc <__lshift>
 801d450:	4681      	mov	r9, r0
 801d452:	9b08      	ldr	r3, [sp, #32]
 801d454:	2b00      	cmp	r3, #0
 801d456:	dd05      	ble.n	801d464 <_dtoa_r+0x83c>
 801d458:	4621      	mov	r1, r4
 801d45a:	461a      	mov	r2, r3
 801d45c:	4658      	mov	r0, fp
 801d45e:	f000 fcb5 	bl	801ddcc <__lshift>
 801d462:	4604      	mov	r4, r0
 801d464:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d466:	2b00      	cmp	r3, #0
 801d468:	d059      	beq.n	801d51e <_dtoa_r+0x8f6>
 801d46a:	4621      	mov	r1, r4
 801d46c:	4648      	mov	r0, r9
 801d46e:	f000 fd19 	bl	801dea4 <__mcmp>
 801d472:	2800      	cmp	r0, #0
 801d474:	da53      	bge.n	801d51e <_dtoa_r+0x8f6>
 801d476:	1e7b      	subs	r3, r7, #1
 801d478:	9304      	str	r3, [sp, #16]
 801d47a:	4649      	mov	r1, r9
 801d47c:	2300      	movs	r3, #0
 801d47e:	220a      	movs	r2, #10
 801d480:	4658      	mov	r0, fp
 801d482:	f000 faf7 	bl	801da74 <__multadd>
 801d486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d488:	4681      	mov	r9, r0
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	f000 8172 	beq.w	801d774 <_dtoa_r+0xb4c>
 801d490:	2300      	movs	r3, #0
 801d492:	4629      	mov	r1, r5
 801d494:	220a      	movs	r2, #10
 801d496:	4658      	mov	r0, fp
 801d498:	f000 faec 	bl	801da74 <__multadd>
 801d49c:	9b00      	ldr	r3, [sp, #0]
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	4605      	mov	r5, r0
 801d4a2:	dc67      	bgt.n	801d574 <_dtoa_r+0x94c>
 801d4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4a6:	2b02      	cmp	r3, #2
 801d4a8:	dc41      	bgt.n	801d52e <_dtoa_r+0x906>
 801d4aa:	e063      	b.n	801d574 <_dtoa_r+0x94c>
 801d4ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d4ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d4b2:	e746      	b.n	801d342 <_dtoa_r+0x71a>
 801d4b4:	9b07      	ldr	r3, [sp, #28]
 801d4b6:	1e5c      	subs	r4, r3, #1
 801d4b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d4ba:	42a3      	cmp	r3, r4
 801d4bc:	bfbf      	itttt	lt
 801d4be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d4c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801d4c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801d4c4:	1ae3      	sublt	r3, r4, r3
 801d4c6:	bfb4      	ite	lt
 801d4c8:	18d2      	addlt	r2, r2, r3
 801d4ca:	1b1c      	subge	r4, r3, r4
 801d4cc:	9b07      	ldr	r3, [sp, #28]
 801d4ce:	bfbc      	itt	lt
 801d4d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801d4d2:	2400      	movlt	r4, #0
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	bfb5      	itete	lt
 801d4d8:	eba8 0603 	sublt.w	r6, r8, r3
 801d4dc:	9b07      	ldrge	r3, [sp, #28]
 801d4de:	2300      	movlt	r3, #0
 801d4e0:	4646      	movge	r6, r8
 801d4e2:	e730      	b.n	801d346 <_dtoa_r+0x71e>
 801d4e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d4e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d4e8:	4646      	mov	r6, r8
 801d4ea:	e735      	b.n	801d358 <_dtoa_r+0x730>
 801d4ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d4ee:	e75c      	b.n	801d3aa <_dtoa_r+0x782>
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	e788      	b.n	801d406 <_dtoa_r+0x7de>
 801d4f4:	3fe00000 	.word	0x3fe00000
 801d4f8:	40240000 	.word	0x40240000
 801d4fc:	40140000 	.word	0x40140000
 801d500:	9b02      	ldr	r3, [sp, #8]
 801d502:	e780      	b.n	801d406 <_dtoa_r+0x7de>
 801d504:	2300      	movs	r3, #0
 801d506:	930a      	str	r3, [sp, #40]	@ 0x28
 801d508:	e782      	b.n	801d410 <_dtoa_r+0x7e8>
 801d50a:	d099      	beq.n	801d440 <_dtoa_r+0x818>
 801d50c:	9a08      	ldr	r2, [sp, #32]
 801d50e:	331c      	adds	r3, #28
 801d510:	441a      	add	r2, r3
 801d512:	4498      	add	r8, r3
 801d514:	441e      	add	r6, r3
 801d516:	9208      	str	r2, [sp, #32]
 801d518:	e792      	b.n	801d440 <_dtoa_r+0x818>
 801d51a:	4603      	mov	r3, r0
 801d51c:	e7f6      	b.n	801d50c <_dtoa_r+0x8e4>
 801d51e:	9b07      	ldr	r3, [sp, #28]
 801d520:	9704      	str	r7, [sp, #16]
 801d522:	2b00      	cmp	r3, #0
 801d524:	dc20      	bgt.n	801d568 <_dtoa_r+0x940>
 801d526:	9300      	str	r3, [sp, #0]
 801d528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d52a:	2b02      	cmp	r3, #2
 801d52c:	dd1e      	ble.n	801d56c <_dtoa_r+0x944>
 801d52e:	9b00      	ldr	r3, [sp, #0]
 801d530:	2b00      	cmp	r3, #0
 801d532:	f47f aec0 	bne.w	801d2b6 <_dtoa_r+0x68e>
 801d536:	4621      	mov	r1, r4
 801d538:	2205      	movs	r2, #5
 801d53a:	4658      	mov	r0, fp
 801d53c:	f000 fa9a 	bl	801da74 <__multadd>
 801d540:	4601      	mov	r1, r0
 801d542:	4604      	mov	r4, r0
 801d544:	4648      	mov	r0, r9
 801d546:	f000 fcad 	bl	801dea4 <__mcmp>
 801d54a:	2800      	cmp	r0, #0
 801d54c:	f77f aeb3 	ble.w	801d2b6 <_dtoa_r+0x68e>
 801d550:	4656      	mov	r6, sl
 801d552:	2331      	movs	r3, #49	@ 0x31
 801d554:	f806 3b01 	strb.w	r3, [r6], #1
 801d558:	9b04      	ldr	r3, [sp, #16]
 801d55a:	3301      	adds	r3, #1
 801d55c:	9304      	str	r3, [sp, #16]
 801d55e:	e6ae      	b.n	801d2be <_dtoa_r+0x696>
 801d560:	9c07      	ldr	r4, [sp, #28]
 801d562:	9704      	str	r7, [sp, #16]
 801d564:	4625      	mov	r5, r4
 801d566:	e7f3      	b.n	801d550 <_dtoa_r+0x928>
 801d568:	9b07      	ldr	r3, [sp, #28]
 801d56a:	9300      	str	r3, [sp, #0]
 801d56c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d56e:	2b00      	cmp	r3, #0
 801d570:	f000 8104 	beq.w	801d77c <_dtoa_r+0xb54>
 801d574:	2e00      	cmp	r6, #0
 801d576:	dd05      	ble.n	801d584 <_dtoa_r+0x95c>
 801d578:	4629      	mov	r1, r5
 801d57a:	4632      	mov	r2, r6
 801d57c:	4658      	mov	r0, fp
 801d57e:	f000 fc25 	bl	801ddcc <__lshift>
 801d582:	4605      	mov	r5, r0
 801d584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d586:	2b00      	cmp	r3, #0
 801d588:	d05a      	beq.n	801d640 <_dtoa_r+0xa18>
 801d58a:	6869      	ldr	r1, [r5, #4]
 801d58c:	4658      	mov	r0, fp
 801d58e:	f000 fa0f 	bl	801d9b0 <_Balloc>
 801d592:	4606      	mov	r6, r0
 801d594:	b928      	cbnz	r0, 801d5a2 <_dtoa_r+0x97a>
 801d596:	4b84      	ldr	r3, [pc, #528]	@ (801d7a8 <_dtoa_r+0xb80>)
 801d598:	4602      	mov	r2, r0
 801d59a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d59e:	f7ff bb5a 	b.w	801cc56 <_dtoa_r+0x2e>
 801d5a2:	692a      	ldr	r2, [r5, #16]
 801d5a4:	3202      	adds	r2, #2
 801d5a6:	0092      	lsls	r2, r2, #2
 801d5a8:	f105 010c 	add.w	r1, r5, #12
 801d5ac:	300c      	adds	r0, #12
 801d5ae:	f7ff faa2 	bl	801caf6 <memcpy>
 801d5b2:	2201      	movs	r2, #1
 801d5b4:	4631      	mov	r1, r6
 801d5b6:	4658      	mov	r0, fp
 801d5b8:	f000 fc08 	bl	801ddcc <__lshift>
 801d5bc:	f10a 0301 	add.w	r3, sl, #1
 801d5c0:	9307      	str	r3, [sp, #28]
 801d5c2:	9b00      	ldr	r3, [sp, #0]
 801d5c4:	4453      	add	r3, sl
 801d5c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d5c8:	9b02      	ldr	r3, [sp, #8]
 801d5ca:	f003 0301 	and.w	r3, r3, #1
 801d5ce:	462f      	mov	r7, r5
 801d5d0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5d2:	4605      	mov	r5, r0
 801d5d4:	9b07      	ldr	r3, [sp, #28]
 801d5d6:	4621      	mov	r1, r4
 801d5d8:	3b01      	subs	r3, #1
 801d5da:	4648      	mov	r0, r9
 801d5dc:	9300      	str	r3, [sp, #0]
 801d5de:	f7ff fa98 	bl	801cb12 <quorem>
 801d5e2:	4639      	mov	r1, r7
 801d5e4:	9002      	str	r0, [sp, #8]
 801d5e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d5ea:	4648      	mov	r0, r9
 801d5ec:	f000 fc5a 	bl	801dea4 <__mcmp>
 801d5f0:	462a      	mov	r2, r5
 801d5f2:	9008      	str	r0, [sp, #32]
 801d5f4:	4621      	mov	r1, r4
 801d5f6:	4658      	mov	r0, fp
 801d5f8:	f000 fc70 	bl	801dedc <__mdiff>
 801d5fc:	68c2      	ldr	r2, [r0, #12]
 801d5fe:	4606      	mov	r6, r0
 801d600:	bb02      	cbnz	r2, 801d644 <_dtoa_r+0xa1c>
 801d602:	4601      	mov	r1, r0
 801d604:	4648      	mov	r0, r9
 801d606:	f000 fc4d 	bl	801dea4 <__mcmp>
 801d60a:	4602      	mov	r2, r0
 801d60c:	4631      	mov	r1, r6
 801d60e:	4658      	mov	r0, fp
 801d610:	920e      	str	r2, [sp, #56]	@ 0x38
 801d612:	f000 fa0d 	bl	801da30 <_Bfree>
 801d616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d61a:	9e07      	ldr	r6, [sp, #28]
 801d61c:	ea43 0102 	orr.w	r1, r3, r2
 801d620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d622:	4319      	orrs	r1, r3
 801d624:	d110      	bne.n	801d648 <_dtoa_r+0xa20>
 801d626:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d62a:	d029      	beq.n	801d680 <_dtoa_r+0xa58>
 801d62c:	9b08      	ldr	r3, [sp, #32]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	dd02      	ble.n	801d638 <_dtoa_r+0xa10>
 801d632:	9b02      	ldr	r3, [sp, #8]
 801d634:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d638:	9b00      	ldr	r3, [sp, #0]
 801d63a:	f883 8000 	strb.w	r8, [r3]
 801d63e:	e63f      	b.n	801d2c0 <_dtoa_r+0x698>
 801d640:	4628      	mov	r0, r5
 801d642:	e7bb      	b.n	801d5bc <_dtoa_r+0x994>
 801d644:	2201      	movs	r2, #1
 801d646:	e7e1      	b.n	801d60c <_dtoa_r+0x9e4>
 801d648:	9b08      	ldr	r3, [sp, #32]
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	db04      	blt.n	801d658 <_dtoa_r+0xa30>
 801d64e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d650:	430b      	orrs	r3, r1
 801d652:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d654:	430b      	orrs	r3, r1
 801d656:	d120      	bne.n	801d69a <_dtoa_r+0xa72>
 801d658:	2a00      	cmp	r2, #0
 801d65a:	dded      	ble.n	801d638 <_dtoa_r+0xa10>
 801d65c:	4649      	mov	r1, r9
 801d65e:	2201      	movs	r2, #1
 801d660:	4658      	mov	r0, fp
 801d662:	f000 fbb3 	bl	801ddcc <__lshift>
 801d666:	4621      	mov	r1, r4
 801d668:	4681      	mov	r9, r0
 801d66a:	f000 fc1b 	bl	801dea4 <__mcmp>
 801d66e:	2800      	cmp	r0, #0
 801d670:	dc03      	bgt.n	801d67a <_dtoa_r+0xa52>
 801d672:	d1e1      	bne.n	801d638 <_dtoa_r+0xa10>
 801d674:	f018 0f01 	tst.w	r8, #1
 801d678:	d0de      	beq.n	801d638 <_dtoa_r+0xa10>
 801d67a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d67e:	d1d8      	bne.n	801d632 <_dtoa_r+0xa0a>
 801d680:	9a00      	ldr	r2, [sp, #0]
 801d682:	2339      	movs	r3, #57	@ 0x39
 801d684:	7013      	strb	r3, [r2, #0]
 801d686:	4633      	mov	r3, r6
 801d688:	461e      	mov	r6, r3
 801d68a:	3b01      	subs	r3, #1
 801d68c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d690:	2a39      	cmp	r2, #57	@ 0x39
 801d692:	d052      	beq.n	801d73a <_dtoa_r+0xb12>
 801d694:	3201      	adds	r2, #1
 801d696:	701a      	strb	r2, [r3, #0]
 801d698:	e612      	b.n	801d2c0 <_dtoa_r+0x698>
 801d69a:	2a00      	cmp	r2, #0
 801d69c:	dd07      	ble.n	801d6ae <_dtoa_r+0xa86>
 801d69e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d6a2:	d0ed      	beq.n	801d680 <_dtoa_r+0xa58>
 801d6a4:	9a00      	ldr	r2, [sp, #0]
 801d6a6:	f108 0301 	add.w	r3, r8, #1
 801d6aa:	7013      	strb	r3, [r2, #0]
 801d6ac:	e608      	b.n	801d2c0 <_dtoa_r+0x698>
 801d6ae:	9b07      	ldr	r3, [sp, #28]
 801d6b0:	9a07      	ldr	r2, [sp, #28]
 801d6b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d6b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d6b8:	4293      	cmp	r3, r2
 801d6ba:	d028      	beq.n	801d70e <_dtoa_r+0xae6>
 801d6bc:	4649      	mov	r1, r9
 801d6be:	2300      	movs	r3, #0
 801d6c0:	220a      	movs	r2, #10
 801d6c2:	4658      	mov	r0, fp
 801d6c4:	f000 f9d6 	bl	801da74 <__multadd>
 801d6c8:	42af      	cmp	r7, r5
 801d6ca:	4681      	mov	r9, r0
 801d6cc:	f04f 0300 	mov.w	r3, #0
 801d6d0:	f04f 020a 	mov.w	r2, #10
 801d6d4:	4639      	mov	r1, r7
 801d6d6:	4658      	mov	r0, fp
 801d6d8:	d107      	bne.n	801d6ea <_dtoa_r+0xac2>
 801d6da:	f000 f9cb 	bl	801da74 <__multadd>
 801d6de:	4607      	mov	r7, r0
 801d6e0:	4605      	mov	r5, r0
 801d6e2:	9b07      	ldr	r3, [sp, #28]
 801d6e4:	3301      	adds	r3, #1
 801d6e6:	9307      	str	r3, [sp, #28]
 801d6e8:	e774      	b.n	801d5d4 <_dtoa_r+0x9ac>
 801d6ea:	f000 f9c3 	bl	801da74 <__multadd>
 801d6ee:	4629      	mov	r1, r5
 801d6f0:	4607      	mov	r7, r0
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	220a      	movs	r2, #10
 801d6f6:	4658      	mov	r0, fp
 801d6f8:	f000 f9bc 	bl	801da74 <__multadd>
 801d6fc:	4605      	mov	r5, r0
 801d6fe:	e7f0      	b.n	801d6e2 <_dtoa_r+0xaba>
 801d700:	9b00      	ldr	r3, [sp, #0]
 801d702:	2b00      	cmp	r3, #0
 801d704:	bfcc      	ite	gt
 801d706:	461e      	movgt	r6, r3
 801d708:	2601      	movle	r6, #1
 801d70a:	4456      	add	r6, sl
 801d70c:	2700      	movs	r7, #0
 801d70e:	4649      	mov	r1, r9
 801d710:	2201      	movs	r2, #1
 801d712:	4658      	mov	r0, fp
 801d714:	f000 fb5a 	bl	801ddcc <__lshift>
 801d718:	4621      	mov	r1, r4
 801d71a:	4681      	mov	r9, r0
 801d71c:	f000 fbc2 	bl	801dea4 <__mcmp>
 801d720:	2800      	cmp	r0, #0
 801d722:	dcb0      	bgt.n	801d686 <_dtoa_r+0xa5e>
 801d724:	d102      	bne.n	801d72c <_dtoa_r+0xb04>
 801d726:	f018 0f01 	tst.w	r8, #1
 801d72a:	d1ac      	bne.n	801d686 <_dtoa_r+0xa5e>
 801d72c:	4633      	mov	r3, r6
 801d72e:	461e      	mov	r6, r3
 801d730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d734:	2a30      	cmp	r2, #48	@ 0x30
 801d736:	d0fa      	beq.n	801d72e <_dtoa_r+0xb06>
 801d738:	e5c2      	b.n	801d2c0 <_dtoa_r+0x698>
 801d73a:	459a      	cmp	sl, r3
 801d73c:	d1a4      	bne.n	801d688 <_dtoa_r+0xa60>
 801d73e:	9b04      	ldr	r3, [sp, #16]
 801d740:	3301      	adds	r3, #1
 801d742:	9304      	str	r3, [sp, #16]
 801d744:	2331      	movs	r3, #49	@ 0x31
 801d746:	f88a 3000 	strb.w	r3, [sl]
 801d74a:	e5b9      	b.n	801d2c0 <_dtoa_r+0x698>
 801d74c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d74e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801d7ac <_dtoa_r+0xb84>
 801d752:	b11b      	cbz	r3, 801d75c <_dtoa_r+0xb34>
 801d754:	f10a 0308 	add.w	r3, sl, #8
 801d758:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d75a:	6013      	str	r3, [r2, #0]
 801d75c:	4650      	mov	r0, sl
 801d75e:	b019      	add	sp, #100	@ 0x64
 801d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d766:	2b01      	cmp	r3, #1
 801d768:	f77f ae37 	ble.w	801d3da <_dtoa_r+0x7b2>
 801d76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d76e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d770:	2001      	movs	r0, #1
 801d772:	e655      	b.n	801d420 <_dtoa_r+0x7f8>
 801d774:	9b00      	ldr	r3, [sp, #0]
 801d776:	2b00      	cmp	r3, #0
 801d778:	f77f aed6 	ble.w	801d528 <_dtoa_r+0x900>
 801d77c:	4656      	mov	r6, sl
 801d77e:	4621      	mov	r1, r4
 801d780:	4648      	mov	r0, r9
 801d782:	f7ff f9c6 	bl	801cb12 <quorem>
 801d786:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d78a:	f806 8b01 	strb.w	r8, [r6], #1
 801d78e:	9b00      	ldr	r3, [sp, #0]
 801d790:	eba6 020a 	sub.w	r2, r6, sl
 801d794:	4293      	cmp	r3, r2
 801d796:	ddb3      	ble.n	801d700 <_dtoa_r+0xad8>
 801d798:	4649      	mov	r1, r9
 801d79a:	2300      	movs	r3, #0
 801d79c:	220a      	movs	r2, #10
 801d79e:	4658      	mov	r0, fp
 801d7a0:	f000 f968 	bl	801da74 <__multadd>
 801d7a4:	4681      	mov	r9, r0
 801d7a6:	e7ea      	b.n	801d77e <_dtoa_r+0xb56>
 801d7a8:	08020d18 	.word	0x08020d18
 801d7ac:	08020c9c 	.word	0x08020c9c

0801d7b0 <_free_r>:
 801d7b0:	b538      	push	{r3, r4, r5, lr}
 801d7b2:	4605      	mov	r5, r0
 801d7b4:	2900      	cmp	r1, #0
 801d7b6:	d041      	beq.n	801d83c <_free_r+0x8c>
 801d7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d7bc:	1f0c      	subs	r4, r1, #4
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	bfb8      	it	lt
 801d7c2:	18e4      	addlt	r4, r4, r3
 801d7c4:	f000 f8e8 	bl	801d998 <__malloc_lock>
 801d7c8:	4a1d      	ldr	r2, [pc, #116]	@ (801d840 <_free_r+0x90>)
 801d7ca:	6813      	ldr	r3, [r2, #0]
 801d7cc:	b933      	cbnz	r3, 801d7dc <_free_r+0x2c>
 801d7ce:	6063      	str	r3, [r4, #4]
 801d7d0:	6014      	str	r4, [r2, #0]
 801d7d2:	4628      	mov	r0, r5
 801d7d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d7d8:	f000 b8e4 	b.w	801d9a4 <__malloc_unlock>
 801d7dc:	42a3      	cmp	r3, r4
 801d7de:	d908      	bls.n	801d7f2 <_free_r+0x42>
 801d7e0:	6820      	ldr	r0, [r4, #0]
 801d7e2:	1821      	adds	r1, r4, r0
 801d7e4:	428b      	cmp	r3, r1
 801d7e6:	bf01      	itttt	eq
 801d7e8:	6819      	ldreq	r1, [r3, #0]
 801d7ea:	685b      	ldreq	r3, [r3, #4]
 801d7ec:	1809      	addeq	r1, r1, r0
 801d7ee:	6021      	streq	r1, [r4, #0]
 801d7f0:	e7ed      	b.n	801d7ce <_free_r+0x1e>
 801d7f2:	461a      	mov	r2, r3
 801d7f4:	685b      	ldr	r3, [r3, #4]
 801d7f6:	b10b      	cbz	r3, 801d7fc <_free_r+0x4c>
 801d7f8:	42a3      	cmp	r3, r4
 801d7fa:	d9fa      	bls.n	801d7f2 <_free_r+0x42>
 801d7fc:	6811      	ldr	r1, [r2, #0]
 801d7fe:	1850      	adds	r0, r2, r1
 801d800:	42a0      	cmp	r0, r4
 801d802:	d10b      	bne.n	801d81c <_free_r+0x6c>
 801d804:	6820      	ldr	r0, [r4, #0]
 801d806:	4401      	add	r1, r0
 801d808:	1850      	adds	r0, r2, r1
 801d80a:	4283      	cmp	r3, r0
 801d80c:	6011      	str	r1, [r2, #0]
 801d80e:	d1e0      	bne.n	801d7d2 <_free_r+0x22>
 801d810:	6818      	ldr	r0, [r3, #0]
 801d812:	685b      	ldr	r3, [r3, #4]
 801d814:	6053      	str	r3, [r2, #4]
 801d816:	4408      	add	r0, r1
 801d818:	6010      	str	r0, [r2, #0]
 801d81a:	e7da      	b.n	801d7d2 <_free_r+0x22>
 801d81c:	d902      	bls.n	801d824 <_free_r+0x74>
 801d81e:	230c      	movs	r3, #12
 801d820:	602b      	str	r3, [r5, #0]
 801d822:	e7d6      	b.n	801d7d2 <_free_r+0x22>
 801d824:	6820      	ldr	r0, [r4, #0]
 801d826:	1821      	adds	r1, r4, r0
 801d828:	428b      	cmp	r3, r1
 801d82a:	bf04      	itt	eq
 801d82c:	6819      	ldreq	r1, [r3, #0]
 801d82e:	685b      	ldreq	r3, [r3, #4]
 801d830:	6063      	str	r3, [r4, #4]
 801d832:	bf04      	itt	eq
 801d834:	1809      	addeq	r1, r1, r0
 801d836:	6021      	streq	r1, [r4, #0]
 801d838:	6054      	str	r4, [r2, #4]
 801d83a:	e7ca      	b.n	801d7d2 <_free_r+0x22>
 801d83c:	bd38      	pop	{r3, r4, r5, pc}
 801d83e:	bf00      	nop
 801d840:	20002f0c 	.word	0x20002f0c

0801d844 <malloc>:
 801d844:	4b02      	ldr	r3, [pc, #8]	@ (801d850 <malloc+0xc>)
 801d846:	4601      	mov	r1, r0
 801d848:	6818      	ldr	r0, [r3, #0]
 801d84a:	f000 b825 	b.w	801d898 <_malloc_r>
 801d84e:	bf00      	nop
 801d850:	200005a8 	.word	0x200005a8

0801d854 <sbrk_aligned>:
 801d854:	b570      	push	{r4, r5, r6, lr}
 801d856:	4e0f      	ldr	r6, [pc, #60]	@ (801d894 <sbrk_aligned+0x40>)
 801d858:	460c      	mov	r4, r1
 801d85a:	6831      	ldr	r1, [r6, #0]
 801d85c:	4605      	mov	r5, r0
 801d85e:	b911      	cbnz	r1, 801d866 <sbrk_aligned+0x12>
 801d860:	f001 f80c 	bl	801e87c <_sbrk_r>
 801d864:	6030      	str	r0, [r6, #0]
 801d866:	4621      	mov	r1, r4
 801d868:	4628      	mov	r0, r5
 801d86a:	f001 f807 	bl	801e87c <_sbrk_r>
 801d86e:	1c43      	adds	r3, r0, #1
 801d870:	d103      	bne.n	801d87a <sbrk_aligned+0x26>
 801d872:	f04f 34ff 	mov.w	r4, #4294967295
 801d876:	4620      	mov	r0, r4
 801d878:	bd70      	pop	{r4, r5, r6, pc}
 801d87a:	1cc4      	adds	r4, r0, #3
 801d87c:	f024 0403 	bic.w	r4, r4, #3
 801d880:	42a0      	cmp	r0, r4
 801d882:	d0f8      	beq.n	801d876 <sbrk_aligned+0x22>
 801d884:	1a21      	subs	r1, r4, r0
 801d886:	4628      	mov	r0, r5
 801d888:	f000 fff8 	bl	801e87c <_sbrk_r>
 801d88c:	3001      	adds	r0, #1
 801d88e:	d1f2      	bne.n	801d876 <sbrk_aligned+0x22>
 801d890:	e7ef      	b.n	801d872 <sbrk_aligned+0x1e>
 801d892:	bf00      	nop
 801d894:	20002f08 	.word	0x20002f08

0801d898 <_malloc_r>:
 801d898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d89c:	1ccd      	adds	r5, r1, #3
 801d89e:	f025 0503 	bic.w	r5, r5, #3
 801d8a2:	3508      	adds	r5, #8
 801d8a4:	2d0c      	cmp	r5, #12
 801d8a6:	bf38      	it	cc
 801d8a8:	250c      	movcc	r5, #12
 801d8aa:	2d00      	cmp	r5, #0
 801d8ac:	4606      	mov	r6, r0
 801d8ae:	db01      	blt.n	801d8b4 <_malloc_r+0x1c>
 801d8b0:	42a9      	cmp	r1, r5
 801d8b2:	d904      	bls.n	801d8be <_malloc_r+0x26>
 801d8b4:	230c      	movs	r3, #12
 801d8b6:	6033      	str	r3, [r6, #0]
 801d8b8:	2000      	movs	r0, #0
 801d8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d994 <_malloc_r+0xfc>
 801d8c2:	f000 f869 	bl	801d998 <__malloc_lock>
 801d8c6:	f8d8 3000 	ldr.w	r3, [r8]
 801d8ca:	461c      	mov	r4, r3
 801d8cc:	bb44      	cbnz	r4, 801d920 <_malloc_r+0x88>
 801d8ce:	4629      	mov	r1, r5
 801d8d0:	4630      	mov	r0, r6
 801d8d2:	f7ff ffbf 	bl	801d854 <sbrk_aligned>
 801d8d6:	1c43      	adds	r3, r0, #1
 801d8d8:	4604      	mov	r4, r0
 801d8da:	d158      	bne.n	801d98e <_malloc_r+0xf6>
 801d8dc:	f8d8 4000 	ldr.w	r4, [r8]
 801d8e0:	4627      	mov	r7, r4
 801d8e2:	2f00      	cmp	r7, #0
 801d8e4:	d143      	bne.n	801d96e <_malloc_r+0xd6>
 801d8e6:	2c00      	cmp	r4, #0
 801d8e8:	d04b      	beq.n	801d982 <_malloc_r+0xea>
 801d8ea:	6823      	ldr	r3, [r4, #0]
 801d8ec:	4639      	mov	r1, r7
 801d8ee:	4630      	mov	r0, r6
 801d8f0:	eb04 0903 	add.w	r9, r4, r3
 801d8f4:	f000 ffc2 	bl	801e87c <_sbrk_r>
 801d8f8:	4581      	cmp	r9, r0
 801d8fa:	d142      	bne.n	801d982 <_malloc_r+0xea>
 801d8fc:	6821      	ldr	r1, [r4, #0]
 801d8fe:	1a6d      	subs	r5, r5, r1
 801d900:	4629      	mov	r1, r5
 801d902:	4630      	mov	r0, r6
 801d904:	f7ff ffa6 	bl	801d854 <sbrk_aligned>
 801d908:	3001      	adds	r0, #1
 801d90a:	d03a      	beq.n	801d982 <_malloc_r+0xea>
 801d90c:	6823      	ldr	r3, [r4, #0]
 801d90e:	442b      	add	r3, r5
 801d910:	6023      	str	r3, [r4, #0]
 801d912:	f8d8 3000 	ldr.w	r3, [r8]
 801d916:	685a      	ldr	r2, [r3, #4]
 801d918:	bb62      	cbnz	r2, 801d974 <_malloc_r+0xdc>
 801d91a:	f8c8 7000 	str.w	r7, [r8]
 801d91e:	e00f      	b.n	801d940 <_malloc_r+0xa8>
 801d920:	6822      	ldr	r2, [r4, #0]
 801d922:	1b52      	subs	r2, r2, r5
 801d924:	d420      	bmi.n	801d968 <_malloc_r+0xd0>
 801d926:	2a0b      	cmp	r2, #11
 801d928:	d917      	bls.n	801d95a <_malloc_r+0xc2>
 801d92a:	1961      	adds	r1, r4, r5
 801d92c:	42a3      	cmp	r3, r4
 801d92e:	6025      	str	r5, [r4, #0]
 801d930:	bf18      	it	ne
 801d932:	6059      	strne	r1, [r3, #4]
 801d934:	6863      	ldr	r3, [r4, #4]
 801d936:	bf08      	it	eq
 801d938:	f8c8 1000 	streq.w	r1, [r8]
 801d93c:	5162      	str	r2, [r4, r5]
 801d93e:	604b      	str	r3, [r1, #4]
 801d940:	4630      	mov	r0, r6
 801d942:	f000 f82f 	bl	801d9a4 <__malloc_unlock>
 801d946:	f104 000b 	add.w	r0, r4, #11
 801d94a:	1d23      	adds	r3, r4, #4
 801d94c:	f020 0007 	bic.w	r0, r0, #7
 801d950:	1ac2      	subs	r2, r0, r3
 801d952:	bf1c      	itt	ne
 801d954:	1a1b      	subne	r3, r3, r0
 801d956:	50a3      	strne	r3, [r4, r2]
 801d958:	e7af      	b.n	801d8ba <_malloc_r+0x22>
 801d95a:	6862      	ldr	r2, [r4, #4]
 801d95c:	42a3      	cmp	r3, r4
 801d95e:	bf0c      	ite	eq
 801d960:	f8c8 2000 	streq.w	r2, [r8]
 801d964:	605a      	strne	r2, [r3, #4]
 801d966:	e7eb      	b.n	801d940 <_malloc_r+0xa8>
 801d968:	4623      	mov	r3, r4
 801d96a:	6864      	ldr	r4, [r4, #4]
 801d96c:	e7ae      	b.n	801d8cc <_malloc_r+0x34>
 801d96e:	463c      	mov	r4, r7
 801d970:	687f      	ldr	r7, [r7, #4]
 801d972:	e7b6      	b.n	801d8e2 <_malloc_r+0x4a>
 801d974:	461a      	mov	r2, r3
 801d976:	685b      	ldr	r3, [r3, #4]
 801d978:	42a3      	cmp	r3, r4
 801d97a:	d1fb      	bne.n	801d974 <_malloc_r+0xdc>
 801d97c:	2300      	movs	r3, #0
 801d97e:	6053      	str	r3, [r2, #4]
 801d980:	e7de      	b.n	801d940 <_malloc_r+0xa8>
 801d982:	230c      	movs	r3, #12
 801d984:	6033      	str	r3, [r6, #0]
 801d986:	4630      	mov	r0, r6
 801d988:	f000 f80c 	bl	801d9a4 <__malloc_unlock>
 801d98c:	e794      	b.n	801d8b8 <_malloc_r+0x20>
 801d98e:	6005      	str	r5, [r0, #0]
 801d990:	e7d6      	b.n	801d940 <_malloc_r+0xa8>
 801d992:	bf00      	nop
 801d994:	20002f0c 	.word	0x20002f0c

0801d998 <__malloc_lock>:
 801d998:	4801      	ldr	r0, [pc, #4]	@ (801d9a0 <__malloc_lock+0x8>)
 801d99a:	f7ff b8a2 	b.w	801cae2 <__retarget_lock_acquire_recursive>
 801d99e:	bf00      	nop
 801d9a0:	20002f04 	.word	0x20002f04

0801d9a4 <__malloc_unlock>:
 801d9a4:	4801      	ldr	r0, [pc, #4]	@ (801d9ac <__malloc_unlock+0x8>)
 801d9a6:	f7ff b89d 	b.w	801cae4 <__retarget_lock_release_recursive>
 801d9aa:	bf00      	nop
 801d9ac:	20002f04 	.word	0x20002f04

0801d9b0 <_Balloc>:
 801d9b0:	b570      	push	{r4, r5, r6, lr}
 801d9b2:	69c6      	ldr	r6, [r0, #28]
 801d9b4:	4604      	mov	r4, r0
 801d9b6:	460d      	mov	r5, r1
 801d9b8:	b976      	cbnz	r6, 801d9d8 <_Balloc+0x28>
 801d9ba:	2010      	movs	r0, #16
 801d9bc:	f7ff ff42 	bl	801d844 <malloc>
 801d9c0:	4602      	mov	r2, r0
 801d9c2:	61e0      	str	r0, [r4, #28]
 801d9c4:	b920      	cbnz	r0, 801d9d0 <_Balloc+0x20>
 801d9c6:	4b18      	ldr	r3, [pc, #96]	@ (801da28 <_Balloc+0x78>)
 801d9c8:	4818      	ldr	r0, [pc, #96]	@ (801da2c <_Balloc+0x7c>)
 801d9ca:	216b      	movs	r1, #107	@ 0x6b
 801d9cc:	f000 ff66 	bl	801e89c <__assert_func>
 801d9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d9d4:	6006      	str	r6, [r0, #0]
 801d9d6:	60c6      	str	r6, [r0, #12]
 801d9d8:	69e6      	ldr	r6, [r4, #28]
 801d9da:	68f3      	ldr	r3, [r6, #12]
 801d9dc:	b183      	cbz	r3, 801da00 <_Balloc+0x50>
 801d9de:	69e3      	ldr	r3, [r4, #28]
 801d9e0:	68db      	ldr	r3, [r3, #12]
 801d9e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d9e6:	b9b8      	cbnz	r0, 801da18 <_Balloc+0x68>
 801d9e8:	2101      	movs	r1, #1
 801d9ea:	fa01 f605 	lsl.w	r6, r1, r5
 801d9ee:	1d72      	adds	r2, r6, #5
 801d9f0:	0092      	lsls	r2, r2, #2
 801d9f2:	4620      	mov	r0, r4
 801d9f4:	f000 ff70 	bl	801e8d8 <_calloc_r>
 801d9f8:	b160      	cbz	r0, 801da14 <_Balloc+0x64>
 801d9fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d9fe:	e00e      	b.n	801da1e <_Balloc+0x6e>
 801da00:	2221      	movs	r2, #33	@ 0x21
 801da02:	2104      	movs	r1, #4
 801da04:	4620      	mov	r0, r4
 801da06:	f000 ff67 	bl	801e8d8 <_calloc_r>
 801da0a:	69e3      	ldr	r3, [r4, #28]
 801da0c:	60f0      	str	r0, [r6, #12]
 801da0e:	68db      	ldr	r3, [r3, #12]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d1e4      	bne.n	801d9de <_Balloc+0x2e>
 801da14:	2000      	movs	r0, #0
 801da16:	bd70      	pop	{r4, r5, r6, pc}
 801da18:	6802      	ldr	r2, [r0, #0]
 801da1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801da1e:	2300      	movs	r3, #0
 801da20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da24:	e7f7      	b.n	801da16 <_Balloc+0x66>
 801da26:	bf00      	nop
 801da28:	08020ca9 	.word	0x08020ca9
 801da2c:	08020d29 	.word	0x08020d29

0801da30 <_Bfree>:
 801da30:	b570      	push	{r4, r5, r6, lr}
 801da32:	69c6      	ldr	r6, [r0, #28]
 801da34:	4605      	mov	r5, r0
 801da36:	460c      	mov	r4, r1
 801da38:	b976      	cbnz	r6, 801da58 <_Bfree+0x28>
 801da3a:	2010      	movs	r0, #16
 801da3c:	f7ff ff02 	bl	801d844 <malloc>
 801da40:	4602      	mov	r2, r0
 801da42:	61e8      	str	r0, [r5, #28]
 801da44:	b920      	cbnz	r0, 801da50 <_Bfree+0x20>
 801da46:	4b09      	ldr	r3, [pc, #36]	@ (801da6c <_Bfree+0x3c>)
 801da48:	4809      	ldr	r0, [pc, #36]	@ (801da70 <_Bfree+0x40>)
 801da4a:	218f      	movs	r1, #143	@ 0x8f
 801da4c:	f000 ff26 	bl	801e89c <__assert_func>
 801da50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da54:	6006      	str	r6, [r0, #0]
 801da56:	60c6      	str	r6, [r0, #12]
 801da58:	b13c      	cbz	r4, 801da6a <_Bfree+0x3a>
 801da5a:	69eb      	ldr	r3, [r5, #28]
 801da5c:	6862      	ldr	r2, [r4, #4]
 801da5e:	68db      	ldr	r3, [r3, #12]
 801da60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da64:	6021      	str	r1, [r4, #0]
 801da66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801da6a:	bd70      	pop	{r4, r5, r6, pc}
 801da6c:	08020ca9 	.word	0x08020ca9
 801da70:	08020d29 	.word	0x08020d29

0801da74 <__multadd>:
 801da74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da78:	690d      	ldr	r5, [r1, #16]
 801da7a:	4607      	mov	r7, r0
 801da7c:	460c      	mov	r4, r1
 801da7e:	461e      	mov	r6, r3
 801da80:	f101 0c14 	add.w	ip, r1, #20
 801da84:	2000      	movs	r0, #0
 801da86:	f8dc 3000 	ldr.w	r3, [ip]
 801da8a:	b299      	uxth	r1, r3
 801da8c:	fb02 6101 	mla	r1, r2, r1, r6
 801da90:	0c1e      	lsrs	r6, r3, #16
 801da92:	0c0b      	lsrs	r3, r1, #16
 801da94:	fb02 3306 	mla	r3, r2, r6, r3
 801da98:	b289      	uxth	r1, r1
 801da9a:	3001      	adds	r0, #1
 801da9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801daa0:	4285      	cmp	r5, r0
 801daa2:	f84c 1b04 	str.w	r1, [ip], #4
 801daa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801daaa:	dcec      	bgt.n	801da86 <__multadd+0x12>
 801daac:	b30e      	cbz	r6, 801daf2 <__multadd+0x7e>
 801daae:	68a3      	ldr	r3, [r4, #8]
 801dab0:	42ab      	cmp	r3, r5
 801dab2:	dc19      	bgt.n	801dae8 <__multadd+0x74>
 801dab4:	6861      	ldr	r1, [r4, #4]
 801dab6:	4638      	mov	r0, r7
 801dab8:	3101      	adds	r1, #1
 801daba:	f7ff ff79 	bl	801d9b0 <_Balloc>
 801dabe:	4680      	mov	r8, r0
 801dac0:	b928      	cbnz	r0, 801dace <__multadd+0x5a>
 801dac2:	4602      	mov	r2, r0
 801dac4:	4b0c      	ldr	r3, [pc, #48]	@ (801daf8 <__multadd+0x84>)
 801dac6:	480d      	ldr	r0, [pc, #52]	@ (801dafc <__multadd+0x88>)
 801dac8:	21ba      	movs	r1, #186	@ 0xba
 801daca:	f000 fee7 	bl	801e89c <__assert_func>
 801dace:	6922      	ldr	r2, [r4, #16]
 801dad0:	3202      	adds	r2, #2
 801dad2:	f104 010c 	add.w	r1, r4, #12
 801dad6:	0092      	lsls	r2, r2, #2
 801dad8:	300c      	adds	r0, #12
 801dada:	f7ff f80c 	bl	801caf6 <memcpy>
 801dade:	4621      	mov	r1, r4
 801dae0:	4638      	mov	r0, r7
 801dae2:	f7ff ffa5 	bl	801da30 <_Bfree>
 801dae6:	4644      	mov	r4, r8
 801dae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801daec:	3501      	adds	r5, #1
 801daee:	615e      	str	r6, [r3, #20]
 801daf0:	6125      	str	r5, [r4, #16]
 801daf2:	4620      	mov	r0, r4
 801daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daf8:	08020d18 	.word	0x08020d18
 801dafc:	08020d29 	.word	0x08020d29

0801db00 <__hi0bits>:
 801db00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801db04:	4603      	mov	r3, r0
 801db06:	bf36      	itet	cc
 801db08:	0403      	lslcc	r3, r0, #16
 801db0a:	2000      	movcs	r0, #0
 801db0c:	2010      	movcc	r0, #16
 801db0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801db12:	bf3c      	itt	cc
 801db14:	021b      	lslcc	r3, r3, #8
 801db16:	3008      	addcc	r0, #8
 801db18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801db1c:	bf3c      	itt	cc
 801db1e:	011b      	lslcc	r3, r3, #4
 801db20:	3004      	addcc	r0, #4
 801db22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801db26:	bf3c      	itt	cc
 801db28:	009b      	lslcc	r3, r3, #2
 801db2a:	3002      	addcc	r0, #2
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	db05      	blt.n	801db3c <__hi0bits+0x3c>
 801db30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801db34:	f100 0001 	add.w	r0, r0, #1
 801db38:	bf08      	it	eq
 801db3a:	2020      	moveq	r0, #32
 801db3c:	4770      	bx	lr

0801db3e <__lo0bits>:
 801db3e:	6803      	ldr	r3, [r0, #0]
 801db40:	4602      	mov	r2, r0
 801db42:	f013 0007 	ands.w	r0, r3, #7
 801db46:	d00b      	beq.n	801db60 <__lo0bits+0x22>
 801db48:	07d9      	lsls	r1, r3, #31
 801db4a:	d421      	bmi.n	801db90 <__lo0bits+0x52>
 801db4c:	0798      	lsls	r0, r3, #30
 801db4e:	bf49      	itett	mi
 801db50:	085b      	lsrmi	r3, r3, #1
 801db52:	089b      	lsrpl	r3, r3, #2
 801db54:	2001      	movmi	r0, #1
 801db56:	6013      	strmi	r3, [r2, #0]
 801db58:	bf5c      	itt	pl
 801db5a:	6013      	strpl	r3, [r2, #0]
 801db5c:	2002      	movpl	r0, #2
 801db5e:	4770      	bx	lr
 801db60:	b299      	uxth	r1, r3
 801db62:	b909      	cbnz	r1, 801db68 <__lo0bits+0x2a>
 801db64:	0c1b      	lsrs	r3, r3, #16
 801db66:	2010      	movs	r0, #16
 801db68:	b2d9      	uxtb	r1, r3
 801db6a:	b909      	cbnz	r1, 801db70 <__lo0bits+0x32>
 801db6c:	3008      	adds	r0, #8
 801db6e:	0a1b      	lsrs	r3, r3, #8
 801db70:	0719      	lsls	r1, r3, #28
 801db72:	bf04      	itt	eq
 801db74:	091b      	lsreq	r3, r3, #4
 801db76:	3004      	addeq	r0, #4
 801db78:	0799      	lsls	r1, r3, #30
 801db7a:	bf04      	itt	eq
 801db7c:	089b      	lsreq	r3, r3, #2
 801db7e:	3002      	addeq	r0, #2
 801db80:	07d9      	lsls	r1, r3, #31
 801db82:	d403      	bmi.n	801db8c <__lo0bits+0x4e>
 801db84:	085b      	lsrs	r3, r3, #1
 801db86:	f100 0001 	add.w	r0, r0, #1
 801db8a:	d003      	beq.n	801db94 <__lo0bits+0x56>
 801db8c:	6013      	str	r3, [r2, #0]
 801db8e:	4770      	bx	lr
 801db90:	2000      	movs	r0, #0
 801db92:	4770      	bx	lr
 801db94:	2020      	movs	r0, #32
 801db96:	4770      	bx	lr

0801db98 <__i2b>:
 801db98:	b510      	push	{r4, lr}
 801db9a:	460c      	mov	r4, r1
 801db9c:	2101      	movs	r1, #1
 801db9e:	f7ff ff07 	bl	801d9b0 <_Balloc>
 801dba2:	4602      	mov	r2, r0
 801dba4:	b928      	cbnz	r0, 801dbb2 <__i2b+0x1a>
 801dba6:	4b05      	ldr	r3, [pc, #20]	@ (801dbbc <__i2b+0x24>)
 801dba8:	4805      	ldr	r0, [pc, #20]	@ (801dbc0 <__i2b+0x28>)
 801dbaa:	f240 1145 	movw	r1, #325	@ 0x145
 801dbae:	f000 fe75 	bl	801e89c <__assert_func>
 801dbb2:	2301      	movs	r3, #1
 801dbb4:	6144      	str	r4, [r0, #20]
 801dbb6:	6103      	str	r3, [r0, #16]
 801dbb8:	bd10      	pop	{r4, pc}
 801dbba:	bf00      	nop
 801dbbc:	08020d18 	.word	0x08020d18
 801dbc0:	08020d29 	.word	0x08020d29

0801dbc4 <__multiply>:
 801dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbc8:	4614      	mov	r4, r2
 801dbca:	690a      	ldr	r2, [r1, #16]
 801dbcc:	6923      	ldr	r3, [r4, #16]
 801dbce:	429a      	cmp	r2, r3
 801dbd0:	bfa8      	it	ge
 801dbd2:	4623      	movge	r3, r4
 801dbd4:	460f      	mov	r7, r1
 801dbd6:	bfa4      	itt	ge
 801dbd8:	460c      	movge	r4, r1
 801dbda:	461f      	movge	r7, r3
 801dbdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801dbe0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801dbe4:	68a3      	ldr	r3, [r4, #8]
 801dbe6:	6861      	ldr	r1, [r4, #4]
 801dbe8:	eb0a 0609 	add.w	r6, sl, r9
 801dbec:	42b3      	cmp	r3, r6
 801dbee:	b085      	sub	sp, #20
 801dbf0:	bfb8      	it	lt
 801dbf2:	3101      	addlt	r1, #1
 801dbf4:	f7ff fedc 	bl	801d9b0 <_Balloc>
 801dbf8:	b930      	cbnz	r0, 801dc08 <__multiply+0x44>
 801dbfa:	4602      	mov	r2, r0
 801dbfc:	4b44      	ldr	r3, [pc, #272]	@ (801dd10 <__multiply+0x14c>)
 801dbfe:	4845      	ldr	r0, [pc, #276]	@ (801dd14 <__multiply+0x150>)
 801dc00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801dc04:	f000 fe4a 	bl	801e89c <__assert_func>
 801dc08:	f100 0514 	add.w	r5, r0, #20
 801dc0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dc10:	462b      	mov	r3, r5
 801dc12:	2200      	movs	r2, #0
 801dc14:	4543      	cmp	r3, r8
 801dc16:	d321      	bcc.n	801dc5c <__multiply+0x98>
 801dc18:	f107 0114 	add.w	r1, r7, #20
 801dc1c:	f104 0214 	add.w	r2, r4, #20
 801dc20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801dc24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801dc28:	9302      	str	r3, [sp, #8]
 801dc2a:	1b13      	subs	r3, r2, r4
 801dc2c:	3b15      	subs	r3, #21
 801dc2e:	f023 0303 	bic.w	r3, r3, #3
 801dc32:	3304      	adds	r3, #4
 801dc34:	f104 0715 	add.w	r7, r4, #21
 801dc38:	42ba      	cmp	r2, r7
 801dc3a:	bf38      	it	cc
 801dc3c:	2304      	movcc	r3, #4
 801dc3e:	9301      	str	r3, [sp, #4]
 801dc40:	9b02      	ldr	r3, [sp, #8]
 801dc42:	9103      	str	r1, [sp, #12]
 801dc44:	428b      	cmp	r3, r1
 801dc46:	d80c      	bhi.n	801dc62 <__multiply+0x9e>
 801dc48:	2e00      	cmp	r6, #0
 801dc4a:	dd03      	ble.n	801dc54 <__multiply+0x90>
 801dc4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d05b      	beq.n	801dd0c <__multiply+0x148>
 801dc54:	6106      	str	r6, [r0, #16]
 801dc56:	b005      	add	sp, #20
 801dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc5c:	f843 2b04 	str.w	r2, [r3], #4
 801dc60:	e7d8      	b.n	801dc14 <__multiply+0x50>
 801dc62:	f8b1 a000 	ldrh.w	sl, [r1]
 801dc66:	f1ba 0f00 	cmp.w	sl, #0
 801dc6a:	d024      	beq.n	801dcb6 <__multiply+0xf2>
 801dc6c:	f104 0e14 	add.w	lr, r4, #20
 801dc70:	46a9      	mov	r9, r5
 801dc72:	f04f 0c00 	mov.w	ip, #0
 801dc76:	f85e 7b04 	ldr.w	r7, [lr], #4
 801dc7a:	f8d9 3000 	ldr.w	r3, [r9]
 801dc7e:	fa1f fb87 	uxth.w	fp, r7
 801dc82:	b29b      	uxth	r3, r3
 801dc84:	fb0a 330b 	mla	r3, sl, fp, r3
 801dc88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801dc8c:	f8d9 7000 	ldr.w	r7, [r9]
 801dc90:	4463      	add	r3, ip
 801dc92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801dc96:	fb0a c70b 	mla	r7, sl, fp, ip
 801dc9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801dc9e:	b29b      	uxth	r3, r3
 801dca0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dca4:	4572      	cmp	r2, lr
 801dca6:	f849 3b04 	str.w	r3, [r9], #4
 801dcaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801dcae:	d8e2      	bhi.n	801dc76 <__multiply+0xb2>
 801dcb0:	9b01      	ldr	r3, [sp, #4]
 801dcb2:	f845 c003 	str.w	ip, [r5, r3]
 801dcb6:	9b03      	ldr	r3, [sp, #12]
 801dcb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801dcbc:	3104      	adds	r1, #4
 801dcbe:	f1b9 0f00 	cmp.w	r9, #0
 801dcc2:	d021      	beq.n	801dd08 <__multiply+0x144>
 801dcc4:	682b      	ldr	r3, [r5, #0]
 801dcc6:	f104 0c14 	add.w	ip, r4, #20
 801dcca:	46ae      	mov	lr, r5
 801dccc:	f04f 0a00 	mov.w	sl, #0
 801dcd0:	f8bc b000 	ldrh.w	fp, [ip]
 801dcd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801dcd8:	fb09 770b 	mla	r7, r9, fp, r7
 801dcdc:	4457      	add	r7, sl
 801dcde:	b29b      	uxth	r3, r3
 801dce0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dce4:	f84e 3b04 	str.w	r3, [lr], #4
 801dce8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dcec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dcf0:	f8be 3000 	ldrh.w	r3, [lr]
 801dcf4:	fb09 330a 	mla	r3, r9, sl, r3
 801dcf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801dcfc:	4562      	cmp	r2, ip
 801dcfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dd02:	d8e5      	bhi.n	801dcd0 <__multiply+0x10c>
 801dd04:	9f01      	ldr	r7, [sp, #4]
 801dd06:	51eb      	str	r3, [r5, r7]
 801dd08:	3504      	adds	r5, #4
 801dd0a:	e799      	b.n	801dc40 <__multiply+0x7c>
 801dd0c:	3e01      	subs	r6, #1
 801dd0e:	e79b      	b.n	801dc48 <__multiply+0x84>
 801dd10:	08020d18 	.word	0x08020d18
 801dd14:	08020d29 	.word	0x08020d29

0801dd18 <__pow5mult>:
 801dd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd1c:	4615      	mov	r5, r2
 801dd1e:	f012 0203 	ands.w	r2, r2, #3
 801dd22:	4607      	mov	r7, r0
 801dd24:	460e      	mov	r6, r1
 801dd26:	d007      	beq.n	801dd38 <__pow5mult+0x20>
 801dd28:	4c25      	ldr	r4, [pc, #148]	@ (801ddc0 <__pow5mult+0xa8>)
 801dd2a:	3a01      	subs	r2, #1
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd32:	f7ff fe9f 	bl	801da74 <__multadd>
 801dd36:	4606      	mov	r6, r0
 801dd38:	10ad      	asrs	r5, r5, #2
 801dd3a:	d03d      	beq.n	801ddb8 <__pow5mult+0xa0>
 801dd3c:	69fc      	ldr	r4, [r7, #28]
 801dd3e:	b97c      	cbnz	r4, 801dd60 <__pow5mult+0x48>
 801dd40:	2010      	movs	r0, #16
 801dd42:	f7ff fd7f 	bl	801d844 <malloc>
 801dd46:	4602      	mov	r2, r0
 801dd48:	61f8      	str	r0, [r7, #28]
 801dd4a:	b928      	cbnz	r0, 801dd58 <__pow5mult+0x40>
 801dd4c:	4b1d      	ldr	r3, [pc, #116]	@ (801ddc4 <__pow5mult+0xac>)
 801dd4e:	481e      	ldr	r0, [pc, #120]	@ (801ddc8 <__pow5mult+0xb0>)
 801dd50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801dd54:	f000 fda2 	bl	801e89c <__assert_func>
 801dd58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dd5c:	6004      	str	r4, [r0, #0]
 801dd5e:	60c4      	str	r4, [r0, #12]
 801dd60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801dd64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dd68:	b94c      	cbnz	r4, 801dd7e <__pow5mult+0x66>
 801dd6a:	f240 2171 	movw	r1, #625	@ 0x271
 801dd6e:	4638      	mov	r0, r7
 801dd70:	f7ff ff12 	bl	801db98 <__i2b>
 801dd74:	2300      	movs	r3, #0
 801dd76:	f8c8 0008 	str.w	r0, [r8, #8]
 801dd7a:	4604      	mov	r4, r0
 801dd7c:	6003      	str	r3, [r0, #0]
 801dd7e:	f04f 0900 	mov.w	r9, #0
 801dd82:	07eb      	lsls	r3, r5, #31
 801dd84:	d50a      	bpl.n	801dd9c <__pow5mult+0x84>
 801dd86:	4631      	mov	r1, r6
 801dd88:	4622      	mov	r2, r4
 801dd8a:	4638      	mov	r0, r7
 801dd8c:	f7ff ff1a 	bl	801dbc4 <__multiply>
 801dd90:	4631      	mov	r1, r6
 801dd92:	4680      	mov	r8, r0
 801dd94:	4638      	mov	r0, r7
 801dd96:	f7ff fe4b 	bl	801da30 <_Bfree>
 801dd9a:	4646      	mov	r6, r8
 801dd9c:	106d      	asrs	r5, r5, #1
 801dd9e:	d00b      	beq.n	801ddb8 <__pow5mult+0xa0>
 801dda0:	6820      	ldr	r0, [r4, #0]
 801dda2:	b938      	cbnz	r0, 801ddb4 <__pow5mult+0x9c>
 801dda4:	4622      	mov	r2, r4
 801dda6:	4621      	mov	r1, r4
 801dda8:	4638      	mov	r0, r7
 801ddaa:	f7ff ff0b 	bl	801dbc4 <__multiply>
 801ddae:	6020      	str	r0, [r4, #0]
 801ddb0:	f8c0 9000 	str.w	r9, [r0]
 801ddb4:	4604      	mov	r4, r0
 801ddb6:	e7e4      	b.n	801dd82 <__pow5mult+0x6a>
 801ddb8:	4630      	mov	r0, r6
 801ddba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddbe:	bf00      	nop
 801ddc0:	08020d84 	.word	0x08020d84
 801ddc4:	08020ca9 	.word	0x08020ca9
 801ddc8:	08020d29 	.word	0x08020d29

0801ddcc <__lshift>:
 801ddcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddd0:	460c      	mov	r4, r1
 801ddd2:	6849      	ldr	r1, [r1, #4]
 801ddd4:	6923      	ldr	r3, [r4, #16]
 801ddd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ddda:	68a3      	ldr	r3, [r4, #8]
 801dddc:	4607      	mov	r7, r0
 801ddde:	4691      	mov	r9, r2
 801dde0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dde4:	f108 0601 	add.w	r6, r8, #1
 801dde8:	42b3      	cmp	r3, r6
 801ddea:	db0b      	blt.n	801de04 <__lshift+0x38>
 801ddec:	4638      	mov	r0, r7
 801ddee:	f7ff fddf 	bl	801d9b0 <_Balloc>
 801ddf2:	4605      	mov	r5, r0
 801ddf4:	b948      	cbnz	r0, 801de0a <__lshift+0x3e>
 801ddf6:	4602      	mov	r2, r0
 801ddf8:	4b28      	ldr	r3, [pc, #160]	@ (801de9c <__lshift+0xd0>)
 801ddfa:	4829      	ldr	r0, [pc, #164]	@ (801dea0 <__lshift+0xd4>)
 801ddfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801de00:	f000 fd4c 	bl	801e89c <__assert_func>
 801de04:	3101      	adds	r1, #1
 801de06:	005b      	lsls	r3, r3, #1
 801de08:	e7ee      	b.n	801dde8 <__lshift+0x1c>
 801de0a:	2300      	movs	r3, #0
 801de0c:	f100 0114 	add.w	r1, r0, #20
 801de10:	f100 0210 	add.w	r2, r0, #16
 801de14:	4618      	mov	r0, r3
 801de16:	4553      	cmp	r3, sl
 801de18:	db33      	blt.n	801de82 <__lshift+0xb6>
 801de1a:	6920      	ldr	r0, [r4, #16]
 801de1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801de20:	f104 0314 	add.w	r3, r4, #20
 801de24:	f019 091f 	ands.w	r9, r9, #31
 801de28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801de2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801de30:	d02b      	beq.n	801de8a <__lshift+0xbe>
 801de32:	f1c9 0e20 	rsb	lr, r9, #32
 801de36:	468a      	mov	sl, r1
 801de38:	2200      	movs	r2, #0
 801de3a:	6818      	ldr	r0, [r3, #0]
 801de3c:	fa00 f009 	lsl.w	r0, r0, r9
 801de40:	4310      	orrs	r0, r2
 801de42:	f84a 0b04 	str.w	r0, [sl], #4
 801de46:	f853 2b04 	ldr.w	r2, [r3], #4
 801de4a:	459c      	cmp	ip, r3
 801de4c:	fa22 f20e 	lsr.w	r2, r2, lr
 801de50:	d8f3      	bhi.n	801de3a <__lshift+0x6e>
 801de52:	ebac 0304 	sub.w	r3, ip, r4
 801de56:	3b15      	subs	r3, #21
 801de58:	f023 0303 	bic.w	r3, r3, #3
 801de5c:	3304      	adds	r3, #4
 801de5e:	f104 0015 	add.w	r0, r4, #21
 801de62:	4584      	cmp	ip, r0
 801de64:	bf38      	it	cc
 801de66:	2304      	movcc	r3, #4
 801de68:	50ca      	str	r2, [r1, r3]
 801de6a:	b10a      	cbz	r2, 801de70 <__lshift+0xa4>
 801de6c:	f108 0602 	add.w	r6, r8, #2
 801de70:	3e01      	subs	r6, #1
 801de72:	4638      	mov	r0, r7
 801de74:	612e      	str	r6, [r5, #16]
 801de76:	4621      	mov	r1, r4
 801de78:	f7ff fdda 	bl	801da30 <_Bfree>
 801de7c:	4628      	mov	r0, r5
 801de7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de82:	f842 0f04 	str.w	r0, [r2, #4]!
 801de86:	3301      	adds	r3, #1
 801de88:	e7c5      	b.n	801de16 <__lshift+0x4a>
 801de8a:	3904      	subs	r1, #4
 801de8c:	f853 2b04 	ldr.w	r2, [r3], #4
 801de90:	f841 2f04 	str.w	r2, [r1, #4]!
 801de94:	459c      	cmp	ip, r3
 801de96:	d8f9      	bhi.n	801de8c <__lshift+0xc0>
 801de98:	e7ea      	b.n	801de70 <__lshift+0xa4>
 801de9a:	bf00      	nop
 801de9c:	08020d18 	.word	0x08020d18
 801dea0:	08020d29 	.word	0x08020d29

0801dea4 <__mcmp>:
 801dea4:	690a      	ldr	r2, [r1, #16]
 801dea6:	4603      	mov	r3, r0
 801dea8:	6900      	ldr	r0, [r0, #16]
 801deaa:	1a80      	subs	r0, r0, r2
 801deac:	b530      	push	{r4, r5, lr}
 801deae:	d10e      	bne.n	801dece <__mcmp+0x2a>
 801deb0:	3314      	adds	r3, #20
 801deb2:	3114      	adds	r1, #20
 801deb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801deb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801debc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801dec0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dec4:	4295      	cmp	r5, r2
 801dec6:	d003      	beq.n	801ded0 <__mcmp+0x2c>
 801dec8:	d205      	bcs.n	801ded6 <__mcmp+0x32>
 801deca:	f04f 30ff 	mov.w	r0, #4294967295
 801dece:	bd30      	pop	{r4, r5, pc}
 801ded0:	42a3      	cmp	r3, r4
 801ded2:	d3f3      	bcc.n	801debc <__mcmp+0x18>
 801ded4:	e7fb      	b.n	801dece <__mcmp+0x2a>
 801ded6:	2001      	movs	r0, #1
 801ded8:	e7f9      	b.n	801dece <__mcmp+0x2a>
	...

0801dedc <__mdiff>:
 801dedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee0:	4689      	mov	r9, r1
 801dee2:	4606      	mov	r6, r0
 801dee4:	4611      	mov	r1, r2
 801dee6:	4648      	mov	r0, r9
 801dee8:	4614      	mov	r4, r2
 801deea:	f7ff ffdb 	bl	801dea4 <__mcmp>
 801deee:	1e05      	subs	r5, r0, #0
 801def0:	d112      	bne.n	801df18 <__mdiff+0x3c>
 801def2:	4629      	mov	r1, r5
 801def4:	4630      	mov	r0, r6
 801def6:	f7ff fd5b 	bl	801d9b0 <_Balloc>
 801defa:	4602      	mov	r2, r0
 801defc:	b928      	cbnz	r0, 801df0a <__mdiff+0x2e>
 801defe:	4b3f      	ldr	r3, [pc, #252]	@ (801dffc <__mdiff+0x120>)
 801df00:	f240 2137 	movw	r1, #567	@ 0x237
 801df04:	483e      	ldr	r0, [pc, #248]	@ (801e000 <__mdiff+0x124>)
 801df06:	f000 fcc9 	bl	801e89c <__assert_func>
 801df0a:	2301      	movs	r3, #1
 801df0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801df10:	4610      	mov	r0, r2
 801df12:	b003      	add	sp, #12
 801df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df18:	bfbc      	itt	lt
 801df1a:	464b      	movlt	r3, r9
 801df1c:	46a1      	movlt	r9, r4
 801df1e:	4630      	mov	r0, r6
 801df20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801df24:	bfba      	itte	lt
 801df26:	461c      	movlt	r4, r3
 801df28:	2501      	movlt	r5, #1
 801df2a:	2500      	movge	r5, #0
 801df2c:	f7ff fd40 	bl	801d9b0 <_Balloc>
 801df30:	4602      	mov	r2, r0
 801df32:	b918      	cbnz	r0, 801df3c <__mdiff+0x60>
 801df34:	4b31      	ldr	r3, [pc, #196]	@ (801dffc <__mdiff+0x120>)
 801df36:	f240 2145 	movw	r1, #581	@ 0x245
 801df3a:	e7e3      	b.n	801df04 <__mdiff+0x28>
 801df3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801df40:	6926      	ldr	r6, [r4, #16]
 801df42:	60c5      	str	r5, [r0, #12]
 801df44:	f109 0310 	add.w	r3, r9, #16
 801df48:	f109 0514 	add.w	r5, r9, #20
 801df4c:	f104 0e14 	add.w	lr, r4, #20
 801df50:	f100 0b14 	add.w	fp, r0, #20
 801df54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801df58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801df5c:	9301      	str	r3, [sp, #4]
 801df5e:	46d9      	mov	r9, fp
 801df60:	f04f 0c00 	mov.w	ip, #0
 801df64:	9b01      	ldr	r3, [sp, #4]
 801df66:	f85e 0b04 	ldr.w	r0, [lr], #4
 801df6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801df6e:	9301      	str	r3, [sp, #4]
 801df70:	fa1f f38a 	uxth.w	r3, sl
 801df74:	4619      	mov	r1, r3
 801df76:	b283      	uxth	r3, r0
 801df78:	1acb      	subs	r3, r1, r3
 801df7a:	0c00      	lsrs	r0, r0, #16
 801df7c:	4463      	add	r3, ip
 801df7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801df82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801df86:	b29b      	uxth	r3, r3
 801df88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801df8c:	4576      	cmp	r6, lr
 801df8e:	f849 3b04 	str.w	r3, [r9], #4
 801df92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801df96:	d8e5      	bhi.n	801df64 <__mdiff+0x88>
 801df98:	1b33      	subs	r3, r6, r4
 801df9a:	3b15      	subs	r3, #21
 801df9c:	f023 0303 	bic.w	r3, r3, #3
 801dfa0:	3415      	adds	r4, #21
 801dfa2:	3304      	adds	r3, #4
 801dfa4:	42a6      	cmp	r6, r4
 801dfa6:	bf38      	it	cc
 801dfa8:	2304      	movcc	r3, #4
 801dfaa:	441d      	add	r5, r3
 801dfac:	445b      	add	r3, fp
 801dfae:	461e      	mov	r6, r3
 801dfb0:	462c      	mov	r4, r5
 801dfb2:	4544      	cmp	r4, r8
 801dfb4:	d30e      	bcc.n	801dfd4 <__mdiff+0xf8>
 801dfb6:	f108 0103 	add.w	r1, r8, #3
 801dfba:	1b49      	subs	r1, r1, r5
 801dfbc:	f021 0103 	bic.w	r1, r1, #3
 801dfc0:	3d03      	subs	r5, #3
 801dfc2:	45a8      	cmp	r8, r5
 801dfc4:	bf38      	it	cc
 801dfc6:	2100      	movcc	r1, #0
 801dfc8:	440b      	add	r3, r1
 801dfca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dfce:	b191      	cbz	r1, 801dff6 <__mdiff+0x11a>
 801dfd0:	6117      	str	r7, [r2, #16]
 801dfd2:	e79d      	b.n	801df10 <__mdiff+0x34>
 801dfd4:	f854 1b04 	ldr.w	r1, [r4], #4
 801dfd8:	46e6      	mov	lr, ip
 801dfda:	0c08      	lsrs	r0, r1, #16
 801dfdc:	fa1c fc81 	uxtah	ip, ip, r1
 801dfe0:	4471      	add	r1, lr
 801dfe2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801dfe6:	b289      	uxth	r1, r1
 801dfe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801dfec:	f846 1b04 	str.w	r1, [r6], #4
 801dff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801dff4:	e7dd      	b.n	801dfb2 <__mdiff+0xd6>
 801dff6:	3f01      	subs	r7, #1
 801dff8:	e7e7      	b.n	801dfca <__mdiff+0xee>
 801dffa:	bf00      	nop
 801dffc:	08020d18 	.word	0x08020d18
 801e000:	08020d29 	.word	0x08020d29

0801e004 <__d2b>:
 801e004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e008:	460f      	mov	r7, r1
 801e00a:	2101      	movs	r1, #1
 801e00c:	ec59 8b10 	vmov	r8, r9, d0
 801e010:	4616      	mov	r6, r2
 801e012:	f7ff fccd 	bl	801d9b0 <_Balloc>
 801e016:	4604      	mov	r4, r0
 801e018:	b930      	cbnz	r0, 801e028 <__d2b+0x24>
 801e01a:	4602      	mov	r2, r0
 801e01c:	4b23      	ldr	r3, [pc, #140]	@ (801e0ac <__d2b+0xa8>)
 801e01e:	4824      	ldr	r0, [pc, #144]	@ (801e0b0 <__d2b+0xac>)
 801e020:	f240 310f 	movw	r1, #783	@ 0x30f
 801e024:	f000 fc3a 	bl	801e89c <__assert_func>
 801e028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e02c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e030:	b10d      	cbz	r5, 801e036 <__d2b+0x32>
 801e032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e036:	9301      	str	r3, [sp, #4]
 801e038:	f1b8 0300 	subs.w	r3, r8, #0
 801e03c:	d023      	beq.n	801e086 <__d2b+0x82>
 801e03e:	4668      	mov	r0, sp
 801e040:	9300      	str	r3, [sp, #0]
 801e042:	f7ff fd7c 	bl	801db3e <__lo0bits>
 801e046:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e04a:	b1d0      	cbz	r0, 801e082 <__d2b+0x7e>
 801e04c:	f1c0 0320 	rsb	r3, r0, #32
 801e050:	fa02 f303 	lsl.w	r3, r2, r3
 801e054:	430b      	orrs	r3, r1
 801e056:	40c2      	lsrs	r2, r0
 801e058:	6163      	str	r3, [r4, #20]
 801e05a:	9201      	str	r2, [sp, #4]
 801e05c:	9b01      	ldr	r3, [sp, #4]
 801e05e:	61a3      	str	r3, [r4, #24]
 801e060:	2b00      	cmp	r3, #0
 801e062:	bf0c      	ite	eq
 801e064:	2201      	moveq	r2, #1
 801e066:	2202      	movne	r2, #2
 801e068:	6122      	str	r2, [r4, #16]
 801e06a:	b1a5      	cbz	r5, 801e096 <__d2b+0x92>
 801e06c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e070:	4405      	add	r5, r0
 801e072:	603d      	str	r5, [r7, #0]
 801e074:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e078:	6030      	str	r0, [r6, #0]
 801e07a:	4620      	mov	r0, r4
 801e07c:	b003      	add	sp, #12
 801e07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e082:	6161      	str	r1, [r4, #20]
 801e084:	e7ea      	b.n	801e05c <__d2b+0x58>
 801e086:	a801      	add	r0, sp, #4
 801e088:	f7ff fd59 	bl	801db3e <__lo0bits>
 801e08c:	9b01      	ldr	r3, [sp, #4]
 801e08e:	6163      	str	r3, [r4, #20]
 801e090:	3020      	adds	r0, #32
 801e092:	2201      	movs	r2, #1
 801e094:	e7e8      	b.n	801e068 <__d2b+0x64>
 801e096:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e09a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e09e:	6038      	str	r0, [r7, #0]
 801e0a0:	6918      	ldr	r0, [r3, #16]
 801e0a2:	f7ff fd2d 	bl	801db00 <__hi0bits>
 801e0a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e0aa:	e7e5      	b.n	801e078 <__d2b+0x74>
 801e0ac:	08020d18 	.word	0x08020d18
 801e0b0:	08020d29 	.word	0x08020d29

0801e0b4 <__ssputs_r>:
 801e0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0b8:	688e      	ldr	r6, [r1, #8]
 801e0ba:	461f      	mov	r7, r3
 801e0bc:	42be      	cmp	r6, r7
 801e0be:	680b      	ldr	r3, [r1, #0]
 801e0c0:	4682      	mov	sl, r0
 801e0c2:	460c      	mov	r4, r1
 801e0c4:	4690      	mov	r8, r2
 801e0c6:	d82d      	bhi.n	801e124 <__ssputs_r+0x70>
 801e0c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e0cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e0d0:	d026      	beq.n	801e120 <__ssputs_r+0x6c>
 801e0d2:	6965      	ldr	r5, [r4, #20]
 801e0d4:	6909      	ldr	r1, [r1, #16]
 801e0d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e0da:	eba3 0901 	sub.w	r9, r3, r1
 801e0de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e0e2:	1c7b      	adds	r3, r7, #1
 801e0e4:	444b      	add	r3, r9
 801e0e6:	106d      	asrs	r5, r5, #1
 801e0e8:	429d      	cmp	r5, r3
 801e0ea:	bf38      	it	cc
 801e0ec:	461d      	movcc	r5, r3
 801e0ee:	0553      	lsls	r3, r2, #21
 801e0f0:	d527      	bpl.n	801e142 <__ssputs_r+0x8e>
 801e0f2:	4629      	mov	r1, r5
 801e0f4:	f7ff fbd0 	bl	801d898 <_malloc_r>
 801e0f8:	4606      	mov	r6, r0
 801e0fa:	b360      	cbz	r0, 801e156 <__ssputs_r+0xa2>
 801e0fc:	6921      	ldr	r1, [r4, #16]
 801e0fe:	464a      	mov	r2, r9
 801e100:	f7fe fcf9 	bl	801caf6 <memcpy>
 801e104:	89a3      	ldrh	r3, [r4, #12]
 801e106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e10e:	81a3      	strh	r3, [r4, #12]
 801e110:	6126      	str	r6, [r4, #16]
 801e112:	6165      	str	r5, [r4, #20]
 801e114:	444e      	add	r6, r9
 801e116:	eba5 0509 	sub.w	r5, r5, r9
 801e11a:	6026      	str	r6, [r4, #0]
 801e11c:	60a5      	str	r5, [r4, #8]
 801e11e:	463e      	mov	r6, r7
 801e120:	42be      	cmp	r6, r7
 801e122:	d900      	bls.n	801e126 <__ssputs_r+0x72>
 801e124:	463e      	mov	r6, r7
 801e126:	6820      	ldr	r0, [r4, #0]
 801e128:	4632      	mov	r2, r6
 801e12a:	4641      	mov	r1, r8
 801e12c:	f000 fb6a 	bl	801e804 <memmove>
 801e130:	68a3      	ldr	r3, [r4, #8]
 801e132:	1b9b      	subs	r3, r3, r6
 801e134:	60a3      	str	r3, [r4, #8]
 801e136:	6823      	ldr	r3, [r4, #0]
 801e138:	4433      	add	r3, r6
 801e13a:	6023      	str	r3, [r4, #0]
 801e13c:	2000      	movs	r0, #0
 801e13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e142:	462a      	mov	r2, r5
 801e144:	f000 fbee 	bl	801e924 <_realloc_r>
 801e148:	4606      	mov	r6, r0
 801e14a:	2800      	cmp	r0, #0
 801e14c:	d1e0      	bne.n	801e110 <__ssputs_r+0x5c>
 801e14e:	6921      	ldr	r1, [r4, #16]
 801e150:	4650      	mov	r0, sl
 801e152:	f7ff fb2d 	bl	801d7b0 <_free_r>
 801e156:	230c      	movs	r3, #12
 801e158:	f8ca 3000 	str.w	r3, [sl]
 801e15c:	89a3      	ldrh	r3, [r4, #12]
 801e15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e162:	81a3      	strh	r3, [r4, #12]
 801e164:	f04f 30ff 	mov.w	r0, #4294967295
 801e168:	e7e9      	b.n	801e13e <__ssputs_r+0x8a>
	...

0801e16c <_svfiprintf_r>:
 801e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e170:	4698      	mov	r8, r3
 801e172:	898b      	ldrh	r3, [r1, #12]
 801e174:	061b      	lsls	r3, r3, #24
 801e176:	b09d      	sub	sp, #116	@ 0x74
 801e178:	4607      	mov	r7, r0
 801e17a:	460d      	mov	r5, r1
 801e17c:	4614      	mov	r4, r2
 801e17e:	d510      	bpl.n	801e1a2 <_svfiprintf_r+0x36>
 801e180:	690b      	ldr	r3, [r1, #16]
 801e182:	b973      	cbnz	r3, 801e1a2 <_svfiprintf_r+0x36>
 801e184:	2140      	movs	r1, #64	@ 0x40
 801e186:	f7ff fb87 	bl	801d898 <_malloc_r>
 801e18a:	6028      	str	r0, [r5, #0]
 801e18c:	6128      	str	r0, [r5, #16]
 801e18e:	b930      	cbnz	r0, 801e19e <_svfiprintf_r+0x32>
 801e190:	230c      	movs	r3, #12
 801e192:	603b      	str	r3, [r7, #0]
 801e194:	f04f 30ff 	mov.w	r0, #4294967295
 801e198:	b01d      	add	sp, #116	@ 0x74
 801e19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e19e:	2340      	movs	r3, #64	@ 0x40
 801e1a0:	616b      	str	r3, [r5, #20]
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1a6:	2320      	movs	r3, #32
 801e1a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e1ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801e1b0:	2330      	movs	r3, #48	@ 0x30
 801e1b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e350 <_svfiprintf_r+0x1e4>
 801e1b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e1ba:	f04f 0901 	mov.w	r9, #1
 801e1be:	4623      	mov	r3, r4
 801e1c0:	469a      	mov	sl, r3
 801e1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1c6:	b10a      	cbz	r2, 801e1cc <_svfiprintf_r+0x60>
 801e1c8:	2a25      	cmp	r2, #37	@ 0x25
 801e1ca:	d1f9      	bne.n	801e1c0 <_svfiprintf_r+0x54>
 801e1cc:	ebba 0b04 	subs.w	fp, sl, r4
 801e1d0:	d00b      	beq.n	801e1ea <_svfiprintf_r+0x7e>
 801e1d2:	465b      	mov	r3, fp
 801e1d4:	4622      	mov	r2, r4
 801e1d6:	4629      	mov	r1, r5
 801e1d8:	4638      	mov	r0, r7
 801e1da:	f7ff ff6b 	bl	801e0b4 <__ssputs_r>
 801e1de:	3001      	adds	r0, #1
 801e1e0:	f000 80a7 	beq.w	801e332 <_svfiprintf_r+0x1c6>
 801e1e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1e6:	445a      	add	r2, fp
 801e1e8:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1ea:	f89a 3000 	ldrb.w	r3, [sl]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	f000 809f 	beq.w	801e332 <_svfiprintf_r+0x1c6>
 801e1f4:	2300      	movs	r3, #0
 801e1f6:	f04f 32ff 	mov.w	r2, #4294967295
 801e1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e1fe:	f10a 0a01 	add.w	sl, sl, #1
 801e202:	9304      	str	r3, [sp, #16]
 801e204:	9307      	str	r3, [sp, #28]
 801e206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e20a:	931a      	str	r3, [sp, #104]	@ 0x68
 801e20c:	4654      	mov	r4, sl
 801e20e:	2205      	movs	r2, #5
 801e210:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e214:	484e      	ldr	r0, [pc, #312]	@ (801e350 <_svfiprintf_r+0x1e4>)
 801e216:	f7e1 ffc3 	bl	80001a0 <memchr>
 801e21a:	9a04      	ldr	r2, [sp, #16]
 801e21c:	b9d8      	cbnz	r0, 801e256 <_svfiprintf_r+0xea>
 801e21e:	06d0      	lsls	r0, r2, #27
 801e220:	bf44      	itt	mi
 801e222:	2320      	movmi	r3, #32
 801e224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e228:	0711      	lsls	r1, r2, #28
 801e22a:	bf44      	itt	mi
 801e22c:	232b      	movmi	r3, #43	@ 0x2b
 801e22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e232:	f89a 3000 	ldrb.w	r3, [sl]
 801e236:	2b2a      	cmp	r3, #42	@ 0x2a
 801e238:	d015      	beq.n	801e266 <_svfiprintf_r+0xfa>
 801e23a:	9a07      	ldr	r2, [sp, #28]
 801e23c:	4654      	mov	r4, sl
 801e23e:	2000      	movs	r0, #0
 801e240:	f04f 0c0a 	mov.w	ip, #10
 801e244:	4621      	mov	r1, r4
 801e246:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e24a:	3b30      	subs	r3, #48	@ 0x30
 801e24c:	2b09      	cmp	r3, #9
 801e24e:	d94b      	bls.n	801e2e8 <_svfiprintf_r+0x17c>
 801e250:	b1b0      	cbz	r0, 801e280 <_svfiprintf_r+0x114>
 801e252:	9207      	str	r2, [sp, #28]
 801e254:	e014      	b.n	801e280 <_svfiprintf_r+0x114>
 801e256:	eba0 0308 	sub.w	r3, r0, r8
 801e25a:	fa09 f303 	lsl.w	r3, r9, r3
 801e25e:	4313      	orrs	r3, r2
 801e260:	9304      	str	r3, [sp, #16]
 801e262:	46a2      	mov	sl, r4
 801e264:	e7d2      	b.n	801e20c <_svfiprintf_r+0xa0>
 801e266:	9b03      	ldr	r3, [sp, #12]
 801e268:	1d19      	adds	r1, r3, #4
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	9103      	str	r1, [sp, #12]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	bfbb      	ittet	lt
 801e272:	425b      	neglt	r3, r3
 801e274:	f042 0202 	orrlt.w	r2, r2, #2
 801e278:	9307      	strge	r3, [sp, #28]
 801e27a:	9307      	strlt	r3, [sp, #28]
 801e27c:	bfb8      	it	lt
 801e27e:	9204      	strlt	r2, [sp, #16]
 801e280:	7823      	ldrb	r3, [r4, #0]
 801e282:	2b2e      	cmp	r3, #46	@ 0x2e
 801e284:	d10a      	bne.n	801e29c <_svfiprintf_r+0x130>
 801e286:	7863      	ldrb	r3, [r4, #1]
 801e288:	2b2a      	cmp	r3, #42	@ 0x2a
 801e28a:	d132      	bne.n	801e2f2 <_svfiprintf_r+0x186>
 801e28c:	9b03      	ldr	r3, [sp, #12]
 801e28e:	1d1a      	adds	r2, r3, #4
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	9203      	str	r2, [sp, #12]
 801e294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e298:	3402      	adds	r4, #2
 801e29a:	9305      	str	r3, [sp, #20]
 801e29c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e360 <_svfiprintf_r+0x1f4>
 801e2a0:	7821      	ldrb	r1, [r4, #0]
 801e2a2:	2203      	movs	r2, #3
 801e2a4:	4650      	mov	r0, sl
 801e2a6:	f7e1 ff7b 	bl	80001a0 <memchr>
 801e2aa:	b138      	cbz	r0, 801e2bc <_svfiprintf_r+0x150>
 801e2ac:	9b04      	ldr	r3, [sp, #16]
 801e2ae:	eba0 000a 	sub.w	r0, r0, sl
 801e2b2:	2240      	movs	r2, #64	@ 0x40
 801e2b4:	4082      	lsls	r2, r0
 801e2b6:	4313      	orrs	r3, r2
 801e2b8:	3401      	adds	r4, #1
 801e2ba:	9304      	str	r3, [sp, #16]
 801e2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2c0:	4824      	ldr	r0, [pc, #144]	@ (801e354 <_svfiprintf_r+0x1e8>)
 801e2c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e2c6:	2206      	movs	r2, #6
 801e2c8:	f7e1 ff6a 	bl	80001a0 <memchr>
 801e2cc:	2800      	cmp	r0, #0
 801e2ce:	d036      	beq.n	801e33e <_svfiprintf_r+0x1d2>
 801e2d0:	4b21      	ldr	r3, [pc, #132]	@ (801e358 <_svfiprintf_r+0x1ec>)
 801e2d2:	bb1b      	cbnz	r3, 801e31c <_svfiprintf_r+0x1b0>
 801e2d4:	9b03      	ldr	r3, [sp, #12]
 801e2d6:	3307      	adds	r3, #7
 801e2d8:	f023 0307 	bic.w	r3, r3, #7
 801e2dc:	3308      	adds	r3, #8
 801e2de:	9303      	str	r3, [sp, #12]
 801e2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2e2:	4433      	add	r3, r6
 801e2e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2e6:	e76a      	b.n	801e1be <_svfiprintf_r+0x52>
 801e2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 801e2ec:	460c      	mov	r4, r1
 801e2ee:	2001      	movs	r0, #1
 801e2f0:	e7a8      	b.n	801e244 <_svfiprintf_r+0xd8>
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	3401      	adds	r4, #1
 801e2f6:	9305      	str	r3, [sp, #20]
 801e2f8:	4619      	mov	r1, r3
 801e2fa:	f04f 0c0a 	mov.w	ip, #10
 801e2fe:	4620      	mov	r0, r4
 801e300:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e304:	3a30      	subs	r2, #48	@ 0x30
 801e306:	2a09      	cmp	r2, #9
 801e308:	d903      	bls.n	801e312 <_svfiprintf_r+0x1a6>
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d0c6      	beq.n	801e29c <_svfiprintf_r+0x130>
 801e30e:	9105      	str	r1, [sp, #20]
 801e310:	e7c4      	b.n	801e29c <_svfiprintf_r+0x130>
 801e312:	fb0c 2101 	mla	r1, ip, r1, r2
 801e316:	4604      	mov	r4, r0
 801e318:	2301      	movs	r3, #1
 801e31a:	e7f0      	b.n	801e2fe <_svfiprintf_r+0x192>
 801e31c:	ab03      	add	r3, sp, #12
 801e31e:	9300      	str	r3, [sp, #0]
 801e320:	462a      	mov	r2, r5
 801e322:	4b0e      	ldr	r3, [pc, #56]	@ (801e35c <_svfiprintf_r+0x1f0>)
 801e324:	a904      	add	r1, sp, #16
 801e326:	4638      	mov	r0, r7
 801e328:	f7fd fd7c 	bl	801be24 <_printf_float>
 801e32c:	1c42      	adds	r2, r0, #1
 801e32e:	4606      	mov	r6, r0
 801e330:	d1d6      	bne.n	801e2e0 <_svfiprintf_r+0x174>
 801e332:	89ab      	ldrh	r3, [r5, #12]
 801e334:	065b      	lsls	r3, r3, #25
 801e336:	f53f af2d 	bmi.w	801e194 <_svfiprintf_r+0x28>
 801e33a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e33c:	e72c      	b.n	801e198 <_svfiprintf_r+0x2c>
 801e33e:	ab03      	add	r3, sp, #12
 801e340:	9300      	str	r3, [sp, #0]
 801e342:	462a      	mov	r2, r5
 801e344:	4b05      	ldr	r3, [pc, #20]	@ (801e35c <_svfiprintf_r+0x1f0>)
 801e346:	a904      	add	r1, sp, #16
 801e348:	4638      	mov	r0, r7
 801e34a:	f7fe f803 	bl	801c354 <_printf_i>
 801e34e:	e7ed      	b.n	801e32c <_svfiprintf_r+0x1c0>
 801e350:	08020e80 	.word	0x08020e80
 801e354:	08020e8a 	.word	0x08020e8a
 801e358:	0801be25 	.word	0x0801be25
 801e35c:	0801e0b5 	.word	0x0801e0b5
 801e360:	08020e86 	.word	0x08020e86

0801e364 <__sfputc_r>:
 801e364:	6893      	ldr	r3, [r2, #8]
 801e366:	3b01      	subs	r3, #1
 801e368:	2b00      	cmp	r3, #0
 801e36a:	b410      	push	{r4}
 801e36c:	6093      	str	r3, [r2, #8]
 801e36e:	da08      	bge.n	801e382 <__sfputc_r+0x1e>
 801e370:	6994      	ldr	r4, [r2, #24]
 801e372:	42a3      	cmp	r3, r4
 801e374:	db01      	blt.n	801e37a <__sfputc_r+0x16>
 801e376:	290a      	cmp	r1, #10
 801e378:	d103      	bne.n	801e382 <__sfputc_r+0x1e>
 801e37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e37e:	f7fe ba9e 	b.w	801c8be <__swbuf_r>
 801e382:	6813      	ldr	r3, [r2, #0]
 801e384:	1c58      	adds	r0, r3, #1
 801e386:	6010      	str	r0, [r2, #0]
 801e388:	7019      	strb	r1, [r3, #0]
 801e38a:	4608      	mov	r0, r1
 801e38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e390:	4770      	bx	lr

0801e392 <__sfputs_r>:
 801e392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e394:	4606      	mov	r6, r0
 801e396:	460f      	mov	r7, r1
 801e398:	4614      	mov	r4, r2
 801e39a:	18d5      	adds	r5, r2, r3
 801e39c:	42ac      	cmp	r4, r5
 801e39e:	d101      	bne.n	801e3a4 <__sfputs_r+0x12>
 801e3a0:	2000      	movs	r0, #0
 801e3a2:	e007      	b.n	801e3b4 <__sfputs_r+0x22>
 801e3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3a8:	463a      	mov	r2, r7
 801e3aa:	4630      	mov	r0, r6
 801e3ac:	f7ff ffda 	bl	801e364 <__sfputc_r>
 801e3b0:	1c43      	adds	r3, r0, #1
 801e3b2:	d1f3      	bne.n	801e39c <__sfputs_r+0xa>
 801e3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e3b8 <_vfiprintf_r>:
 801e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3bc:	460d      	mov	r5, r1
 801e3be:	b09d      	sub	sp, #116	@ 0x74
 801e3c0:	4614      	mov	r4, r2
 801e3c2:	4698      	mov	r8, r3
 801e3c4:	4606      	mov	r6, r0
 801e3c6:	b118      	cbz	r0, 801e3d0 <_vfiprintf_r+0x18>
 801e3c8:	6a03      	ldr	r3, [r0, #32]
 801e3ca:	b90b      	cbnz	r3, 801e3d0 <_vfiprintf_r+0x18>
 801e3cc:	f7fe f96e 	bl	801c6ac <__sinit>
 801e3d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e3d2:	07d9      	lsls	r1, r3, #31
 801e3d4:	d405      	bmi.n	801e3e2 <_vfiprintf_r+0x2a>
 801e3d6:	89ab      	ldrh	r3, [r5, #12]
 801e3d8:	059a      	lsls	r2, r3, #22
 801e3da:	d402      	bmi.n	801e3e2 <_vfiprintf_r+0x2a>
 801e3dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e3de:	f7fe fb80 	bl	801cae2 <__retarget_lock_acquire_recursive>
 801e3e2:	89ab      	ldrh	r3, [r5, #12]
 801e3e4:	071b      	lsls	r3, r3, #28
 801e3e6:	d501      	bpl.n	801e3ec <_vfiprintf_r+0x34>
 801e3e8:	692b      	ldr	r3, [r5, #16]
 801e3ea:	b99b      	cbnz	r3, 801e414 <_vfiprintf_r+0x5c>
 801e3ec:	4629      	mov	r1, r5
 801e3ee:	4630      	mov	r0, r6
 801e3f0:	f7fe faa4 	bl	801c93c <__swsetup_r>
 801e3f4:	b170      	cbz	r0, 801e414 <_vfiprintf_r+0x5c>
 801e3f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e3f8:	07dc      	lsls	r4, r3, #31
 801e3fa:	d504      	bpl.n	801e406 <_vfiprintf_r+0x4e>
 801e3fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e400:	b01d      	add	sp, #116	@ 0x74
 801e402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e406:	89ab      	ldrh	r3, [r5, #12]
 801e408:	0598      	lsls	r0, r3, #22
 801e40a:	d4f7      	bmi.n	801e3fc <_vfiprintf_r+0x44>
 801e40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e40e:	f7fe fb69 	bl	801cae4 <__retarget_lock_release_recursive>
 801e412:	e7f3      	b.n	801e3fc <_vfiprintf_r+0x44>
 801e414:	2300      	movs	r3, #0
 801e416:	9309      	str	r3, [sp, #36]	@ 0x24
 801e418:	2320      	movs	r3, #32
 801e41a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e41e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e422:	2330      	movs	r3, #48	@ 0x30
 801e424:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e5d4 <_vfiprintf_r+0x21c>
 801e428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e42c:	f04f 0901 	mov.w	r9, #1
 801e430:	4623      	mov	r3, r4
 801e432:	469a      	mov	sl, r3
 801e434:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e438:	b10a      	cbz	r2, 801e43e <_vfiprintf_r+0x86>
 801e43a:	2a25      	cmp	r2, #37	@ 0x25
 801e43c:	d1f9      	bne.n	801e432 <_vfiprintf_r+0x7a>
 801e43e:	ebba 0b04 	subs.w	fp, sl, r4
 801e442:	d00b      	beq.n	801e45c <_vfiprintf_r+0xa4>
 801e444:	465b      	mov	r3, fp
 801e446:	4622      	mov	r2, r4
 801e448:	4629      	mov	r1, r5
 801e44a:	4630      	mov	r0, r6
 801e44c:	f7ff ffa1 	bl	801e392 <__sfputs_r>
 801e450:	3001      	adds	r0, #1
 801e452:	f000 80a7 	beq.w	801e5a4 <_vfiprintf_r+0x1ec>
 801e456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e458:	445a      	add	r2, fp
 801e45a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e45c:	f89a 3000 	ldrb.w	r3, [sl]
 801e460:	2b00      	cmp	r3, #0
 801e462:	f000 809f 	beq.w	801e5a4 <_vfiprintf_r+0x1ec>
 801e466:	2300      	movs	r3, #0
 801e468:	f04f 32ff 	mov.w	r2, #4294967295
 801e46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e470:	f10a 0a01 	add.w	sl, sl, #1
 801e474:	9304      	str	r3, [sp, #16]
 801e476:	9307      	str	r3, [sp, #28]
 801e478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e47c:	931a      	str	r3, [sp, #104]	@ 0x68
 801e47e:	4654      	mov	r4, sl
 801e480:	2205      	movs	r2, #5
 801e482:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e486:	4853      	ldr	r0, [pc, #332]	@ (801e5d4 <_vfiprintf_r+0x21c>)
 801e488:	f7e1 fe8a 	bl	80001a0 <memchr>
 801e48c:	9a04      	ldr	r2, [sp, #16]
 801e48e:	b9d8      	cbnz	r0, 801e4c8 <_vfiprintf_r+0x110>
 801e490:	06d1      	lsls	r1, r2, #27
 801e492:	bf44      	itt	mi
 801e494:	2320      	movmi	r3, #32
 801e496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e49a:	0713      	lsls	r3, r2, #28
 801e49c:	bf44      	itt	mi
 801e49e:	232b      	movmi	r3, #43	@ 0x2b
 801e4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e4a4:	f89a 3000 	ldrb.w	r3, [sl]
 801e4a8:	2b2a      	cmp	r3, #42	@ 0x2a
 801e4aa:	d015      	beq.n	801e4d8 <_vfiprintf_r+0x120>
 801e4ac:	9a07      	ldr	r2, [sp, #28]
 801e4ae:	4654      	mov	r4, sl
 801e4b0:	2000      	movs	r0, #0
 801e4b2:	f04f 0c0a 	mov.w	ip, #10
 801e4b6:	4621      	mov	r1, r4
 801e4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e4bc:	3b30      	subs	r3, #48	@ 0x30
 801e4be:	2b09      	cmp	r3, #9
 801e4c0:	d94b      	bls.n	801e55a <_vfiprintf_r+0x1a2>
 801e4c2:	b1b0      	cbz	r0, 801e4f2 <_vfiprintf_r+0x13a>
 801e4c4:	9207      	str	r2, [sp, #28]
 801e4c6:	e014      	b.n	801e4f2 <_vfiprintf_r+0x13a>
 801e4c8:	eba0 0308 	sub.w	r3, r0, r8
 801e4cc:	fa09 f303 	lsl.w	r3, r9, r3
 801e4d0:	4313      	orrs	r3, r2
 801e4d2:	9304      	str	r3, [sp, #16]
 801e4d4:	46a2      	mov	sl, r4
 801e4d6:	e7d2      	b.n	801e47e <_vfiprintf_r+0xc6>
 801e4d8:	9b03      	ldr	r3, [sp, #12]
 801e4da:	1d19      	adds	r1, r3, #4
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	9103      	str	r1, [sp, #12]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	bfbb      	ittet	lt
 801e4e4:	425b      	neglt	r3, r3
 801e4e6:	f042 0202 	orrlt.w	r2, r2, #2
 801e4ea:	9307      	strge	r3, [sp, #28]
 801e4ec:	9307      	strlt	r3, [sp, #28]
 801e4ee:	bfb8      	it	lt
 801e4f0:	9204      	strlt	r2, [sp, #16]
 801e4f2:	7823      	ldrb	r3, [r4, #0]
 801e4f4:	2b2e      	cmp	r3, #46	@ 0x2e
 801e4f6:	d10a      	bne.n	801e50e <_vfiprintf_r+0x156>
 801e4f8:	7863      	ldrb	r3, [r4, #1]
 801e4fa:	2b2a      	cmp	r3, #42	@ 0x2a
 801e4fc:	d132      	bne.n	801e564 <_vfiprintf_r+0x1ac>
 801e4fe:	9b03      	ldr	r3, [sp, #12]
 801e500:	1d1a      	adds	r2, r3, #4
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	9203      	str	r2, [sp, #12]
 801e506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e50a:	3402      	adds	r4, #2
 801e50c:	9305      	str	r3, [sp, #20]
 801e50e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e5e4 <_vfiprintf_r+0x22c>
 801e512:	7821      	ldrb	r1, [r4, #0]
 801e514:	2203      	movs	r2, #3
 801e516:	4650      	mov	r0, sl
 801e518:	f7e1 fe42 	bl	80001a0 <memchr>
 801e51c:	b138      	cbz	r0, 801e52e <_vfiprintf_r+0x176>
 801e51e:	9b04      	ldr	r3, [sp, #16]
 801e520:	eba0 000a 	sub.w	r0, r0, sl
 801e524:	2240      	movs	r2, #64	@ 0x40
 801e526:	4082      	lsls	r2, r0
 801e528:	4313      	orrs	r3, r2
 801e52a:	3401      	adds	r4, #1
 801e52c:	9304      	str	r3, [sp, #16]
 801e52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e532:	4829      	ldr	r0, [pc, #164]	@ (801e5d8 <_vfiprintf_r+0x220>)
 801e534:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e538:	2206      	movs	r2, #6
 801e53a:	f7e1 fe31 	bl	80001a0 <memchr>
 801e53e:	2800      	cmp	r0, #0
 801e540:	d03f      	beq.n	801e5c2 <_vfiprintf_r+0x20a>
 801e542:	4b26      	ldr	r3, [pc, #152]	@ (801e5dc <_vfiprintf_r+0x224>)
 801e544:	bb1b      	cbnz	r3, 801e58e <_vfiprintf_r+0x1d6>
 801e546:	9b03      	ldr	r3, [sp, #12]
 801e548:	3307      	adds	r3, #7
 801e54a:	f023 0307 	bic.w	r3, r3, #7
 801e54e:	3308      	adds	r3, #8
 801e550:	9303      	str	r3, [sp, #12]
 801e552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e554:	443b      	add	r3, r7
 801e556:	9309      	str	r3, [sp, #36]	@ 0x24
 801e558:	e76a      	b.n	801e430 <_vfiprintf_r+0x78>
 801e55a:	fb0c 3202 	mla	r2, ip, r2, r3
 801e55e:	460c      	mov	r4, r1
 801e560:	2001      	movs	r0, #1
 801e562:	e7a8      	b.n	801e4b6 <_vfiprintf_r+0xfe>
 801e564:	2300      	movs	r3, #0
 801e566:	3401      	adds	r4, #1
 801e568:	9305      	str	r3, [sp, #20]
 801e56a:	4619      	mov	r1, r3
 801e56c:	f04f 0c0a 	mov.w	ip, #10
 801e570:	4620      	mov	r0, r4
 801e572:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e576:	3a30      	subs	r2, #48	@ 0x30
 801e578:	2a09      	cmp	r2, #9
 801e57a:	d903      	bls.n	801e584 <_vfiprintf_r+0x1cc>
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d0c6      	beq.n	801e50e <_vfiprintf_r+0x156>
 801e580:	9105      	str	r1, [sp, #20]
 801e582:	e7c4      	b.n	801e50e <_vfiprintf_r+0x156>
 801e584:	fb0c 2101 	mla	r1, ip, r1, r2
 801e588:	4604      	mov	r4, r0
 801e58a:	2301      	movs	r3, #1
 801e58c:	e7f0      	b.n	801e570 <_vfiprintf_r+0x1b8>
 801e58e:	ab03      	add	r3, sp, #12
 801e590:	9300      	str	r3, [sp, #0]
 801e592:	462a      	mov	r2, r5
 801e594:	4b12      	ldr	r3, [pc, #72]	@ (801e5e0 <_vfiprintf_r+0x228>)
 801e596:	a904      	add	r1, sp, #16
 801e598:	4630      	mov	r0, r6
 801e59a:	f7fd fc43 	bl	801be24 <_printf_float>
 801e59e:	4607      	mov	r7, r0
 801e5a0:	1c78      	adds	r0, r7, #1
 801e5a2:	d1d6      	bne.n	801e552 <_vfiprintf_r+0x19a>
 801e5a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e5a6:	07d9      	lsls	r1, r3, #31
 801e5a8:	d405      	bmi.n	801e5b6 <_vfiprintf_r+0x1fe>
 801e5aa:	89ab      	ldrh	r3, [r5, #12]
 801e5ac:	059a      	lsls	r2, r3, #22
 801e5ae:	d402      	bmi.n	801e5b6 <_vfiprintf_r+0x1fe>
 801e5b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e5b2:	f7fe fa97 	bl	801cae4 <__retarget_lock_release_recursive>
 801e5b6:	89ab      	ldrh	r3, [r5, #12]
 801e5b8:	065b      	lsls	r3, r3, #25
 801e5ba:	f53f af1f 	bmi.w	801e3fc <_vfiprintf_r+0x44>
 801e5be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5c0:	e71e      	b.n	801e400 <_vfiprintf_r+0x48>
 801e5c2:	ab03      	add	r3, sp, #12
 801e5c4:	9300      	str	r3, [sp, #0]
 801e5c6:	462a      	mov	r2, r5
 801e5c8:	4b05      	ldr	r3, [pc, #20]	@ (801e5e0 <_vfiprintf_r+0x228>)
 801e5ca:	a904      	add	r1, sp, #16
 801e5cc:	4630      	mov	r0, r6
 801e5ce:	f7fd fec1 	bl	801c354 <_printf_i>
 801e5d2:	e7e4      	b.n	801e59e <_vfiprintf_r+0x1e6>
 801e5d4:	08020e80 	.word	0x08020e80
 801e5d8:	08020e8a 	.word	0x08020e8a
 801e5dc:	0801be25 	.word	0x0801be25
 801e5e0:	0801e393 	.word	0x0801e393
 801e5e4:	08020e86 	.word	0x08020e86

0801e5e8 <__sflush_r>:
 801e5e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5f0:	0716      	lsls	r6, r2, #28
 801e5f2:	4605      	mov	r5, r0
 801e5f4:	460c      	mov	r4, r1
 801e5f6:	d454      	bmi.n	801e6a2 <__sflush_r+0xba>
 801e5f8:	684b      	ldr	r3, [r1, #4]
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	dc02      	bgt.n	801e604 <__sflush_r+0x1c>
 801e5fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e600:	2b00      	cmp	r3, #0
 801e602:	dd48      	ble.n	801e696 <__sflush_r+0xae>
 801e604:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e606:	2e00      	cmp	r6, #0
 801e608:	d045      	beq.n	801e696 <__sflush_r+0xae>
 801e60a:	2300      	movs	r3, #0
 801e60c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e610:	682f      	ldr	r7, [r5, #0]
 801e612:	6a21      	ldr	r1, [r4, #32]
 801e614:	602b      	str	r3, [r5, #0]
 801e616:	d030      	beq.n	801e67a <__sflush_r+0x92>
 801e618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e61a:	89a3      	ldrh	r3, [r4, #12]
 801e61c:	0759      	lsls	r1, r3, #29
 801e61e:	d505      	bpl.n	801e62c <__sflush_r+0x44>
 801e620:	6863      	ldr	r3, [r4, #4]
 801e622:	1ad2      	subs	r2, r2, r3
 801e624:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e626:	b10b      	cbz	r3, 801e62c <__sflush_r+0x44>
 801e628:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e62a:	1ad2      	subs	r2, r2, r3
 801e62c:	2300      	movs	r3, #0
 801e62e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e630:	6a21      	ldr	r1, [r4, #32]
 801e632:	4628      	mov	r0, r5
 801e634:	47b0      	blx	r6
 801e636:	1c43      	adds	r3, r0, #1
 801e638:	89a3      	ldrh	r3, [r4, #12]
 801e63a:	d106      	bne.n	801e64a <__sflush_r+0x62>
 801e63c:	6829      	ldr	r1, [r5, #0]
 801e63e:	291d      	cmp	r1, #29
 801e640:	d82b      	bhi.n	801e69a <__sflush_r+0xb2>
 801e642:	4a2a      	ldr	r2, [pc, #168]	@ (801e6ec <__sflush_r+0x104>)
 801e644:	410a      	asrs	r2, r1
 801e646:	07d6      	lsls	r6, r2, #31
 801e648:	d427      	bmi.n	801e69a <__sflush_r+0xb2>
 801e64a:	2200      	movs	r2, #0
 801e64c:	6062      	str	r2, [r4, #4]
 801e64e:	04d9      	lsls	r1, r3, #19
 801e650:	6922      	ldr	r2, [r4, #16]
 801e652:	6022      	str	r2, [r4, #0]
 801e654:	d504      	bpl.n	801e660 <__sflush_r+0x78>
 801e656:	1c42      	adds	r2, r0, #1
 801e658:	d101      	bne.n	801e65e <__sflush_r+0x76>
 801e65a:	682b      	ldr	r3, [r5, #0]
 801e65c:	b903      	cbnz	r3, 801e660 <__sflush_r+0x78>
 801e65e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e662:	602f      	str	r7, [r5, #0]
 801e664:	b1b9      	cbz	r1, 801e696 <__sflush_r+0xae>
 801e666:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e66a:	4299      	cmp	r1, r3
 801e66c:	d002      	beq.n	801e674 <__sflush_r+0x8c>
 801e66e:	4628      	mov	r0, r5
 801e670:	f7ff f89e 	bl	801d7b0 <_free_r>
 801e674:	2300      	movs	r3, #0
 801e676:	6363      	str	r3, [r4, #52]	@ 0x34
 801e678:	e00d      	b.n	801e696 <__sflush_r+0xae>
 801e67a:	2301      	movs	r3, #1
 801e67c:	4628      	mov	r0, r5
 801e67e:	47b0      	blx	r6
 801e680:	4602      	mov	r2, r0
 801e682:	1c50      	adds	r0, r2, #1
 801e684:	d1c9      	bne.n	801e61a <__sflush_r+0x32>
 801e686:	682b      	ldr	r3, [r5, #0]
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d0c6      	beq.n	801e61a <__sflush_r+0x32>
 801e68c:	2b1d      	cmp	r3, #29
 801e68e:	d001      	beq.n	801e694 <__sflush_r+0xac>
 801e690:	2b16      	cmp	r3, #22
 801e692:	d11e      	bne.n	801e6d2 <__sflush_r+0xea>
 801e694:	602f      	str	r7, [r5, #0]
 801e696:	2000      	movs	r0, #0
 801e698:	e022      	b.n	801e6e0 <__sflush_r+0xf8>
 801e69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e69e:	b21b      	sxth	r3, r3
 801e6a0:	e01b      	b.n	801e6da <__sflush_r+0xf2>
 801e6a2:	690f      	ldr	r7, [r1, #16]
 801e6a4:	2f00      	cmp	r7, #0
 801e6a6:	d0f6      	beq.n	801e696 <__sflush_r+0xae>
 801e6a8:	0793      	lsls	r3, r2, #30
 801e6aa:	680e      	ldr	r6, [r1, #0]
 801e6ac:	bf08      	it	eq
 801e6ae:	694b      	ldreq	r3, [r1, #20]
 801e6b0:	600f      	str	r7, [r1, #0]
 801e6b2:	bf18      	it	ne
 801e6b4:	2300      	movne	r3, #0
 801e6b6:	eba6 0807 	sub.w	r8, r6, r7
 801e6ba:	608b      	str	r3, [r1, #8]
 801e6bc:	f1b8 0f00 	cmp.w	r8, #0
 801e6c0:	dde9      	ble.n	801e696 <__sflush_r+0xae>
 801e6c2:	6a21      	ldr	r1, [r4, #32]
 801e6c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e6c6:	4643      	mov	r3, r8
 801e6c8:	463a      	mov	r2, r7
 801e6ca:	4628      	mov	r0, r5
 801e6cc:	47b0      	blx	r6
 801e6ce:	2800      	cmp	r0, #0
 801e6d0:	dc08      	bgt.n	801e6e4 <__sflush_r+0xfc>
 801e6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e6da:	81a3      	strh	r3, [r4, #12]
 801e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 801e6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6e4:	4407      	add	r7, r0
 801e6e6:	eba8 0800 	sub.w	r8, r8, r0
 801e6ea:	e7e7      	b.n	801e6bc <__sflush_r+0xd4>
 801e6ec:	dfbffffe 	.word	0xdfbffffe

0801e6f0 <_fflush_r>:
 801e6f0:	b538      	push	{r3, r4, r5, lr}
 801e6f2:	690b      	ldr	r3, [r1, #16]
 801e6f4:	4605      	mov	r5, r0
 801e6f6:	460c      	mov	r4, r1
 801e6f8:	b913      	cbnz	r3, 801e700 <_fflush_r+0x10>
 801e6fa:	2500      	movs	r5, #0
 801e6fc:	4628      	mov	r0, r5
 801e6fe:	bd38      	pop	{r3, r4, r5, pc}
 801e700:	b118      	cbz	r0, 801e70a <_fflush_r+0x1a>
 801e702:	6a03      	ldr	r3, [r0, #32]
 801e704:	b90b      	cbnz	r3, 801e70a <_fflush_r+0x1a>
 801e706:	f7fd ffd1 	bl	801c6ac <__sinit>
 801e70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d0f3      	beq.n	801e6fa <_fflush_r+0xa>
 801e712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e714:	07d0      	lsls	r0, r2, #31
 801e716:	d404      	bmi.n	801e722 <_fflush_r+0x32>
 801e718:	0599      	lsls	r1, r3, #22
 801e71a:	d402      	bmi.n	801e722 <_fflush_r+0x32>
 801e71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e71e:	f7fe f9e0 	bl	801cae2 <__retarget_lock_acquire_recursive>
 801e722:	4628      	mov	r0, r5
 801e724:	4621      	mov	r1, r4
 801e726:	f7ff ff5f 	bl	801e5e8 <__sflush_r>
 801e72a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e72c:	07da      	lsls	r2, r3, #31
 801e72e:	4605      	mov	r5, r0
 801e730:	d4e4      	bmi.n	801e6fc <_fflush_r+0xc>
 801e732:	89a3      	ldrh	r3, [r4, #12]
 801e734:	059b      	lsls	r3, r3, #22
 801e736:	d4e1      	bmi.n	801e6fc <_fflush_r+0xc>
 801e738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e73a:	f7fe f9d3 	bl	801cae4 <__retarget_lock_release_recursive>
 801e73e:	e7dd      	b.n	801e6fc <_fflush_r+0xc>

0801e740 <__swhatbuf_r>:
 801e740:	b570      	push	{r4, r5, r6, lr}
 801e742:	460c      	mov	r4, r1
 801e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e748:	2900      	cmp	r1, #0
 801e74a:	b096      	sub	sp, #88	@ 0x58
 801e74c:	4615      	mov	r5, r2
 801e74e:	461e      	mov	r6, r3
 801e750:	da0d      	bge.n	801e76e <__swhatbuf_r+0x2e>
 801e752:	89a3      	ldrh	r3, [r4, #12]
 801e754:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e758:	f04f 0100 	mov.w	r1, #0
 801e75c:	bf14      	ite	ne
 801e75e:	2340      	movne	r3, #64	@ 0x40
 801e760:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e764:	2000      	movs	r0, #0
 801e766:	6031      	str	r1, [r6, #0]
 801e768:	602b      	str	r3, [r5, #0]
 801e76a:	b016      	add	sp, #88	@ 0x58
 801e76c:	bd70      	pop	{r4, r5, r6, pc}
 801e76e:	466a      	mov	r2, sp
 801e770:	f000 f862 	bl	801e838 <_fstat_r>
 801e774:	2800      	cmp	r0, #0
 801e776:	dbec      	blt.n	801e752 <__swhatbuf_r+0x12>
 801e778:	9901      	ldr	r1, [sp, #4]
 801e77a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e77e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e782:	4259      	negs	r1, r3
 801e784:	4159      	adcs	r1, r3
 801e786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e78a:	e7eb      	b.n	801e764 <__swhatbuf_r+0x24>

0801e78c <__smakebuf_r>:
 801e78c:	898b      	ldrh	r3, [r1, #12]
 801e78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e790:	079d      	lsls	r5, r3, #30
 801e792:	4606      	mov	r6, r0
 801e794:	460c      	mov	r4, r1
 801e796:	d507      	bpl.n	801e7a8 <__smakebuf_r+0x1c>
 801e798:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e79c:	6023      	str	r3, [r4, #0]
 801e79e:	6123      	str	r3, [r4, #16]
 801e7a0:	2301      	movs	r3, #1
 801e7a2:	6163      	str	r3, [r4, #20]
 801e7a4:	b003      	add	sp, #12
 801e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7a8:	ab01      	add	r3, sp, #4
 801e7aa:	466a      	mov	r2, sp
 801e7ac:	f7ff ffc8 	bl	801e740 <__swhatbuf_r>
 801e7b0:	9f00      	ldr	r7, [sp, #0]
 801e7b2:	4605      	mov	r5, r0
 801e7b4:	4639      	mov	r1, r7
 801e7b6:	4630      	mov	r0, r6
 801e7b8:	f7ff f86e 	bl	801d898 <_malloc_r>
 801e7bc:	b948      	cbnz	r0, 801e7d2 <__smakebuf_r+0x46>
 801e7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7c2:	059a      	lsls	r2, r3, #22
 801e7c4:	d4ee      	bmi.n	801e7a4 <__smakebuf_r+0x18>
 801e7c6:	f023 0303 	bic.w	r3, r3, #3
 801e7ca:	f043 0302 	orr.w	r3, r3, #2
 801e7ce:	81a3      	strh	r3, [r4, #12]
 801e7d0:	e7e2      	b.n	801e798 <__smakebuf_r+0xc>
 801e7d2:	89a3      	ldrh	r3, [r4, #12]
 801e7d4:	6020      	str	r0, [r4, #0]
 801e7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e7da:	81a3      	strh	r3, [r4, #12]
 801e7dc:	9b01      	ldr	r3, [sp, #4]
 801e7de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e7e2:	b15b      	cbz	r3, 801e7fc <__smakebuf_r+0x70>
 801e7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e7e8:	4630      	mov	r0, r6
 801e7ea:	f000 f837 	bl	801e85c <_isatty_r>
 801e7ee:	b128      	cbz	r0, 801e7fc <__smakebuf_r+0x70>
 801e7f0:	89a3      	ldrh	r3, [r4, #12]
 801e7f2:	f023 0303 	bic.w	r3, r3, #3
 801e7f6:	f043 0301 	orr.w	r3, r3, #1
 801e7fa:	81a3      	strh	r3, [r4, #12]
 801e7fc:	89a3      	ldrh	r3, [r4, #12]
 801e7fe:	431d      	orrs	r5, r3
 801e800:	81a5      	strh	r5, [r4, #12]
 801e802:	e7cf      	b.n	801e7a4 <__smakebuf_r+0x18>

0801e804 <memmove>:
 801e804:	4288      	cmp	r0, r1
 801e806:	b510      	push	{r4, lr}
 801e808:	eb01 0402 	add.w	r4, r1, r2
 801e80c:	d902      	bls.n	801e814 <memmove+0x10>
 801e80e:	4284      	cmp	r4, r0
 801e810:	4623      	mov	r3, r4
 801e812:	d807      	bhi.n	801e824 <memmove+0x20>
 801e814:	1e43      	subs	r3, r0, #1
 801e816:	42a1      	cmp	r1, r4
 801e818:	d008      	beq.n	801e82c <memmove+0x28>
 801e81a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e81e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e822:	e7f8      	b.n	801e816 <memmove+0x12>
 801e824:	4402      	add	r2, r0
 801e826:	4601      	mov	r1, r0
 801e828:	428a      	cmp	r2, r1
 801e82a:	d100      	bne.n	801e82e <memmove+0x2a>
 801e82c:	bd10      	pop	{r4, pc}
 801e82e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e836:	e7f7      	b.n	801e828 <memmove+0x24>

0801e838 <_fstat_r>:
 801e838:	b538      	push	{r3, r4, r5, lr}
 801e83a:	4d07      	ldr	r5, [pc, #28]	@ (801e858 <_fstat_r+0x20>)
 801e83c:	2300      	movs	r3, #0
 801e83e:	4604      	mov	r4, r0
 801e840:	4608      	mov	r0, r1
 801e842:	4611      	mov	r1, r2
 801e844:	602b      	str	r3, [r5, #0]
 801e846:	f7e4 fe39 	bl	80034bc <_fstat>
 801e84a:	1c43      	adds	r3, r0, #1
 801e84c:	d102      	bne.n	801e854 <_fstat_r+0x1c>
 801e84e:	682b      	ldr	r3, [r5, #0]
 801e850:	b103      	cbz	r3, 801e854 <_fstat_r+0x1c>
 801e852:	6023      	str	r3, [r4, #0]
 801e854:	bd38      	pop	{r3, r4, r5, pc}
 801e856:	bf00      	nop
 801e858:	20002f00 	.word	0x20002f00

0801e85c <_isatty_r>:
 801e85c:	b538      	push	{r3, r4, r5, lr}
 801e85e:	4d06      	ldr	r5, [pc, #24]	@ (801e878 <_isatty_r+0x1c>)
 801e860:	2300      	movs	r3, #0
 801e862:	4604      	mov	r4, r0
 801e864:	4608      	mov	r0, r1
 801e866:	602b      	str	r3, [r5, #0]
 801e868:	f7e4 fe38 	bl	80034dc <_isatty>
 801e86c:	1c43      	adds	r3, r0, #1
 801e86e:	d102      	bne.n	801e876 <_isatty_r+0x1a>
 801e870:	682b      	ldr	r3, [r5, #0]
 801e872:	b103      	cbz	r3, 801e876 <_isatty_r+0x1a>
 801e874:	6023      	str	r3, [r4, #0]
 801e876:	bd38      	pop	{r3, r4, r5, pc}
 801e878:	20002f00 	.word	0x20002f00

0801e87c <_sbrk_r>:
 801e87c:	b538      	push	{r3, r4, r5, lr}
 801e87e:	4d06      	ldr	r5, [pc, #24]	@ (801e898 <_sbrk_r+0x1c>)
 801e880:	2300      	movs	r3, #0
 801e882:	4604      	mov	r4, r0
 801e884:	4608      	mov	r0, r1
 801e886:	602b      	str	r3, [r5, #0]
 801e888:	f7e4 fe40 	bl	800350c <_sbrk>
 801e88c:	1c43      	adds	r3, r0, #1
 801e88e:	d102      	bne.n	801e896 <_sbrk_r+0x1a>
 801e890:	682b      	ldr	r3, [r5, #0]
 801e892:	b103      	cbz	r3, 801e896 <_sbrk_r+0x1a>
 801e894:	6023      	str	r3, [r4, #0]
 801e896:	bd38      	pop	{r3, r4, r5, pc}
 801e898:	20002f00 	.word	0x20002f00

0801e89c <__assert_func>:
 801e89c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e89e:	4614      	mov	r4, r2
 801e8a0:	461a      	mov	r2, r3
 801e8a2:	4b09      	ldr	r3, [pc, #36]	@ (801e8c8 <__assert_func+0x2c>)
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	4605      	mov	r5, r0
 801e8a8:	68d8      	ldr	r0, [r3, #12]
 801e8aa:	b954      	cbnz	r4, 801e8c2 <__assert_func+0x26>
 801e8ac:	4b07      	ldr	r3, [pc, #28]	@ (801e8cc <__assert_func+0x30>)
 801e8ae:	461c      	mov	r4, r3
 801e8b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e8b4:	9100      	str	r1, [sp, #0]
 801e8b6:	462b      	mov	r3, r5
 801e8b8:	4905      	ldr	r1, [pc, #20]	@ (801e8d0 <__assert_func+0x34>)
 801e8ba:	f000 f86f 	bl	801e99c <fiprintf>
 801e8be:	f000 f87f 	bl	801e9c0 <abort>
 801e8c2:	4b04      	ldr	r3, [pc, #16]	@ (801e8d4 <__assert_func+0x38>)
 801e8c4:	e7f4      	b.n	801e8b0 <__assert_func+0x14>
 801e8c6:	bf00      	nop
 801e8c8:	200005a8 	.word	0x200005a8
 801e8cc:	08020ed6 	.word	0x08020ed6
 801e8d0:	08020ea8 	.word	0x08020ea8
 801e8d4:	08020e9b 	.word	0x08020e9b

0801e8d8 <_calloc_r>:
 801e8d8:	b570      	push	{r4, r5, r6, lr}
 801e8da:	fba1 5402 	umull	r5, r4, r1, r2
 801e8de:	b93c      	cbnz	r4, 801e8f0 <_calloc_r+0x18>
 801e8e0:	4629      	mov	r1, r5
 801e8e2:	f7fe ffd9 	bl	801d898 <_malloc_r>
 801e8e6:	4606      	mov	r6, r0
 801e8e8:	b928      	cbnz	r0, 801e8f6 <_calloc_r+0x1e>
 801e8ea:	2600      	movs	r6, #0
 801e8ec:	4630      	mov	r0, r6
 801e8ee:	bd70      	pop	{r4, r5, r6, pc}
 801e8f0:	220c      	movs	r2, #12
 801e8f2:	6002      	str	r2, [r0, #0]
 801e8f4:	e7f9      	b.n	801e8ea <_calloc_r+0x12>
 801e8f6:	462a      	mov	r2, r5
 801e8f8:	4621      	mov	r1, r4
 801e8fa:	f7fe f875 	bl	801c9e8 <memset>
 801e8fe:	e7f5      	b.n	801e8ec <_calloc_r+0x14>

0801e900 <__ascii_mbtowc>:
 801e900:	b082      	sub	sp, #8
 801e902:	b901      	cbnz	r1, 801e906 <__ascii_mbtowc+0x6>
 801e904:	a901      	add	r1, sp, #4
 801e906:	b142      	cbz	r2, 801e91a <__ascii_mbtowc+0x1a>
 801e908:	b14b      	cbz	r3, 801e91e <__ascii_mbtowc+0x1e>
 801e90a:	7813      	ldrb	r3, [r2, #0]
 801e90c:	600b      	str	r3, [r1, #0]
 801e90e:	7812      	ldrb	r2, [r2, #0]
 801e910:	1e10      	subs	r0, r2, #0
 801e912:	bf18      	it	ne
 801e914:	2001      	movne	r0, #1
 801e916:	b002      	add	sp, #8
 801e918:	4770      	bx	lr
 801e91a:	4610      	mov	r0, r2
 801e91c:	e7fb      	b.n	801e916 <__ascii_mbtowc+0x16>
 801e91e:	f06f 0001 	mvn.w	r0, #1
 801e922:	e7f8      	b.n	801e916 <__ascii_mbtowc+0x16>

0801e924 <_realloc_r>:
 801e924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e928:	4680      	mov	r8, r0
 801e92a:	4615      	mov	r5, r2
 801e92c:	460c      	mov	r4, r1
 801e92e:	b921      	cbnz	r1, 801e93a <_realloc_r+0x16>
 801e930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e934:	4611      	mov	r1, r2
 801e936:	f7fe bfaf 	b.w	801d898 <_malloc_r>
 801e93a:	b92a      	cbnz	r2, 801e948 <_realloc_r+0x24>
 801e93c:	f7fe ff38 	bl	801d7b0 <_free_r>
 801e940:	2400      	movs	r4, #0
 801e942:	4620      	mov	r0, r4
 801e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e948:	f000 f841 	bl	801e9ce <_malloc_usable_size_r>
 801e94c:	4285      	cmp	r5, r0
 801e94e:	4606      	mov	r6, r0
 801e950:	d802      	bhi.n	801e958 <_realloc_r+0x34>
 801e952:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e956:	d8f4      	bhi.n	801e942 <_realloc_r+0x1e>
 801e958:	4629      	mov	r1, r5
 801e95a:	4640      	mov	r0, r8
 801e95c:	f7fe ff9c 	bl	801d898 <_malloc_r>
 801e960:	4607      	mov	r7, r0
 801e962:	2800      	cmp	r0, #0
 801e964:	d0ec      	beq.n	801e940 <_realloc_r+0x1c>
 801e966:	42b5      	cmp	r5, r6
 801e968:	462a      	mov	r2, r5
 801e96a:	4621      	mov	r1, r4
 801e96c:	bf28      	it	cs
 801e96e:	4632      	movcs	r2, r6
 801e970:	f7fe f8c1 	bl	801caf6 <memcpy>
 801e974:	4621      	mov	r1, r4
 801e976:	4640      	mov	r0, r8
 801e978:	f7fe ff1a 	bl	801d7b0 <_free_r>
 801e97c:	463c      	mov	r4, r7
 801e97e:	e7e0      	b.n	801e942 <_realloc_r+0x1e>

0801e980 <__ascii_wctomb>:
 801e980:	4603      	mov	r3, r0
 801e982:	4608      	mov	r0, r1
 801e984:	b141      	cbz	r1, 801e998 <__ascii_wctomb+0x18>
 801e986:	2aff      	cmp	r2, #255	@ 0xff
 801e988:	d904      	bls.n	801e994 <__ascii_wctomb+0x14>
 801e98a:	228a      	movs	r2, #138	@ 0x8a
 801e98c:	601a      	str	r2, [r3, #0]
 801e98e:	f04f 30ff 	mov.w	r0, #4294967295
 801e992:	4770      	bx	lr
 801e994:	700a      	strb	r2, [r1, #0]
 801e996:	2001      	movs	r0, #1
 801e998:	4770      	bx	lr
	...

0801e99c <fiprintf>:
 801e99c:	b40e      	push	{r1, r2, r3}
 801e99e:	b503      	push	{r0, r1, lr}
 801e9a0:	4601      	mov	r1, r0
 801e9a2:	ab03      	add	r3, sp, #12
 801e9a4:	4805      	ldr	r0, [pc, #20]	@ (801e9bc <fiprintf+0x20>)
 801e9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9aa:	6800      	ldr	r0, [r0, #0]
 801e9ac:	9301      	str	r3, [sp, #4]
 801e9ae:	f7ff fd03 	bl	801e3b8 <_vfiprintf_r>
 801e9b2:	b002      	add	sp, #8
 801e9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e9b8:	b003      	add	sp, #12
 801e9ba:	4770      	bx	lr
 801e9bc:	200005a8 	.word	0x200005a8

0801e9c0 <abort>:
 801e9c0:	b508      	push	{r3, lr}
 801e9c2:	2006      	movs	r0, #6
 801e9c4:	f000 f834 	bl	801ea30 <raise>
 801e9c8:	2001      	movs	r0, #1
 801e9ca:	f7e4 fd43 	bl	8003454 <_exit>

0801e9ce <_malloc_usable_size_r>:
 801e9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e9d2:	1f18      	subs	r0, r3, #4
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	bfbc      	itt	lt
 801e9d8:	580b      	ldrlt	r3, [r1, r0]
 801e9da:	18c0      	addlt	r0, r0, r3
 801e9dc:	4770      	bx	lr

0801e9de <_raise_r>:
 801e9de:	291f      	cmp	r1, #31
 801e9e0:	b538      	push	{r3, r4, r5, lr}
 801e9e2:	4605      	mov	r5, r0
 801e9e4:	460c      	mov	r4, r1
 801e9e6:	d904      	bls.n	801e9f2 <_raise_r+0x14>
 801e9e8:	2316      	movs	r3, #22
 801e9ea:	6003      	str	r3, [r0, #0]
 801e9ec:	f04f 30ff 	mov.w	r0, #4294967295
 801e9f0:	bd38      	pop	{r3, r4, r5, pc}
 801e9f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e9f4:	b112      	cbz	r2, 801e9fc <_raise_r+0x1e>
 801e9f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e9fa:	b94b      	cbnz	r3, 801ea10 <_raise_r+0x32>
 801e9fc:	4628      	mov	r0, r5
 801e9fe:	f000 f831 	bl	801ea64 <_getpid_r>
 801ea02:	4622      	mov	r2, r4
 801ea04:	4601      	mov	r1, r0
 801ea06:	4628      	mov	r0, r5
 801ea08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea0c:	f000 b818 	b.w	801ea40 <_kill_r>
 801ea10:	2b01      	cmp	r3, #1
 801ea12:	d00a      	beq.n	801ea2a <_raise_r+0x4c>
 801ea14:	1c59      	adds	r1, r3, #1
 801ea16:	d103      	bne.n	801ea20 <_raise_r+0x42>
 801ea18:	2316      	movs	r3, #22
 801ea1a:	6003      	str	r3, [r0, #0]
 801ea1c:	2001      	movs	r0, #1
 801ea1e:	e7e7      	b.n	801e9f0 <_raise_r+0x12>
 801ea20:	2100      	movs	r1, #0
 801ea22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ea26:	4620      	mov	r0, r4
 801ea28:	4798      	blx	r3
 801ea2a:	2000      	movs	r0, #0
 801ea2c:	e7e0      	b.n	801e9f0 <_raise_r+0x12>
	...

0801ea30 <raise>:
 801ea30:	4b02      	ldr	r3, [pc, #8]	@ (801ea3c <raise+0xc>)
 801ea32:	4601      	mov	r1, r0
 801ea34:	6818      	ldr	r0, [r3, #0]
 801ea36:	f7ff bfd2 	b.w	801e9de <_raise_r>
 801ea3a:	bf00      	nop
 801ea3c:	200005a8 	.word	0x200005a8

0801ea40 <_kill_r>:
 801ea40:	b538      	push	{r3, r4, r5, lr}
 801ea42:	4d07      	ldr	r5, [pc, #28]	@ (801ea60 <_kill_r+0x20>)
 801ea44:	2300      	movs	r3, #0
 801ea46:	4604      	mov	r4, r0
 801ea48:	4608      	mov	r0, r1
 801ea4a:	4611      	mov	r1, r2
 801ea4c:	602b      	str	r3, [r5, #0]
 801ea4e:	f7e4 fcf1 	bl	8003434 <_kill>
 801ea52:	1c43      	adds	r3, r0, #1
 801ea54:	d102      	bne.n	801ea5c <_kill_r+0x1c>
 801ea56:	682b      	ldr	r3, [r5, #0]
 801ea58:	b103      	cbz	r3, 801ea5c <_kill_r+0x1c>
 801ea5a:	6023      	str	r3, [r4, #0]
 801ea5c:	bd38      	pop	{r3, r4, r5, pc}
 801ea5e:	bf00      	nop
 801ea60:	20002f00 	.word	0x20002f00

0801ea64 <_getpid_r>:
 801ea64:	f7e4 bcde 	b.w	8003424 <_getpid>

0801ea68 <_init>:
 801ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea6a:	bf00      	nop
 801ea6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea6e:	bc08      	pop	{r3}
 801ea70:	469e      	mov	lr, r3
 801ea72:	4770      	bx	lr

0801ea74 <_fini>:
 801ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea76:	bf00      	nop
 801ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea7a:	bc08      	pop	{r3}
 801ea7c:	469e      	mov	lr, r3
 801ea7e:	4770      	bx	lr
